the way to get startup ideas is not to try to think of startup ideas. its to look for problems, preferably problems you have yourself. the very best startup ideas tend to have three things in common: theyre something the founders themselves want, that they themselves can build, and that few others realize are worth doing. microsoft, apple, yahoo, google, and facebook all began this way. why is it so important to work on a problem you have? among other things, it ensures the problem really exists. it sounds obvious to say you should only work on problems that exist. and yet by far the most common mistake startups make is to solve problems no one has. i made it myself. in 1995 i started a company to put art galleries online. but galleries didnt want to be online. its not how the art business works. so why did i spend 6 months working on this stupid idea? because i didnt pay attention to users. i invented a model of the world that didnt correspond to reality, and worked from that. i didnt notice my model was wrong until i tried to convince users to pay for what wed built. even then i took embarrassingly long to catch on. i was attached to my model of the world, and id spent a lot of time on the software. they had to want it! why do so many founders build things no one wants? because they begin by trying to think of startup ideas. that m.o. is doubly dangerous: it doesnt merely yield few good ideas; it yields bad ideas that sound plausible enough to fool you into working on them. at yc we call these "made-up" or "sitcom" startup ideas. imagine one of the characters on a tv show was starting a startup. the writers would have to invent something for it to do. but coming up with good startup ideas is hard. its not something you can do for the asking. so (unless they got amazingly lucky) the writers would come up with an idea that sounded plausible, but was actually bad. for example, a social network for pet owners. it doesnt sound obviously mistaken. millions of people have pets. often they care a lot about their pets and spend a lot of money on them. surely many of these people would like a site where they could talk to other pet owners. not all of them perhaps, but if just 2 or 3 percent were regular visitors, you could have millions of users. you could serve them targeted offers, and maybe charge for premium features.  the danger of an idea like this is that when you run it by your friends with pets, they dont say "i would never use this." they say "yeah, maybe i could see using something like that." even when the startup launches, it will sound plausible to a lot of people. they dont want to use it themselves, at least not right now, but they could imagine other people wanting it. sum that reaction across the entire population, and you have zero users.  when a startup launches, there have to be at least some users who really need what theyre makingnot just people who could see themselves using it one day, but who want it urgently. usually this initial group of users is small, for the simple reason that if there were something that large numbers of people urgently needed and that could be built with the amount of effort a startup usually puts into a version one, it would probably already exist. which means you have to compromise on one dimension: you can either build something a large number of people want a small amount, or something a small number of people want a large amount. choose the latter. not all ideas of that type are good startup ideas, but nearly all good startup ideas are of that type. imagine a graph whose x axis represents all the people who might want what youre making and whose y axis represents how much they want it. if you invert the scale on the y axis, you can envision companies as holes. google is an immense crater: hundreds of millions of people use it, and they need it a lot. a startup just starting out cant expect to excavate that much volume. so you have two choices about the shape of hole you start with. you can either dig a hole thats broad but shallow, or one thats narrow and deep, like a well. made-up startup ideas are usually of the first type. lots of people are mildly interested in a social network for pet owners. nearly all good startup ideas are of the second type. microsoft was a well when they made altair basic. there were only a couple thousand altair owners, but without this software they were programming in machine language. thirty years later facebook had the same shape. their first site was exclusively for harvard students, of which there are only a few thousand, but those few thousand users wanted it a lot. when you have an idea for a startup, ask yourself: who wants this right now? who wants this so much that theyll use it even when its a crappy version one made by a two-person startup theyve never heard of? if you cant answer that, the idea is probably bad.  you dont need the narrowness of the well per se. its depth you need; you get narrowness as a byproduct of optimizing for depth (and speed). but you almost always do get it. in practice the link between depth and narrowness is so strong that its a good sign when you know that an idea will appeal strongly to a specific group or type of user. but while demand shaped like a well is almost a necessary condition for a good startup idea, its not a sufficient one. if mark zuckerberg had built something that could only ever have appealed to harvard students, it would not have been a good startup idea. facebook was a good idea because it started with a small market there was a fast path out of. colleges are similar enough that if you build a facebook that works at harvard, it will work at any college. so you spread rapidly through all the colleges. once you have all the college students, you get everyone else simply by letting them in. similarly for microsoft: basic for the altair; basic for other machines; other languages besides basic; operating systems; applications; ipo. how do you tell whether theres a path out of an idea? how do you tell whether something is the germ of a giant company, or just a niche product? often you cant. the founders of airbnb didnt realize at first how big a market they were tapping. initially they had a much narrower idea. they were going to let hosts rent out space on their floors during conventions. they didnt foresee the expansion of this idea; it forced itself upon them gradually. all they knew at first is that they were onto something. thats probably as much as bill gates or mark zuckerberg knew at first. occasionally its obvious from the beginning when theres a path out of the initial niche. and sometimes i can see a path thats not immediately obvious; thats one of our specialties at yc. but there are limits to how well this can be done, no matter how much experience you have. the most important thing to understand about paths out of the initial idea is the meta-fact that these are hard to see. so if you cant predict whether theres a path out of an idea, how do you choose between ideas? the truth is disappointing but interesting: if youre the right sort of person, you have the right sort of hunches. if youre at the leading edge of a field thats changing fast, when you have a hunch that something is worth doing, youre more likely to be right. in zen and the art of motorcycle maintenance , robert pirsig says: you want to know how to paint a perfect painting? its easy. make yourself perfect and then just paint naturally. ive wondered about that passage since i read it in high school. im not sure how useful his advice is for painting specifically, but it fits this situation well. empirically, the way to have good startup ideas is to become the sort of person who has them. being at the leading edge of a field doesnt mean you have to be one of the people pushing it forward. you can also be at the leading edge as a user. it was not so much because he was a programmer that facebook seemed a good idea to mark zuckerberg as because he used computers so much. if youd asked most 40 year olds in 2004 whether theyd like to publish their lives semi-publicly on the internet, theyd have been horrified at the idea. but mark already lived online; to him it seemed natural. paul buchheit says that people at the leading edge of a rapidly changing field "live in the future." combine that with pirsig and you get: live in the future, then build whats missing. that describes the way many if not most of the biggest startups got started. neither apple nor yahoo nor google nor facebook were even supposed to be companies at first. they grew out of things their founders built because there seemed a gap in the world. if you look at the way successful founders have had their ideas, its generally the result of some external stimulus hitting a prepared mind. bill gates and paul allen hear about the altair and think "i bet we could write a basic interpreter for it." drew houston realizes hes forgotten his usb stick and thinks "i really need to make my files live online." lots of people heard about the altair. lots forgot usb sticks. the reason those stimuli caused those founders to start companies was that their experiences had prepared them to notice the opportunities they represented. the verb you want to be using with respect to startup ideas is not "think up" but "notice." at yc we call ideas that grow naturally out of the founders own experiences "organic" startup ideas. the most successful startups almost all begin this way. that may not have been what you wanted to hear. you may have expected recipes for coming up with startup ideas, and instead im telling you that the key is to have a mind thats prepared in the right way. but disappointing though it may be, this is the truth. and it is a recipe of a sort, just one that in the worst case takes a year rather than a weekend. if youre not at the leading edge of some rapidly changing field, you can get to one. for example, anyone reasonably smart can probably get to an edge of programming (e.g. building mobile apps) in a year. since a successful startup will consume at least 3-5 years of your life, a years preparation would be a reasonable investment. especially if youre also looking for a cofounder. you dont have to learn programming to be at the leading edge of a domain thats changing fast. other domains change fast. but while learning to hack is not necessary, it is for the forseeable future sufficient. as marc andreessen put it, software is eating the world, and this trend has decades left to run. knowing how to hack also means that when you have ideas, youll be able to implement them. thats not absolutely necessary (jeff bezos couldnt) but its an advantage. its a big advantage, when youre considering an idea like putting a college facebook online, if instead of merely thinking "thats an interesting idea," you can think instead "thats an interesting idea. ill try building an initial version tonight." its even better when youre both a programmer and the target user, because then the cycle of generating new versions and testing them on users can happen inside one head. once youre living in the future in some respect, the way to notice startup ideas is to look for things that seem to be missing. if youre really at the leading edge of a rapidly changing field, there will be things that are obviously missing. what wont be obvious is that theyre startup ideas. so if you want to find startup ideas, dont merely turn on the filter "whats missing?" also turn off every other filter, particularly "could this be a big company?" theres plenty of time to apply that test later. but if youre thinking about that initially, it may not only filter out lots of good ideas, but also cause you to focus on bad ones. most things that are missing will take some time to see. you almost have to trick yourself into seeing the ideas around you. but you know the ideas are out there. this is not one of those problems where there might not be an answer. its impossibly unlikely that this is the exact moment when technological progress stops. you can be sure people are going to build things in the next few years that will make you think "what did i do before x?" and when these problems get solved, they will probably seem flamingly obvious in retrospect. what you need to do is turn off the filters that usually prevent you from seeing them. the most powerful is simply taking the current state of the world for granted. even the most radically open-minded of us mostly do that. you couldnt get from your bed to the front door if you stopped to question everything. but if youre looking for startup ideas you can sacrifice some of the efficiency of taking the status quo for granted and start to question things. why is your inbox overflowing? because you get a lot of email, or because its hard to get email out of your inbox? why do you get so much email? what problems are people trying to solve by sending you email? are there better ways to solve them? and why is it hard to get emails out of your inbox? why do you keep emails around after youve read them? is an inbox the optimal tool for that? pay particular attention to things that chafe you. the advantage of taking the status quo for granted is not just that it makes life (locally) more efficient, but also that it makes life more tolerable. if you knew about all the things well get in the next 50 years but dont have yet, youd find present day life pretty constraining, just as someone from the present would if they were sent back 50 years in a time machine. when something annoys you, it could be because youre living in the future. when you find the right sort of problem, you should probably be able to describe it as obvious , at least to you. when we started viaweb, all the online stores were built by hand, by web designers making individual html pages. it was obvious to us as programmers that these sites would have to be generated by software. which means, strangely enough, that coming up with startup ideas is a question of seeing the obvious. that suggests how weird this process is: youre trying to see things that are obvious, and yet that you hadnt seen. since what you need to do here is loosen up your own mind, it may be best not to make too much of a direct frontal attack on the problemi.e. to sit down and try to think of ideas. the best plan may be just to keep a background process running, looking for things that seem to be missing. work on hard problems, driven mainly by curiousity, but have a second self watching over your shoulder, taking note of gaps and anomalies. give yourself some time. you have a lot of control over the rate at which you turn yours into a prepared mind, but you have less control over the stimuli that spark ideas when they hit it. if bill gates and paul allen had constrained themselves to come up with a startup idea in one month, what if theyd chosen a month before the altair appeared? they probably would have worked on a less promising idea. drew houston did work on a less promising idea before dropbox: an sat prep startup. but dropbox was a much better idea, both in the absolute sense and also as a match for his skills. a good way to trick yourself into noticing ideas is to work on projects that seem like theyd be cool. if you do that, youll naturally tend to build things that are missing. it wouldnt seem as interesting to build something that already existed. just as trying to think up startup ideas tends to produce bad ones, working on things that could be dismissed as "toys" often produces good ones. when something is described as a toy, that means it has everything an idea needs except being important. its cool; users love it; it just doesnt matter. but if youre living in the future and you build something cool that users love, it may matter more than outsiders think. microcomputers seemed like toys when apple and microsoft started working on them. im old enough to remember that era; the usual term for people with their own microcomputers was "hobbyists." backrub seemed like an inconsequential science project. the facebook was just a way for undergrads to stalk one another. at yc were excited when we meet startups working on things that we could imagine know-it-alls on forums dismissing as toys. to us thats positive evidence an idea is good. if you can afford to take a long view (and arguably you cant afford not to), you can turn "live in the future and build whats missing" into something even better: live in the future and build what seems interesting. thats what id advise college students to do, rather than trying to learn about "entrepreneurship." "entrepreneurship" is something you learn best by doing it. the examples of the most successful founders make that clear. what you should be spending your time on in college is ratcheting yourself into the future. college is an incomparable opportunity to do that. what a waste to sacrifice an opportunity to solve the hard part of starting a startupbecoming the sort of person who can have organic startup ideasby spending time learning about the easy part. especially since you wont even really learn about it, any more than youd learn about sex in a class. all youll learn is the words for things. the clash of domains is a particularly fruitful source of ideas. if you know a lot about programming and you start learning about some other field, youll probably see problems that software could solve. in fact, youre doubly likely to find good problems in another domain: (a) the inhabitants of that domain are not as likely as software people to have already solved their problems with software, and (b) since you come into the new domain totally ignorant, you dont even know what the status quo is to take it for granted. so if youre a cs major and you want to start a startup, instead of taking a class on entrepreneurship youre better off taking a class on, say, genetics. or better still, go work for a biotech company. cs majors normally get summer jobs at computer hardware or software companies. but if you want to find startup ideas, you might do better to get a summer job in some unrelated field.  or dont take any extra classes, and just build things. its no coincidence that microsoft and facebook both got started in january. at harvard that is (or was) reading period, when students have no classes to attend because theyre supposed to be studying for finals.  but dont feel like you have to build things that will become startups. thats premature optimization. just build things. preferably with other students. its not just the classes that make a university such a good place to crank oneself into the future. youre also surrounded by other people trying to do the same thing. if you work together with them on projects, youll end up producing not just organic ideas, but organic ideas with organic founding teamsand that, empirically, is the best combination. beware of research. if an undergrad writes something all his friends start using, its quite likely to represent a good startup idea. whereas a phd dissertation is extremely unlikely to. for some reason, the more a project has to count as research, the less likely it is to be something that could be turned into a startup. i think the reason is that the subset of ideas that count as research is so narrow that its unlikely that a project that satisfied that constraint would also satisfy the orthogonal constraint of solving users problems. whereas when students (or professors) build something as a side-project, they automatically gravitate toward solving users problemsperhaps even with an additional energy that comes from being freed from the constraints of research. because a good idea should seem obvious, when you have one youll tend to feel that youre late. dont let that deter you. worrying that youre late is one of the signs of a good idea. ten minutes of searching the web will usually settle the question. even if you find someone else working on the same thing, youre probably not too late. its exceptionally rare for startups to be killed by competitorsso rare that you can almost discount the possibility. so unless you discover a competitor with the sort of lock-in that would prevent users from choosing you, dont discard the idea. if youre uncertain, ask users. the question of whether youre too late is subsumed by the question of whether anyone urgently needs what you plan to make. if you have something that no competitor does and that some subset of users urgently need, you have a beachhead. the question then is whether that beachhead is big enough. or more importantly, whos in it: if the beachhead consists of people doing something lots more people will be doing in the future, then its probably big enough no matter how small it is. for example, if youre building something differentiated from competitors by the fact that it works on phones, but it only works on the newest phones, thats probably a big enough beachhead. err on the side of doing things where youll face competitors. inexperienced founders usually give competitors more credit than they deserve. whether you succeed depends far more on you than on your competitors. so better a good idea with competitors than a bad one without. you dont need to worry about entering a "crowded market" so long as you have a thesis about what everyone else in it is overlooking. in fact thats a very promising starting point. google was that type of idea. your thesis has to be more precise than "were going to make an x that doesnt suck" though. you have to be able to phrase it in terms of something the incumbents are overlooking. best of all is when you can say that they didnt have the courage of their convictions, and that your plan is what theyd have done if theyd followed through on their own insights. google was that type of idea too. the search engines that preceded them shied away from the most radical implications of what they were doingparticularly that the better a job they did, the faster users would leave. a crowded market is actually a good sign, because it means both that theres demand and that none of the existing solutions are good enough. a startup cant hope to enter a market thats obviously big and yet in which they have no competitors. so any startup that succeeds is either going to be entering a market with existing competitors, but armed with some secret weapon that will get them all the users (like google), or entering a market that looks small but which will turn out to be big (like microsoft). there are two more filters youll need to turn off if you want to notice startup ideas: the unsexy filter and the schlep filter. most programmers wish they could start a startup by just writing some brilliant code, pushing it to a server, and having users pay them lots of money. theyd prefer not to deal with tedious problems or get involved in messy ways with the real world. which is a reasonable preference, because such things slow you down. but this preference is so widespread that the space of convenient startup ideas has been stripped pretty clean. if you let your mind wander a few blocks down the street to the messy, tedious ideas, youll find valuable ones just sitting there waiting to be implemented. the schlep filter is so dangerous that i wrote a separate essay about the condition it induces, which i called schlep blindness . i gave stripe as an example of a startup that benefited from turning off this filter, and a pretty striking example it is. thousands of programmers were in a position to see this idea; thousands of programmers knew how painful it was to process payments before stripe. but when they looked for startup ideas they didnt see this one, because unconsciously they shrank from having to deal with payments. and dealing with payments is a schlep for stripe, but not an intolerable one. in fact they might have had net less pain; because the fear of dealing with payments kept most people away from this idea, stripe has had comparatively smooth sailing in other areas that are sometimes painful, like user acquisition. they didnt have to try very hard to make themselves heard by users, because users were desperately waiting for what they were building. the unsexy filter is similar to the schlep filter, except it keeps you from working on problems you despise rather than ones you fear. we overcame this one to work on viaweb. there were interesting things about the architecture of our software, but we werent interested in ecommerce per se. we could see the problem was one that needed to be solved though. turning off the schlep filter is more important than turning off the unsexy filter, because the schlep filter is more likely to be an illusion. and even to the degree it isnt, its a worse form of self-indulgence. starting a successful startup is going to be fairly laborious no matter what. even if the product doesnt entail a lot of schleps, youll still have plenty dealing with investors, hiring and firing people, and so on. so if theres some idea you think would be cool but youre kept away from by fear of the schleps involved, dont worry: any sufficiently good idea will have as many. the unsexy filter, while still a source of error, is not as entirely useless as the schlep filter. if youre at the leading edge of a field thats changing rapidly, your ideas about whats sexy will be somewhat correlated with whats valuable in practice. particularly as you get older and more experienced. plus if you find an idea sexy, youll work on it more enthusiastically. while the best way to discover startup ideas is to become the sort of person who has them and then build whatever interests you, sometimes you dont have that luxury. sometimes you need an idea now. for example, if youre working on a startup and your initial idea turns out to be bad. for the rest of this essay ill talk about tricks for coming up with startup ideas on demand. although empirically youre better off using the organic strategy, you could succeed this way. you just have to be more disciplined. when you use the organic method, you dont even notice an idea unless its evidence that something is truly missing. but when you make a conscious effort to think of startup ideas, you have to replace this natural constraint with self-discipline. youll see a lot more ideas, most of them bad, so you need to be able to filter them. one of the biggest dangers of not using the organic method is the example of the organic method. organic ideas feel like inspirations. there are a lot of stories about successful startups that began when the founders had what seemed a crazy idea but "just knew" it was promising. when you feel that about an idea youve had while trying to come up with startup ideas, youre probably mistaken. when searching for ideas, look in areas where you have some expertise. if youre a database expert, dont build a chat app for teenagers (unless youre also a teenager). maybe its a good idea, but you cant trust your judgment about that, so ignore it. there have to be other ideas that involve databases, and whose quality you can judge. do you find it hard to come up with good ideas involving databases? thats because your expertise raises your standards. your ideas about chat apps are just as bad, but youre giving yourself a dunning-kruger pass in that domain. the place to start looking for ideas is things you need. there must be things you need. one good trick is to ask yourself whether in your previous job you ever found yourself saying "why doesnt someone make x? if someone made x wed buy it in a second." if you can think of any x people said that about, you probably have an idea. you know theres demand, and people dont say that about things that are impossible to build. more generally, try asking yourself whether theres something unusual about you that makes your needs different from most other peoples. youre probably not the only one. its especially good if youre different in a way people will increasingly be. if youre changing ideas, one unusual thing about you is the idea youd previously been working on. did you discover any needs while working on it? several well-known startups began this way. hotmail began as something its founders wrote to talk about their previous startup idea while they were working at their day jobs. a particularly promising way to be unusual is to be young. some of the most valuable new ideas take root first among people in their teens and early twenties. and while young founders are at a disadvantage in some respects, theyre the only ones who really understand their peers. it would have been very hard for someone who wasnt a college student to start facebook. so if youre a young founder (under 23 say), are there things you and your friends would like to do that current technology wont let you? the next best thing to an unmet need of your own is an unmet need of someone else. try talking to everyone you can about the gaps they find in the world. whats missing? what would they like to do that they cant? whats tedious or annoying, particularly in their work? let the conversation get general; dont be trying too hard to find startup ideas. youre just looking for something to spark a thought. maybe youll notice a problem they didnt consciously realize they had, because you know how to solve it. when you find an unmet need that isnt your own, it may be somewhat blurry at first. the person who needs something may not know exactly what they need. in that case i often recommend that founders act like consultantsthat they do what theyd do if theyd been retained to solve the problems of this one user. peoples problems are similar enough that nearly all the code you write this way will be reusable, and whatever isnt will be a small price to start out certain that youve reached the bottom of the well. one way to ensure you do a good job solving other peoples problems is to make them your own. when rajat suri of e la carte decided to write software for restaurants, he got a job as a waiter to learn how restaurants worked. that may seem like taking things to extremes, but startups are extreme. we love it when founders do such things. in fact, one strategy i recommend to people who need a new idea is not merely to turn off their schlep and unsexy filters, but to seek out ideas that are unsexy or involve schleps. dont try to start twitter. those ideas are so rare that you cant find them by looking for them. make something unsexy that people will pay you for. a good trick for bypassing the schlep and to some extent the unsexy filter is to ask what you wish someone else would build, so that you could use it. what would you pay for right now? since startups often garbage-collect broken companies and industries, it can be a good trick to look for those that are dying, or deserve to, and try to imagine what kind of company would profit from their demise. for example, journalism is in free fall at the moment. but there may still be money to be made from something like journalism. what sort of company might cause people in the future to say "this replaced journalism" on some axis? but imagine asking that in the future, not now. when one company or industry replaces another, it usually comes in from the side. so dont look for a replacement for x; look for something that people will later say turned out to be a replacement for x. and be imaginative about the axis along which the replacement occurs. traditional journalism, for example, is a way for readers to get information and to kill time, a way for writers to make money and to get attention, and a vehicle for several different types of advertising. it could be replaced on any of these axes (it has already started to be on most). when startups consume incumbents, they usually start by serving some small but important market that the big players ignore. its particularly good if theres an admixture of disdain in the big players attitude, because that often misleads them. for example, after steve wozniak built the computer that became the apple i, he felt obliged to give his then-employer hewlett-packard the option to produce it. fortunately for him, they turned it down, and one of the reasons they did was that it used a tv for a monitor, which seemed intolerably dclass to a high-end hardware company like hp was at the time. are there groups of scruffy but sophisticated users like the early microcomputer "hobbyists" that are currently being ignored by the big players? a startup with its sights set on bigger things can often capture a small market easily by expending an effort that wouldnt be justified by that market alone. similarly, since the most successful startups generally ride some wave bigger than themselves, it could be a good trick to look for waves and ask how one could benefit from them. the prices of gene sequencing and 3d printing are both experiencing moores law-like declines. what new things will we be able to do in the new world well have in a few years? what are we unconsciously ruling out as impossible that will soon be possible? but talking about looking explicitly for waves makes it clear that such recipes are plan b for getting startup ideas. looking for waves is essentially a way to simulate the organic method. if youre at the leading edge of some rapidly changing field, you dont have to look for waves; you are the wave. finding startup ideas is a subtle business, and thats why most people who try fail so miserably. it doesnt work well simply to try to think of startup ideas. if you do that, you get bad ones that sound dangerously plausible. the best approach is more indirect: if you have the right sort of background, good startup ideas will seem obvious to you. but even then, not immediately. it takes time to come across situations where you notice something missing. and often these gaps wont seem to be ideas for companies, just things that would be interesting to build. which is why its good to have the time and the inclination to build things just because theyre interesting. live in the future and build what seems interesting. strange as it sounds, thats the real recipe.  this form of bad idea has been around as long as the web. it was common in the 1990s, except then people who had it used to say they were going to create a portal for x instead of a social network for x. structurally the idea is stone soup: you post a sign saying "this is the place for people interested in x," and all those people show up and you make money from them. what lures founders into this sort of idea are statistics about the millions of people who might be interested in each type of x. what they forget is that any given person might have 20 affinities by this standard, and no one is going to visit 20 different communities regularly.  im not saying, incidentally, that i know for sure a social network for pet owners is a bad idea. i know its a bad idea the way i know randomly generated dna would not produce a viable organism. the set of plausible sounding startup ideas is many times larger than the set of good ones, and many of the good ones dont even sound that plausible. so if all you know about a startup idea is that it sounds plausible, you have to assume its bad.  more precisely, the users need has to give them sufficient activation energy to start using whatever you make, which can vary a lot. for example, the activation energy for enterprise software sold through traditional channels is very high, so youd have to be a lot better to get users to switch. whereas the activation energy required to switch to a new search engine is low. which in turn is why search engines are so much better than enterprise software.  this gets harder as you get older. while the space of ideas doesnt have dangerous local maxima, the space of careers does. there are fairly high walls between most of the paths people take through life, and the older you get, the higher the walls become.  it was also obvious to us that the web was going to be a big deal. few non-programmers grasped that in 1995, but the programmers had seen what guis had done for desktop computers.  maybe it would work to have this second self keep a journal, and each night to make a brief entry listing the gaps and anomalies youd noticed that day. not startup ideas, just the raw gaps and anomalies.  sam altman points out that taking time to come up with an idea is not merely a better strategy in an absolute sense, but also like an undervalued stock in that so few founders do it. theres comparatively little competition for the best ideas, because few founders are willing to put in the time required to notice them. whereas there is a great deal of competition for mediocre ideas, because when people make up startup ideas, they tend to make up the same ones.  for the computer hardware and software companies, summer jobs are the first phase of the recruiting funnel. but if youre good you can skip the first phase. if youre good youll have no trouble getting hired by these companies when you graduate, regardless of how you spent your summers.  the empirical evidence suggests that if colleges want to help their students start startups, the best thing they can do is leave them alone in the right way.  im speaking here of it startups; in biotech things are different.  this is an instance of a more general rule: focus on users, not competitors. the most important information about competitors is what you learn via users anyway.  in practice most successful startups have elements of both. and you can describe each strategy in terms of the other by adjusting the boundaries of what you call the market. but its useful to consider these two ideas separately.  i almost hesitate to raise that point though. startups are businesses; the point of a business is to make money; and with that additional constraint, you cant expect youll be able to spend all your time working on what interests you most.  the need has to be a strong one. you can retroactively describe any made-up idea as something you need. but do you really need that recipe site or local event aggregator as much as drew houston needed dropbox, or brian chesky and joe gebbia needed airbnb? quite often at yc i find myself asking founders "would you use this thing yourself, if you hadnt written it?" and youd be surprised how often the answer is no.  paul buchheit points out that trying to sell something bad can be a source of better ideas: "the best technique ive found for dealing with yc companies that have bad ideas is to tell them to go sell the product asap (before wasting time building it). not only do they learn that nobody wants what they are building, they very often come back with a real idea that they discovered in the process of trying to sell the bad idea."  heres a recipe that might produce the next facebook, if youre college students. if you have a connection to one of the more powerful sororities at your school, approach the queen bees thereof and offer to be their personal it consultants, building anything they could imagine needing in their social lives that didnt already exist. anything that got built this way would be very promising, because such users are not just the most demanding but also the perfect point to spread from. i have no idea whether this would work.  and the reason it used a tv for a monitor is that steve wozniak started out by solving his own problems. he, like most of his peers, couldnt afford a monitor. thanks to sam altman, mike arrington, paul buchheit, john collison, patrick collison, garry tan, and harj taggar for reading drafts of this, and marc andreessen, joe gebbia, reid hoffman, shel kaphan, mike moritz and kevin systrom for answering my questions about startup history. this essay was originally published at paulgraham.com one advantage of y combinators early, broad focus is that we see trends before most other people. and one of the most conspicuous trends in the last batch was the large number of hardware startups. out of 84 companies, 7 were making hardware. on the whole theyve done better than the companies that werent. theyve faced resistance from investors of course. investors have a deep-seated bias against hardware. but investors opinions are a trailing indicator. the best founders are better at seeing the future than the best investors, because the best founders are making it. there is no one single force driving this trend. hardware does well on crowdfunding sites. the spread of tablets makes it possible to build new things controlled by and even incorporating them. electric motors have improved. wireless connectivity of various types can now be taken for granted. its getting more straightforward to get things manufactured. arduinos, 3d printing, laser cutters, and more accessible cnc milling are making hardware easier to prototype. retailers are less of a bottleneck as customers increasingly buy online. one question i can answer is why hardware is suddenly cool. it always was cool. physical things are great. they just havent been as great a way to start a rapidly growing business as software. but that rule may not be permanent. its not even that old; it only dates from about 1990. maybe the advantage of software will turn out to have been temporary. hackers love to build hardware, and customers love to buy it. so if the ease of shipping hardware even approached the ease of shipping software, wed see a lot more hardware startups. it wouldnt be the first time something was a bad idea till it wasnt. and it wouldnt be the first time investors learned that lesson from founders. so if you want to work on hardware, dont be deterred from doing it because you worry investors will discriminate against you. and in particular, dont be deterred from applying to y combinator with a hardware idea, because were especially interested in hardware startups. we know theres room for the next steve jobs . but theres almost certainly also room for the first your name here . thanks to sam altman, trevor blackwell, david cann, sanjay dastoor, paul gerhardt, cameron robertson, harj taggar, and garry tan for reading drafts of this. this essay was originally published at paulgraham.com a few hours before the yahoo acquisition was announced in june 1998 i took a snapshot of viawebs site . i thought it might be interesting to look at one day. the first thing one notices is is how tiny the pages are. screens were a lot smaller in 1998. if i remember correctly, our frontpage used to just fit in the size window people typically used then. browsers then (ie 6 was still 3 years in the future) had few fonts and they werent antialiased. if you wanted to make pages that looked good, you had to render display text as images. you may notice a certain similarity between the viaweb and y combinator logos. we did that as an inside joke when we started yc. considering how basic a red circle is, it seemed surprising to me when we started viaweb how few other companies used one as their logo. a bit later i realized why . on the company page youll notice a mysterious individual called john mcartyem. robert morris (aka rtm) was so publicity averse after the worm that he didnt want his name on the site. i managed to get him to agree to a compromise: we could use his bio but not his name. he has since relaxed a bit on that point. trevor graduated at about the same time the acquisition closed, so in the course of 4 days he went from impecunious grad student to millionaire phd. the culmination of my career as a writer of press releases was one celebrating his graduation , illustrated with a drawing i did of him during a meeting. (trevor also appears as trevino bagwell in our directory of web designers merchants could hire to build stores for them. we inserted him as a ringer in case some competitor tried to spam our web designers. we assumed his logo would deter any actual customers, but it did not.) back in the 90s, to get users you had to get mentioned in magazines and newspapers. there were not the same ways to get found online that there are today. so we used to pay a pr firm $16,000 a month to get us mentioned in the press. fortunately reporters liked us . in our advice about getting traffic from search engines (i dont think the term seo had been coined yet), we say there are only 7 that matter: yahoo, altavista, excite, webcrawler, infoseek, lycos, and hotbot. notice anything missing? google was incorporated that september. we supported online transactions via a company called cybercash , since if we lacked that feature wed have gotten beaten up in product comparisons. but cybercash was so bad and most stores order volumes were so low that it was better if merchants processed orders like phone orders. we had a page in our site trying to talk merchants out of doing real time authorizations . the whole site was organized like a funnel, directing people to the test drive . it was a novel thing to be able to try out software online. we put cgi-bin in our dynamic urls to fool competitors about how our software worked. we had some well known users . needless to say, fredericks of hollywood got the most traffic. we charged a flat fee of $300/month for big stores, so it was a little alarming to have users who got lots of traffic. i once calculated how much fredericks was costing us in bandwidth, and it was about $300/month. since we hosted all the stores, which together were getting just over 10 million page views per month in june 1998, we consumed what at the time seemed a lot of bandwidth. we had 2 t1s (3 mb/sec) coming into our offices. in those days there was no aws. even colocating servers seemed too risky, considering how often things went wrong with them. so we had our servers in our offices. or more precisely, in trevors office. in return for the unique privilege of sharing his office with no other humans, he had to share it with 6 shrieking tower servers. his office was nicknamed the hot tub on account of the heat they generated. most days his stack of window air conditioners could keep up. for describing pages, we had a template language called rtml , which supposedly stood for something, but which in fact i named after rtm. rtml was common lisp augmented by some macros and libraries, and concealed under a structure editor that made it look like it had syntax. since we did continuous releases, our software didnt actually have versions. but in those days the trade press expected versions, so we made them up. if we wanted to get lots of attention, we made the version number an integer . that "version 4.0" icon was generated by our own button generator, incidentally. the whole viaweb site was made with our software, even though it wasnt an online store, because we wanted to experience what our users did. at the end of 1997, we released a general purpose shopping search engine called shopfind . it was pretty advanced for the time. it had a programmable crawler that could crawl most of the different stores online and pick out the products. this essay was originally published at paulgraham.com (this essay is derived from a talk at defcon 2005.) suppose you wanted to get rid of economic inequality. there are two ways to do it: give money to the poor, or take it away from the rich. but they amount to the same thing, because if you want to give money to the poor, you have to get it from somewhere. you cant get it from the poor, or they just end up where they started. you have to get it from the rich. there is of course a way to make the poor richer without simply shifting money from the rich. you could help the poor become more productive-- for example, by improving access to education. instead of taking money from engineers and giving it to checkout clerks, you could enable people who would have become checkout clerks to become engineers. this is an excellent strategy for making the poor richer. but the evidence of the last 200 years shows that it doesnt reduce economic inequality, because it makes the rich richer too. if there are more engineers, then there are more opportunities to hire them and to sell them things. henry ford couldnt have made a fortune building cars in a society in which most people were still subsistence farmers; he would have had neither workers nor customers. if you want to reduce economic inequality instead of just improving the overall standard of living, its not enough just to raise up the poor. what if one of your newly minted engineers gets ambitious and goes on to become another bill gates? economic inequality will be as bad as ever. if you actually want to compress the gap between rich and poor, you have to push down on the top as well as pushing up on the bottom. how do you push down on the top? you could try to decrease the productivity of the people who make the most money: make the best surgeons operate with their left hands, force popular actors to overeat, and so on. but this approach is hard to implement. the only practical solution is to let people do the best work they can, and then (either by taxation or by limiting what they can charge) to confiscate whatever you deem to be surplus. so lets be clear what reducing economic inequality means. it is identical with taking money from the rich. when you transform a mathematical expression into another form, you often notice new things. so it is in this case. taking money from the rich turns out to have consequences one might not foresee when one phrases the same idea in terms of "reducing inequality." the problem is, risk and reward have to be proportionate. a bet with only a 10% chance of winning has to pay more than one with a 50% chance of winning, or no one will take it. so if you lop off the top of the possible rewards, you thereby decrease peoples willingness to take risks. transposing into our original expression, we get: decreasing economic inequality means decreasing the risk people are willing to take. there are whole classes of risks that are no longer worth taking if the maximum return is decreased. one reason high tax rates are disastrous is that this class of risks includes starting new companies. startups are intrinsically risky. a startup is like a small boat in the open sea. one big wave and youre sunk. a competing product, a downturn in the economy, a delay in getting funding or regulatory approval, a patent suit, changing technical standards, the departure of a key employee, the loss of a big account---any one of these can destroy you overnight. it seems only about 1 in 10 startups succeeds.  our startup paid its first round of outside investors 36x. which meant, with current us tax rates, that it made sense to invest in us if we had better than a 1 in 24 chance of succeeding. that sounds about right. thats probably roughly how we looked when we were a couple of nerds with no business experience operating out of an apartment. if that kind of risk doesnt pay, venture investing, as we know it, doesnt happen. that might be ok if there were other sources of capital for new companies. why not just have the government, or some large almost-government organization like fannie mae, do the venture investing instead of private funds? ill tell you why that wouldnt work. because then youre asking government or almost-government employees to do the one thing they are least able to do: take risks. as anyone who has worked for the government knows, the important thing is not to make the right choices, but to make choices that can be justified later if they fail. if there is a safe option, thats the one a bureaucrat will choose. but that is exactly the wrong way to do venture investing. the nature of the business means that you want to make terribly risky choices, if the upside looks good enough. vcs are currently paid in a way that makes them focus on the upside: they get a percentage of the funds gains. and that helps overcome their understandable fear of investing in a company run by nerds who look like (and perhaps are) college students. if vcs werent allowed to get rich, theyd behave like bureaucrats. without hope of gain, theyd have only fear of loss. and so theyd make the wrong choices. theyd turn down the nerds in favor of the smooth-talking mba in a suit, because that investment would be easier to justify later if it failed. but even if you could somehow redesign venture funding to work without allowing vcs to become rich, theres another kind of investor you simply cannot replace: the startups founders and early employees. what they invest is their time and ideas. but these are equivalent to money; the proof is that investors are willing (if forced) to treat them as interchangeable, granting the same status to "sweat equity" and the equity theyve purchased with cash. the fact that youre investing time doesnt change the relationship between risk and reward. if youre going to invest your time in something with a small chance of succeeding, youll only do it if there is a proportionately large payoff.  if large payoffs arent allowed, you may as well play it safe. like many startup founders, i did it to get rich. but not because i wanted to buy expensive things. what i wanted was security. i wanted to make enough money that i didnt have to worry about money. if id been forbidden to make enough from a startup to do this, i would have sought security by some other means: for example, by going to work for a big, stable organization from which it would be hard to get fired. instead of busting my ass in a startup, i would have tried to get a nice, low-stress job at a big research lab, or tenure at a university. thats what everyone does in societies where risk isnt rewarded. if you cant ensure your own security, the next best thing is to make a nest for yourself in some large organization where your status depends mostly on seniority .  even if we could somehow replace investors, i dont see how we could replace founders. investors mainly contribute money, which in principle is the same no matter what the source. but the founders contribute ideas. you cant replace those. lets rehearse the chain of argument so far. im heading for a conclusion to which many readers will have to be dragged kicking and screaming, so ive tried to make each link unbreakable. decreasing economic inequality means taking money from the rich. since risk and reward are equivalent, decreasing potential rewards automatically decreases peoples appetite for risk. startups are intrinsically risky. without the prospect of rewards proportionate to the risk, founders will not invest their time in a startup. founders are irreplaceable. so eliminating economic inequality means eliminating startups. economic inequality is not just a consequence of startups. its the engine that drives them, in the same way a fall of water drives a water mill. people start startups in the hope of becoming much richer than they were before. and if your society tries to prevent anyone from being much richer than anyone else, it will also prevent one person from being much richer at t2 than t1. this argument applies proportionately. its not just that if you eliminate economic inequality, you get no startups. to the extent you reduce economic inequality, you decrease the number of startups.  increase taxes, and willingness to take risks decreases in proportion. and that seems bad for everyone. new technology and new jobs both come disproportionately from new companies. indeed, if you dont have startups, pretty soon you wont have established companies either, just as, if you stop having kids, pretty soon you wont have any adults. it sounds benevolent to say we ought to reduce economic inequality. when you phrase it that way, who can argue with you? inequality has to be bad, right? it sounds a good deal less benevolent to say we ought to reduce the rate at which new companies are founded. and yet the one implies the other. indeed, it may be that reducing investors appetite for risk doesnt merely kill off larval startups, but kills off the most promising ones especially. startups yield faster growth at greater risk than established companies. does this trend also hold among startups? that is, are the riskiest startups the ones that generate most growth if they succeed? i suspect the answer is yes. and thats a chilling thought, because it means that if you cut investors appetite for risk, the most beneficial startups are the first to go. not all rich people got that way from startups, of course. what if we let people get rich by starting startups, but taxed away all other surplus wealth? wouldnt that at least decrease inequality? less than you might think. if you made it so that people could only get rich by starting startups, people who wanted to get rich would all start startups. and that might be a great thing. but i dont think it would have much effect on the distribution of wealth. people who want to get rich will do whatever they have to. if startups are the only way to do it, youll just get far more people starting startups. (if you write the laws very carefully, that is. more likely, youll just get a lot of people doing things that can be made to look on paper like startups.) if were determined to eliminate economic inequality, there is still one way out: we could say that were willing to go ahead and do without startups. what would happen if we did? at a minimum, wed have to accept lower rates of technological growth. if you believe that large, established companies could somehow be made to develop new technology as fast as startups, the ball is in your court to explain how. (if you can come up with a remotely plausible story, you can make a fortune writing business books and consulting for large companies.)  ok, so we get slower growth. is that so bad? well, one reason its bad in practice is that other countries might not agree to slow down with us. if youre content to develop new technologies at a slower rate than the rest of the world, what happens is that you dont invent anything at all. anything you might discover has already been invented elsewhere. and the only thing you can offer in return is raw materials and cheap labor. once you sink that low, other countries can do whatever they like with you: install puppet governments, siphon off your best workers, use your women as prostitutes, dump their toxic waste on your territory-- all the things we do to poor countries now. the only defense is to isolate yourself, as communist countries did in the twentieth century. but the problem then is, you have to become a police state to enforce it. i realize startups are not the main target of those who want to eliminate economic inequality. what they really dislike is the sort of wealth that becomes self-perpetuating through an alliance with power. for example, construction firms that fund politicians campaigns in return for government contracts, or rich parents who get their children into good colleges by sending them to expensive schools designed for that purpose. but if you try to attack this type of wealth through economic policy, its hard to hit without destroying startups as collateral damage. the problem here is not wealth, but corruption. so why not go after corruption? we dont need to prevent people from being rich if we can prevent wealth from translating into power. and there has been progress on that front. before he died of drink in 1925, commodore vanderbilts wastrel grandson reggie ran down pedestrians on five separate occasions, killing two of them. by 1969, when ted kennedy drove off the bridge at chappaquiddick, the limit seemed to be down to one. today it may well be zero. but whats changed is not variation in wealth. whats changed is the ability to translate wealth into power. how do you break the connection between wealth and power? demand transparency. watch closely how power is exercised, and demand an account of how decisions are made. why arent all police interrogations videotaped? why did 36% of princetons class of 2007 come from prep schools, when only 1.7% of american kids attend them? why did the us really invade iraq? why dont government officials disclose more about their finances, and why only during their term of office? a friend of mine who knows a lot about computer security says the single most important step is to log everything. back when he was a kid trying to break into computers, what worried him most was the idea of leaving a trail. he was more inconvenienced by the need to avoid that than by any obstacle deliberately put in his path. like all illicit connections, the connection between wealth and power flourishes in secret. expose all transactions, and you will greatly reduce it. log everything. thats a strategy that already seems to be working, and it doesnt have the side effect of making your whole country poor. i dont think many people realize there is a connection between economic inequality and risk. i didnt fully grasp it till recently. id known for years of course that if one didnt score in a startup, the other alternative was to get a cozy, tenured research job. but i didnt understand the equation governing my behavior. likewise, its obvious empirically that a country that doesnt let people get rich is headed for disaster, whether its diocletians rome or harold wilsons britain. but i did not till recently understand the role risk played. if you try to attack wealth, you end up nailing risk as well, and with it growth. if we want a fairer world, i think were better off attacking one step downstream, where wealth turns into power.  success here is defined from the initial investors point of view: either an ipo, or an acquisition for more than the valuation at the last round of funding. the conventional 1 in 10 success rate is suspiciously neat, but conversations with vcs suggest its roughly correct for startups overall. top vc firms expect to do better.  im not claiming founders sit down and calculate the expected after-tax return from a startup. theyre motivated by examples of other people who did it. and those examples do reflect after-tax returns.  conjecture: the variation in wealth in a (non-corrupt) country or organization will be inversely proportional to the prevalence of systems of seniority. so if you suppress variation in wealth, seniority will become correspondingly more important. so far, i know of no counterexamples, though in very corrupt countries you may get both simultaneously. (thanks to daniel sobral for pointing this out.)  in a country with a truly feudal economy, you might be able to redistribute wealth successfully, because there are no startups to kill.  the speed at which startups develop new techology is the other reason they pay so well. as i explained in "how to make wealth" (in hackers & painters ), what you do in a startup is compress a lifetimes worth of work into a few years. it seems as dumb to discourage that as to discourage risk-taking. thanks to chris anderson, trevor blackwell, dan giffin, jessica livingston, and evan williams for reading drafts of this essay, and to langley steinert, sangam pant, and mike moritz for information about venture investing. this essay was originally published at paulgraham.com thirty years ago, one was supposed to work ones way up the corporate ladder. thats less the rule now. our generation wants to get paid up front. instead of developing a product for some big company in the expectation of getting job security in return, we develop the product ourselves, in a startup, and sell it to the big company. at the very least we want options. among other things, this shift has created the appearance of a rapid increase in economic inequality. but really the two cases are not as different as they look in economic statistics. economic statistics are misleading because they ignore the value of safe jobs. an easy job from which one cant be fired is worth money; exchanging the two is one of the commonest forms of corruption. a sinecure is, in effect, an annuity. except sinecures dont appear in economic statistics. if they did, it would be clear that in practice socialist countries have nontrivial disparities of wealth, because they usually have a class of powerful bureaucrats who are paid mostly by seniority and can never be fired. while not a sinecure, a position on the corporate ladder was genuinely valuable, because big companies tried not to fire people, and promoted from within based largely on seniority. a position on the corporate ladder had a value analogous to the "goodwill" that is a very real element in the valuation of companies. it meant one could expect future high paying jobs. one of main causes of the decay of the corporate ladder is the trend for takeovers that began in the 1980s. why waste your time climbing a ladder that might disappear before you reach the top? and, by no coincidence, the corporate ladder was one of the reasons the early corporate raiders were so successful. its not only economic statistics that ignore the value of safe jobs. corporate balance sheets do too. one reason it was profitable to carve up 1980s companies and sell them for parts was that they hadnt formally acknowledged their implicit debt to employees who had done good work and expected to be rewarded with high-paying executive jobs when their time came. in the movie wall street , gordon gekko ridicules a company overloaded with vice presidents. but the company may not be as corrupt as it seems; those vps cushy jobs were probably payment for work done earlier. i like the new model better. for one thing, it seems a bad plan to treat jobs as rewards. plenty of good engineers got made into bad managers that way. and the old system meant people had to deal with a lot more corporate politics, in order to protect the work theyd invested in a position on the ladder. the big disadvantage of the new system is that it involves more risk . if you develop ideas in a startup instead of within a big company, any number of random factors could sink you before you can finish. but maybe the older generation would laugh at me for saying that the way we do things is riskier. after all, projects within big companies were always getting cancelled as a result of arbitrary decisions from higher up. my fathers entire industry (breeder reactors) disappeared that way. for better or worse, the idea of the corporate ladder is probably gone for good. the new model seems more liquid, and more efficient. but it is less of a change, financially, than one might think. our fathers werent that stupid. this essay was originally published at paulgraham.com (this essay is derived from a talk at oscon 2005.) lately companies have been paying more attention to open source. ten years ago there seemed a real danger microsoft would extend its monopoly to servers. it seems safe to say now that open source has prevented that. a recent survey found 52% of companies are replacing windows servers with linux servers.  more significant, i think, is which 52% they are. at this point, anyone proposing to run windows on servers should be prepared to explain what they know about servers that google, yahoo, and amazon dont. but the biggest thing business has to learn from open source is not about linux or firefox, but about the forces that produced them. ultimately these will affect a lot more than what software you use. we may be able to get a fix on these underlying forces by triangulating from open source and blogging. as youve probably noticed, they have a lot in common. like open source, blogging is something people do themselves, for free, because they enjoy it. like open source hackers, bloggers compete with people working for money, and often win. the method of ensuring quality is also the same: darwinian. companies ensure quality through rules to prevent employees from screwing up. but you dont need that when the audience can communicate with one another. people just produce whatever they want; the good stuff spreads, and the bad gets ignored. and in both cases, feedback from the audience improves the best work. another thing blogging and open source have in common is the web. people have always been willing to do great work for free, but before the web it was harder to reach an audience or collaborate on projects. i think the most important of the new principles business has to learn is that people work a lot harder on stuff they like. well, thats news to no one. so how can i claim business has to learn it? when i say business doesnt know this, i mean the structure of business doesnt reflect it. business still reflects an older model, exemplified by the french word for working: travailler . it has an english cousin, travail, and what it means is torture.  this turns out not to be the last word on work, however. as societies get richer, they learn something about work thats a lot like what they learn about diet. we know now that the healthiest diet is the one our peasant ancestors were forced to eat because they were poor. like rich food, idleness only seems desirable when you dont get enough of it. i think we were designed to work, just as we were designed to eat a certain amount of fiber, and we feel bad if we dont. theres a name for people who work for the love of it: amateurs. the word now has such bad connotations that we forget its etymology, though its staring us in the face. "amateur" was originally rather a complimentary word. but the thing to be in the twentieth century was professional, which amateurs, by definition, are not. thats why the business world was so surprised by one lesson from open source: that people working for love often surpass those working for money. users dont switch from explorer to firefox because they want to hack the source. they switch because its a better browser. its not that microsoft isnt trying. they know controlling the browser is one of the keys to retaining their monopoly. the problem is the same they face in operating systems: they cant pay people enough to build something better than a group of inspired hackers will build for free. i suspect professionalism was always overrated-- not just in the literal sense of working for money, but also connotations like formality and detachment. inconceivable as it would have seemed in, say, 1970, i think professionalism was largely a fashion, driven by conditions that happened to exist in the twentieth century. one of the most powerful of those was the existence of "channels." revealingly, the same term was used for both products and information: there were distribution channels, and tv and radio channels. it was the narrowness of such channels that made professionals seem so superior to amateurs. there were only a few jobs as professional journalists, for example, so competition ensured the average journalist was fairly good. whereas anyone can express opinions about current events in a bar. and so the average person expressing his opinions in a bar sounds like an idiot compared to a journalist writing about the subject. on the web, the barrier for publishing your ideas is even lower. you dont have to buy a drink, and they even let kids in. millions of people are publishing online, and the average level of what theyre writing, as you might expect, is not very good. this has led some in the media to conclude that blogs dont present much of a threat-- that blogs are just a fad. actually, the fad is the word "blog," at least the way the print media now use it. what they mean by "blogger" is not someone who publishes in a weblog format, but anyone who publishes online. thats going to become a problem as the web becomes the default medium for publication. so id like to suggest an alternative word for someone who publishes online. how about "writer?" those in the print media who dismiss the writing online because of its low average quality are missing an important point: no one reads the average blog. in the old world of channels, it meant something to talk about average quality, because thats what you were getting whether you liked it or not. but now you can read any writer you want. so the average quality of writing online isnt what the print media are competing against. theyre competing against the best writing online. and, like microsoft, theyre losing. i know that from my own experience as a reader. though most print publications are online, i probably read two or three articles on individual peoples sites for every one i read on the site of a newspaper or magazine. and when i read, say, new york times stories, i never reach them through the times front page. most i find through aggregators like google news or slashdot or delicious. aggregators show how much better you can do than the channel. the new york times front page is a list of articles written by people who work for the new york times. delicious is a list of articles that are interesting. and its only now that you can see the two side by side that you notice how little overlap there is. most articles in the print media are boring. for example, the president notices that a majority of voters now think invading iraq was a mistake, so he makes an address to the nation to drum up support. where is the man bites dog in that? i didnt hear the speech, but i could probably tell you exactly what he said. a speech like that is, in the most literal sense, not news: there is nothing new in it.  nor is there anything new, except the names and places, in most "news" about things going wrong. a child is abducted; theres a tornado; a ferry sinks; someone gets bitten by a shark; a small plane crashes. and what do you learn about the world from these stories? absolutely nothing. theyre outlying data points; what makes them gripping also makes them irrelevant. as in software, when professionals produce such crap, its not surprising if amateurs can do better. live by the channel, die by the channel: if you depend on an oligopoly, you sink into bad habits that are hard to overcome when you suddenly get competition.  another thing blogs and open source software have in common is that theyre often made by people working at home. that may not seem surprising. but it should be. its the architectural equivalent of a home-made aircraft shooting down an f-18. companies spend millions to build office buildings for a single purpose: to be a place to work. and yet people working in their own homes, which arent even designed to be workplaces, end up being more productive. this proves something a lot of us have suspected. the average office is a miserable place to get work done. and a lot of what makes offices bad are the very qualities we associate with professionalism. the sterility of offices is supposed to suggest efficiency. but suggesting efficiency is a different thing from actually being efficient. the atmosphere of the average workplace is to productivity what flames painted on the side of a car are to speed. and its not just the way offices look thats bleak. the way people act is just as bad. things are different in a startup. often as not a startup begins in an apartment. instead of matching beige cubicles they have an assortment of furniture they bought used. they work odd hours, wearing the most casual of clothing. they look at whatever they want online without worrying whether its "work safe." the cheery, bland language of the office is replaced by wicked humor. and you know what? the company at this stage is probably the most productive its ever going to be. maybe its not a coincidence. maybe some aspects of professionalism are actually a net lose. to me the most demoralizing aspect of the traditional office is that youre supposed to be there at certain times. there are usually a few people in a company who really have to, but the reason most employees work fixed hours is that the company cant measure their productivity. the basic idea behind office hours is that if you cant make people work, you can at least prevent them from having fun. if employees have to be in the building a certain number of hours a day, and are forbidden to do non-work things while there, then they must be working. in theory. in practice they spend a lot of their time in a no-mans land, where theyre neither working nor having fun. if you could measure how much work people did, many companies wouldnt need any fixed workday. you could just say: this is what you have to do. do it whenever you like, wherever you like. if your work requires you to talk to other people in the company, then you may need to be here a certain amount. otherwise we dont care. that may seem utopian, but its what we told people who came to work for our company. there were no fixed office hours. i never showed up before 11 in the morning. but we werent saying this to be benevolent. we were saying: if you work here we expect you to get a lot done. dont try to fool us just by being here a lot. the problem with the facetime model is not just that its demoralizing, but that the people pretending to work interrupt the ones actually working. im convinced the facetime model is the main reason large organizations have so many meetings. per capita, large organizations accomplish very little. and yet all those people have to be on site at least eight hours a day. when so much time goes in one end and so little achievement comes out the other, something has to give. and meetings are the main mechanism for taking up the slack. for one year i worked at a regular nine to five job, and i remember well the strange, cozy feeling that comes over one during meetings. i was very aware, because of the novelty, that i was being paid for programming. it seemed just amazing, as if there was a machine on my desk that spat out a dollar bill every two minutes no matter what i did. even while i was in the bathroom! but because the imaginary machine was always running, i felt i always ought to be working. and so meetings felt wonderfully relaxing. they counted as work, just like programming, but they were so much easier. all you had to do was sit and look attentive. meetings are like an opiate with a network effect. so is email, on a smaller scale. and in addition to the direct cost in time, theres the cost in fragmentation-- breaking peoples day up into bits too small to be useful. you can see how dependent youve become on something by removing it suddenly. so for big companies i propose the following experiment. set aside one day where meetings are forbidden-- where everyone has to sit at their desk all day and work without interruption on things they can do without talking to anyone else. some amount of communication is necessary in most jobs, but im sure many employees could find eight hours worth of stuff they could do by themselves. you could call it "work day." the other problem with pretend work is that it often looks better than real work. when im writing or hacking i spend as much time just thinking as i do actually typing. half the time im sitting drinking a cup of tea, or walking around the neighborhood. this is a critical phase-- this is where ideas come from-- and yet id feel guilty doing this in most offices, with everyone else looking busy. its hard to see how bad some practice is till you have something to compare it to. and thats one reason open source, and even blogging in some cases, are so important. they show us what real work looks like. were funding eight new startups at the moment. a friend asked what they were doing for office space, and seemed surprised when i said we expected them to work out of whatever apartments they found to live in. but we didnt propose that to save money. we did it because we want their software to be good. working in crappy informal spaces is one of the things startups do right without realizing it. as soon as you get into an office, work and life start to drift apart. that is one of the key tenets of professionalism. work and life are supposed to be separate. but that part, im convinced, is a mistake. the third big lesson we can learn from open source and blogging is that ideas can bubble up from the bottom, instead of flowing down from the top. open source and blogging both work bottom-up: people make what they want, and the best stuff prevails. does this sound familiar? its the principle of a market economy. ironically, though open source and blogs are done for free, those worlds resemble market economies, while most companies, for all their talk about the value of free markets, are run internally like communist states. there are two forces that together steer design: ideas about what to do next, and the enforcement of quality. in the channel era, both flowed down from the top. for example, newspaper editors assigned stories to reporters, then edited what they wrote. open source and blogging show us things dont have to work that way. ideas and even the enforcement of quality can flow bottom-up. and in both cases the results are not merely acceptable, but better. for example, open source software is more reliable precisely because its open source; anyone can find mistakes. the same happens with writing. as we got close to publication, i found i was very worried about the essays in hackers & painters that hadnt been online. once an essay has had a couple thousand page views i feel reasonably confident about it. but these had had literally orders of magnitude less scrutiny. it felt like releasing software without testing it. thats what all publishing used to be like. if you got ten people to read a manuscript, you were lucky. but id become so used to publishing online that the old method now seemed alarmingly unreliable, like navigating by dead reckoning once youd gotten used to a gps. the other thing i like about publishing online is that you can write what you want and publish when you want. earlier this year i wrote something that seemed suitable for a magazine, so i sent it to an editor i know. as i was waiting to hear back, i found to my surprise that i was hoping theyd reject it. then i could put it online right away. if they accepted it, it wouldnt be read by anyone for months, and in the meantime id have to fight word-by-word to save it from being mangled by some twenty five year old copy editor.  many employees would like to build great things for the companies they work for, but more often than not management wont let them. how many of us have heard stories of employees going to management and saying, please let us build this thing to make money for you-- and the company saying no? the most famous example is probably steve wozniak, who originally wanted to build microcomputers for his then-employer, hp. and they turned him down. on the blunderometer, this episode ranks with ibm accepting a non-exclusive license for dos. but i think this happens all the time. we just dont hear about it usually, because to prove yourself right you have to quit and start your own company, like wozniak did. so these, i think, are the three big lessons open source and blogging have to teach business: (1) that people work harder on stuff they like, (2) that the standard office environment is very unproductive, and (3) that bottom-up often works better than top-down. i can imagine managers at this point saying: what is this guy talking about? what good does it do me to know that my programmers would be more productive working at home on their own projects? i need their asses in here working on version 3.2 of our software, or were never going to make the release date. and its true, the benefit that specific manager could derive from the forces ive described is near zero. when i say business can learn from open source, i dont mean any specific business can. i mean business can learn about new conditions the same way a gene pool does. im not claiming companies can get smarter, just that dumb ones will die. so what will business look like when it has assimilated the lessons of open source and blogging? i think the big obstacle preventing us from seeing the future of business is the assumption that people working for you have to be employees. but think about whats going on underneath: the company has some money, and they pay it to the employee in the hope that hell make something worth more than they paid him. well, there are other ways to arrange that relationship. instead of paying the guy money as a salary, why not give it to him as investment? then instead of coming to your office to work on your projects, he can work wherever he wants on projects of his own. because few of us know any alternative, we have no idea how much better we could do than the traditional employer-employee relationship. such customs evolve with glacial slowness. our employer-employee relationship still retains a big chunk of master-servant dna.  i dislike being on either end of it. ill work my ass off for a customer, but i resent being told what to do by a boss. and being a boss is also horribly frustrating; half the time its easier just to do stuff yourself than to get someone else to do it for you. id rather do almost anything than give or receive a performance review. on top of its unpromising origins, employment has accumulated a lot of cruft over the years. the list of what you cant ask in job interviews is now so long that for convenience i assume its infinite. within the office you now have to walk on eggshells lest anyone say or do something that makes the company prey to a lawsuit. and god help you if you fire anyone. nothing shows more clearly that employment is not an ordinary economic relationship than companies being sued for firing people. in any purely economic relationship youre free to do what you want. if you want to stop buying steel pipe from one supplier and start buying it from another, you dont have to explain why. no one can accuse you of unjustly switching pipe suppliers. justice implies some kind of paternal obligation that isnt there in transactions between equals. most of the legal restrictions on employers are intended to protect employees. but you cant have action without an equal and opposite reaction. you cant expect employers to have some kind of paternal responsibility toward employees without putting employees in the position of children. and that seems a bad road to go down. next time youre in a moderately large city, drop by the main post office and watch the body language of the people working there. they have the same sullen resentment as children made to do something they dont want to. their union has exacted pay increases and work restrictions that would have been the envy of previous generations of postal workers, and yet they dont seem any happier for it. its demoralizing to be on the receiving end of a paternalistic relationship, no matter how cozy the terms. just ask any teenager. i see the disadvantages of the employer-employee relationship because ive been on both sides of a better one: the investor-founder relationship. i wouldnt claim its painless. when i was running a startup, the thought of our investors used to keep me up at night. and now that im an investor , the thought of our startups keeps me up at night. all the pain of whatever problem youre trying to solve is still there. but the pain hurts less when it isnt mixed with resentment. i had the misfortune to participate in what amounted to a controlled experiment to prove that. after yahoo bought our startup i went to work for them. i was doing exactly the same work, except with bosses. and to my horror i started acting like a child. the situation pushed buttons id forgotten i had. the big advantage of investment over employment, as the examples of open source and blogging suggest, is that people working on projects of their own are enormously more productive. and a startup is a project of ones own in two senses, both of them important: its creatively ones own, and also economically oness own. google is a rare example of a big company in tune with the forces ive described. theyve tried hard to make their offices less sterile than the usual cube farm. they give employees who do great work large grants of stock to simulate the rewards of a startup. they even let hackers spend 20% of their time on their own projects. why not let people spend 100% of their time on their own projects, and instead of trying to approximate the value of what they create, give them the actual market value? impossible? that is in fact what venture capitalists do. so am i claiming that no one is going to be an employee anymore-- that everyone should go and start a startup? of course not. but more people could do it than do it now. at the moment, even the smartest students leave school thinking they have to get a job . actually what they need to do is make something valuable. a job is one way to do that, but the more ambitious ones will ordinarily be better off taking money from an investor than an employer. hackers tend to think business is for mbas. but business administration is not what youre doing in a startup. what youre doing is business creation . and the first phase of that is mostly product creation-- that is, hacking. thats the hard part. its a lot harder to create something people love than to take something people love and figure out how to make money from it. another thing that keeps people away from starting startups is the risk. someone with kids and a mortgage should think twice before doing it. but most young hackers have neither. and as the example of open source and blogging suggests, youll enjoy it more, even if you fail. youll be working on your own thing, instead of going to some office and doing what youre told. there may be more pain in your own company, but it wont hurt as much. that may be the greatest effect, in the long run, of the forces underlying open source and blogging: finally ditching the old paternalistic employer-employee relationship, and replacing it with a purely economic one, between equals.  survey by forrester research reported in the cover story of business week, 31 jan 2005. apparently someone believed you have to replace the actual server in order to switch the operating system.  it derives from the late latin tripalium , a torture device so called because it consisted of three stakes. i dont know how the stakes were used. "travel" has the same root.  it would be much bigger news, in that sense, if the president faced unscripted questions by giving a press conference.  one measure of the incompetence of newspapers is that so many still make you register to read stories. i have yet to find a blog that tried that.  they accepted the article, but i took so long to send them the final version that by the time i did the section of the magazine theyd accepted it for had disappeared in a reorganization.  the word "boss" is derived from the dutch baas , meaning "master." thanks to sarah harlin, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com (this essay is derived from a talk at the berkeley csua.) the three big powers on the internet now are yahoo, google, and microsoft. average age of their founders: 24. so it is pretty well established now that grad students can start successful companies. and if grad students can do it, why not undergrads? like everything else in technology, the cost of starting a startup has decreased dramatically. now its so low that it has disappeared into the noise. the main cost of starting a web-based startup is food and rent. which means it doesnt cost much more to start a company than to be a total slacker. you can probably start a startup on ten thousand dollars of seed funding, if youre prepared to live on ramen. the less it costs to start a company, the less you need the permission of investors to do it. so a lot of people will be able to start companies now who never could have before. the most interesting subset may be those in their early twenties. im not so excited about founders who have everything investors want except intelligence, or everything except energy. the most promising group to be liberated by the new, lower threshold are those who have everything investors want except experience. i once claimed that nerds were unpopular in secondary school mainly because they had better things to do than work full-time at being popular. some said i was just telling people what they wanted to hear. well, im now about to do that in a spectacular way: i think undergraduates are undervalued. or more precisely, i think few realize the huge spread in the value of 20 year olds. some, its true, are not very capable. but others are more capable than all but a handful of 30 year olds.  till now the problem has always been that its difficult to pick them out. every vc in the world, if they could go back in time, would try to invest in microsoft. but which would have then? how many would have understood that this particular 19 year old was bill gates? its hard to judge the young because (a) they change rapidly, (b) there is great variation between them, and (c) theyre individually inconsistent. that last one is a big problem. when youre young, you occasionally say and do stupid things even when youre smart. so if the algorithm is to filter out people who say stupid things, as many investors and employers unconsciously do, youre going to get a lot of false positives. most organizations who hire people right out of college are only aware of the average value of 22 year olds, which is not that high. and so the idea for most of the twentieth century was that everyone had to begin as a trainee in some entry-level job. organizations realized there was a lot of variation in the incoming stream, but instead of pursuing this thought they tended to suppress it, in the belief that it was good for even the most promising kids to start at the bottom, so they didnt get swelled heads. the most productive young people will always be undervalued by large organizations, because the young have no performance to measure yet, and any error in guessing their ability will tend toward the mean. whats an especially productive 22 year old to do? one thing you can do is go over the heads of organizations, directly to the users. any company that hires you is, economically, acting as a proxy for the customer. the rate at which they value you (though they may not consciously realize it) is an attempt to guess your value to the user. but theres a way to appeal their judgement. if you want, you can opt to be valued directly by users, by starting your own company. the market is a lot more discerning than any employer. and it is completely non-discriminatory. on the internet, nobody knows youre a dog. and more to the point, nobody knows youre 22. all users care about is whether your site or software gives them what they want. they dont care if the person behind it is a high school kid. if youre really productive, why not make employers pay market rate for you? why go work as an ordinary employee for a big company, when you could start a startup and make them buy it to get you? when most people hear the word "startup," they think of the famous ones that have gone public. but most startups that succeed do it by getting bought. and usually the acquirer doesnt just want the technology, but the people who created it as well. often big companies buy startups before theyre profitable. obviously in such cases theyre not after revenues. what they want is the development team and the software theyve built so far. when a startup gets bought for 2 or 3 million six months in, its really more of a hiring bonus than an acquisition. i think this sort of thing will happen more and more, and that it will be better for everyone. its obviously better for the people who start the startup, because they get a big chunk of money up front. but i think it will be better for the acquirers too. the central problem in big companies, and the main reason theyre so much less productive than small companies, is the difficulty of valuing each persons work. buying larval startups solves that problem for them: the acquirer doesnt pay till the developers have proven themselves. acquirers are protected on the downside, but still get most of the upside. buying startups also solves another problem afflicting big companies: they cant do product development. big companies are good at extracting the value from existing products, but bad at creating new ones. why? its worth studying this phenomenon in detail, because this is the raison detre of startups. to start with, most big companies have some kind of turf to protect, and this tends to warp their development decisions. for example, web-based applications are hot now, but within microsoft there must be a lot of ambivalence about them, because the very idea of web-based software threatens the desktop. so any web-based application that microsoft ends up with, will probably, like hotmail, be something developed outside the company. another reason big companies are bad at developing new products is that the kind of people who do that tend not to have much power in big companies (unless they happen to be the ceo). disruptive technologies are developed by disruptive people. and they either dont work for the big company, or have been outmaneuvered by yes-men and have comparatively little influence. big companies also lose because they usually only build one of each thing. when you only have one web browser, you cant do anything really risky with it. if ten different startups design ten different web browsers and you take the best, youll probably get something better. the more general version of this problem is that there are too many new ideas for companies to explore them all. there might be 500 startups right now who think theyre making something microsoft might buy. even microsoft probably couldnt manage 500 development projects in-house. big companies also dont pay people the right way. people developing a new product at a big company get paid roughly the same whether it succeeds or fails. people at a startup expect to get rich if the product succeeds, and get nothing if it fails.  so naturally the people at the startup work a lot harder. the mere bigness of big companies is an obstacle. in startups, developers are often forced to talk directly to users, whether they want to or not, because there is no one else to do sales and support. its painful doing sales, but you learn much more from trying to sell people something than reading what they said in focus groups. and then of course, big companies are bad at product development because theyre bad at everything. everything happens slower in big companies than small ones, and product development is something that has to happen fast, because you have to go through a lot of iterations to get something good. i think the trend of big companies buying startups will only accelerate. one of the biggest remaining obstacles is pride. most companies, at least unconsciously, feel they ought to be able to develop stuff in house, and that buying startups is to some degree an admission of failure. and so, as people generally do with admissions of failure, they put it off for as long as possible. that makes the acquisition very expensive when it finally happens. what companies should do is go out and discover startups when theyre young, before vcs have puffed them up into something that costs hundreds of millions to acquire. much of what vcs add, the acquirer doesnt need anyway. why dont acquirers try to predict the companies theyre going to have to buy for hundreds of millions, and grab them early for a tenth or a twentieth of that? because they cant predict the winners in advance? if theyre only paying a twentieth as much, they only have to predict a twentieth as well. surely they can manage that. i think companies that acquire technology will gradually learn to go after earlier stage startups. they wont necessarily buy them outright. the solution may be some hybrid of investment and acquisition: for example, to buy a chunk of the company and get an option to buy the rest later. when companies buy startups, theyre effectively fusing recruiting and product development. and i think thats more efficient than doing the two separately, because you always get people who are really committed to what theyre working on. plus this method yields teams of developers who already work well together. any conflicts between them have been ironed out under the very hot iron of running a startup. by the time the acquirer gets them, theyre finishing one anothers sentences. thats valuable in software, because so many bugs occur at the boundaries between different peoples code. the increasing cheapness of starting a company doesnt just give hackers more power relative to employers. it also gives them more power relative to investors. the conventional wisdom among vcs is that hackers shouldnt be allowed to run their own companies. the founders are supposed to accept mbas as their bosses, and themselves take on some title like chief technical officer. there may be cases where this is a good idea. but i think founders will increasingly be able to push back in the matter of control, because they just dont need the investors money as much as they used to. startups are a comparatively new phenomenon. fairchild semiconductor is considered the first vc-backed startup, and they were founded in 1959, less than fifty years ago. measured on the time scale of social change, what we have now is pre-beta. so we shouldnt assume the way startups work now is the way they have to work. fairchild needed a lot of money to get started. they had to build actual factories. what does the first round of venture funding for a web-based startup get spent on today? more money cant get software written faster; it isnt needed for facilities, because those can now be quite cheap; all money can really buy you is sales and marketing. a sales force is worth something, ill admit. but marketing is increasingly irrelevant. on the internet, anything genuinely good will spread by word of mouth. investors power comes from money. when startups need less money, investors have less power over them. so future founders may not have to accept new ceos if they dont want them. the vcs will have to be dragged kicking and screaming down this road, but like many things people have to be dragged kicking and screaming toward, it may actually be good for them. google is a sign of the way things are going. as a condition of funding, their investors insisted they hire someone old and experienced as ceo. but from what ive heard the founders didnt just give in and take whoever the vcs wanted. they delayed for an entire year, and when they did finally take a ceo, they chose a guy with a phd in computer science. it sounds to me as if the founders are still the most powerful people in the company, and judging by googles performance, their youth and inexperience doesnt seem to have hurt them. indeed, i suspect google has done better than they would have if the founders had given the vcs what they wanted, when they wanted it, and let some mba take over as soon as they got their first round of funding. im not claiming the business guys installed by vcs have no value. certainly they have. but they dont need to become the founders bosses, which is what that title ceo means. i predict that in the future the executives installed by vcs will increasingly be coos rather than ceos. the founders will run engineering directly, and the rest of the company through the coo. with both employers and investors, the balance of power is slowly shifting towards the young. and yet they seem the last to realize it. only the most ambitious undergrads even consider starting their own company when they graduate. most just want to get a job. maybe this is as it should be. maybe if the idea of starting a startup is intimidating, you filter out the uncommitted. but i suspect the filter is set a little too high. i think there are people who could, if they tried, start successful startups, and who instead let themselves be swept into the intake ducts of big companies. have you ever noticed that when animals are let out of cages, they dont always realize at first that the doors open? often they have to be poked with a stick to get them out. something similar happened with blogs. people could have been publishing online in 1995, and yet blogging has only really taken off in the last couple years. in 1995 we thought only professional writers were entitled to publish their ideas, and that anyone else who did was a crank. now publishing online is becoming so popular that everyone wants to do it, even print journalists. but blogging has not taken off recently because of any technical innovation; it just took eight years for everyone to realize the cage was open. i think most undergrads dont realize yet that the economic cage is open. a lot have been told by their parents that the route to success is to get a good job. this was true when their parents were in college, but its less true now. the route to success is to build something valuable, and you dont have to be working for an existing company to do that. indeed, you can often do it better if youre not. when i talk to undergrads, what surprises me most about them is how conservative they are. not politically, of course. i mean they dont seem to want to take risks. this is a mistake, because the younger you are, the more risk you can take. risk and reward are always proportionate. for example, stocks are riskier than bonds, and over time always have greater returns. so why does anyone invest in bonds? the catch is that phrase "over time." stocks will generate greater returns over thirty years, but they might lose value from year to year. so what you should invest in depends on how soon you need the money. if youre young, you should take the riskiest investments you can find. all this talk about investing may seem very theoretical. most undergrads probably have more debts than assets. they may feel they have nothing to invest. but thats not true: they have their time to invest, and the same rule about risk applies there. your early twenties are exactly the time to take insane career risks. the reason risk is always proportionate to reward is that market forces make it so. people will pay extra for stability. so if you choose stability-- by buying bonds, or by going to work for a big company-- its going to cost you. riskier career moves pay better on average, because there is less demand for them. extreme choices like starting a startup are so frightening that most people wont even try. so you dont end up having as much competition as you might expect, considering the prizes at stake. the math is brutal. while perhaps 9 out of 10 startups fail, the one that succeeds will pay the founders more than 10 times what they would have made in an ordinary job.  thats the sense in which startups pay better "on average." remember that. if you start a startup, youll probably fail. most startups fail. its the nature of the business. but its not necessarily a mistake to try something that has a 90% chance of failing, if you can afford the risk. failing at 40, when you have a family to support, could be serious. but if you fail at 22, so what? if you try to start a startup right out of college and it tanks, youll end up at 23 broke and a lot smarter. which, if you think about it, is roughly what you hope to get from a graduate program. even if your startup does tank, you wont harm your prospects with employers. to make sure i asked some friends who work for big companies. i asked managers at yahoo, google, amazon, cisco and microsoft how theyd feel about two candidates, both 24, with equal ability, one whod tried to start a startup that tanked, and another whod spent the two years since college working as a developer at a big company. every one responded that theyd prefer the guy whod tried to start his own company. zod nazem, whos in charge of engineering at yahoo, said: i actually put more value on the guy with the failed startup. and you can quote me! so there you have it. want to get hired by yahoo? start your own company. if even big employers think highly of young hackers who start companies, why dont more do it? why are undergrads so conservative? i think its because theyve spent so much time in institutions. the first twenty years of everyones life consists of being piped from one institution to another. you probably didnt have much choice about the secondary schools you went to. and after high school it was probably understood that you were supposed to go to college. you may have had a few different colleges to choose between, but they were probably pretty similar. so by this point youve been riding on a subway line for twenty years, and the next stop seems to be a job. actually college is where the line ends. superficially, going to work for a company may feel like just the next in a series of institutions, but underneath, everything is different. the end of school is the fulcrum of your life, the point where you go from net consumer to net producer. the other big change is that now, youre steering. you can go anywhere you want. so it may be worth standing back and understanding whats going on, instead of just doing the default thing. all through college, and probably long before that, most undergrads have been thinking about what employers want. but what really matters is what customers want, because theyre the ones who give employers the money to pay you. so instead of thinking about what employers want, youre probably better off thinking directly about what users want. to the extent theres any difference between the two, you can even use that to your advantage if you start a company of your own. for example, big companies like docile conformists. but this is merely an artifact of their bigness, not something customers need. i didnt consciously realize all this when i was graduating from college-- partly because i went straight to grad school. grad school can be a pretty good deal, even if you think of one day starting a startup. you can start one when youre done, or even pull the ripcord part way through, like the founders of yahoo and google. grad school makes a good launch pad for startups, because youre collected together with a lot of smart people, and you have bigger chunks of time to work on your own projects than an undergrad or corporate employee would. as long as you have a fairly tolerant advisor, you can take your time developing an idea before turning it into a company. david filo and jerry yang started the yahoo directory in february 1994 and were getting a million hits a day by the fall, but they didnt actually drop out of grad school and start a company till march 1995. you could also try the startup first, and if it doesnt work, then go to grad school. when startups tank they usually do it fairly quickly. within a year youll know if youre wasting your time. if it fails, that is. if it succeeds, you may have to delay grad school a little longer. but youll have a much more enjoyable life once there than you would on a regular grad student stipend. another reason people in their early twenties dont start startups is that they feel they dont have enough experience. most investors feel the same. i remember hearing a lot of that word "experience" when i was in college. what do people really mean by it? obviously its not the experience itself thats valuable, but something it changes in your brain. whats different about your brain after you have "experience," and can you make that change happen faster? i now have some data on this, and i can tell you what tends to be missing when people lack experience. ive said that every startup needs three things: to start with good people, to make something users want, and not to spend too much money. its the middle one you get wrong when youre inexperienced. there are plenty of undergrads with enough technical skill to write good software, and undergrads are not especially prone to waste money. if they get something wrong, its usually not realizing they have to make something people want . this is not exclusively a failing of the young. its common for startup founders of all ages to build things no one wants. fortunately, this flaw should be easy to fix. if undergrads were all bad programmers, the problem would be a lot harder. it can take years to learn how to program. but i dont think it takes years to learn how to make things people want. my hypothesis is that all you have to do is smack hackers on the side of the head and tell them: wake up. dont sit here making up a priori theories about what users need. go find some users and see what they need. most successful startups not only do something very specific, but solve a problem people already know they have. the big change that "experience" causes in your brain is learning that you need to solve peoples problems. once you grasp that, you advance quickly to the next step, which is figuring out what those problems are. and that takes some effort, because the way software actually gets used, especially by the people who pay the most for it, is not at all what you might expect. for example, the stated purpose of powerpoint is to present ideas. its real role is to overcome peoples fear of public speaking. it allows you to give an impressive-looking talk about nothing, and it causes the audience to sit in a dark room looking at slides, instead of a bright one looking at you. this kind of thing is out there for anyone to see. the key is to know to look for it-- to realize that having an idea for a startup is not like having an idea for a class project. the goal in a startup is not to write a cool piece of software. its to make something people want. and to do that you have to look at users-- forget about hacking, and just look at users. this can be quite a mental adjustment, because little if any of the software you write in school even has users. a few steps before a rubiks cube is solved, it still looks like a mess. i think there are a lot of undergrads whose brains are in a similar position: theyre only a few steps away from being able to start successful startups, if they wanted to, but they dont realize it. they have more than enough technical skill. they just havent realized yet that the way to create wealth is to make what users want, and that employers are just proxies for users in which risk is pooled. if youre young and smart, you dont need either of those. you dont need someone else to tell you what users want, because you can figure it out yourself. and you dont want to pool risk, because the younger you are, the more risk you should take. id like to conclude with a joint message from me and your parents. dont drop out of college to start a startup. theres no rush. there will be plenty of time to start companies after you graduate. in fact, it may be just as well to go work for an existing company for a couple years after you graduate, to learn how companies work. and yet, when i think about it, i cant imagine telling bill gates at 19 that he should wait till he graduated to start a company. hed have told me to get lost. and could i have honestly claimed that he was harming his future-- that he was learning less by working at ground zero of the microcomputer revolution than he would have if hed been taking classes back at harvard? no, probably not. and yes, while it is probably true that youll learn some valuable things by going to work for an existing company for a couple years before starting your own, youd learn a thing or two running your own company during that time too. the advice about going to work for someone else would get an even colder reception from the 19 year old bill gates. so im supposed to finish college, then go work for another company for two years, and then i can start my own? i have to wait till im 23? thats four years . thats more than twenty percent of my life so far. plus in four years it will be way too late to make money writing a basic interpreter for the altair. and hed be right. the apple ii was launched just two years later. in fact, if bill had finished college and gone to work for another company as were suggesting, he might well have gone to work for apple. and while that would probably have been better for all of us, it wouldnt have been better for him. so while i stand by our responsible advice to finish college and then go work for a while before starting a startup, i have to admit its one of those things the old tell the young, but dont expect them to listen to. we say this sort of thing mainly so we can claim we warned you. so dont say i didnt warn you.  the average b-17 pilot in world war ii was in his early twenties. (thanks to tad marko for pointing this out.)  if a company tried to pay employees this way, theyd be called unfair. and yet when they buy some startups and not others, no one thinks of calling that unfair.  the 1/10 success rate for startups is a bit of an urban legend. its suspiciously neat. my guess is the odds are slightly worse. thanks to jessica livingston for reading drafts of this, to the friends i promised anonymity to for their opinions about hiring, and to karen nguyen and the berkeley csua for organizing this talk. this essay was originally published at paulgraham.com "suits make a corporate comeback," says the new york times . why does this sound familiar? maybe because the suit was also back in february , september 2004 , june 2004 , march 2004 , september 2003 , november 2002 , april 2002 , and february 2002 . why do the media keep running stories saying suits are back? because pr firms tell them to. one of the most surprising things i discovered during my brief business career was the existence of the pr industry, lurking like a huge, quiet submarine beneath the news. of the stories you read in traditional media that arent about politics, crimes, or disasters, more than half probably come from pr firms. i know because i spent years hunting such "press hits." our startup spent its entire marketing budget on pr: at a time when we were assembling our own computers to save money, we were paying a pr firm $16,000 a month. and they were worth it. pr is the news equivalent of search engine optimization; instead of buying ads, which readers ignore, you get yourself inserted directly into the stories.  our pr firm was one of the best in the business. in 18 months, they got press hits in over 60 different publications. and we werent the only ones they did great things for. in 1997 i got a call from another startup founder considering hiring them to promote his company. i told him they were pr gods, worth every penny of their outrageous fees. but i remember thinking his companys name was odd. why call an auction site "ebay"? pr is not dishonest. not quite. in fact, the reason the best pr firms are so effective is precisely that they arent dishonest. they give reporters genuinely valuable information. a good pr firm wont bug reporters just because the client tells them to; theyve worked hard to build their credibility with reporters, and they dont want to destroy it by feeding them mere propaganda. if anyone is dishonest, its the reporters. the main reason pr firms exist is that reporters are lazy. or, to put it more nicely, overworked. really they ought to be out there digging up stories for themselves. but its so tempting to sit in their offices and let pr firms bring the stories to them. after all, they know good pr firms wont lie to them. a good flatterer doesnt lie, but tells his victim selective truths (what a nice color your eyes are). good pr firms use the same strategy: they give reporters stories that are true, but whose truth favors their clients. for example, our pr firm often pitched stories about how the web let small merchants compete with big ones. this was perfectly true. but the reason reporters ended up writing stories about this particular truth, rather than some other one, was that small merchants were our target market, and we were paying the piper. different publications vary greatly in their reliance on pr firms. at the bottom of the heap are the trade press, who make most of their money from advertising and would give the magazines away for free if advertisers would let them.  the average trade publication is a bunch of ads, glued together by just enough articles to make it look like a magazine. theyre so desperate for "content" that some will print your press releases almost verbatim, if you take the trouble to write them to read like articles. at the other extreme are publications like the new york times and the wall street journal . their reporters do go out and find their own stories, at least some of the time. theyll listen to pr firms, but briefly and skeptically. we managed to get press hits in almost every publication we wanted, but we never managed to crack the print edition of the times .  the weak point of the top reporters is not laziness, but vanity. you dont pitch stories to them. you have to approach them as if you were a specimen under their all-seeing microscope, and make it seem as if the story you want them to run is something they thought of themselves. our greatest pr coup was a two-part one. we estimated, based on some fairly informal math, that there were about 5000 stores on the web. we got one paper to print this number, which seemed neutral enough. but once this "fact" was out there in print, we could quote it to other publications, and claim that with 1000 users we had 20% of the online store market. this was roughly true. we really did have the biggest share of the online store market, and 5000 was our best guess at its size. but the way the story appeared in the press sounded a lot more definite. reporters like definitive statements. for example, many of the stories about jeremy jayness conviction say that he was one of the 10 worst spammers. this "fact" originated in spamhauss rokso list, which i think even spamhaus would admit is a rough guess at the top spammers. the first stories about jaynes cited this source, but now its simply repeated as if it were part of the indictment.  all you can say with certainty about jaynes is that he was a fairly big spammer. but reporters dont want to print vague stuff like "fairly big." they want statements with punch, like "top ten." and pr firms give them what they want. wearing suits, were told, will make us 3.6 percent more productive. where the work of pr firms really does get deliberately misleading is in the generation of "buzz." they usually feed the same story to several different publications at once. and when readers see similar stories in multiple places, they think there is some important trend afoot. which is exactly what theyre supposed to think. when windows 95 was launched, people waited outside stores at midnight to buy the first copies. none of them would have been there without pr firms, who generated such a buzz in the news media that it became self-reinforcing, like a nuclear chain reaction. i doubt pr firms realize it yet, but the web makes it possible to track them at work. if you search for the obvious phrases, you turn up several efforts over the years to place stories about the return of the suit. for example, the reuters article that got picked up by usa today in september 2004. "the suit is back," it begins. trend articles like this are almost always the work of pr firms. once you know how to read them, its straightforward to figure out who the client is. with trend stories, pr firms usually line up one or more "experts" to talk about the industry generally. in this case we get three: the npd group, the creative director of gq, and a research director at smith barney.  when you get to the end of the experts, look for the client. and bingo, there it is: the mens wearhouse. not surprising, considering the mens wearhouse was at that moment running ads saying "the suit is back." talk about a successful press hit-- a wire service article whose first sentence is your own ad copy. the secret to finding other press hits from a given pitch is to realize that they all started from the same document back at the pr firm. search for a few key phrases and the names of the clients and the experts, and youll turn up other variants of this story. casual fridays are out and dress codes are in writes diane e. lewis in the boston globe . in a remarkable coincidence, ms. lewiss industry contacts also include the creative director of gq. ripped jeans and t-shirts are out, writes mary kathleen flynn in us news & world report . and she too knows the creative director of gq. mens suits are back writes nicole ford in sexbuzz.com ("the ultimate mens entertainment magazine"). dressing down loses appeal as men suit up at the office writes tenisha mercer of the detroit news . now that so many news articles are online, i suspect you could find a similar pattern for most trend stories placed by pr firms. i propose we call this new sport "pr diving," and im sure there are far more striking examples out there than this clump of five stories. after spending years chasing them, its now second nature to me to recognize press hits for what they are. but before we hired a pr firm i had no idea where articles in the mainstream media came from. i could tell a lot of them were crap, but i didnt realize why. remember the exercises in critical reading you did in school, where you had to look at a piece of writing and step back and ask whether the author was telling the whole truth? if you really want to be a critical reader, it turns out you have to step back one step further, and ask not just whether the author is telling the truth, but why hes writing about this subject at all. online, the answer tends to be a lot simpler. most people who publish online write what they write for the simple reason that they want to. you cant see the fingerprints of pr firms all over the articles, as you can in so many print publications-- which is one of the reasons, though they may not consciously realize it, that readers trust bloggers more than business week . i was talking recently to a friend who works for a big newspaper. he thought the print media were in serious trouble, and that they were still mostly in denial about it. "they think the decline is cyclic," he said. "actually its structural." in other words, the readers are leaving, and theyre not coming back. why? i think the main reason is that the writing online is more honest. imagine how incongruous the new york times article about suits would sound if you read it in a blog: the urge to look corporate-- sleek, commanding, prudent, yet with just a touch of hubris on your well-cut sleeve-- is an unexpected development in a time of business disgrace. the problem with this article is not just that it originated in a pr firm. the whole tone is bogus. this is the tone of someone writing down to their audience. whatever its flaws, the writing you find online is authentic. its not mystery meat cooked up out of scraps of pitch letters and press releases, and pressed into molds of zippy journalese. its people writing what they think. i didnt realize, till there was an alternative, just how artificial most of the writing in the mainstream media was. im not saying i used to believe what i read in time and newsweek . since high school, at least, ive thought of magazines like that more as guides to what ordinary people were being told to think than as sources of information. but i didnt realize till the last few years that writing for publication didnt have to mean writing that way. i didnt realize you could write as candidly and informally as you would if you were writing to a friend. readers arent the only ones whove noticed the change. the pr industry has too. a hilarious article on the site of the pr society of america gets to the heart of the matter: bloggers are sensitive about becoming mouthpieces for other organizations and companies, which is the reason they began blogging in the first place. pr people fear bloggers for the same reason readers like them. and that means there may be a struggle ahead. as this new kind of writing draws readers away from traditional media, we should be prepared for whatever pr mutates into to compensate. when i think how hard pr firms work to score press hits in the traditional media, i cant imagine theyll work any less hard to feed stories to bloggers, if they can figure out how.  pr has at least one beneficial feature: it favors small companies. if pr didnt work, the only alternative would be to advertise, and only big companies can afford that.  advertisers pay less for ads in free publications, because they assume readers ignore something they get for free. this is why so many trade publications nominally have a cover price and yet give away free subscriptions with such abandon.  different sections of the times vary so much in their standards that theyre practically different papers. whoever fed the style section reporter this story about suits coming back would have been sent packing by the regular news reporters.  the most striking example i know of this type is the "fact" that the internet worm of 1988 infected 6000 computers. i was there when it was cooked up, and this was the recipe: someone guessed that there were about 60,000 computers attached to the internet, and that the worm might have infected ten percent of them. actually no one knows how many computers the worm infected, because the remedy was to reboot them, and this destroyed all traces. but people like numbers. and so this one is now replicated all over the internet, like a little worm of its own.  not all were necessarily supplied by the pr firm. reporters sometimes call a few additional sources on their own, like someone adding a few fresh vegetables to a can of soup. thanks to ingrid basset, trevor blackwell, sarah harlin, jessica livingston, jackie mcdonough, robert morris, and aaron swartz (who also found the prsa article) for reading drafts of this. correction: earlier versions used a recent business week article mentioning del.icio.us as an example of a press hit, but joshua schachter tells me it was spontaneous. this essay was originally published at paulgraham.com this summer, as an experiment, some friends and i are giving seed funding to a bunch of new startups. its an experiment because were prepared to fund younger founders than most investors would. thats why were doing it during the summer-- so even college students can participate. we know from google and yahoo that grad students can start successful startups. and we know from experience that some undergrads are as capable as most grad students. the accepted age for startup founders has been creeping downward. were trying to find the lower bound. the deadline has now passed, and were sifting through 227 applications. we expected to divide them into two categories, promising and unpromising. but we soon saw we needed a third: promising people with unpromising ideas.  we should have expected this. its very common for a group of founders to go through one lame idea before realizing that a startup has to make something people will pay for. in fact, we ourselves did. viaweb wasnt the first startup robert morris and i started. in january 1995, we and a couple friends started a company called artix. the plan was to put art galleries on the web. in retrospect, i wonder how we could have wasted our time on anything so stupid. galleries are not especially excited about being on the web even now, ten years later. they dont want to have their stock visible to any random visitor, like an antique store.  besides which, art dealers are the most technophobic people on earth. they didnt become art dealers after a difficult choice between that and a career in the hard sciences. most of them had never seen the web before we came to tell them why they should be on it. some didnt even have computers. it doesnt do justice to the situation to describe it as a hard sell ; we soon sank to building sites for free, and it was hard to convince galleries even to do that. gradually it dawned on us that instead of trying to make web sites for people who didnt want them, we could make sites for people who did. in fact, software that would let people who wanted sites make their own. so we ditched artix and started a new company, viaweb, to make software for building online stores. that one succeeded. were in good company here. microsoft was not the first company paul allen and bill gates started either. the first was called traf-o-data. it does not seem to have done as well as micro-soft. in roberts defense, he was skeptical about artix. i dragged him into it.  but there were moments when he was optimistic. and if we, who were 29 and 30 at the time, could get excited about such a thoroughly boneheaded idea, we should not be surprised that hackers aged 21 or 22 are pitching us ideas with little hope of making money. why does this happen? why do good hackers have bad business ideas? lets look at our case. one reason we had such a lame idea was that it was the first thing we thought of. i was in new york trying to be a starving artist at the time (the starving part is actually quite easy), so i was haunting galleries anyway. when i learned about the web, it seemed natural to mix the two. make web sites for galleries-- thats the ticket! if youre going to spend years working on something, youd think it might be wise to spend at least a couple days considering different ideas, instead of going with the first that comes into your head. youd think. but people dont. in fact, this is a constant problem when youre painting still lifes. you plonk down a bunch of stuff on a table, and maybe spend five or ten minutes rearranging it to look interesting. but youre so impatient to get started painting that ten minutes of rearranging feels very long. so you start painting. three days later, having spent twenty hours staring at it, youre kicking yourself for having set up such an awkward and boring composition, but by then its too late. part of the problem is that big projects tend to grow out of small ones. you set up a still life to make a quick sketch when you have a spare hour, and days later youre still working on it. i once spent a month painting three versions of a still life i set up in about four minutes. at each point (a day, a week, a month) i thought id already put in so much time that it was too late to change. so the biggest cause of bad ideas is the still life effect: you come up with a random idea, plunge into it, and then at each point (a day, a week, a month) feel youve put so much time into it that this must be the idea. how do we fix that? i dont think we should discard plunging. plunging into an idea is a good thing. the solution is at the other end: to realize that having invested time in something doesnt make it good. this is clearest in the case of names. viaweb was originally called webgen, but we discovered someone else had a product called that. we were so attached to our name that we offered him 5% of the company if hed let us have it. but he wouldnt, so we had to think of another.  the best we could do was viaweb, which we disliked at first. it was like having a new mother. but within three days we loved it, and webgen sounded lame and old-fashioned. if its hard to change something so simple as a name, imagine how hard it is to garbage-collect an idea. a name only has one point of attachment into your head. an idea for a company gets woven into your thoughts. so you must consciously discount for that. plunge in, by all means, but remember later to look at your idea in the harsh light of morning and ask: is this something people will pay for? is this, of all the things we could make, the thing people will pay most for? the second mistake we made with artix is also very common. putting galleries on the web seemed cool. one of the most valuable things my father taught me is an old yorkshire saying: where theres muck, theres brass. meaning that unpleasant work pays. and more to the point here, vice versa. work people like doesnt pay well, for reasons of supply and demand. the most extreme case is developing programming languages, which doesnt pay at all, because people like it so much they do it for free. when we started artix, i was still ambivalent about business. i wanted to keep one foot in the art world. big, big, mistake. going into business is like a hang-glider launch-- youd better do it wholeheartedly, or not at all. the purpose of a company, and a startup especially, is to make money. you cant have divided loyalties. which is not to say that you have to do the most disgusting sort of work, like spamming, or starting a company whose only purpose is patent litigation. what i mean is, if youre starting a company that will do something cool, the aim had better be to make money and maybe be cool, not to be cool and maybe make money. its hard enough to make money that you cant do it by accident. unless its your first priority, its unlikely to happen at all. when i probe our motives with artix, i see a third mistake: timidity. if youd proposed at the time that we go into the e-commerce business, wed have found the idea terrifying. surely a field like that would be dominated by fearsome startups with five million dollars of vc money each. whereas we felt pretty sure that we could hold our own in the slightly less competitive business of generating web sites for art galleries. we erred ridiculously far on the side of safety. as it turns out, vc-backed startups are not that fearsome. theyre too busy trying to spend all that money to get software written. in 1995, the e-commerce business was very competitive as measured in press releases, but not as measured in software. and really it never was. the big fish like open market (rest their souls) were just consulting companies pretending to be product companies  , and the offerings at our end of the market were a couple hundred lines of perl scripts. or could have been implemented as a couple hundred lines of perl; in fact they were probably tens of thousands of lines of c++ or java. once we actually took the plunge into e-commerce, it turned out to be surprisingly easy to compete. so why were we afraid? we felt we were good at programming, but we lacked confidence in our ability to do a mysterious, undifferentiated thing we called "business." in fact there is no such thing as "business." theres selling, promotion, figuring out what people want, deciding how much to charge, customer support, paying your bills, getting customers to pay you, getting incorporated, raising money, and so on. and the combination is not as hard as it seems, because some tasks (like raising money and getting incorporated) are an o(1) pain in the ass, whether youre big or small, and others (like selling and promotion) depend more on energy and imagination than any kind of special training. artix was like a hyena, content to survive on carrion because we were afraid of the lions. except the lions turned out not to have any teeth, and the business of putting galleries online barely qualified as carrion. sum up all these sources of error, and its no wonder we had such a bad idea for a company. we did the first thing we thought of; we were ambivalent about being in business at all; and we deliberately chose an impoverished market to avoid competition. looking at the applications for the summer founders program, i see signs of all three. but the first is by far the biggest problem. most of the groups applying have not stopped to ask: of all the things we could do, is this the one with the best chance of making money? if theyd already been through their artix phase, theyd have learned to ask that. after the reception we got from art dealers, we were ready to. this time, we thought, lets make something people want. reading the wall street journal for a week should give anyone ideas for two or three new startups. the articles are full of descriptions of problems that need to be solved. but most of the applicants dont seem to have looked far for ideas. we expected the most common proposal to be for multiplayer games. we were not far off: this was the second most common. the most common was some combination of a blog, a calendar, a dating site, and friendster. maybe there is some new killer app to be discovered here, but it seems perverse to go poking around in this fog when there are valuable, unsolved problems lying about in the open for anyone to see. why did no one propose a new scheme for micropayments? an ambitious project, perhaps, but i cant believe weve considered every alternative. and newspapers and magazines are (literally) dying for a solution. why did so few applicants really think about what customers want? i think the problem with many, as with people in their early twenties generally, is that theyve been trained their whole lives to jump through predefined hoops. theyve spent 15-20 years solving problems other people have set for them. and how much time deciding what problems would be good to solve? two or three course projects? theyre good at solving problems, but bad at choosing them. but that, im convinced, is just the effect of training. or more precisely, the effect of grading. to make grading efficient, everyone has to solve the same problem, and that means it has to be decided in advance. it would be great if schools taught students how to choose problems as well as how to solve them, but i dont know how youd run such a class in practice. the good news is, choosing problems is something that can be learned. i know that from experience. hackers can learn to make things customers want.  this is a controversial view. one expert on "entrepreneurship" told me that any startup had to include business people, because only they could focus on what customers wanted. ill probably alienate this guy forever by quoting him, but i have to risk it, because his email was such a perfect example of this view: 80% of mit spinoffs succeed provided they have at least one management person in the team at the start. the business person represents the "voice of the customer" and thats what keeps the engineers and product development on track. this is, in my opinion, a crock. hackers are perfectly capable of hearing the voice of the customer without a business person to amplify the signal for them. larry page and sergey brin were grad students in computer science, which presumably makes them "engineers." do you suppose google is only good because they had some business guy whispering in their ears what customers wanted? it seems to me the business guys who did the most for google were the ones who obligingly flew altavista into a hillside just as google was getting started. the hard part about figuring out what customers want is figuring out that you need to figure it out. but thats something you can learn quickly. its like seeing the other interpretation of an ambiguous picture. as soon as someone tells you theres a rabbit as well as a duck, its hard not to see it. and compared to the sort of problems hackers are used to solving, giving customers what they want is easy. anyone who can write an optimizing compiler can design a ui that doesnt confuse users, once they choose to focus on that problem. and once you apply that kind of brain power to petty but profitable questions, you can create wealth very rapidly. thats the essence of a startup: having brilliant people do work thats beneath them. big companies try to hire the right person for the job. startups win because they dont-- because they take people so smart that they would in a big company be doing "research," and set them to work instead on problems of the most immediate and mundane sort. think einstein designing refrigerators.  if you want to learn what people want, read dale carnegies how to win friends and influence people.  when a friend recommended this book, i couldnt believe he was serious. but he insisted it was good, so i read it, and he was right. it deals with the most difficult problem in human experience: how to see things from other peoples point of view, instead of thinking only of yourself. most smart people dont do that very well. but adding this ability to raw brainpower is like adding tin to copper. the result is bronze, which is so much harder that it seems a different metal. a hacker who has learned what to make, and not just how to make, is extraordinarily powerful. and not just at making money: look what a small group of volunteers has achieved with firefox. doing an artix teaches you to make something people want in the same way that not drinking anything would teach you how much you depend on water. but it would be more convenient for all involved if the summer founders didnt learn this on our dime-- if they could skip the artix phase and go right on to make something customers wanted. that, i think, is going to be the real experiment this summer. how long will it take them to grasp this? we decided we ought to have t-shirts for the sfp, and wed been thinking about what to print on the back. till now wed been planning to use if you can read this, i should be working. but now weve decided its going to be make something people want.  sfp applicants: please dont assume that not being accepted means we think your idea is bad. because we want to keep the number of startups small this first summer, were going to have to turn down some good proposals too.  dealers try to give each customer the impression that the stuff theyre showing him is something special that only a few people have seen, when in fact it may have been sitting in their racks for years while they tried to unload it on buyer after buyer.  on the other hand, he was skeptical about viaweb too. i have a precise measure of that, because at one point in the first couple months we made a bet: if he ever made a million dollars out of viaweb, hed get his ear pierced. we didnt let him off , either.  i wrote a program to generate all the combinations of "web" plus a three letter word. i learned from this that most three letter words are bad: webpig, webdog, webfat, webzit, webfug. but one of them was webvia; i swapped them to make viaweb.  its much easier to sell services than a product, just as its easier to make a living playing at weddings than by selling recordings. but the margins are greater on products. so during the bubble a lot of companies used consulting to generate revenues they could attribute to the sale of products, because it made a better story for an ipo.  trevor blackwell presents the following recipe for a startup: "watch people who have money to spend, see what theyre wasting their time on, cook up a solution, and try selling it to them. its surprising how small a problem can be and still provide a profitable market for a solution."  you need to offer especially large rewards to get great people to do tedious work. thats why startups always pay equity rather than just salary.  buy an old copy from the 1940s or 50s instead of the current edition, which has been rewritten to suit present fashions. the original edition contained a few unpc ideas, but its always better to read an original book, bearing in mind that its a book from a past era, than to read a new version sanitized for your protection. thanks to bill birch, trevor blackwell, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com all the best hackers i know are gradually switching to macs. my friend robert said his whole research group at mit recently bought themselves powerbooks. these guys are not the graphic designers and grandmas who were buying macs at apples low point in the mid 1990s. theyre about as hardcore os hackers as you can get. the reason, of course, is os x. powerbooks are beautifully designed and run freebsd. what more do you need to know? i got a powerbook at the end of last year. when my ibm thinkpads hard disk died soon after, it became my only laptop. and when my friend trevor showed up at my house recently, he was carrying a powerbook identical to mine. for most of us, its not a switch to apple, but a return. hard as this was to believe in the mid 90s, the mac was in its time the canonical hackers computer. in the fall of 1983, the professor in one of my college cs classes got up and announced, like a prophet, that there would soon be a computer with half a mips of processing power that would fit under an airline seat and cost so little that we could save enough to buy one from a summer job. the whole room gasped. and when the mac appeared, it was even better than wed hoped. it was small and powerful and cheap, as promised. but it was also something wed never considered a computer could be: fabulously well designed . i had to have one. and i wasnt alone. in the mid to late 1980s, all the hackers i knew were either writing software for the mac, or wanted to. every futon sofa in cambridge seemed to have the same fat white book lying open on it. if you turned it over, it said "inside macintosh." then came linux and freebsd, and hackers, who follow the most powerful os wherever it leads, found themselves switching to intel boxes. if you cared about design, you could buy a thinkpad, which was at least not actively repellent, if you could get the intel and microsoft stickers off the front.  with os x, the hackers are back. when i walked into the apple store in cambridge, it was like coming home. much was changed, but there was still that apple coolness in the air, that feeling that the show was being run by someone who really cared, instead of random corporate deal-makers. so what, the business world may say. who cares if hackers like apple again? how big is the hacker market, after all? quite small, but important out of proportion to its size. when it comes to computers, what hackers are doing now, everyone will be doing in ten years. almost all technology, from unix to bitmapped displays to the web, became popular first within cs departments and research labs, and gradually spread to the rest of the world. i remember telling my father back in 1986 that there was a new kind of computer called a sun that was a serious unix machine, but so small and cheap that you could have one of your own to sit in front of, instead of sitting in front of a vt100 connected to a single central vax. maybe, i suggested, he should buy some stock in this company. i think he really wishes hed listened. in 1994 my friend koling wanted to talk to his girlfriend in taiwan, and to save long-distance bills he wrote some software that would convert sound to data packets that could be sent over the internet. we werent sure at the time whether this was a proper use of the internet, which was still then a quasi-government entity. what he was doing is now called voip, and it is a huge and rapidly growing business. if you want to know what ordinary people will be doing with computers in ten years, just walk around the cs department at a good university. whatever theyre doing, youll be doing. in the matter of "platforms" this tendency is even more pronounced, because novel software originates with great hackers , and they tend to write it first for whatever computer they personally use. and software sells hardware. many if not most of the initial sales of the apple ii came from people who bought one to run visicalc. and why did bricklin and frankston write visicalc for the apple ii? because they personally liked it. they could have chosen any machine to make into a star. if you want to attract hackers to write software that will sell your hardware, you have to make it something that they themselves use. its not enough to make it "open." it has to be open and good. and open and good is what macs are again, finally. the intervening years have created a situation that is, as far as i know, without precedent: apple is popular at the low end and the high end, but not in the middle. my seventy year old mother has a mac laptop. my friends with phds in computer science have mac laptops.  and yet apples overall market share is still small. though unprecedented, i predict this situation is also temporary. so dad, theres this company called apple. they make a new kind of computer thats as well designed as a bang & olufsen stereo system, and underneath is the best unix machine you can buy. yes, the price to earnings ratio is kind of high, but i think a lot of people are going to want these.  these horrible stickers are much like the intrusive ads popular on pre-google search engines. they say to the customer: you are unimportant. we care about intel and microsoft, not you.  y combinator is (we hope) visited mostly by hackers. the proportions of oses are: windows 66.4%, macintosh 18.8%, linux 11.4%, and freebsd 1.5%. the mac number is a big change from what it would have been five years ago. this essay was originally published at paulgraham.com (in the process of answering an email, i accidentally wrote a tiny essay about writing. i usually spend weeks on an essay. this one took 67 minutes23 of writing, and 44 of rewriting.) i think its far more important to write well than most people realize. writing doesnt just communicate ideas; it generates them. if youre bad at writing and dont like to do it, youll miss out on most of the ideas writing would have generated. as for how to write well, heres the short version: write a bad version 1 as fast as you can; rewrite it over and over; cut out everything unnecessary; write in a conversational tone; develop a nose for bad writing, so you can see and fix it in yours; imitate writers you like; if you cant get started, tell someone what you plan to write about, then write down what you said; expect 80% of the ideas in an essay to happen after you start writing it, and 50% of those you start with to be wrong; be confident enough to cut; have friends you trust read your stuff and tell you which bits are confusing or drag; dont (always) make detailed outlines; mull ideas over for a few days before writing; carry a small notebook or scrap paper with you; start writing when you think of the first sentence; if a deadline forces you to start before that, just say the most important sentence first; write about stuff you like; dont try to sound impressive; dont hesitate to change the topic on the fly; use footnotes to contain digressions; use anaphora to knit sentences together; read your essays out loud to see (a) where you stumble over awkward phrases and (b) which bits are boring (the paragraphs you dread reading); try to tell the reader something new and useful; work in fairly big quanta of time; when you restart, begin by rereading what you have so far; when you finish, leave yourself something easy to start with; accumulate notes for topics you plan to cover at the bottom of the file; dont feel obliged to cover any of them; write for a reader who wont read the essay as carefully as you do, just as pop songs are designed to sound ok on crappy car radios; if you say anything mistaken, fix it immediately; ask friends which sentence youll regret most; go back and tone down harsh remarks; publish stuff online, because an audience makes you write more, and thus generate more ideas; print out drafts instead of just looking at them on the screen; use simple, germanic words; learn to distinguish surprises from digressions; learn to recognize the approach of an ending, and when one appears, grab it. this essay was originally published at paulgraham.com (parts of this essay began as replies to students who wrote to me with questions.) recently ive had several emails from computer science undergrads asking what to do in college. i might not be the best source of advice, because i was a philosophy major in college. but i took so many cs classes that most cs majors thought i was one. i was certainly a hacker, at least. what should you do in college to become a good hacker ? there are two main things you can do: become very good at programming, and learn a lot about specific, cool problems. these turn out to be equivalent, because each drives you to do the other. the way to be good at programming is to work (a) a lot (b) on hard problems. and the way to make yourself work on hard problems is to work on some very engaging project. odds are this project wont be a class assignment. my friend robert learned a lot by writing network software when he was an undergrad. one of his projects was to connect harvard to the arpanet; it had been one of the original nodes, but by 1984 the connection had died.  not only was this work not for a class, but because he spent all his time on it and neglected his studies, he was kicked out of school for a year.  it all evened out in the end, and now hes a professor at mit. but youll probably be happier if you dont go to that extreme; it caused him a lot of worry at the time. another way to be good at programming is to find other people who are good at it, and learn what they know. programmers tend to sort themselves into tribes according to the type of work they do and the tools they use, and some tribes are smarter than others. look around you and see what the smart people seem to be working on; theres usually a reason. some of the smartest people around you are professors. so one way to find interesting work is to volunteer as a research assistant. professors are especially interested in people who can solve tedious system-administration type problems for them, so that is a way to get a foot in the door. what they fear are flakes and resume padders. its all too common for an assistant to result in a net increase in work. so you have to make it clear youll mean a net decrease. dont be put off if they say no. rejection is almost always less personal than the rejectee imagines. just move on to the next. (this applies to dating too.) beware, because although most professors are smart, not all of them work on interesting stuff. professors have to publish novel results to advance their careers, but there is more competition in more interesting areas of research. so what less ambitious professors do is turn out a series of papers whose conclusions are novel because no one else cares about them. youre better off avoiding these. i never worked as a research assistant, so i feel a bit dishonest recommending that route. i learned to program by writing stuff of my own, particularly by trying to reverse-engineer winograds shrdlu. i was as obsessed with that program as a mother with a new baby. whatever the disadvantages of working by yourself, the advantage is that the project is all your own. you never have to compromise or ask anyones permission, and if you have a new idea you can just sit down and start implementing it. in your own projects you dont have to worry about novelty (as professors do) or profitability (as businesses do). all that matters is how hard the project is technically, and that has no correlation to the nature of the application. "serious" applications like databases are often trivial and dull technically (if you ever suffer from insomnia, try reading the technical literature about databases) while "frivolous" applications like games are often very sophisticated. im sure there are game companies out there working on products with more intellectual content than the research at the bottom nine tenths of university cs departments. if i were in college now id probably work on graphics: a network game, for example, or a tool for 3d animation. when i was an undergrad there werent enough cycles around to make graphics interesting, but its hard to imagine anything more fun to work on now. when i was in college, a lot of the professors believed (or at least wished) that computer science was a branch of math. this idea was strongest at harvard, where there wasnt even a cs major till the 1980s; till then one had to major in applied math. but it was nearly as bad at cornell. when i told the fearsome professor conway that i was interested in ai (a hot topic then), he told me i should major in math. im still not sure whether he thought ai required math, or whether he thought ai was nonsense and that majoring in something rigorous would cure me of such stupid ambitions. in fact, the amount of math you need as a hacker is a lot less than most university departments like to admit. i dont think you need much more than high school math plus a few concepts from the theory of computation. (you have to know what an n2 algorithm is if you want to avoid writing them.) unless youre planning to write math applications, of course. robotics, for example, is all math. but while you dont literally need math for most kinds of hacking, in the sense of knowing 1001 tricks for differentiating formulas, math is very much worth studying for its own sake. its a valuable source of metaphors for almost any kind of work. i wish id studied more math in college for that reason. like a lot of people, i was mathematically abused as a child. i learned to think of math as a collection of formulas that were neither beautiful nor had any relation to my life (despite attempts to translate them into "word problems"), but had to be memorized in order to do well on tests. one of the most valuable things you could do in college would be to learn what math is really about. this may not be easy, because a lot of good mathematicians are bad teachers. and while there are many popular books on math, few seem good. the best i can think of are w. w. sawyers. and of course euclid.  thomas huxley said "try to learn something about everything and everything about something." most universities aim at this ideal. but whats everything? to me it means, all that people learn in the course of working honestly on hard problems. all such work tends to be related, in that ideas and techniques from one field can often be transplanted successfully to others. even others that seem quite distant. for example, i write essays the same way i write software: i sit down and blow out a lame version 1 as fast as i can type, then spend several weeks rewriting it. working on hard problems is not, by itself, enough. medieval alchemists were working on a hard problem, but their approach was so bogus that there was little to learn from studying it, except possibly about peoples ability to delude themselves. unfortunately the sort of ai i was trying to learn in college had the same flaw: a very hard problem, blithely approached with hopelessly inadequate techniques. bold? closer to fraudulent. the social sciences are also fairly bogus, because theyre so much influenced by intellectual fashions . if a physicist met a colleague from 100 years ago, he could teach him some new things; if a psychologist met a colleague from 100 years ago, theyd just get into an ideological argument. yes, of course, youll learn something by taking a psychology class. the point is, youll learn more by taking a class in another department. the worthwhile departments, in my opinion, are math, the hard sciences, engineering, history (especially economic and social history, and the history of science), architecture, and the classics. a survey course in art history may be worthwhile. modern literature is important, but the way to learn about it is just to read. i dont know enough about music to say. you can skip the social sciences, philosophy, and the various departments created recently in response to political pressures. many of these fields talk about important problems, certainly. but the way they talk about them is useless. for example, philosophy talks, among other things, about our obligations to one another; but you can learn more about this from a wise grandmother or e. b. white than from an academic philosopher. i speak here from experience. i should probably have been offended when people laughed at clinton for saying "it depends on what the meaning of the word is is." i took about five classes in college on what the meaning of "is" is. another way to figure out which fields are worth studying is to create the dropout graph. for example, i know many people who switched from math to computer science because they found math too hard, and no one who did the opposite. people dont do hard things gratuitously; no one will work on a harder problem unless it is proportionately (or at least log(n)) more rewarding. so probably math is more worth studying than computer science. by similar comparisons you can make a graph of all the departments in a university. at the bottom youll find the subjects with least intellectual content. if you use this method, youll get roughly the same answer i just gave. language courses are an anomaly. i think theyre better considered as extracurricular activities, like pottery classes. theyd be far more useful when combined with some time living in a country where the language is spoken. on a whim i studied arabic as a freshman. it was a lot of work, and the only lasting benefits were a weird ability to identify semitic roots and some insights into how people recognize words. studio art and creative writing courses are wildcards. usually you dont get taught much: you just work (or dont work) on whatever you want, and then sit around offering "crits" of one anothers creations under the vague supervision of the teacher. but writing and art are both very hard problems that (some) people work honestly at, so theyre worth doing, especially if you can find a good teacher. of course college students have to think about more than just learning. there are also two practical problems to consider: jobs, and graduate school. in theory a liberal education is not supposed to supply job training. but everyone knows this is a bit of a fib. hackers at every college learn practical skills, and not by accident. what you should learn to get a job depends on the kind you want. if you want to work in a big company, learn how to hack blub on windows. if you want to work at a cool little company or research lab, youll do better to learn ruby on linux. and if you want to start your own company, which i think will be more and more common, master the most powerful tools you can find, because youre going to be in a race against your competitors, and theyll be your horse. there is not a direct correlation between the skills you should learn in college and those youll use in a job. you should aim slightly high in college. in workouts a football player may bench press 300 pounds, even though he may never have to exert anything like that much force in the course of a game. likewise, if your professors try to make you learn stuff thats more advanced than youll need in a job, it may not just be because theyre academics, detached from the real world. they may be trying to make you lift weights with your brain. the programs you write in classes differ in three critical ways from the ones youll write in the real world: theyre small; you get to start from scratch; and the problem is usually artificial and predetermined. in the real world, programs are bigger, tend to involve existing code, and often require you to figure out what the problem is before you can solve it. you dont have to wait to leave (or even enter) college to learn these skills. if you want to learn how to deal with existing code, for example, you can contribute to open-source projects. the sort of employer you want to work for will be as impressed by that as good grades on class assignments. in existing open-source projects you dont get much practice at the third skill, deciding what problems to solve. but theres nothing to stop you starting new projects of your own. and good employers will be even more impressed with that. what sort of problem should you try to solve? one way to answer that is to ask what you need as a user. for example, i stumbled on a good algorithm for spam filtering because i wanted to stop getting spam. now what i wish i had was a mail reader that somehow prevented my inbox from filling up. i tend to use my inbox as a todo list. but thats like using a screwdriver to open bottles; what one really wants is a bottle opener. what about grad school? should you go? and how do you get into a good one? in principle, grad school is professional training in research, and you shouldnt go unless you want to do research as a career. and yet half the people who get phds in cs dont go into research. i didnt go to grad school to become a professor. i went because i wanted to learn more. so if youre mainly interested in hacking and you go to grad school, youll find a lot of other people who are similarly out of their element. and if half the people around you are out of their element in the same way you are, are you really out of your element? theres a fundamental problem in "computer science," and it surfaces in situations like this. no one is sure what "research" is supposed to be. a lot of research is hacking that had to be crammed into the form of an academic paper to yield one more quantum of publication. so its kind of misleading to ask whether youll be at home in grad school, because very few people are quite at home in computer science. the whole field is uncomfortable in its own skin. so the fact that youre mainly interested in hacking shouldnt deter you from going to grad school. just be warned youll have to do a lot of stuff you dont like. number one will be your dissertation. almost everyone hates their dissertation by the time theyre done with it. the process inherently tends to produce an unpleasant result, like a cake made out of whole wheat flour and baked for twelve hours. few dissertations are read with pleasure, especially by their authors. but thousands before you have suffered through writing a dissertation. and aside from that, grad school is close to paradise. many people remember it as the happiest time of their lives. and nearly all the rest, including me, remember it as a period that would have been, if they hadnt had to write a dissertation.  the danger with grad school is that you dont see the scary part upfront. phd programs start out as college part 2, with several years of classes. so by the time you face the horror of writing a dissertation, youre already several years in. if you quit now, youll be a grad-school dropout, and you probably wont like that idea. when robert got kicked out of grad school for writing the internet worm of 1988, i envied him enormously for finding a way out without the stigma of failure. on the whole, grad school is probably better than most alternatives. you meet a lot of smart people, and your glum procrastination will at least be a powerful common bond. and of course you have a phd at the end. i forgot about that. i suppose thats worth something. the greatest advantage of a phd (besides being the union card of academia, of course) may be that it gives you some baseline confidence. for example, the honeywell thermostats in my house have the most atrocious ui. my mother, who has the same model, diligently spent a day reading the users manual to learn how to operate hers. she assumed the problem was with her. but i can think to myself "if someone with a phd in computer science cant understand this thermostat, it must be badly designed." if you still want to go to grad school after this equivocal recommendation, i can give you solid advice about how to get in. a lot of my friends are cs professors now, so i have the inside story about admissions. its quite different from college. at most colleges, admissions officers decide who gets in. for phd programs, the professors do. and they try to do it well, because the people they admit are going to be working for them. apparently only recommendations really matter at the best schools. standardized tests count for nothing, and grades for little. the essay is mostly an opportunity to disqualify yourself by saying something stupid. the only thing professors trust is recommendations, preferably from people they know.  so if you want to get into a phd program, the key is to impress your professors. and from my friends who are professors i know what impresses them: not merely trying to impress them. theyre not impressed by students who get good grades or want to be their research assistants so they can get into grad school. theyre impressed by students who get good grades and want to be their research assistants because theyre genuinely interested in the topic. so the best thing you can do in college, whether you want to get into grad school or just be good at hacking, is figure out what you truly like. its hard to trick professors into letting you into grad school, and impossible to trick problems into letting you solve them. college is where faking stops working. from this point, unless you want to go work for a big company, which is like reverting to high school, the only way forward is through doing what you love .  no one seems to have minded, which shows how unimportant the arpanet (which became the internet) was as late as 1984.  this is why, when i became an employer, i didnt care about gpas. in fact, we actively sought out people whod failed out of school. we once put up posters around harvard saying "did you just get kicked out for doing badly in your classes because you spent all your time working on some project of your own? come work for us!" we managed to find a kid who had been, and he was a great hacker. when harvard kicks undergrads out for a year, they have to get jobs. the idea is to show them how awful the real world is, so theyll understand how lucky they are to be in college. this plan backfired with the guy who came to work for us, because he had more fun than hed had in school, and made more that year from stock options than any of his professors did in salary. so instead of crawling back repentant at the end of the year, he took another year off and went to europe. he did eventually graduate at about 26.  eric raymond says the best metaphors for hackers are in set theory, combinatorics, and graph theory. trevor blackwell reminds you to take math classes intended for math majors. "math for engineers classes sucked mightily. in fact any x for engineers sucks, where x includes math, law, writing and visual design."  other highly recommended books: what is mathematics? , by courant and robbins; geometry and the imagination by hilbert and cohn-vossen. and for those interested in graphic design, byrnes euclid .  if you wanted to have the perfect life, the thing to do would be to go to grad school, secretly write your dissertation in the first year or two, and then just enjoy yourself for the next three years, dribbling out a chapter at a time. this prospect will make grad students mouths water, but i know of no one whos had the discipline to pull it off.  one professor friend says that 15-20% of the grad students they admit each year are "long shots." but what he means by long shots are people whose applications are perfect in every way, except that no one on the admissions committee knows the professors who wrote the recommendations. so if you want to get into grad school in the sciences, you need to go to college somewhere with real research professors. otherwise youll seem a risky bet to admissions committees, no matter how good you are. which implies a surprising but apparently inevitable consequence: little liberal arts colleges are doomed. most smart high school kids at least consider going into the sciences, even if they ultimately choose not to. why go to a college that limits their options? thanks to trevor blackwell, alex lewin, jessica livingston, robert morris, eric raymond, and several anonymous cs professors for reading drafts of this, and to the students whose questions began it. this essay was originally published at paulgraham.com a couple months ago i got an email from a recruiter asking if i was interested in being a "technologist in residence" at a new venture capital fund. i think the idea was to play karl rove to the vcs george bush. i considered it for about four seconds. work for a vc fund? ick. one of my most vivid memories from our startup is going to visit greylock, the famous boston vcs. they were the most arrogant people ive met in my life. and ive met a lot of arrogant people.  im not alone in feeling this way, of course. even a vc friend of mine dislikes vcs. "assholes," he says. but lately ive been learning more about how the vc world works, and a few days ago it hit me that theres a reason vcs are the way they are. its not so much that the business attracts jerks, or even that the power they wield corrupts them. the real problem is the way theyre paid. the problem with vc funds is that theyre funds . like the managers of mutual funds or hedge funds, vcs get paid a percentage of the money they manage: about 2% a year in management fees, plus a percentage of the gains. so they want the fund to be huge-- hundreds of millions of dollars, if possible. but that means each partner ends up being responsible for investing a lot of money. and since one person can only manage so many deals, each deal has to be for multiple millions of dollars. this turns out to explain nearly all the characteristics of vcs that founders hate. it explains why vcs take so agonizingly long to make up their minds, and why their due diligence feels like a body cavity search.  with so much at stake, they have to be paranoid. it explains why they steal your ideas. every founder knows that vcs will tell your secrets to your competitors if they end up investing in them. its not unheard of for vcs to meet you when they have no intention of funding you, just to pick your brain for a competitor. this prospect makes naive founders clumsily secretive. experienced founders treat it as a cost of doing business. either way it sucks. but again, the only reason vcs are so sneaky is the giant deals they do. with so much at stake, they have to be devious. it explains why vcs tend to interfere in the companies they invest in. they want to be on your board not just so that they can advise you, but so that they can watch you. often they even install a new ceo. yes, he may have extensive business experience. but hes also their man: these newly installed ceos always play something of the role of a political commissar in a red army unit. with so much at stake, vcs cant resist micromanaging you. the huge investments themselves are something founders would dislike, if they realized how damaging they can be. vcs dont invest $x million because thats the amount you need, but because thats the amount the structure of their business requires them to invest. like steroids, these sudden huge investments can do more harm than good. google survived enormous vc funding because it could legitimately absorb large amounts of money. they had to buy a lot of servers and a lot of bandwidth to crawl the whole web. less fortunate startups just end up hiring armies of people to sit around having meetings. in principle you could take a huge vc investment, put it in treasury bills, and continue to operate frugally. you just try it. and of course giant investments mean giant valuations. they have to, or theres not enough stock left to keep the founders interested. you might think a high valuation is a great thing. many founders do. but you cant eat paper. you cant benefit from a high valuation unless you can somehow achieve what those in the business call a "liquidity event," and the higher your valuation, the narrower your options for doing that. many a founder would be happy to sell his company for $15 million, but vcs whove just invested at a pre-money valuation of $8 million wont hear of that. youre rolling the dice again, whether you like it or not. back in 1997, one of our competitors raised $20 million in a single round of vc funding. this was at the time more than the valuation of our entire company. was i worried? not at all: i was delighted. it was like watching a car youre chasing turn down a street that you know has no outlet. their smartest move at that point would have been to take every penny of the $20 million and use it to buy us. we would have sold. their investors would have been furious of course. but i think the main reason they never considered this was that they never imagined we could be had so cheap. they probably assumed we were on the same vc gravy train they were. in fact we only spent about $2 million in our entire existence. and that gave us flexibility. we could sell ourselves to yahoo for $50 million, and everyone was delighted. if our competitor had done that, the last round of investors would presumably have lost money. i assume they could have vetoed such a deal. but no one those days was paying a lot more than yahoo. so unless their founders could pull off an ipo (which would be difficult with yahoo as a competitor), they had no choice but to ride the thing down. the puffed-up companies that went public during the bubble didnt do it just because they were pulled into it by unscrupulous investment bankers. most were pushed just as hard from the other side by vcs whod invested at high valuations, leaving an ipo as the only way out. the only people dumber were retail investors. so it was literally ipo or bust. or rather, ipo then bust, or just bust. add up all the evidence of vcs behavior, and the resulting personality is not attractive. in fact, its the classic villain: alternately cowardly, greedy, sneaky, and overbearing. i used to take it for granted that vcs were like this. complaining that vcs were jerks used to seem as naive to me as complaining that users didnt read the reference manual. of course vcs were jerks. how could it be otherwise? but i realize now that theyre not intrinsically jerks. vcs are like car salesmen or bureaucrats: the nature of their work turns them into jerks. ive met a few vcs i like. mike moritz seems a good guy. he even has a sense of humor, which is almost unheard of among vcs. from what ive read about john doerr, he sounds like a good guy too, almost a hacker. but they work for the very best vc funds. and my theory explains why theyd tend to be different: just as the very most popular kids dont have to persecute nerds , the very best vcs dont have to act like vcs. they get the pick of all the best deals. so they dont have to be so paranoid and sneaky, and they can choose those rare companies, like google, that will actually benefit from the giant sums theyre compelled to invest. vcs often complain that in their business theres too much money chasing too few deals. few realize that this also describes a flaw in the way funding works at the level of individual firms. perhaps this was the sort of strategic insight i was supposed to come up with as a "technologist in residence." if so, the good news is that theyre getting it for free. the bad news is it means that if youre not one of the very top funds, youre condemned to be the bad guys.  after greylock booted founder philip greenspun out of arsdigita, he wrote a hilarious but also very informative essay about it.  since most vcs arent tech guys, the technology side of their due diligence tends to be like a body cavity search by someone with a faulty knowledge of human anatomy. after a while we were quite sore from vcs attempting to probe our nonexistent database orifice. no, we dont use oracle. we just store the data in files. our secret is to use an os that doesnt lose our data. which os? freebsd. why do you use that instead of windows nt? because its better and it doesnt cost anything. what, youre using a freeware os? how many times that conversation was repeated. then when we got to yahoo, we found they used freebsd and stored their data in files too. this essay was originally published at paulgraham.com if you look at a list of us cities sorted by population, the number of successful startups per capita varies by orders of magnitude. somehow its as if most places were sprayed with startupicide. i wondered about this for years. i could see the average town was like a roach motel for startup ambitions: smart, ambitious people went in, but no startups came out. but i was never able to figure out exactly what happened inside the motelexactly what was killing all the potential startups.  a couple weeks ago i finally figured it out. i was framing the question wrong. the problem is not that most towns kill startups. its that death is the default for startups, and most towns dont save them. instead of thinking of most places as being sprayed with startupicide, its more accurate to think of startups as all being poisoned, and a few places being sprayed with the antidote. startups in other places are just doing what startups naturally do: fail. the real question is, whats saving startups in places like silicon valley?  i think there are two components to the antidote: being in a place where startups are the cool thing to do, and chance meetings with people who can help you. and what drives them both is the number of startup people around you. the first component is particularly helpful in the first stage of a startups life, when you go from merely having an interest in starting a company to actually doing it. its quite a leap to start a startup. its an unusual thing to do. but in silicon valley it seems normal.  in most places, if you start a startup, people treat you as if youre unemployed. people in the valley arent automatically impressed with you just because youre starting a company, but they pay attention. anyone whos been here any amount of time knows not to default to skepticism, no matter how inexperienced you seem or how unpromising your idea sounds at first, because theyve all seen inexperienced founders with unpromising sounding ideas who a few years later were billionaires. having people around you care about what youre doing is an extraordinarily powerful force. even the most willful people are susceptible to it. about a year after we started y combinator i said something to a partner at a well known vc firm that gave him the (mistaken) impression i was considering starting another startup. he responded so eagerly that for about half a second i found myself considering doing it. in most other cities, the prospect of starting a startup just doesnt seem real. in the valley its not only real but fashionable. that no doubt causes a lot of people to start startups who shouldnt. but i think thats ok. few people are suited to running a startup, and its very hard to predict beforehand which are (as i know all too well from being in the business of trying to predict beforehand), so lots of people starting startups who shouldnt is probably the optimal state of affairs. as long as youre at a point in your life when you can bear the risk of failure, the best way to find out if youre suited to running a startup is to try it . the second component of the antidote is chance meetings with people who can help you. this force works in both phases: both in the transition from the desire to start a startup to starting one, and the transition from starting a company to succeeding. the power of chance meetings is more variable than people around you caring about startups, which is like a sort of background radiation that affects everyone equally, but at its strongest it is far stronger. chance meetings produce miracles to compensate for the disasters that characteristically befall startups. in the valley, terrible things happen to startups all the time, just like they do to startups everywhere. the reason startups are more likely to make it here is that great things happen to them too. in the valley, lightning has a sign bit. for example, you start a site for college students and you decide to move to the valley for the summer to work on it. and then on a random suburban street in palo alto you happen to run into sean parker, who understands the domain really well because he started a similar startup himself, and also knows all the investors. and moreover has advanced views, for 2004, on founders retaining control of their companies. you cant say precisely what the miracle will be, or even for sure that one will happen. the best one can say is: if youre in a startup hub, unexpected good things will probably happen to you, especially if you deserve them. i bet this is true even for startups we fund. even with us working to make things happen for them on purpose rather than by accident, the frequency of helpful chance meetings in the valley is so high that its still a significant increment on what we can deliver. chance meetings play a role like the role relaxation plays in having ideas. most people have had the experience of working hard on some problem, not being able to solve it, giving up and going to bed, and then thinking of the answer in the shower in the morning. what makes the answer appear is letting your thoughts drift a bitand thus drift off the wrong path youd been pursuing last night and onto the right one adjacent to it. chance meetings let your acquaintance drift in the same way taking a shower lets your thoughts drift. the critical thing in both cases is that they drift just the right amount. the meeting between larry page and sergey brin was a good example. they let their acquaintance drift, but only a little; they were both meeting someone they had a lot in common with. for larry page the most important component of the antidote was sergey brin, and vice versa. the antidote is people . its not the physical infrastructure of silicon valley that makes it work, or the weather, or anything like that. those helped get it started, but now that the reaction is self-sustaining what drives it is the people. many observers have noticed that one of the most distinctive things about startup hubs is the degree to which people help one another out, with no expectation of getting anything in return. im not sure why this is so. perhaps its because startups are less of a zero sum game than most types of business; they are rarely killed by competitors. or perhaps its because so many startup founders have backgrounds in the sciences, where collaboration is encouraged. a large part of ycs function is to accelerate that process. were a sort of valley within the valley, where the density of people working on startups and their willingness to help one another are both artificially amplified. both components of the antidotean environment that encourages startups, and chance meetings with people who help youare driven by the same underlying cause: the number of startup people around you. to make a startup hub, you need a lot of people interested in startups. there are three reasons. the first, obviously, is that if you dont have enough density, the chance meetings dont happen.  the second is that different startups need such different things, so you need a lot of people to supply each startup with what they need most. sean parker was exactly what facebook needed in 2004. another startup might have needed a database guy, or someone with connections in the movie business. this is one of the reasons we fund such a large number of companies, incidentally. the bigger the community, the greater the chance it will contain the person who has that one thing you need most. the third reason you need a lot of people to make a startup hub is that once you have enough people interested in the same problem, they start to set the social norms. and it is a particularly valuable thing when the atmosphere around you encourages you to do something that would otherwise seem too ambitious. in most places the atmosphere pulls you back toward the mean. i flew into the bay area a few days ago. i notice this every time i fly over the valley: somehow you can sense something is going on. obviously you can sense prosperity in how well kept a place looks. but there are different kinds of prosperity. silicon valley doesnt look like boston, or new york, or la, or dc. i tried asking myself what word id use to describe the feeling the valley radiated, and the word that came to mind was optimism.  im not saying its impossible to succeed in a city with few other startups, just harder. if youre sufficiently good at generating your own morale, you can survive without external encouragement. wufoo was based in tampa and they succeeded. but the wufoos are exceptionally disciplined.  incidentally, this phenomenon is not limited to startups. most unusual ambitions fail, unless the person who has them manages to find the right sort of community.  starting a company is common, but starting a startup is rare. ive talked about the distinction between the two elsewhere, but essentially a startup is a new business designed for scale. most new businesses are service businesses and except in rare cases those dont scale.  as i was writing this, i had a demonstration of the density of startup people in the valley. jessica and i bicycled to university ave in palo alto to have lunch at the fabulous orens hummus. as we walked in, we met charlie cheever sitting near the door. selina tobaccowala stopped to say hello on her way out. then josh wilson came in to pick up a take out order. after lunch we went to get frozen yogurt. on the way we met rajat suri. when we got to the yogurt place, we found dave shen there, and as we walked out we ran into yuri sagalov. we walked with him for a block or so and we ran into muzzammil zaveri, and then a block later we met aydin senkut. this is everyday life in palo alto. i wasnt trying to meet people; i was just having lunch. and im sure for every startup founder or investor i saw that i knew, there were 5 more i didnt. if ron conway had been with us he would have met 30 people he knew. thanks to sam altman, paul buchheit, jessica livingston, and harj taggar for reading drafts of this. this essay was originally published at paulgraham.com (this essay is derived from a talk at the harvard computer society.) you need three things to create a successful startup: to start with good people, to make something customers actually want, and to spend as little money as possible. most startups that fail do it because they fail at one of these. a startup that does all three will probably succeed. and thats kind of exciting, when you think about it, because all three are doable. hard, but doable. and since a startup that succeeds ordinarily makes its founders rich, that implies getting rich is doable too. hard, but doable. if there is one message id like to get across about startups, thats it. there is no magically difficult step that requires brilliance to solve. in particular, you dont need a brilliant idea to start a startup around. the way a startup makes money is to offer people better technology than they have now. but what people have now is often so bad that it doesnt take brilliance to do better. googles plan, for example, was simply to create a search site that didnt suck. they had three new ideas: index more of the web, use links to rank search results, and have clean, simple web pages with unintrusive keyword-based ads. above all, they were determined to make a site that was good to use. no doubt there are great technical tricks within google, but the overall plan was straightforward. and while they probably have bigger ambitions now, this alone brings them a billion dollars a year.  there are plenty of other areas that are just as backward as search was before google. i can think of several heuristics for generating ideas for startups, but most reduce to this: look at something people are trying to do, and figure out how to do it in a way that doesnt suck. for example, dating sites currently suck far worse than search did before google. they all use the same simple-minded model. they seem to have approached the problem by thinking about how to do database matches instead of how dating works in the real world. an undergrad could build something better as a class project. and yet theres a lot of money at stake. online dating is a valuable business now, and it might be worth a hundred times as much if it worked. an idea for a startup, however, is only a beginning. a lot of would-be startup founders think the key to the whole process is the initial idea, and from that point all you have to do is execute. venture capitalists know better. if you go to vc firms with a brilliant idea that youll tell them about if they sign a nondisclosure agreement, most will tell you to get lost. that shows how much a mere idea is worth. the market price is less than the inconvenience of signing an nda. another sign of how little the initial idea is worth is the number of startups that change their plan en route. microsofts original plan was to make money selling programming languages, of all things. their current business model didnt occur to them until ibm dropped it in their lap five years later. ideas for startups are worth something, certainly, but the trouble is, theyre not transferrable. theyre not something you could hand to someone else to execute. their value is mainly as starting points: as questions for the people who had them to continue thinking about. what matters is not ideas, but the people who have them. good people can fix bad ideas, but good ideas cant save bad people. what do i mean by good people? one of the best tricks i learned during our startup was a rule for deciding who to hire. could you describe the person as an animal? it might be hard to translate that into another language, but i think everyone in the us knows what it means. it means someone who takes their work a little too seriously; someone who does what they do so well that they pass right through professional and cross over into obsessive. what it means specifically depends on the job: a salesperson who just wont take no for an answer; a hacker who will stay up till 4:00 am rather than go to bed leaving code with a bug in it; a pr person who will cold-call new york times reporters on their cell phones; a graphic designer who feels physical pain when something is two millimeters out of place. almost everyone who worked for us was an animal at what they did. the woman in charge of sales was so tenacious that i used to feel sorry for potential customers on the phone with her. you could sense them squirming on the hook, but you knew there would be no rest for them till theyd signed up. if you think about people you know, youll find the animal test is easy to apply. call the persons image to mind and imagine the sentence "so-and-so is an animal." if you laugh, theyre not. you dont need or perhaps even want this quality in big companies, but you need it in a startup. for programmers we had three additional tests. was the person genuinely smart? if so, could they actually get things done? and finally, since a few good hackers have unbearable personalities, could we stand to have them around? that last test filters out surprisingly few people. we could bear any amount of nerdiness if someone was truly smart. what we couldnt stand were people with a lot of attitude. but most of those werent truly smart, so our third test was largely a restatement of the first. when nerds are unbearable its usually because theyre trying too hard to seem smart. but the smarter they are, the less pressure they feel to act smart. so as a rule you can recognize genuinely smart people by their ability to say things like "i dont know," "maybe youre right," and "i dont understand x well enough." this technique doesnt always work, because people can be influenced by their environment. in the mit cs department, there seems to be a tradition of acting like a brusque know-it-all. im told it derives ultimately from marvin minsky, in the same way the classic airline pilot manner is said to derive from chuck yeager. even genuinely smart people start to act this way there, so you have to make allowances. it helped us to have robert morris, who is one of the readiest to say "i dont know" of anyone ive met. (at least, he was before he became a professor at mit.) no one dared put on attitude around robert, because he was obviously smarter than they were and yet had zero attitude himself. like most startups, ours began with a group of friends, and it was through personal contacts that we got most of the people we hired. this is a crucial difference between startups and big companies. being friends with someone for even a couple days will tell you more than companies could ever learn in interviews.  its no coincidence that startups start around universities, because thats where smart people meet. its not what people learn in classes at mit and stanford that has made technology companies spring up around them. they could sing campfire songs in the classes so long as admissions worked the same. if you start a startup, theres a good chance it will be with people you know from college or grad school. so in theory you ought to try to make friends with as many smart people as you can in school, right? well, no. dont make a conscious effort to schmooze; that doesnt work well with hackers. what you should do in college is work on your own projects. hackers should do this even if they dont plan to start startups, because its the only real way to learn how to program. in some cases you may collaborate with other students, and this is the best way to get to know good hackers. the project may even grow into a startup. but once again, i wouldnt aim too directly at either target. dont force things; just work on stuff you like with people you like. ideally you want between two and four founders. it would be hard to start with just one. one person would find the moral weight of starting a company hard to bear. even bill gates, who seems to be able to bear a good deal of moral weight, had to have a co-founder. but you dont want so many founders that the company starts to look like a group photo. partly because you dont need a lot of people at first, but mainly because the more founders you have, the worse disagreements youll have. when there are just two or three founders, you know you have to resolve disputes immediately or perish. if there are seven or eight, disagreements can linger and harden into factions. you dont want mere voting; you need unanimity. in a technology startup, which most startups are, the founders should include technical people. during the internet bubble there were a number of startups founded by business people who then went looking for hackers to create their product for them. this doesnt work well. business people are bad at deciding what to do with technology, because they dont know what the options are, or which kinds of problems are hard and which are easy. and when business people try to hire hackers, they cant tell which ones are good . even other hackers have a hard time doing that. for business people its roulette. do the founders of a startup have to include business people? that depends. we thought so when we started ours, and we asked several people who were said to know about this mysterious thing called "business" if they would be the president. but they all said no, so i had to do it myself. and what i discovered was that business was no great mystery. its not something like physics or medicine that requires extensive study. you just try to get people to pay you for stuff. i think the reason i made such a mystery of business was that i was disgusted by the idea of doing it. i wanted to work in the pure, intellectual world of software, not deal with customers mundane problems. people who dont want to get dragged into some kind of work often develop a protective incompetence at it. paul erdos was particularly good at this. by seeming unable even to cut a grapefruit in half (let alone go to the store and buy one), he forced other people to do such things for him, leaving all his time free for math. erdos was an extreme case, but most husbands use the same trick to some degree. once i was forced to discard my protective incompetence, i found that business was neither so hard nor so boring as i feared. there are esoteric areas of business that are quite hard, like tax law or the pricing of derivatives, but you dont need to know about those in a startup. all you need to know about business to run a startup are commonsense things people knew before there were business schools, or even universities. if you work your way down the forbes 400 making an x next to the name of each person with an mba, youll learn something important about business school. after warren buffett, you dont hit another mba till number 22, phil knight, the ceo of nike. there are only 5 mbas in the top 50. what you notice in the forbes 400 are a lot of people with technical backgrounds. bill gates, steve jobs, larry ellison, michael dell, jeff bezos, gordon moore. the rulers of the technology business tend to come from technology, not business. so if you want to invest two years in something that will help you succeed in business, the evidence suggests youd do better to learn how to hack than get an mba.  there is one reason you might want to include business people in a startup, though: because you have to have at least one person willing and able to focus on what customers want. some believe only business people can do this-- that hackers can implement software, but not design it. thats nonsense. theres nothing about knowing how to program that prevents hackers from understanding users, or about not knowing how to program that magically enables business people to understand them. if you cant understand users, however, you should either learn how or find a co-founder who can. that is the single most important issue for technology startups, and the rock that sinks more of them than anything else. its not just startups that have to worry about this. i think most businesses that fail do it because they dont give customers what they want. look at restaurants. a large percentage fail, about a quarter in the first year. but can you think of one restaurant that had really good food and went out of business? restaurants with great food seem to prosper no matter what. a restaurant with great food can be expensive, crowded, noisy, dingy, out of the way, and even have bad service, and people will keep coming. its true that a restaurant with mediocre food can sometimes attract customers through gimmicks. but that approach is very risky. its more straightforward just to make the food good. its the same with technology. you hear all kinds of reasons why startups fail. but can you think of one that had a massively popular product and still failed? in nearly every failed startup, the real problem was that customers didnt want the product. for most, the cause of death is listed as "ran out of funding," but thats only the immediate cause. why couldnt they get more funding? probably because the product was a dog, or never seemed likely to be done, or both. when i was trying to think of the things every startup needed to do, i almost included a fourth: get a version 1 out as soon as you can. but i decided not to, because thats implicit in making something customers want. the only way to make something customers want is to get a prototype in front of them and refine it based on their reactions. the other approach is what i call the "hail mary" strategy. you make elaborate plans for a product, hire a team of engineers to develop it (people who do this tend to use the term "engineer" for hackers), and then find after a year that youve spent two million dollars to develop something no one wants. this was not uncommon during the bubble, especially in companies run by business types, who thought of software development as something terrifying that therefore had to be carefully planned. we never even considered that approach. as a lisp hacker, i come from the tradition of rapid prototyping. i would not claim (at least, not here) that this is the right way to write every program, but its certainly the right way to write software for a startup. in a startup, your initial plans are almost certain to be wrong in some way, and your first priority should be to figure out where. the only way to do that is to try implementing them. like most startups, we changed our plan on the fly. at first we expected our customers to be web consultants. but it turned out they didnt like us, because our software was easy to use and we hosted the site. it would be too easy for clients to fire them. we also thought wed be able to sign up a lot of catalog companies, because selling online was a natural extension of their existing business. but in 1996 that was a hard sell. the middle managers we talked to at catalog companies saw the web not as an opportunity, but as something that meant more work for them. we did get a few of the more adventurous catalog companies. among them was fredericks of hollywood, which gave us valuable experience dealing with heavy loads on our servers. but most of our users were small, individual merchants who saw the web as an opportunity to build a business. some had retail stores, but many only existed online. and so we changed direction to focus on these users. instead of concentrating on the features web consultants and catalog companies would want, we worked to make the software easy to use. i learned something valuable from that. its worth trying very, very hard to make technology easy to use. hackers are so used to computers that they have no idea how horrifying software seems to normal people. stephen hawkings editor told him that every equation he included in his book would cut sales in half. when you work on making technology easier to use, youre riding that curve up instead of down. a 10% improvement in ease of use doesnt just increase your sales 10%. its more likely to double your sales. how do you figure out what customers want? watch them. one of the best places to do this was at trade shows. trade shows didnt pay as a way of getting new customers, but they were worth it as market research. we didnt just give canned presentations at trade shows. we used to show people how to build real, working stores. which meant we got to watch as they used our software, and talk to them about what they needed. no matter what kind of startup you start, it will probably be a stretch for you, the founders, to understand what users want. the only kind of software you can build without studying users is the sort for which you are the typical user. but this is just the kind that tends to be open source: operating systems, programming languages, editors, and so on. so if youre developing technology for money, youre probably not going to be developing it for people like you. indeed, you can use this as a way to generate ideas for startups: what do people who are not like you want from technology? when most people think of startups, they think of companies like apple or google. everyone knows these, because theyre big consumer brands. but for every startup like that, there are twenty more that operate in niche markets or live quietly down in the infrastructure. so if you start a successful startup, odds are youll start one of those. another way to say that is, if you try to start the kind of startup that has to be a big consumer brand, the odds against succeeding are steeper. the best odds are in niche markets. since startups make money by offering people something better than they had before, the best opportunities are where things suck most. and it would be hard to find a place where things suck more than in corporate it departments. you would not believe the amount of money companies spend on software, and the crap they get in return. this imbalance equals opportunity. if you want ideas for startups, one of the most valuable things you could do is find a middle-sized non-technology company and spend a couple weeks just watching what they do with computers. most good hackers have no more idea of the horrors perpetrated in these places than rich americans do of what goes on in brazilian slums. start by writing software for smaller companies, because its easier to sell to them. its worth so much to sell stuff to big companies that the people selling them the crap they currently use spend a lot of time and money to do it. and while you can outhack oracle with one frontal lobe tied behind your back, you cant outsell an oracle salesman. so if you want to win through better technology, aim at smaller customers.  theyre the more strategically valuable part of the market anyway. in technology, the low end always eats the high end. its easier to make an inexpensive product more powerful than to make a powerful product cheaper. so the products that start as cheap, simple options tend to gradually grow more powerful till, like water rising in a room, they squash the "high-end" products against the ceiling. sun did this to mainframes, and intel is doing it to sun. microsoft word did it to desktop publishing software like interleaf and framemaker. mass-market digital cameras are doing it to the expensive models made for professionals. avid did it to the manufacturers of specialized video editing systems, and now apple is doing it to avid. henry ford did it to the car makers that preceded him. if you build the simple, inexpensive option, youll not only find it easier to sell at first, but youll also be in the best position to conquer the rest of the market. its very dangerous to let anyone fly under you. if you have the cheapest, easiest product, youll own the low end. and if you dont, youre in the crosshairs of whoever does. to make all this happen, youre going to need money. some startups have been self-funding-- microsoft for example-- but most arent. i think its wise to take money from investors. to be self-funding, you have to start as a consulting company, and its hard to switch from that to a product company. financially, a startup is like a pass/fail course. the way to get rich from a startup is to maximize the companys chances of succeeding, not to maximize the amount of stock you retain. so if you can trade stock for something that improves your odds, its probably a smart move. to most hackers, getting investors seems like a terrifying and mysterious process. actually its merely tedious. ill try to give an outline of how it works. the first thing youll need is a few tens of thousands of dollars to pay your expenses while you develop a prototype. this is called seed capital. because so little money is involved, raising seed capital is comparatively easy-- at least in the sense of getting a quick yes or no. usually you get seed money from individual rich people called "angels." often theyre people who themselves got rich from technology. at the seed stage, investors dont expect you to have an elaborate business plan. most know that theyre supposed to decide quickly. its not unusual to get a check within a week based on a half-page agreement. we started viaweb with $10,000 of seed money from our friend julian. but he gave us a lot more than money. hes a former ceo and also a corporate lawyer, so he gave us a lot of valuable advice about business, and also did all the legal work of getting us set up as a company. plus he introduced us to one of the two angel investors who supplied our next round of funding. some angels, especially those with technology backgrounds, may be satisfied with a demo and a verbal description of what you plan to do. but many will want a copy of your business plan, if only to remind themselves what they invested in. our angels asked for one, and looking back, im amazed how much worry it caused me. "business plan" has that word "business" in it, so i figured it had to be something id have to read a book about business plans to write. well, it doesnt. at this stage, all most investors expect is a brief description of what you plan to do and how youre going to make money from it, and the resumes of the founders. if you just sit down and write out what youve been saying to one another, that should be fine. it shouldnt take more than a couple hours, and youll probably find that writing it all down gives you more ideas about what to do. for the angel to have someone to make the check out to, youre going to have to have some kind of company. merely incorporating yourselves isnt hard. the problem is, for the company to exist, you have to decide who the founders are, and how much stock they each have. if there are two founders with the same qualifications who are both equally committed to the business, thats easy. but if you have a number of people who are expected to contribute in varying degrees, arranging the proportions of stock can be hard. and once youve done it, it tends to be set in stone. i have no tricks for dealing with this problem. all i can say is, try hard to do it right. i do have a rule of thumb for recognizing when you have, though. when everyone feels theyre getting a slightly bad deal, that theyre doing more than they should for the amount of stock they have, the stock is optimally apportioned. there is more to setting up a company than incorporating it, of course: insurance, business license, unemployment compensation, various things with the irs. im not even sure what the list is, because we, ah, skipped all that. when we got real funding near the end of 1996, we hired a great cfo, who fixed everything retroactively. it turns out that no one comes and arrests you if you dont do everything youre supposed to when starting a company. and a good thing too, or a lot of startups would never get started.  it can be dangerous to delay turning yourself into a company, because one or more of the founders might decide to split off and start another company doing the same thing. this does happen. so when you set up the company, as well as as apportioning the stock, you should get all the founders to sign something agreeing that everyones ideas belong to this company, and that this company is going to be everyones only job.  while youre at it, you should ask what else theyve signed. one of the worst things that can happen to a startup is to run into intellectual property problems. we did, and it came closer to killing us than any competitor ever did. as we were in the middle of getting bought, we discovered that one of our people had, early on, been bound by an agreement that said all his ideas belonged to the giant company that was paying for him to go to grad school. in theory, that could have meant someone else owned big chunks of our software. so the acquisition came to a screeching halt while we tried to sort this out. the problem was, since wed been about to be acquired, wed allowed ourselves to run low on cash. now we needed to raise more to keep going. but its hard to raise money with an ip cloud over your head, because investors cant judge how serious it is. our existing investors, knowing that we needed money and had nowhere else to get it, at this point attempted certain gambits which i will not describe in detail, except to remind readers that the word "angel" is a metaphor. the founders thereupon proposed to walk away from the company, after giving the investors a brief tutorial on how to administer the servers themselves. and while this was happening, the acquirers used the delay as an excuse to welch on the deal. miraculously it all turned out ok. the investors backed down; we did another round of funding at a reasonable valuation; the giant company finally gave us a piece of paper saying they didnt own our software; and six months later we were bought by yahoo for much more than the earlier acquirer had agreed to pay. so we were happy in the end, though the experience probably took several years off my life. dont do what we did. before you consummate a startup, ask everyone about their previous ip history. once youve got a company set up, it may seem presumptuous to go knocking on the doors of rich people and asking them to invest tens of thousands of dollars in something that is really just a bunch of guys with some ideas. but when you look at it from the rich peoples point of view, the picture is more encouraging. most rich people are looking for good investments. if you really think you have a chance of succeeding, youre doing them a favor by letting them invest. mixed with any annoyance they might feel about being approached will be the thought: are these guys the next google? usually angels are financially equivalent to founders. they get the same kind of stock and get diluted the same amount in future rounds. how much stock should they get? that depends on how ambitious you feel. when you offer x percent of your company for y dollars, youre implicitly claiming a certain value for the whole company. venture investments are usually described in terms of that number. if you give an investor new shares equal to 5% of those already outstanding in return for $100,000, then youve done the deal at a pre-money valuation of $2 million. how do you decide what the value of the company should be? there is no rational way. at this stage the company is just a bet. i didnt realize that when we were raising money. julian thought we ought to value the company at several million dollars. i thought it was preposterous to claim that a couple thousand lines of code, which was all we had at the time, were worth several million dollars. eventually we settled on one millon, because julian said no one would invest in a company with a valuation any lower.  what i didnt grasp at the time was that the valuation wasnt just the value of the code wed written so far. it was also the value of our ideas, which turned out to be right, and of all the future work wed do, which turned out to be a lot. the next round of funding is the one in which you might deal with actual venture capital firms . but dont wait till youve burned through your last round of funding to start approaching them. vcs are slow to make up their minds. they can take months. you dont want to be running out of money while youre trying to negotiate with them. getting money from an actual vc firm is a bigger deal than getting money from angels. the amounts of money involved are larger, millions usually. so the deals take longer, dilute you more, and impose more onerous conditions. sometimes the vcs want to install a new ceo of their own choosing. usually the claim is that you need someone mature and experienced, with a business background. maybe in some cases this is true. and yet bill gates was young and inexperienced and had no business background, and he seems to have done ok. steve jobs got booted out of his own company by someone mature and experienced, with a business background, who then proceeded to ruin the company. so i think people who are mature and experienced, with a business background, may be overrated. we used to call these guys "newscasters," because they had neat hair and spoke in deep, confident voices, and generally didnt know much more than they read on the teleprompter. we talked to a number of vcs, but eventually we ended up financing our startup entirely with angel money. the main reason was that we feared a brand-name vc firm would stick us with a newscaster as part of the deal. that might have been ok if he was content to limit himself to talking to the press, but what if he wanted to have a say in running the company? that would have led to disaster, because our software was so complex. we were a company whose whole m.o. was to win through better technology. the strategic decisions were mostly decisions about technology, and we didnt need any help with those. this was also one reason we didnt go public. back in 1998 our cfo tried to talk me into it. in those days you could go public as a dogfood portal, so as a company with a real product and real revenues, we might have done well. but i feared it would have meant taking on a newscaster-- someone who, as they say, "can talk wall streets language." im happy to see google is bucking that trend. they didnt talk wall streets language when they did their ipo, and wall street didnt buy. and now wall street is collectively kicking itself. theyll pay attention next time. wall street learns new languages fast when money is involved. you have more leverage negotiating with vcs than you realize. the reason is other vcs. i know a number of vcs now, and when you talk to them you realize that its a sellers market. even now there is too much money chasing too few good deals. vcs form a pyramid. at the top are famous ones like sequoia and kleiner perkins, but beneath those are a huge number youve never heard of. what they all have in common is that a dollar from them is worth one dollar. most vcs will tell you that they dont just provide money, but connections and advice. if youre talking to vinod khosla or john doerr or mike moritz, this is true. but such advice and connections can come very expensive. and as you go down the food chain the vcs get rapidly dumber. a few steps down from the top youre basically talking to bankers whove picked up a few new vocabulary words from reading wired . (does your product use xml? ) so id advise you to be skeptical about claims of experience and connections. basically, a vc is a source of money. id be inclined to go with whoever offered the most money the soonest with the least strings attached. you may wonder how much to tell vcs. and you should, because some of them may one day be funding your competitors. i think the best plan is not to be overtly secretive, but not to tell them everything either. after all, as most vcs say, theyre more interested in the people than the ideas. the main reason they want to talk about your idea is to judge you, not the idea. so as long as you seem like you know what youre doing, you can probably keep a few things back from them.  talk to as many vcs as you can, even if you dont want their money, because a) they may be on the board of someone who will buy you, and b) if you seem impressive, theyll be discouraged from investing in your competitors. the most efficient way to reach vcs, especially if you only want them to know about you and dont want their money, is at the conferences that are occasionally organized for startups to present to them. when and if you get an infusion of real money from investors, what should you do with it? not spend it, thats what. in nearly every startup that fails, the proximate cause is running out of money. usually there is something deeper wrong. but even a proximate cause of death is worth trying hard to avoid. during the bubble many startups tried to "get big fast." ideally this meant getting a lot of customers fast. but it was easy for the meaning to slide over into hiring a lot of people fast. of the two versions, the one where you get a lot of customers fast is of course preferable. but even that may be overrated. the idea is to get there first and get all the users, leaving none for competitors. but i think in most businesses the advantages of being first to market are not so overwhelmingly great. google is again a case in point. when they appeared it seemed as if search was a mature market, dominated by big players whod spent millions to build their brands: yahoo, lycos, excite, infoseek, altavista, inktomi. surely 1998 was a little late to arrive at the party. but as the founders of google knew, brand is worth next to nothing in the search business. you can come along at any point and make something better, and users will gradually seep over to you. as if to emphasize the point, google never did any advertising. theyre like dealers; they sell the stuff, but they know better than to use it themselves. the competitors google buried would have done better to spend those millions improving their software. future startups should learn from that mistake. unless youre in a market where products are as undifferentiated as cigarettes or vodka or laundry detergent, spending a lot on brand advertising is a sign of breakage. and few if any web businesses are so undifferentiated. the dating sites are running big ad campaigns right now, which is all the more evidence theyre ripe for the picking. (fee, fie, fo, fum, i smell a company run by marketing guys.) we were compelled by circumstances to grow slowly, and in retrospect it was a good thing. the founders all learned to do every job in the company. as well as writing software, i had to do sales and customer support. at sales i was not very good. i was persistent, but i didnt have the smoothness of a good salesman. my message to potential customers was: youd be stupid not to sell online, and if you sell online youd be stupid to use anyone elses software. both statements were true, but thats not the way to convince people. i was great at customer support though. imagine talking to a customer support person who not only knew everything about the product, but would apologize abjectly if there was a bug, and then fix it immediately, while you were on the phone with them. customers loved us. and we loved them, because when youre growing slow by word of mouth, your first batch of users are the ones who were smart enough to find you by themselves. there is nothing more valuable, in the early stages of a startup, than smart users. if you listen to them, theyll tell you exactly how to make a winning product. and not only will they give you this advice for free, theyll pay you. we officially launched in early 1996. by the end of that year we had about 70 users. since this was the era of "get big fast," i worried about how small and obscure we were. but in fact we were doing exactly the right thing. once you get big (in users or employees) it gets hard to change your product. that year was effectively a laboratory for improving our software. by the end of it, we were so far ahead of our competitors that they never had a hope of catching up. and since all the hackers had spent many hours talking to users, we understood online commerce way better than anyone else. thats the key to success as a startup. there is nothing more important than understanding your business. you might think that anyone in a business must, ex officio, understand it. far from it. googles secret weapon was simply that they understood search. i was working for yahoo when google appeared, and yahoo didnt understand search. i know because i once tried to convince the powers that be that we had to make search better, and i got in reply what was then the party line about it: that yahoo was no longer a mere "search engine." search was now only a small percentage of our page views, less than one months growth, and now that we were established as a "media company," or "portal," or whatever we were, search could safely be allowed to wither and drop off, like an umbilical cord. well, a small fraction of page views they may be, but they are an important fraction, because they are the page views that web sessions start with. i think yahoo gets that now. google understands a few other things most web companies still dont. the most important is that you should put users before advertisers, even though the advertisers are paying and users arent. one of my favorite bumper stickers reads "if the people lead, the leaders will follow." paraphrased for the web, this becomes "get all the users, and the advertisers will follow." more generally, design your product to please users first, and then think about how to make money from it. if you dont put users first, you leave a gap for competitors who do. to make something users love, you have to understand them. and the bigger you are, the harder that is. so i say "get big slow." the slower you burn through your funding, the more time you have to learn. the other reason to spend money slowly is to encourage a culture of cheapness. thats something yahoo did understand. david filos title was "chief yahoo," but he was proud that his unofficial title was "cheap yahoo." soon after we arrived at yahoo, we got an email from filo, who had been crawling around our directory hierarchy, asking if it was really necessary to store so much of our data on expensive raid drives. i was impressed by that. yahoos market cap then was already in the billions, and they were still worrying about wasting a few gigs of disk space. when you get a couple million dollars from a vc firm, you tend to feel rich. its important to realize youre not. a rich company is one with large revenues. this money isnt revenue. its money investors have given you in the hope youll be able to generate revenues. so despite those millions in the bank, youre still poor. for most startups the model should be grad student, not law firm. aim for cool and cheap, not expensive and impressive. for us the test of whether a startup understood this was whether they had aeron chairs. the aeron came out during the bubble and was very popular with startups. especially the type, all too common then, that was like a bunch of kids playing house with money supplied by vcs. we had office chairs so cheap that the arms all fell off. this was slightly embarrassing at the time, but in retrospect the grad-studenty atmosphere of our office was another of those things we did right without knowing it. our offices were in a wooden triple-decker in harvard square. it had been an apartment until about the 1970s, and there was still a claw-footed bathtub in the bathroom. it must once have been inhabited by someone fairly eccentric, because a lot of the chinks in the walls were stuffed with aluminum foil, as if to protect against cosmic rays. when eminent visitors came to see us, we were a bit sheepish about the low production values. but in fact that place was the perfect space for a startup. we felt like our role was to be impudent underdogs instead of corporate stuffed shirts, and that is exactly the spirit you want. an apartment is also the right kind of place for developing software. cube farms suck for that, as youve probably discovered if youve tried it. ever notice how much easier it is to hack at home than at work? so why not make work more like home? when youre looking for space for a startup, dont feel that it has to look professional. professional means doing good work, not elevators and glass walls. id advise most startups to avoid corporate space at first and just rent an apartment. you want to live at the office in a startup, so why not have a place designed to be lived in as your office? besides being cheaper and better to work in, apartments tend to be in better locations than office buildings. and for a startup location is very important. the key to productivity is for people to come back to work after dinner. those hours after the phone stops ringing are by far the best for getting work done. great things happen when a group of employees go out to dinner together, talk over ideas, and then come back to their offices to implement them. so you want to be in a place where there are a lot of restaurants around, not some dreary office park thats a wasteland after 6:00 pm. once a company shifts over into the model where everyone drives home to the suburbs for dinner, however late, youve lost something extraordinarily valuable. god help you if you actually start in that mode. if i were going to start a startup today, there are only three places id consider doing it: on the red line near central, harvard, or davis squares (kendall is too sterile); in palo alto on university or california aves; and in berkeley immediately north or south of campus. these are the only places i know that have the right kind of vibe. the most important way to not spend money is by not hiring people. i may be an extremist, but i think hiring people is the worst thing a company can do. to start with, people are a recurring expense, which is the worst kind. they also tend to cause you to grow out of your space, and perhaps even move to the sort of uncool office building that will make your software worse. but worst of all, they slow you down: instead of sticking your head in someones office and checking out an idea with them, eight people have to have a meeting about it. so the fewer people you can hire, the better. during the bubble a lot of startups had the opposite policy. they wanted to get "staffed up" as soon as possible, as if you couldnt get anything done unless there was someone with the corresponding job title. thats big company thinking. dont hire people to fill the gaps in some a priori org chart. the only reason to hire someone is to do something youd like to do but cant. if hiring unnecessary people is expensive and slows you down, why do nearly all companies do it? i think the main reason is that people like the idea of having a lot of people working for them. this weakness often extends right up to the ceo. if you ever end up running a company, youll find the most common question people ask is how many employees you have. this is their way of weighing you. its not just random people who ask this; even reporters do. and theyre going to be a lot more impressed if the answer is a thousand than if its ten. this is ridiculous, really. if two companies have the same revenues, its the one with fewer employees thats more impressive. when people used to ask me how many people our startup had, and i answered "twenty," i could see them thinking that we didnt count for much. i used to want to add "but our main competitor, whose ass we regularly kick, has a hundred and forty, so can we have credit for the larger of the two numbers?" as with office space, the number of your employees is a choice between seeming impressive, and being impressive. any of you who were nerds in high school know about this choice. keep doing it when you start a company. but should you start a company? are you the right sort of person to do it? if you are, is it worth it? more people are the right sort of person to start a startup than realize it. thats the main reason i wrote this. there could be ten times more startups than there are, and that would probably be a good thing. i was, i now realize, exactly the right sort of person to start a startup. but the idea terrified me at first. i was forced into it because i was a lisp hacker. the company id been consulting for seemed to be running into trouble, and there were not a lot of other companies using lisp. since i couldnt bear the thought of programming in another language (this was 1995, remember, when "another language" meant c++) the only option seemed to be to start a new company using lisp. i realize this sounds far-fetched, but if youre a lisp hacker youll know what i mean. and if the idea of starting a startup frightened me so much that i only did it out of necessity, there must be a lot of people who would be good at it but who are too intimidated to try. so who should start a startup? someone who is a good hacker, between about 23 and 38, and who wants to solve the money problem in one shot instead of getting paid gradually over a conventional working life. i cant say precisely what a good hacker is. at a first rate university this might include the top half of computer science majors. though of course you dont have to be a cs major to be a hacker; i was a philosophy major in college. its hard to tell whether youre a good hacker, especially when youre young. fortunately the process of starting startups tends to select them automatically. what drives people to start startups is (or should be) looking at existing technology and thinking, dont these guys realize they should be doing x, y, and z? and thats also a sign that one is a good hacker. i put the lower bound at 23 not because theres something that doesnt happen to your brain till then, but because you need to see what its like in an existing business before you try running your own. the business doesnt have to be a startup. i spent a year working for a software company to pay off my college loans. it was the worst year of my adult life, but i learned, without realizing it at the time, a lot of valuable lessons about the software business. in this case they were mostly negative lessons: dont have a lot of meetings; dont have chunks of code that multiple people own; dont have a sales guy running the company; dont make a high-end product; dont let your code get too big; dont leave finding bugs to qa people; dont go too long between releases; dont isolate developers from users; dont move from cambridge to route 128; and so on.  but negative lessons are just as valuable as positive ones. perhaps even more valuable: its hard to repeat a brilliant performance, but its straightforward to avoid errors.  the other reason its hard to start a company before 23 is that people wont take you seriously. vcs wont trust you, and will try to reduce you to a mascot as a condition of funding. customers will worry youre going to flake out and leave them stranded. even you yourself, unless youre very unusual, will feel your age to some degree; youll find it awkward to be the boss of someone much older than you, and if youre 21, hiring only people younger rather limits your options. some people could probably start a company at 18 if they wanted to. bill gates was 19 when he and paul allen started microsoft. (paul allen was 22, though, and that probably made a difference.) so if youre thinking, i dont care what he says, im going to start a company now, you may be the sort of person who could get away with it. the other cutoff, 38, has a lot more play in it. one reason i put it there is that i dont think many people have the physical stamina much past that age. i used to work till 2:00 or 3:00 am every night, seven days a week. i dont know if i could do that now. also, startups are a big risk financially. if you try something that blows up and leaves you broke at 26, big deal; a lot of 26 year olds are broke. by 38 you cant take so many risks-- especially if you have kids. my final test may be the most restrictive. do you actually want to start a startup? what it amounts to, economically, is compressing your working life into the smallest possible space. instead of working at an ordinary rate for 40 years, you work like hell for four. and maybe end up with nothing-- though in that case it probably wont take four years. during this time youll do little but work, because when youre not working, your competitors will be. my only leisure activities were running, which i needed to do to keep working anyway, and about fifteen minutes of reading a night. i had a girlfriend for a total of two months during that three year period. every couple weeks i would take a few hours off to visit a used bookshop or go to a friends house for dinner. i went to visit my family twice. otherwise i just worked. working was often fun, because the people i worked with were some of my best friends. sometimes it was even technically interesting. but only about 10% of the time. the best i can say for the other 90% is that some of it is funnier in hindsight than it seemed then. like the time the power went off in cambridge for about six hours, and we made the mistake of trying to start a gasoline powered generator inside our offices. i wont try that again. i dont think the amount of bullshit you have to deal with in a startup is more than youd endure in an ordinary working life. its probably less, in fact; it just seems like a lot because its compressed into a short period. so mainly what a startup buys you is time. thats the way to think about it if youre trying to decide whether to start one. if youre the sort of person who would like to solve the money problem once and for all instead of working for a salary for 40 years, then a startup makes sense. for a lot of people the conflict is between startups and graduate school. grad students are just the age, and just the sort of people, to start software startups. you may worry that if you do youll blow your chances of an academic career. but its possible to be part of a startup and stay in grad school, especially at first. two of our three original hackers were in grad school the whole time, and both got their degrees . there are few sources of energy so powerful as a procrastinating grad student. if you do have to leave grad school, in the worst case it wont be for too long. if a startup fails, it will probably fail quickly enough that you can return to academic life. and if it succeeds, you may find you no longer have such a burning desire to be an assistant professor. if you want to do it, do it. starting a startup is not the great mystery it seems from outside. its not something you have to know about "business" to do. build something users love, and spend less than you make. how hard is that?  googles revenues are about two billion a year, but half comes from ads on other sites.  one advantage startups have over established companies is that there are no discrimination laws about starting businesses. for example, i would be reluctant to start a startup with a woman who had small children, or was likely to have them soon. but youre not allowed to ask prospective employees if they plan to have kids soon. believe it or not, under current us law, youre not even allowed to discriminate on the basis of intelligence. whereas when youre starting a company, you can discriminate on any basis you want about who you start it with.  learning to hack is a lot cheaper than business school, because you can do it mostly on your own. for the price of a linux box, a copy of k&r;, and a few hours of advice from your neighbors fifteen year old son, youll be well on your way.  corollary: avoid starting a startup to sell things to the biggest company of all, the government. yes, there are lots of opportunities to sell them technology. but let someone else start those startups.  a friend who started a company in germany told me they do care about the paperwork there, and that theres more of it. which helps explain why there are not more startups in germany.  at the seed stage our valuation was in principle $100,000, because julian got 10% of the company. but this is a very misleading number, because the money was the least important of the things julian gave us.  the same goes for companies that seem to want to acquire you. there will be a few that are only pretending to in order to pick your brains. but you can never tell for sure which these are, so the best approach is to seem entirely open, but to fail to mention a few critical technical secrets.  i was as bad an employee as this place was a company. i apologize to anyone who had to work with me there.  you could probably write a book about how to succeed in business by doing everything in exactly the opposite way from the dmv. thanks to trevor blackwell, sarah harlin, jessica livingston, and robert morris for reading drafts of this essay, and to steve melendez and gregory price for inviting me to speak. this essay was originally published at paulgraham.com (i wrote this talk for a high school. i never actually gave it, because the school authorities vetoed the plan to invite me.) when i said i was speaking at a high school, my friends were curious. what will you say to high school students? so i asked them, what do you wish someone had told you in high school? their answers were remarkably similar. so im going to tell you what we all wish someone had told us. ill start by telling you something you dont have to know in high school: what you want to do with your life. people are always asking you this, so you think youre supposed to have an answer. but adults ask this mainly as a conversation starter. they want to know what sort of person you are, and this question is just to get you talking. they ask it the way you might poke a hermit crab in a tide pool, to see what it does. if i were back in high school and someone asked about my plans, id say that my first priority was to learn what the options were. you dont need to be in a rush to choose your lifes work. what you need to do is discover what you like. you have to work on stuff you like if you want to be good at what you do. it might seem that nothing would be easier than deciding what you like, but it turns out to be hard, partly because its hard to get an accurate picture of most jobs. being a doctor is not the way its portrayed on tv. fortunately you can also watch real doctors, by volunteering in hospitals.  but there are other jobs you cant learn about, because no one is doing them yet. most of the work ive done in the last ten years didnt exist when i was in high school. the world changes fast, and the rate at which it changes is itself speeding up. in such a world its not a good idea to have fixed plans. and yet every may, speakers all over the country fire up the standard graduation speech, the theme of which is: dont give up on your dreams. i know what they mean, but this is a bad way to put it, because it implies youre supposed to be bound by some plan you made early on. the computer world has a name for this: premature optimization. and it is synonymous with disaster. these speakers would do better to say simply, dont give up. what they really mean is, dont get demoralized. dont think that you cant do what other people can. and i agree you shouldnt underestimate your potential. people whove done great things tend to seem as if they were a race apart. and most biographies only exaggerate this illusion, partly due to the worshipful attitude biographers inevitably sink into, and partly because, knowing how the story ends, they cant help streamlining the plot till it seems like the subjects life was a matter of destiny, the mere unfolding of some innate genius. in fact i suspect if you had the sixteen year old shakespeare or einstein in school with you, theyd seem impressive, but not totally unlike your other friends. which is an uncomfortable thought. if they were just like us, then they had to work very hard to do what they did. and thats one reason we like to believe in genius. it gives us an excuse for being lazy. if these guys were able to do what they did only because of some magic shakespeareness or einsteinness, then its not our fault if we cant do something as good. im not saying theres no such thing as genius. but if youre trying to choose between two theories and one gives you an excuse for being lazy, the other one is probably right. so far weve cut the standard graduation speech down from "dont give up on your dreams" to "what someone else can do, you can do." but it needs to be cut still further. there is some variation in natural ability. most people overestimate its role, but it does exist. if i were talking to a guy four feet tall whose ambition was to play in the nba, id feel pretty stupid saying, you can do anything if you really try.  we need to cut the standard graduation speech down to, "what someone else with your abilities can do, you can do; and dont underestimate your abilities." but as so often happens, the closer you get to the truth, the messier your sentence gets. weve taken a nice, neat (but wrong) slogan, and churned it up like a mud puddle. it doesnt make a very good speech anymore. but worse still, it doesnt tell you what to do anymore. someone with your abilities? what are your abilities? i think the solution is to work in the other direction. instead of working back from a goal, work forward from promising situations. this is what most successful people actually do anyway. in the graduation-speech approach, you decide where you want to be in twenty years, and then ask: what should i do now to get there? i propose instead that you dont commit to anything in the future, but just look at the options available now, and choose those that will give you the most promising range of options afterward. its not so important what you work on, so long as youre not wasting your time. work on things that interest you and increase your options, and worry later about which youll take. suppose youre a college freshman deciding whether to major in math or economics. well, math will give you more options: you can go into almost any field from math. if you major in math it will be easy to get into grad school in economics, but if you major in economics it will be hard to get into grad school in math. flying a glider is a good metaphor here. because a glider doesnt have an engine, you cant fly into the wind without losing a lot of altitude. if you let yourself get far downwind of good places to land, your options narrow uncomfortably. as a rule you want to stay upwind. so i propose that as a replacement for "dont give up on your dreams." stay upwind. how do you do that, though? even if math is upwind of economics, how are you supposed to know that as a high school student? well, you dont, and thats what you need to find out. look for smart people and hard problems. smart people tend to clump together, and if you can find such a clump, its probably worthwhile to join it. but its not straightforward to find these, because there is a lot of faking going on. to a newly arrived undergraduate, all university departments look much the same. the professors all seem forbiddingly intellectual and publish papers unintelligible to outsiders. but while in some fields the papers are unintelligible because theyre full of hard ideas, in others theyre deliberately written in an obscure way to seem as if theyre saying something important. this may seem a scandalous proposition, but it has been experimentally verified, in the famous social text affair. suspecting that the papers published by literary theorists were often just intellectual-sounding nonsense, a physicist deliberately wrote a paper full of intellectual-sounding nonsense, and submitted it to a literary theory journal, which published it. the best protection is always to be working on hard problems. writing novels is hard. reading novels isnt. hard means worry: if youre not worrying that something youre making will come out badly, or that you wont be able to understand something youre studying, then it isnt hard enough. there has to be suspense. well, this seems a grim view of the world, you may think. what im telling you is that you should worry? yes, but its not as bad as it sounds. its exhilarating to overcome worries. you dont see faces much happier than people winning gold medals. and you know why theyre so happy? relief. im not saying this is the only way to be happy. just that some kinds of worry are not as bad as they sound. in practice, "stay upwind" reduces to "work on hard problems." and you can start today. i wish id grasped that in high school. most people like to be good at what they do. in the so-called real world this need is a powerful force. but high school students rarely benefit from it, because theyre given a fake thing to do. when i was in high school, i let myself believe that my job was to be a high school student. and so i let my need to be good at what i did be satisfied by merely doing well in school. if youd asked me in high school what the difference was between high school kids and adults, id have said it was that adults had to earn a living. wrong. its that adults take responsibility for themselves. making a living is only a small part of it. far more important is to take intellectual responsibility for oneself. if i had to go through high school again, id treat it like a day job. i dont mean that id slack in school. working at something as a day job doesnt mean doing it badly. it means not being defined by it. i mean i wouldnt think of myself as a high school student, just as a musician with a day job as a waiter doesnt think of himself as a waiter.  and when i wasnt working at my day job id start trying to do real work. when i ask people what they regret most about high school, they nearly all say the same thing: that they wasted so much time. if youre wondering what youre doing now that youll regret most later, thats probably it.  some people say this is inevitable-- that high school students arent capable of getting anything done yet. but i dont think this is true. and the proof is that youre bored. you probably werent bored when you were eight. when youre eight its called "playing" instead of "hanging out," but its the same thing. and when i was eight, i was rarely bored. give me a back yard and a few other kids and i could play all day. the reason this got stale in middle school and high school, i now realize, is that i was ready for something else. childhood was getting old. im not saying you shouldnt hang out with your friends-- that you should all become humorless little robots who do nothing but work. hanging out with friends is like chocolate cake. you enjoy it more if you eat it occasionally than if you eat nothing but chocolate cake for every meal. no matter how much you like chocolate cake, youll be pretty queasy after the third meal of it. and thats what the malaise one feels in high school is: mental queasiness.  you may be thinking, we have to do more than get good grades. we have to have extracurricular activities. but you know perfectly well how bogus most of these are. collecting donations for a charity is an admirable thing to do, but its not hard. its not getting something done. what i mean by getting something done is learning how to write well, or how to program computers, or what life was really like in preindustrial societies, or how to draw the human face from life. this sort of thing rarely translates into a line item on a college application. its dangerous to design your life around getting into college, because the people you have to impress to get into college are not a very discerning audience. at most colleges, its not the professors who decide whether you get in, but admissions officers, and they are nowhere near as smart. theyre the ncos of the intellectual world. they cant tell how smart you are. the mere existence of prep schools is proof of that. few parents would pay so much for their kids to go to a school that didnt improve their admissions prospects. prep schools openly say this is one of their aims. but what that means, if you stop to think about it, is that they can hack the admissions process: that they can take the very same kid and make him seem a more appealing candidate than he would if he went to the local public school.  right now most of you feel your job in life is to be a promising college applicant. but that means youre designing your life to satisfy a process so mindless that theres a whole industry devoted to subverting it. no wonder you become cynical. the malaise you feel is the same that a producer of reality tv shows or a tobacco industry executive feels. and you dont even get paid a lot. so what do you do? what you should not do is rebel. thats what i did, and it was a mistake. i didnt realize exactly what was happening to us, but i smelled a major rat. and so i just gave up. obviously the world sucked, so why bother? when i discovered that one of our teachers was herself using cliffs notes, it seemed par for the course. surely it meant nothing to get a good grade in such a class. in retrospect this was stupid. it was like someone getting fouled in a soccer game and saying, hey, you fouled me, thats against the rules, and walking off the field in indignation. fouls happen. the thing to do when you get fouled is not to lose your cool. just keep playing. by putting you in this situation, society has fouled you. yes, as you suspect, a lot of the stuff you learn in your classes is crap. and yes, as you suspect, the college admissions process is largely a charade. but like many fouls, this one was unintentional.  so just keep playing. rebellion is almost as stupid as obedience. in either case you let yourself be defined by what they tell you to do. the best plan, i think, is to step onto an orthogonal vector. dont just do what they tell you, and dont just refuse to. instead treat school as a day job. as day jobs go, its pretty sweet. youre done at 3 oclock, and you can even work on your own stuff while youre there. and whats your real job supposed to be? unless youre mozart, your first task is to figure that out. what are the great things to work on? where are the imaginative people? and most importantly, what are you interested in? the word "aptitude" is misleading, because it implies something innate. the most powerful sort of aptitude is a consuming interest in some question, and such interests are often acquired tastes. a distorted version of this idea has filtered into popular culture under the name "passion." i recently saw an ad for waiters saying they wanted people with a "passion for service." the real thing is not something one could have for waiting on tables. and passion is a bad word for it. a better name would be curiosity. kids are curious, but the curiosity i mean has a different shape from kid curiosity. kid curiosity is broad and shallow; they ask why at random about everything. in most adults this curiosity dries up entirely. it has to: you cant get anything done if youre always asking why about everything. but in ambitious adults, instead of drying up, curiosity becomes narrow and deep. the mud flat morphs into a well. curiosity turns work into play. for einstein, relativity wasnt a book full of hard stuff he had to learn for an exam. it was a mystery he was trying to solve. so it probably felt like less work to him to invent it than it would seem to someone now to learn it in a class. one of the most dangerous illusions you get from school is the idea that doing great things requires a lot of discipline. most subjects are taught in such a boring way that its only by discipline that you can flog yourself through them. so i was surprised when, early in college, i read a quote by wittgenstein saying that he had no self-discipline and had never been able to deny himself anything, not even a cup of coffee. now i know a number of people who do great work, and its the same with all of them. they have little discipline. theyre all terrible procrastinators and find it almost impossible to make themselves do anything theyre not interested in. one still hasnt sent out his half of the thank-you notes from his wedding, four years ago. another has 26,000 emails in her inbox. im not saying you can get away with zero self-discipline. you probably need about the amount you need to go running. im often reluctant to go running, but once i do, i enjoy it. and if i dont run for several days, i feel ill. its the same with people who do great things. they know theyll feel bad if they dont work, and they have enough discipline to get themselves to their desks to start working. but once they get started, interest takes over, and discipline is no longer necessary. do you think shakespeare was gritting his teeth and diligently trying to write great literature? of course not. he was having fun. thats why hes so good. if you want to do good work, what you need is a great curiosity about a promising question. the critical moment for einstein was when he looked at maxwells equations and said, what the hell is going on here? it can take years to zero in on a productive question, because it can take years to figure out what a subject is really about. to take an extreme example, consider math. most people think they hate math, but the boring stuff you do in school under the name "mathematics" is not at all like what mathematicians do. the great mathematician g. h. hardy said he didnt like math in high school either. he only took it up because he was better at it than the other students. only later did he realize math was interesting-- only later did he start to ask questions instead of merely answering them correctly. when a friend of mine used to grumble because he had to write a paper for school, his mother would tell him: find a way to make it interesting. thats what you need to do: find a question that makes the world interesting. people who do great things look at the same world everyone else does, but notice some odd detail thats compellingly mysterious. and not only in intellectual matters. henry fords great question was, why do cars have to be a luxury item? what would happen if you treated them as a commodity? franz beckenbauers was, in effect, why does everyone have to stay in his position? why cant defenders score goals too? if it takes years to articulate great questions, what do you do now, at sixteen? work toward finding one. great questions dont appear suddenly. they gradually congeal in your head. and what makes them congeal is experience. so the way to find great questions is not to search for them-- not to wander about thinking, what great discovery shall i make? you cant answer that; if you could, youd have made it. the way to get a big idea to appear in your head is not to hunt for big ideas, but to put in a lot of time on work that interests you, and in the process keep your mind open enough that a big idea can take roost. einstein, ford, and beckenbauer all used this recipe. they all knew their work like a piano player knows the keys. so when something seemed amiss to them, they had the confidence to notice it. put in time how and on what? just pick a project that seems interesting: to master some chunk of material, or to make something, or to answer some question. choose a project that will take less than a month, and make it something you have the means to finish. do something hard enough to stretch you, but only just, especially at first. if youre deciding between two projects, choose whichever seems most fun. if one blows up in your face, start another. repeat till, like an internal combustion engine, the process becomes self-sustaining, and each project generates the next one. (this could take years.) it may be just as well not to do a project "for school," if that will restrict you or make it seem like work. involve your friends if you want, but not too many, and only if theyre not flakes. friends offer moral support (few startups are started by one person), but secrecy also has its advantages. theres something pleasing about a secret project. and you can take more risks, because no one will know if you fail. dont worry if a project doesnt seem to be on the path to some goal youre supposed to have. paths can bend a lot more than you think. so let the path grow out the project. the most important thing is to be excited about it, because its by doing that you learn. dont disregard unseemly motivations. one of the most powerful is the desire to be better than other people at something. hardy said thats what got him started, and i think the only unusual thing about him is that he admitted it. another powerful motivator is the desire to do, or know, things youre not supposed to. closely related is the desire to do something audacious. sixteen year olds arent supposed to write novels. so if you try, anything you achieve is on the plus side of the ledger; if you fail utterly, youre doing no worse than expectations.  beware of bad models. especially when they excuse laziness. when i was in high school i used to write "existentialist" short stories like ones id seen by famous writers. my stories didnt have a lot of plot, but they were very deep. and they were less work to write than entertaining ones would have been. i should have known that was a danger sign. and in fact i found my stories pretty boring; what excited me was the idea of writing serious, intellectual stuff like the famous writers. now i have enough experience to realize that those famous writers actually sucked. plenty of famous people do; in the short term, the quality of ones work is only a small component of fame. i should have been less worried about doing something that seemed cool, and just done something i liked. thats the actual road to coolness anyway. a key ingredient in many projects, almost a project on its own, is to find good books. most books are bad. nearly all textbooks are bad.  so dont assume a subject is to be learned from whatever book on it happens to be closest. you have to search actively for the tiny number of good books. the important thing is to get out there and do stuff. instead of waiting to be taught, go out and learn. your life doesnt have to be shaped by admissions officers. it could be shaped by your own curiosity. it is for all ambitious adults. and you dont have to wait to start. in fact, you dont have to wait to be an adult. theres no switch inside you that magically flips when you turn a certain age or graduate from some institution. you start being an adult when you decide to take responsibility for your life. you can do that at any age.  this may sound like bullshit. im just a minor, you may think, i have no money, i have to live at home, i have to do what adults tell me all day long. well, most adults labor under restrictions just as cumbersome, and they manage to get things done. if you think its restrictive being a kid, imagine having kids. the only real difference between adults and high school kids is that adults realize they need to get things done, and high school kids dont. that realization hits most people around 23. but im letting you in on the secret early. so get to work. maybe you can be the first generation whose greatest regret from high school isnt how much time you wasted.  a doctor friend warns that even this can give an inaccurate picture. "who knew how much time it would take up, how little autonomy one would have for endless years of training, and how unbelievably annoying it is to carry a beeper?"  his best bet would probably be to become dictator and intimidate the nba into letting him play. so far the closest anyone has come is secretary of labor.  a day job is one you take to pay the bills so you can do what you really want, like play in a band, or invent relativity. treating high school as a day job might actually make it easier for some students to get good grades. if you treat your classes as a game, you wont be demoralized if they seem pointless. however bad your classes, you need to get good grades in them to get into a decent college. and that is worth doing, because universities are where a lot of the clumps of smart people are these days.  the second biggest regret was caring so much about unimportant things. and especially about what other people thought of them. i think what they really mean, in the latter case, is caring what random people thought of them. adults care just as much what other people think, but they get to be more selective about the other people. i have about thirty friends whose opinions i care about, and the opinion of the rest of the world barely affects me. the problem in high school is that your peers are chosen for you by accidents of age and geography, rather than by you based on respect for their judgement.  the key to wasting time is distraction. without distractions its too obvious to your brain that youre not doing anything with it, and you start to feel uncomfortable. if you want to measure how dependent youve become on distractions, try this experiment: set aside a chunk of time on a weekend and sit alone and think. you can have a notebook to write your thoughts down in, but nothing else: no friends, tv, music, phone, im, email, web, games, books, newspapers, or magazines. within an hour most people will feel a strong craving for distraction.  i dont mean to imply that the only function of prep schools is to trick admissions officers. they also generally provide a better education. but try this thought experiment: suppose prep schools supplied the same superior education but had a tiny (.001) negative effect on college admissions. how many parents would still send their kids to them? it might also be argued that kids who went to prep schools, because theyve learned more, are better college candidates. but this seems empirically false. what you learn in even the best high school is rounding error compared to what you learn in college. public school kids arrive at college with a slight disadvantage, but they start to pull ahead in the sophomore year. (im not saying public school kids are smarter than preppies, just that they are within any given college. that follows necessarily if you agree prep schools improve kids admissions prospects.)  why does society foul you? indifference, mainly. there are simply no outside forces pushing high school to be good. the air traffic control system works because planes would crash otherwise. businesses have to deliver because otherwise competitors would take their customers. but no planes crash if your school sucks, and it has no competitors. high school isnt evil; its random; but random is pretty bad.  and then of course there is money. its not a big factor in high school, because you cant do much that anyone wants. but a lot of great things were created mainly to make money. samuel johnson said "no man but a blockhead ever wrote except for money." (many hope he was exaggerating.)  even college textbooks are bad. when you get to college, youll find that (with a few stellar exceptions) the textbooks are not written by the leading scholars in the field they describe. writing college textbooks is unpleasant work, done mostly by people who need the money. its unpleasant because the publishers exert so much control, and there are few things worse than close supervision by someone who doesnt understand what youre doing. this phenomenon is apparently even worse in the production of high school textbooks.  your teachers are always telling you to behave like adults. i wonder if theyd like it if you did. you may be loud and disorganized, but youre very docile compared to adults. if you actually started acting like adults, it would be just as if a bunch of adults had been transposed into your bodies. imagine the reaction of an fbi agent or taxi driver or reporter to being told they had to ask permission to go the bathroom, and only one person could go at a time. to say nothing of the things youre taught. if a bunch of actual adults suddenly found themselves trapped in high school, the first thing theyd do is form a union and renegotiate all the rules with the administration. thanks to ingrid bassett, trevor blackwell, rich draves, dan giffin, sarah harlin, jessica livingston, jackie mcdonough, robert morris, mark nitzberg, lisa randall, and aaron swartz for reading drafts of this, and to many others for talking to me about high school. this essay was originally published at paulgraham.com (this is a new essay for the japanese edition of hackers & painters . it tries to explain why americans make some things well and others badly.) a few years ago an italian friend of mine travelled by train from boston to providence. she had only been in america for a couple weeks and hadnt seen much of the country yet. she arrived looking astonished. "its so ugly!" people from other rich countries can scarcely imagine the squalor of the man-made bits of america. in travel books they show you mostly natural environments: the grand canyon, whitewater rafting, horses in a field. if you see pictures with man-made things in them, it will be either a view of the new york skyline shot from a discreet distance, or a carefully cropped image of a seacoast town in maine. how can it be, visitors must wonder. how can the richest country in the world look like this? oddly enough, it may not be a coincidence. americans are good at some things and bad at others. were good at making movies and software, and bad at making cars and cities. and i think we may be good at what were good at for the same reason were bad at what were bad at. were impatient. in america, if you want to do something, you dont worry that it might come out badly, or upset delicate social balances, or that people might think youre getting above yourself. if you want to do something, as nike says, just do it. this works well in some fields and badly in others. i suspect it works in movies and software because theyre both messy processes. "systematic" is the last word id use to describe the way good programmers write software. code is not something they assemble painstakingly after careful planning, like the pyramids. its something they plunge into, working fast and constantly changing their minds, like a charcoal sketch. in software, paradoxical as it sounds, good craftsmanship means working fast. if you work slowly and meticulously, you merely end up with a very fine implementation of your initial, mistaken idea. working slowly and meticulously is premature optimization. better to get a prototype done fast, and see what new ideas it gives you. it sounds like making movies works a lot like making software. every movie is a frankenstein, full of imperfections and usually quite different from what was originally envisioned. but interesting, and finished fairly quickly. i think we get away with this in movies and software because theyre both malleable mediums. boldness pays. and if at the last minute two parts dont quite fit, you can figure out some hack that will at least conceal the problem. not so with cars, or cities. they are all too physical. if the car business worked like software or movies, youd surpass your competitors by making a car that weighed only fifty pounds, or folded up to the size of a motorcycle when you wanted to park it. but with physical products there are more constraints. you dont win by dramatic innovations so much as by good taste and attention to detail. the trouble is, the very word "taste" sounds slightly ridiculous to american ears. it seems pretentious, or frivolous, or even effeminate. blue staters think its "subjective," and red staters think its for sissies. so anyone in america who really cares about design will be sailing upwind. twenty years ago we used to hear that the problem with the us car industry was the workers. we dont hear that any more now that japanese companies are building cars in the us. the problem with american cars is bad design. you can see that just by looking at them. all that extra sheet metal on the amc matador wasnt added by the workers. the problem with this car, as with american cars today, is that it was designed by marketing people instead of designers. why do the japanese make better cars than us? some say its because their culture encourages cooperation. that may come into it. but in this case it seems more to the point that their culture prizes design and craftsmanship. for centuries the japanese have made finer things than we have in the west. when you look at swords they made in 1200, you just cant believe the date on the label is right. presumably their cars fit together more precisely than ours for the same reason their joinery always has. theyre obsessed with making things well. not us. when we make something in america, our aim is just to get the job done. once we reach that point, we take one of two routes. we can stop there, and have something crude but serviceable, like a vise-grip. or we can improve it, which usually means encrusting it with gratuitous ornament. when we want to make a car "better," we stick tail fins on it, or make it longer , or make the windows smaller , depending on the current fashion. ditto for houses. in america you can have either a flimsy box banged together out of two by fours and drywall, or a mcmansion-- a flimsy box banged together out of two by fours and drywall, but larger, more dramatic-looking, and full of expensive fittings. rich people dont get better design or craftsmanship; they just get a larger, more conspicuous version of the standard house. we dont especially prize design or craftsmanship here. what we like is speed, and were willing to do something in an ugly way to get it done fast. in some fields, like software or movies, this is a net win. but its not just that software and movies are malleable mediums. in those businesses, the designers (though theyre not generally called that) have more power. software companies, at least successful ones, tend to be run by programmers. and in the film industry, though producers may second-guess directors, the director controls most of what appears on the screen. and so american software and movies, and japanese cars, all have this in common: the people in charge care about design-- the former because the designers are in charge, and the latter because the whole culture cares about design. i think most japanese executives would be horrified at the idea of making a bad car. whereas american executives, in their hearts, still believe the most important thing about a car is the image it projects. make a good car? whats "good?" its so subjective. if you want to know how to design a car, ask a focus group. instead of relying on their own internal design compass (like henry ford did), american car companies try to make what marketing people think consumers want. but it isnt working. american cars continue to lose market share. and the reason is that the customer doesnt want what he thinks he wants. letting focus groups design your cars for you only wins in the short term. in the long term, it pays to bet on good design. the focus group may say they want the meretricious feature du jour, but what they want even more is to imitate sophisticated buyers, and they, though a small minority, really do care about good design. eventually the pimps and drug dealers notice that the doctors and lawyers have switched from cadillac to lexus, and do the same. apple is an interesting counterexample to the general american trend. if you want to buy a nice cd player, youll probably buy a japanese one. but if you want to buy an mp3 player, youll probably buy an ipod. what happened? why doesnt sony dominate mp3 players? because apple is in the consumer electronics business now, and unlike other american companies, theyre obsessed with good design. or more precisely, their ceo is. i just got an ipod, and its not just nice. its surprisingly nice. for it to surprise me, it must be satisfying expectations i didnt know i had. no focus group is going to discover those. only a great designer can. cars arent the worst thing we make in america. where the just-do-it model fails most dramatically is in our cities-- or rather, exurbs . if real estate developers operated on a large enough scale, if they built whole towns, market forces would compel them to build towns that didnt suck. but they only build a couple office buildings or suburban streets at a time, and the result is so depressing that the inhabitants consider it a great treat to fly to europe and spend a couple weeks living what is, for people there, just everyday life.  but the just-do-it model does have advantages. it seems the clear winner for generating wealth and technical innovations (which are practically the same thing). i think speed is the reason. its hard to create wealth by making a commodity. the real value is in things that are new, and if you want to be the first to make something, it helps to work fast. for better or worse, the just-do-it model is fast, whether youre dan bricklin writing the prototype of visicalc in a weekend, or a real estate developer building a block of shoddy condos in a month. if i had to choose between the just-do-it model and the careful model, id probably choose just-do-it. but do we have to choose? could we have it both ways? could americans have nice places to live without undermining the impatient, individualistic spirit that makes us good at software? could other countries introduce more individualism into their technology companies and research labs without having it metastasize as strip malls? im optimistic. its harder to say about other countries, but in the us, at least, i think we can have both. apple is an encouraging example. theyve managed to preserve enough of the impatient, hackerly spirit you need to write software. and yet when you pick up a new apple laptop, well, it doesnt seem american. its too perfect. it seems as if it must have been made by a swedish or a japanese company. in many technologies, version 2 has higher resolution. why not in design generally? i think well gradually see national characters superseded by occupational characters: hackers in japan will be allowed to behave with a willfulness that would now seem unjapanese, and products in america will be designed with an insistence on taste that would now seem unamerican. perhaps the most successful countries, in the future, will be those most willing to ignore what are now considered national characters, and do each kind of work in the way that works best. race you.  japanese cities are ugly too, but for different reasons. japan is prone to earthquakes, so buildings are traditionally seen as temporary; there is no grand tradition of city planning like the one europeans inherited from rome. the other cause is the notoriously corrupt relationship between the government and construction companies. thanks to trevor blackwell, barry eisler, sarah harlin, shiro kawai, jessica livingston, jackie mcdonough, robert morris, and eric raymond for reading drafts of this. this essay was originally published at paulgraham.com occams razor says we should prefer the simpler of two explanations. i begin by reminding readers of this principle because im about to propose a theory that will offend both liberals and conservatives. but occams razor means, in effect, that if you want to disagree with it, you have a hell of a coincidence to explain. theory: in us presidential elections, the more charismatic candidate wins. people who write about politics, whether on the left or the right, have a consistent bias: they take politics seriously. when one candidate beats another they look for political explanations. the country is shifting to the left, or the right. and that sort of shift can certainly be the result of a presidential election, which makes it easy to believe it was the cause. but when i think about why i voted for clinton over the first george bush, it wasnt because i was shifting to the left. clinton just seemed more dynamic. he seemed to want the job more. bush seemed old and tired. i suspect it was the same for a lot of voters. clinton didnt represent any national shift leftward.  he was just more charismatic than george bush or (god help us) bob dole. in 2000 we practically got a controlled experiment to prove it: gore had clintons policies, but not his charisma, and he suffered proportionally.  same story in 2004. kerry was smarter and more articulate than bush, but rather a stiff. and kerry lost. as i looked further back, i kept finding the same pattern. pundits said carter beat ford because the country distrusted the republicans after watergate. and yet it also happened that carter was famous for his big grin and folksy ways, and ford for being a boring klutz. four years later, pundits said the country had lurched to the right. but reagan, a former actor, also happened to be even more charismatic than carter (whose grin was somewhat less cheery after four stressful years in office). in 1984 the charisma gap between reagan and mondale was like that between clinton and dole, with similar results. the first george bush managed to win in 1988, though he would later be vanquished by one of the most charismatic presidents ever, because in 1988 he was up against the notoriously uncharismatic michael dukakis. these are the elections i remember personally, but apparently the same pattern played out in 1964 and 1972. the most recent counterexample appears to be 1968, when nixon beat the more charismatic hubert humphrey. but when you examine that election, it tends to support the charisma theory more than contradict it. as joe mcginnis recounts in his famous book the selling of the president 1968 , nixon knew he had less charisma than humphrey, and thus simply refused to debate him on tv. he knew he couldnt afford to let the two of them be seen side by side. now a candidate probably couldnt get away with refusing to debate. but in 1968 the custom of televised debates was still evolving. in effect, nixon won in 1968 because voters were never allowed to see the real nixon. all they saw were carefully scripted campaign spots. oddly enough, the most recent true counterexample is probably 1960. though this election is usually given as an example of the power of tv, kennedy apparently would not have won without fraud by party machines in illinois and texas. but tv was still young in 1960; only 87% of households had it.  undoubtedly tv helped kennedy, so historians are correct in regarding this election as a watershed. tv required a new kind of candidate. there would be no more calvin coolidges. the charisma theory may also explain why democrats tend to lose presidential elections. the core of the democrats ideology seems to be a belief in government. perhaps this tends to attract people who are earnest, but dull. dukakis, gore, and kerry were so similar in that respect that they might have been brothers. good thing for the democrats that their screen lets through an occasional clinton, even if some scandal results.  one would like to believe elections are won and lost on issues, if only fake ones like willie horton. and yet, if they are, we have a remarkable coincidence to explain. in every presidential election since tv became widespread, the apparently more charismatic candidate has won. surprising, isnt it, that voters opinions on the issues have lined up with charisma for 11 elections in a row? the political commentators who come up with shifts to the left or right in their morning-after analyses are like the financial reporters stuck writing stories day after day about the random fluctuations of the stock market. day ends, market closes up or down, reporter looks for good or bad news respectively, and writes that the market was up on news of intels earnings, or down on fears of instability in the middle east. suppose we could somehow feed these reporters false information about market closes, but give them all the other news intact. does anyone believe they would notice the anomaly, and not simply write that stocks were up (or down) on whatever good (or bad) news there was that day? that they would say, hey, wait a minute, how can stocks be up with all this unrest in the middle east? im not saying that issues dont matter to voters. of course they do. but the major parties know so well which issues matter how much to how many voters, and adjust their message so precisely in response, that they tend to split the difference on the issues, leaving the election to be decided by the one factor they cant control: charisma. if the democrats had been running a candidate as charismatic as clinton in the 2004 election, hed have won. and wed be reading that the election was a referendum on the war in iraq, instead of that the democrats are out of touch with evangelical christians in middle america. during the 1992 election, the clinton campaign staff had a big sign in their office saying "its the economy, stupid." perhaps it was even simpler than they thought. opinions seem to be divided about the charisma theory. some say its impossible, others say its obvious. this seems a good sign. perhaps its in the sweet spot midway between. as for it being impossible, i reply: heres the data; heres the theory; theory explains data 100%. to a scientist, at least, that means it deserves attention, however implausible it seems. you cant believe voters are so superficial that they just choose the most charismatic guy? my theory doesnt require that. im not proposing that charisma is the only factor, just that its the only one left after the efforts of the two parties cancel one another out. as for the theory being obvious, as far as i know, no one has proposed it before. election forecasters are proud when they can achieve the same results with much more complicated models. finally, to the people who say that the theory is probably true, but rather depressing: its not so bad as it seems. the phenomenon is like a pricing anomaly; once people realize its there, it will disappear. once both parties realize its a waste of time to nominate uncharismatic candidates, theyll tend to nominate only the most charismatic ones. and if the candidates are equally charismatic, charisma will cancel out, and elections will be decided on issues, as political commentators like to think they are now.  as clinton himself discovered to his surprise when, in one of his first acts as president, he tried to shift the military leftward. after a bruising fight he escaped with a face-saving compromise.  true, gore won the popular vote. but politicians know the electoral vote decides the election, so thats what they campaign for. if bush had been campaigning for the popular vote he would presumably have got more of it. (thanks to judgmentalist for this point.)  source: nielsen media research. of the remaining 13%, 11 didnt have tv because they couldnt afford it. id argue that the missing 11% were probably also the 11% most susceptible to charisma.  one implication of this theory is that parties shouldnt be too quick to reject candidates with skeletons in their closets. charismatic candidates will tend to have more skeletons than squeaky clean dullards, but in practice that doesnt seem to lose elections. the current bush, for example, probably did more drugs in his twenties than any preceding president, and yet managed to get elected with a base of evangelical christians. all you have to do is say youve reformed, and stonewall about the details. thanks to trevor blackwell, maria daniels, jessica livingston, jackie mcdonough, and robert morris for reading drafts of this, and to eric raymond for pointing out that i was wrong about 1968. comment on this essay. this essay was originally published at paulgraham.com a lot of people are writing now about why kerry lost. here i want to examine a more specific question: why were the exit polls so wrong? in ohio, which kerry ultimately lost 49-51, exit polls gave him a 52-48 victory. and this wasnt just random error. in every swing state they overestimated the kerry vote. in florida, which bush ultimately won 52-47, exit polls predicted a dead heat. (these are not early numbers. theyre from about midnight eastern time, long after polls closed in ohio and florida. and yet by the next afternoon the exit poll numbers online corresponded to the returns. the only way i can imagine this happening is if those in charge of the exit polls cooked the books after seeing the actual returns. but thats another issue.) what happened? the source of the problem may be a variant of the bradley effect. this term was invented after tom bradley, the black mayor of los angeles, lost an election for governor of california despite a comfortable lead in the polls. apparently voters were afraid to say they planned to vote against him, lest their motives be (perhaps correctly) suspected. it seems likely that something similar happened in exit polls this year. in theory, exit polls ought to be very accurate. youre not asking people what they would do. youre asking what they just did. how can you get errors asking that? because some people dont respond. to get a truly random sample, pollsters ask, say, every 20th person leaving the polling place who they voted for. but not everyone wants to answer. and the pollsters cant simply ignore those who wont, or their sample isnt random anymore. so what they do, apparently, is note down the age and race and sex of the person, and guess from that who they voted for. this works so long as there is no correlation between who people vote for and whether theyre willing to talk about it. but this year there may have been. it may be that a significant number of those who voted for bush didnt want to say so. why not? because people in the us are more conservative than theyre willing to admit. the values of the elite in this country, at least at the moment, are npr values. the average person, as i think both republicans and democrats would agree, is more socially conservative. but while some openly flaunt the fact that they dont share the opinions of the elite, others feel a little nervous about it, as if they had bad table manners. for example, according to current npr values, you cant say anything that might be perceived as disparaging towards homosexuals. to do so is "homophobic." and yet a large number of americans are deeply religious, and the bible is quite explicit on the subject of homosexuality. what are they to do? i think what many do is keep their opinions, but keep them to themselves. they know what they believe, but they also know what theyre supposed to believe. and so when a stranger (for example, a pollster) asks them their opinion about something like gay marriage, they will not always say what they really think. when the values of the elite are liberal, polls will tend to underestimate the conservativeness of ordinary voters. this seems to me the leading theory to explain why the exit polls were so far off this year. npr values said one ought to vote for kerry. so all the people who voted for kerry felt virtuous for doing so, and were eager to tell pollsters they had. no one who voted for kerry did it as an act of quiet defiance. this essay was originally published at paulgraham.com as e. b. white said, "good writing is rewriting." i didnt realize this when i was in school. in writing, as in math and science, they only show you the finished product. you dont see all the false starts. this gives students a misleading view of how things get made. part of the reason it happens is that writers dont want people to see their mistakes. but im willing to let people see an early draft if it will show how much you have to rewrite to beat an essay into shape. below is the oldest version i can find of the age of the essay (probably the second or third day), with text that ultimately survived in red and text that later got deleted in gray . there seem to be several categories of cuts: things i got wrong, things that seem like bragging, flames, digressions, stretches of awkward prose, and unnecessary words. i discarded more from the beginning. thats not surprising; it takes a while to hit your stride. there are more digressions at the start, because im not sure where im heading. the amount of cutting is about average. i probably write three to four words for every one that appears in the final version of an essay. (before anyone gets mad at me for opinions expressed here, remember that anything you see here thats not in the final version is obviously something i chose not to publish, often because i disagree with it.) recently a friend said that what he liked about my essays was that they werent written the way wed been taught to write essays in school. you remember: topic sentence, introductory paragraph, supporting paragraphs, conclusion. it hadnt occurred to me till then that those horrible things we had to write in school were even connected to what i was doing now. but sure enough, i thought, they did call them "essays," didnt they? well, theyre not. those things you have to write in school are not only not essays, theyre one of the most pointless of all the pointless hoops you have to jump through in school. and i worry that they not only teach students the wrong things about writing, but put them off writing entirely. so im going to give the other side of the story: what an essay really is, and how you write one. or at least, how i write one. students be forewarned: if you actually write the kind of essay i describe, youll probably get bad grades. but knowing how its really done should at least help you to understand the feeling of futility you have when youre writing the things they tell you to. the most obvious difference between real essays and the things one has to write in school is that real essays are not exclusively about english literature. its a fine thing for schools to teach students how to write. but for some bizarre reason (actually, a very specific bizarre reason that ill explain in a moment), the teaching of writing has gotten mixed together with the study of literature. and so all over the country, students are writing not about how a baseball team with a small budget might compete with the yankees, or the role of color in fashion, or what constitutes a good dessert, but about symbolism in dickens. with obvious result s. only a few people really care about symbolism in dickens. the teacher doesnt. the students dont. most of the people whove had to write phd disserations about dickens dont. and certainly dickens himself would be more interested in an essay about color or baseball. how did things get this way? to answer that we have to go back almost a thousand years. between about 500 and 1000, life was not very good in europe. the term "dark ages" is presently out of fashion as too judgemental (the period wasnt dark; it was just different ), but if this label didnt already exist, it would seem an inspired metaphor. what little original thought there was took place in lulls between constant wars and had something of the character of the thoughts of parents with a new baby. the most amusing thing written during this period, liudprand of cremonas embassy to constantinople, is, i suspect, mostly inadvertantly so. around 1000 europe began to catch its breath. and once they had the luxury of curiosity, one of the first things they discovered was what we call "the classics." imagine if we were visited by aliens. if they could even get here theyd presumably know a few things we dont. immediately alien studies would become the most dynamic field of scholarship: instead of painstakingly discovering things for ourselves, we could simply suck up everything theyd discovered. so it was in europe in 1200. when classical texts began to circulate in europe, they contained not just new answers, but new questions. (if anyone proved a theorem in christian europe before 1200, for example, there is no record of it.) for a couple centuries, some of the most important work being done was intellectual archaelogy. those were also the centuries during which schools were first established. and since reading ancient texts was the essence of what scholars did then, it became the basis of the curriculum. by 1700, someone who wanted to learn about physics didnt need to start by mastering greek in order to read aristotle. but schools change slower than scholarship : the study of ancient texts had such prestige that it remained the backbone of education until the late 19th century. by then it was merely a tradition. it did serve some purposes: reading a foreign language was difficult, and thus taught discipline, or at least, kept students busy; it introduced students to cultures quite different from their own; and its very uselessness made it function (like white gloves) as a social bulwark. but it certainly wasnt true, and hadnt been true for centuries, that students were serving apprenticeships in the hottest area of scholarship. classical scholarship had also changed. in the early era, philology actually mattered. the texts that filtered into europe were all corrupted to some degree by the errors of translators and copyists. scholars had to figure out what aristotle said before they could figure out what he meant. but by the modern era such questions were answered as well as they were ever going to be. and so the study of ancient texts became less about ancientness and more about texts. the time was then ripe for the question: if the study of ancient texts is a valid field for scholarship, why not modern texts? the answer, of course, is that the raison detre of classical scholarship was a kind of intellectual archaelogy that does not need to be done in the case of contemporary authors. but for obvious reasons no one wanted to give that answer. the archaeological work being mostly done, it implied that the people studying the classics were, if not wasting their time, at least working on problems of minor importance. and so began the study of modern literature. there was some initial resistance , but it didnt last long. the limiting reagent in the growth of university departments is what parents will let undergraduates study. if parents will let their children major in x, the rest follows straightforwardly. there will be jobs teaching x, and professors to fill them. the professors will establish scholarly journals and publish one anothers papers. universities with x departments will subscribe to the journals. graduate students who want jobs as professors of x will write dissertations about it. it may take a good long while for the more prestigious universities to cave in and establish departments in cheesier xes, but at the other end of the scale there are so many universities competing to attract students that the mere establishment of a discipline requires little more than the desire to do it. high schools imitate universities. and so once university english departments were established in the late nineteenth century, the riting component of the 3 rs was morphed into english. with the bizarre consequence that high school students now had to write about english literature-- to write, without even realizing it, imitations of whatever english professors had been publishing in their journals a few decades before. its no wonder if this seems to the student a pointless exercise, because were now three steps removed from real work: the students are imitating english professors, who are imitating classical scholars, who are merely the inheritors of a tradition growing out of what was, 700 years ago, fascinating and urgently needed work. perhaps high schools should drop english and just teach writing. the valuable part of english classes is learning to write, and that could be taught better by itself. students learn better when theyre interested in what theyre doing, and its hard to imagine a topic less interesting than symbolism in dickens. most of the people who write about that sort of thing professionally are not really interested in it. (though indeed, its been a while since they were writing about symbolism; now theyre writing about gender.) i have no illusions about how eagerly this suggestion will be adopted. public schools probably couldnt stop teaching english even if they wanted to; theyre probably required to by law. but heres a related suggestion that goes with the grain instead of against it: that universities establish a writing major. many of the students who now major in english would major in writing if they could, and most would be better off. it will be argued that it is a good thing for students to be exposed to their literary heritage. certainly. but is that more important than that they learn to write well? and are english classes even the place to do it? after all, the average public high school student gets zero exposure to his artistic heritage. no disaster results. the people who are interested in art learn about it for themselves, and those who arent dont. i find that american adults are no better or worse informed about literature than art, despite the fact that they spent years studying literature in high school and no time at all studying art. which presumably means that what theyre taught in school is rounding error compared to what they pick up on their own. indeed, english classes may even be harmful. in my case they were effectively aversion therapy. want to make someone dislike a book? force him to read it and write an essay about it. and make the topic so intellectually bogus that you could not, if asked, explain why one ought to write about it. i love to read more than anything, but by the end of high school i never read the books we were assigned. i was so disgusted with what we were doing that it became a point of honor with me to write nonsense at least as good at the other students without having more than glanced over the book to learn the names of the characters and a few random events in it. i hoped this might be fixed in college, but i found the same problem there. it was not the teachers. it was english. we were supposed to read novels and write essays about them. about what, and why? that no one seemed to be able to explain. eventually by trial and error i found that what the teacher wanted us to do was pretend that the story had really taken place, and to analyze based on what the characters said and did (the subtler clues, the better) what their motives must have been. one got extra credit for motives having to do with class, as i suspect one must now for those involving gender and sexuality. i learned how to churn out such stuff well enough to get an a, but i never took another english class. and the books we did these disgusting things to, like those we mishandled in high school, i find still have black marks against them in my mind. the one saving grace was that english courses tend to favor pompous, dull writers like henry james, who deserve black marks against their names anyway. one of the principles the irs uses in deciding whether to allow deductions is that, if something is fun, it isnt work. fields that are intellectually unsure of themselves rely on a similar principle. reading p.g. wodehouse or evelyn waugh or raymond chandler is too obviously pleasing to seem like serious work, as reading shakespeare would have been before english evolved enough to make it an effort to understand him.  and so good writers (just you wait and see whos still in print in 300 years) are less likely to have readers turned against them by clumsy, self-appointed tour guides. the other big difference between a real essay and the things they make you write in school is that a real essay doesnt take a position and then defend it. that principle, like the idea that we ought to be writing about literature, turns out to be another intellectual hangover of long forgotten origins. its often mistakenly believed that medieval universities were mostly seminaries. in fact they were more law schools. and at least in our tradition lawyers are advocates : they are trained to be able to take either side of an argument and make as good a case for it as they can. whether or not this is a good idea (in the case of prosecutors, it probably isnt), it tended to pervade the atmosphere of early universities. after the lecture the most common form of discussion was the disputation. this idea is at least nominally preserved in our present-day thesis defense -- indeed, in the very word thesis. most people treat the words thesis and dissertation as interchangeable, but originally, at least, a thesis was a position one took and the dissertation was the argument by which one defended it. im not complaining that we blur these two words together. as far as im concerned, the sooner we lose the original sense of the word thesis, the better. for many, perhaps most, graduate students, it is stuffing a square peg into a round hole to try to recast ones work as a single thesis. and as for the disputation, that seems clearly a net lose. arguing two sides of a case may be a necessary evil in a legal dispute, but its not the best way to get at the truth, as i think lawyers would be the first to admit. and yet this principle is built into the very structure of the essays they teach you to write in high school. the topic sentence is your thesis, chosen in advance, the supporting paragraphs the blows you strike in the conflict, and the conclusion--- uh, what it the conclusion? i was never sure about that in high school. if your thesis was well expressed, what need was there to restate it? in theory it seemed that the conclusion of a really good essay ought not to need to say any more than qed. but when you understand the origins of this sort of "essay", you can see where the conclusion comes from. its the concluding remarks to the jury. what other alternative is there? to answer that we have to reach back into history again, though this time not so far. to michel de montaigne, inventor of the essay. he was doing something quite different from what a lawyer do es, and the difference is embodied in the name. essayer is the french verb meaning "to try" (the cousin of our word assay), and an "essai" is an effort. an essay is something you write in order to figure something out. figure out what? you dont know yet. and so you cant begin with a thesis, because you dont have one, and may never have one. an essay doesnt begin with a statement, but with a question. in a real essay, you dont take a position and defend it. you see a door thats ajar, and you open it and walk in to see whats inside. if all you want to do is figure things out, why do you need to write anything, though? why not just sit and think? well, there precisely is montaignes great discovery. expressing ideas helps to form them. indeed, helps is far too weak a word. 90% of what ends up in my essays was stuff i only thought of when i sat down to write them. thats why i write them. so theres another difference between essays and the things you have to write in school . in school you are, in theory, explaining yourself to someone else. in the best case---if youre really organized---youre just writing it down. in a real essay youre writing for yourself. youre thinking out loud. but not quite. just as inviting people over forces you to clean up your apartment, writing something that you know other people will read forces you to think well. so it does matter to have an audience. the things ive written just for myself are no good. indeed, theyre bad in a particular way: they tend to peter out. when i run into difficulties, i notice that i tend to conclude with a few vague questions and then drift off to get a cup of tea. this seems a common problem. its practically the standard ending in blog entries--- with the addition of a "heh" or an emoticon, prompted by the all too accurate sense that something is missing. and indeed, a lot of published essays peter out in this same way. particularly the sort written by the staff writers of newsmagazines. outside writers tend to supply editorials of the defend-a-position variety, which make a beeline toward a rousing (and foreordained) conclusion. but the staff writers feel obliged to write something more balanced , which in practice ends up meaning blurry. since theyre writing for a popular magazine, they start with the most radioactively controversial questions, from which ( because theyre writing for a popular magazine ) they then proceed to recoil from in terror. gay marriage, for or against? this group says one thing. that group says another. one thing is certain: the question is a complex one. (but dont get mad at us. we didnt draw any conclusions.) questions arent enough. an essay has to come up with answers. they dont always, of course. sometimes you start with a promising question and get nowhere. but those you dont publish. those are like experiments that get inconclusive results. something you publish ought to tell the reader something he didnt already know. but what you tell him doesnt matter, so long as its interesting. im sometimes accused of meandering. in defend-a-position writing that would be a flaw. there youre not concerned with truth. you already know where youre going, and you want to go straight there, blustering through obstacles, and hand-waving your way across swampy ground. but thats not what youre trying to do in an essay. an essay is supposed to be a search for truth. it would be suspicious if it didnt meander. the meander is a river in asia minor (aka turkey ). as you might expect, it winds all over the place. but does it do this out of frivolity ? quite the opposite. like all rivers, its rigorously following the laws of physics. the path it has discovered , winding as it is, represents the most economical route to the sea. the rivers algorithm is simple. at each step, flow down. for the essayist this translates to: flow interesting. of all the places to go next, choose whichever seems most interesting. im pushing this metaphor a bit. an essayist cant have quite as little foresight as a river. in fact what you do (or what i do) is somewhere between a river and a roman road-builder. i have a general idea of the direction i want to go in, and i choose the next topic with that in mind. this essay is about writing, so i do occasionally yank it back in that direction, but it is not all the sort of essay i thought i was going to write about writing. note too that hill-climbing (which is what this algorithm is called) can get you in trouble. sometimes, just like a river, you run up against a blank wall. what i do then is just what the river does: backtrack. at one point in this essay i found that after following a certain thread i ran out of ideas. i had to go back n paragraphs and start over in another direction. for illustrative purposes ive left the abandoned branch as a footnote. err on the side of the river. an essay is not a reference work. its not something you read looking for a specific answer, and feel cheated if you dont find it. id much rather read an essay that went off in an unexpected but interesting direction than one that plodded dutifully along a prescribed course. so whats interesting? for me, interesting means surprise. design, as matz has said, should follow the principle of least surprise. a button that looks like it will make a machine stop should make it stop, not speed up. essays should do the opposite. essays should aim for maximum surprise. i was afraid of flying for a long time and could only travel vicariously. when friends came back from faraway places, it wasnt just out of politeness that i asked them about their trip. i really wanted to know. and i found that the best way to get information out of them was to ask what surprised them. how was the place different from what they expected? this is an extremely useful question. you can ask it of even the most unobservant people, and it will extract information they didnt even know they were recording. indeed, you can ask it in real time. now when i go somewhere new, i make a note of what surprises me about it. sometimes i even make a conscious effort to visualize the place beforehand, so ill have a detailed image to diff with reality. surprises are facts you didnt already know . but theyre more than that. theyre facts that contradict things you thought you knew. and so theyre the most valuable sort of fact you can get. theyre like a food thats not merely healthy, but counteracts the unhealthy effects of things youve already eaten. how do you find surprises? well, therein lies half the work of essay writing. (the other half is expressing yourself well.) you can at least use yourself as a proxy for the reader. you should only write about things youve thought about a lot. and anything you come across that surprises you, whove thought about the topic a lot, will probably surprise most readers. for example, in a recent essay i pointed out that because you can only judge computer programmers by working with them, no one knows in programming who the heroes should be. i certainly didnt realize this when i started writing the essay, and even now i find it kind of weird. thats what youre looking for. so if you want to write essays, you need two ingredients: you need a few topics that you think about a lot, and you need some ability to ferret out the unexpected. what should you think about? my guess is that it doesnt matter . almost everything is interesting if you get deeply enough into it. the one possible exception are things like working in fast food, which have deliberately had all the variation sucked out of them . in retrospect, was there anything interesting about working in baskin-robbins? well, it was interesting to notice how important color was to the customers. kids a certain age would point into the case and say that they wanted yellow. did they want french vanilla or lemon? they would just look at you blankly. they wanted yellow. and then there was the mystery of why the perennial favorite pralines n cream was so appealing. i m inclined now to think it was the salt. and the mystery of why passion fruit tasted so disgusting. people would order it because of the name, and were always disappointed. it should have been called in-sink-erator fruit. and there was the difference in the way fathers and mothers bought ice cream for their kids . fathers tended to adopt the attitude of benevolent kings bestowing largesse, and mothers that of harried bureaucrats, giving in to pressure against their better judgement. so, yes, there does seem to be material, even in fast food. what about the other half, ferreting out the unexpected? that may require some natural ability. ive noticed for a long time that im pathologically observant. ....   in shakespeares own time, serious writing meant theological discourses, not the bawdy plays acted over on the other side of the river among the bear gardens and whorehouses. the other extreme, the work that seems formidable from the moment its created (indeed, is deliberately intended to be) is represented by milton. like the aeneid, paradise lost is a rock imitating a butterfly that happened to get fossilized. even samuel johnson seems to have balked at this, on the one hand paying milton the compliment of an extensive biography, and on the other writing of paradise lost that "none who read it ever wished it longer." this essay was originally published at paulgraham.com (this essay is derived from an invited talk at icfp 2004.) i had a front row seat for the internet bubble, because i worked at yahoo during 1998 and 1999. one day, when the stock was trading around $200, i sat down and calculated what i thought the price should be. the answer i got was $12. i went to the next cubicle and told my friend trevor. "twelve!" he said. he tried to sound indignant, but he didnt quite manage it. he knew as well as i did that our valuation was crazy. yahoo was a special case. it was not just our price to earnings ratio that was bogus. half our earnings were too. not in the enron way, of course. the finance guys seemed scrupulous about reporting earnings. what made our earnings bogus was that yahoo was, in effect, the center of a ponzi scheme. investors looked at yahoos earnings and said to themselves, here is proof that internet companies can make money. so they invested in new startups that promised to be the next yahoo. and as soon as these startups got the money, what did they do with it? buy millions of dollars worth of advertising on yahoo to promote their brand. result: a capital investment in a startup this quarter shows up as yahoo earnings next quarterstimulating another round of investments in startups. as in a ponzi scheme, what seemed to be the returns of this system were simply the latest round of investments in it. what made it not a ponzi scheme was that it was unintentional. at least, i think it was. the venture capital business is pretty incestuous, and there were presumably people in a position, if not to create this situation, to realize what was happening and to milk it. a year later the game was up. starting in january 2000, yahoos stock price began to crash, ultimately losing 95% of its value. notice, though, that even with all the fat trimmed off its market cap, yahoo was still worth a lot. even at the morning-after valuations of march and april 2001, the people at yahoo had managed to create a company worth about $8 billion in just six years. the fact is, despite all the nonsense we heard during the bubble about the "new economy," there was a core of truth. you need that to get a really big bubble: you need to have something solid at the center, so that even smart people are sucked in. (isaac newton and jonathan swift both lost money in the south sea bubble of 1720.) now the pendulum has swung the other way. now anything that became fashionable during the bubble is ipso facto unfashionable. but thats a mistakean even bigger mistake than believing what everyone was saying in 1999. over the long term, what the bubble got right will be more important than what it got wrong. after the excesses of the bubble, its now considered dubious to take companies public before they have earnings. but there is nothing intrinsically wrong with that idea. taking a company public at an early stage is simply retail vc: instead of going to venture capital firms for the last round of funding, you go to the public markets. by the end of the bubble, companies going public with no earnings were being derided as "concept stocks," as if it were inherently stupid to invest in them. but investing in concepts isnt stupid; its what vcs do, and the best of them are far from stupid. the stock of a company that doesnt yet have earnings is worth something. it may take a while for the market to learn how to value such companies, just as it had to learn to value common stocks in the early 20th century. but markets are good at solving that kind of problem. i wouldnt be surprised if the market ultimately did a better job than vcs do now. going public early will not be the right plan for every company. and it can of course be disruptiveby distracting the management, or by making the early employees suddenly rich. but just as the market will learn how to value startups, startups will learn how to minimize the damage of going public. the internet genuinely is a big deal. that was one reason even smart people were fooled by the bubble. obviously it was going to have a huge effect. enough of an effect to triple the value of nasdaq companies in two years? no, as it turned out. but it was hard to say for certain at the time.  the same thing happened during the mississippi and south sea bubbles. what drove them was the invention of organized public finance (the south sea company, despite its name, was really a competitor of the bank of england). and that did turn out to be a big deal, in the long run. recognizing an important trend turns out to be easier than figuring out how to profit from it. the mistake investors always seem to make is to take the trend too literally. since the internet was the big new thing, investors supposed that the more internettish the company, the better. hence such parodies as pets.com. in fact most of the money to be made from big trends is made indirectly. it was not the railroads themselves that made the most money during the railroad boom, but the companies on either side, like carnegies steelworks, which made the rails, and standard oil, which used railroads to get oil to the east coast, where it could be shipped to europe. i think the internet will have great effects, and that what weve seen so far is nothing compared to whats coming. but most of the winners will only indirectly be internet companies; for every google there will be ten jetblues. why will the internet have great effects? the general argument is that new forms of communication always do. they happen rarely (till industrial times there were just speech, writing, and printing), but when they do, they always cause a big splash. the specific argument, or one of them, is the internet gives us more choices. in the "old" economy, the high cost of presenting information to people meant they had only a narrow range of options to choose from. the tiny, expensive pipeline to consumers was tellingly named "the channel." control the channel and you could feed them what you wanted, on your terms. and it was not just big corporations that depended on this principle. so, in their way, did labor unions, the traditional news media, and the art and literary establishments. winning depended not on doing good work, but on gaining control of some bottleneck. there are signs that this is changing. google has over 82 million unique users a month and annual revenues of about three billion dollars.  and yet have you ever seen a google ad? something is going on here. admittedly, google is an extreme case. its very easy for people to switch to a new search engine. it costs little effort and no money to try a new one, and its easy to see if the results are better. and so google doesnt have to advertise. in a business like theirs, being the best is enough. the exciting thing about the internet is that its shifting everything in that direction. the hard part, if you want to win by making the best stuff, is the beginning. eventually everyone will learn by word of mouth that youre the best, but how do you survive to that point? and it is in this crucial stage that the internet has the most effect. first, the internet lets anyone find you at almost zero cost. second, it dramatically speeds up the rate at which reputation spreads by word of mouth. together these mean that in many fields the rule will be: build it, and they will come. make something great and put it online. that is a big change from the recipe for winning in the past century. the aspect of the internet bubble that the press seemed most taken with was the youth of some of the startup founders. this too is a trend that will last. there is a huge standard deviation among 26 year olds. some are fit only for entry level jobs, but others are ready to rule the world if they can find someone to handle the paperwork for them. a 26 year old may not be very good at managing people or dealing with the sec. those require experience. but those are also commodities, which can be handed off to some lieutenant. the most important quality in a ceo is his vision for the companys future. what will they build next? and in that department, there are 26 year olds who can compete with anyone. in 1970 a company president meant someone in his fifties, at least. if he had technologists working for him, they were treated like a racing stable: prized, but not powerful. but as technology has grown more important, the power of nerds has grown to reflect it. now its not enough for a ceo to have someone smart he can ask about technical matters. increasingly, he has to be that person himself. as always, business has clung to old forms. vcs still seem to want to install a legitimate-looking talking head as the ceo. but increasingly the founders of the company are the real powers, and the grey-headed man installed by the vcs more like a music groups manager than a general. in new york, the bubble had dramatic consequences: suits went out of fashion. they made one seem old. so in 1998 powerful new york types were suddenly wearing open-necked shirts and khakis and oval wire-rimmed glasses, just like guys in santa clara. the pendulum has swung back a bit, driven in part by a panicked reaction by the clothing industry. but im betting on the open-necked shirts. and this is not as frivolous a question as it might seem. clothes are important, as all nerds can sense, though they may not realize it consciously. if youre a nerd, you can understand how important clothes are by asking yourself how youd feel about a company that made you wear a suit and tie to work. the idea sounds horrible, doesnt it? in fact, horrible far out of proportion to the mere discomfort of wearing such clothes. a company that made programmers wear suits would have something deeply wrong with it. and what would be wrong would be that how one presented oneself counted more than the quality of ones ideas. thats the problem with formality. dressing up is not so much bad in itself. the problem is the receptor it binds to: dressing up is inevitably a substitute for good ideas. it is no coincidence that technically inept business types are known as "suits." nerds dont just happen to dress informally. they do it too consistently. consciously or not, they dress informally as a prophylactic measure against stupidity. clothing is only the most visible battleground in the war against formality. nerds tend to eschew formality of any sort. theyre not impressed by ones job title, for example, or any of the other appurtenances of authority. indeed, thats practically the definition of a nerd. i found myself talking recently to someone from hollywood who was planning a show about nerds. i thought it would be useful if i explained what a nerd was. what i came up with was: someone who doesnt expend any effort on marketing himself. a nerd, in other words, is someone who concentrates on substance. so whats the connection between nerds and technology? roughly that you cant fool mother nature. in technical matters, you have to get the right answers. if your software miscalculates the path of a space probe, you cant finesse your way out of trouble by saying that your code is patriotic, or avant-garde, or any of the other dodges people use in nontechnical fields. and as technology becomes increasingly important in the economy, nerd culture is rising with it. nerds are already a lot cooler than they were when i was a kid. when i was in college in the mid-1980s, "nerd" was still an insult. people who majored in computer science generally tried to conceal it. now women ask me where they can meet nerds. (the answer that springs to mind is "usenix," but that would be like drinking from a firehose.) i have no illusions about why nerd culture is becoming more accepted. its not because people are realizing that substance is more important than marketing. its because the nerds are getting rich. but that is not going to change. what makes the nerds rich, usually, is stock options. now there are moves afoot to make it harder for companies to grant options. to the extent theres some genuine accounting abuse going on, by all means correct it. but dont kill the golden goose. equity is the fuel that drives technical innovation. options are a good idea because (a) theyre fair, and (b) they work. someone who goes to work for a company is (one hopes) adding to its value, and its only fair to give them a share of it. and as a purely practical measure, people work a lot harder when they have options. ive seen that first hand. the fact that a few crooks during the bubble robbed their companies by granting themselves options doesnt mean options are a bad idea. during the railroad boom, some executives enriched themselves by selling watered stockby issuing more shares than they said were outstanding. but that doesnt make common stock a bad idea. crooks just use whatever means are available. if there is a problem with options, its that they reward slightly the wrong thing. not surprisingly, people do what you pay them to. if you pay them by the hour, theyll work a lot of hours. if you pay them by the volume of work done, theyll get a lot of work done (but only as you defined work). and if you pay them to raise the stock price, which is what options amount to, theyll raise the stock price. but thats not quite what you want. what you want is to increase the actual value of the company, not its market cap. over time the two inevitably meet, but not always as quickly as options vest. which means options tempt employees, if only unconsciously, to "pump and dump"to do things that will make the company seem valuable. i found that when i was at yahoo, i couldnt help thinking, "how will this sound to investors?" when i should have been thinking "is this a good idea?" so maybe the standard option deal needs to be tweaked slightly. maybe options should be replaced with something tied more directly to earnings. its still early days. what made the options valuable, for the most part, is that they were options on the stock of startups . startups were not of course a creation of the bubble, but they were more visible during the bubble than ever before. one thing most people did learn about for the first time during the bubble was the startup created with the intention of selling it. originally a startup meant a small company that hoped to grow into a big one. but increasingly startups are evolving into a vehicle for developing technology on spec. as i wrote in hackers & painters , employees seem to be most productive when theyre paid in proportion to the wealth they generate. and the advantage of a startupindeed, almost its raison detreis that it offers something otherwise impossible to obtain: a way of measuring that. in many businesses, it just makes more sense for companies to get technology by buying startups rather than developing it in house. you pay more, but there is less risk, and risk is what big companies dont want. it makes the guys developing the technology more accountable, because they only get paid if they build the winner. and you end up with better technology, created faster, because things are made in the innovative atmosphere of startups instead of the bureaucratic atmosphere of big companies. our startup, viaweb, was built to be sold. we were open with investors about that from the start. and we were careful to create something that could slot easily into a larger company. that is the pattern for the future. the bubble was a california phenomenon. when i showed up in silicon valley in 1998, i felt like an immigrant from eastern europe arriving in america in 1900. everyone was so cheerful and healthy and rich. it seemed a new and improved world. the press, ever eager to exaggerate small trends, now gives one the impression that silicon valley is a ghost town. not at all. when i drive down 101 from the airport, i still feel a buzz of energy, as if there were a giant transformer nearby. real estate is still more expensive than just about anywhere else in the country. the people still look healthy, and the weather is still fabulous. the future is there. (i say "there" because i moved back to the east coast after yahoo. i still wonder if this was a smart idea.) what makes the bay area superior is the attitude of the people. i notice that when i come home to boston. the first thing i see when i walk out of the airline terminal is the fat, grumpy guy in charge of the taxi line. i brace myself for rudeness: remember, youre back on the east coast now. the atmosphere varies from city to city, and fragile organisms like startups are exceedingly sensitive to such variation. if it hadnt already been hijacked as a new euphemism for liberal, the word to describe the atmosphere in the bay area would be "progressive." people there are trying to build the future. boston has mit and harvard, but it also has a lot of truculent, unionized employees like the police who recently held the democratic national convention for ransom , and a lot of people trying to be thurston howell. two sides of an obsolete coin. silicon valley may not be the next paris or london, but it is at least the next chicago. for the next fifty years, thats where new wealth will come from. during the bubble, optimistic analysts used to justify high price to earnings ratios by saying that technology was going to increase productivity dramatically. they were wrong about the specific companies, but not so wrong about the underlying principle. i think one of the big trends well see in the coming century is a huge increase in productivity. or more precisely, a huge increase in variation in productivity. technology is a lever. it doesnt add; it multiplies. if the present range of productivity is 0 to 100, introducing a multiple of 10 increases the range from 0 to 1000. one upshot of which is that the companies of the future may be surprisingly small. i sometimes daydream about how big you could grow a company (in revenues) without ever having more than ten people. what would happen if you outsourced everything except product development? if you tried this experiment, i think youd be surprised at how far you could get. as fred brooks pointed out, small groups are intrinsically more productive, because the internal friction in a group grows as the square of its size. till quite recently, running a major company meant managing an army of workers. our standards about how many employees a company should have are still influenced by old patterns. startups are perforce small, because they cant afford to hire a lot of people. but i think its a big mistake for companies to loosen their belts as revenues increase. the question is not whether you can afford the extra salaries. can you afford the loss in productivity that comes from making the company bigger? the prospect of technological leverage will of course raise the specter of unemployment. im surprised people still worry about this. after centuries of supposedly job-killing innovations, the number of jobs is within ten percent of the number of people who want them. this cant be a coincidence. there must be some kind of balancing mechanism. when one looks over these trends, is there any overall theme? there does seem to be: that in the coming century, good ideas will count for more. that 26 year olds with good ideas will increasingly have an edge over 50 year olds with powerful connections. that doing good work will matter more than dressing upor advertising, which is the same thing for companies. that people will be rewarded a bit more in proportion to the value of what they create. if so, this is good news indeed. good ideas always tend to win eventually. the problem is, it can take a very long time. it took decades for relativity to be accepted, and the greater part of a century to establish that central planning didnt work. so even a small increase in the rate at which good ideas win would be a momentous changebig enough, probably, to justify a name like the "new economy."  actually its hard to say now. as jeremy siegel points out, if the value of a stock is its future earnings, you cant tell if it was overvalued till you see what the earnings turn out to be. while certain famous internet stocks were almost certainly overvalued in 1999, it is still hard to say for sure whether, e.g., the nasdaq index was. siegel, jeremy j. "what is an asset price bubble? an operational definition." european financial management, 9:1, 2003.  the number of users comes from a 6/03 nielsen study quoted on googles site. (youd think theyd have something more recent.) the revenue estimate is based on revenues of $1.35 billion for the first half of 2004, as reported in their ipo filing. thanks to chris anderson, trevor blackwell, sarah harlin, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com remember the essays you had to write in high school? topic sentence, introductory paragraph, supporting paragraphs, conclusion. the conclusion being, say, that ahab in moby dick was a christ-like figure. oy. so im going to try to give the other side of the story: what an essay really is, and how you write one. or at least, how i write one. the most obvious difference between real essays and the things one has to write in school is that real essays are not exclusively about english literature. certainly schools should teach students how to write. but due to a series of historical accidents the teaching of writing has gotten mixed together with the study of literature. and so all over the country students are writing not about how a baseball team with a small budget might compete with the yankees, or the role of color in fashion, or what constitutes a good dessert, but about symbolism in dickens. with the result that writing is made to seem boring and pointless. who cares about symbolism in dickens? dickens himself would be more interested in an essay about color or baseball. how did things get this way? to answer that we have to go back almost a thousand years. around 1100, europe at last began to catch its breath after centuries of chaos, and once they had the luxury of curiosity they rediscovered what we call "the classics." the effect was rather as if we were visited by beings from another solar system. these earlier civilizations were so much more sophisticated that for the next several centuries the main work of european scholars, in almost every field, was to assimilate what they knew. during this period the study of ancient texts acquired great prestige. it seemed the essence of what scholars did. as european scholarship gained momentum it became less and less important; by 1350 someone who wanted to learn about science could find better teachers than aristotle in his own era.  but schools change slower than scholarship. in the 19th century the study of ancient texts was still the backbone of the curriculum. the time was then ripe for the question: if the study of ancient texts is a valid field for scholarship, why not modern texts? the answer, of course, is that the original raison detre of classical scholarship was a kind of intellectual archaeology that does not need to be done in the case of contemporary authors. but for obvious reasons no one wanted to give that answer. the archaeological work being mostly done, it implied that those studying the classics were, if not wasting their time, at least working on problems of minor importance. and so began the study of modern literature. there was a good deal of resistance at first. the first courses in english literature seem to have been offered by the newer colleges, particularly american ones. dartmouth, the university of vermont, amherst, and university college, london taught english literature in the 1820s. but harvard didnt have a professor of english literature until 1876, and oxford not till 1885. (oxford had a chair of chinese before it had one of english.)  what tipped the scales, at least in the us, seems to have been the idea that professors should do research as well as teach. this idea (along with the phd, the department, and indeed the whole concept of the modern university) was imported from germany in the late 19th century. beginning at johns hopkins in 1876, the new model spread rapidly. writing was one of the casualties. colleges had long taught english composition. but how do you do research on composition? the professors who taught math could be required to do original math, the professors who taught history could be required to write scholarly articles about history, but what about the professors who taught rhetoric or composition? what should they do research on? the closest thing seemed to be english literature.  and so in the late 19th century the teaching of writing was inherited by english professors. this had two drawbacks: (a) an expert on literature need not himself be a good writer, any more than an art historian has to be a good painter, and (b) the subject of writing now tends to be literature, since thats what the professor is interested in. high schools imitate universities. the seeds of our miserable high school experiences were sown in 1892, when the national education association "formally recommended that literature and composition be unified in the high school course."  the riting component of the 3 rs then morphed into english, with the bizarre consequence that high school students now had to write about english literature-- to write, without even realizing it, imitations of whatever english professors had been publishing in their journals a few decades before. its no wonder if this seems to the student a pointless exercise, because were now three steps removed from real work: the students are imitating english professors, who are imitating classical scholars, who are merely the inheritors of a tradition growing out of what was, 700 years ago, fascinating and urgently needed work. the other big difference between a real essay and the things they make you write in school is that a real essay doesnt take a position and then defend it. that principle, like the idea that we ought to be writing about literature, turns out to be another intellectual hangover of long forgotten origins. its often mistakenly believed that medieval universities were mostly seminaries. in fact they were more law schools. and at least in our tradition lawyers are advocates, trained to take either side of an argument and make as good a case for it as they can. whether cause or effect, this spirit pervaded early universities. the study of rhetoric, the art of arguing persuasively, was a third of the undergraduate curriculum.  and after the lecture the most common form of discussion was the disputation. this is at least nominally preserved in our present-day thesis defense: most people treat the words thesis and dissertation as interchangeable, but originally, at least, a thesis was a position one took and the dissertation was the argument by which one defended it. defending a position may be a necessary evil in a legal dispute, but its not the best way to get at the truth, as i think lawyers would be the first to admit. its not just that you miss subtleties this way. the real problem is that you cant change the question. and yet this principle is built into the very structure of the things they teach you to write in high school. the topic sentence is your thesis, chosen in advance, the supporting paragraphs the blows you strike in the conflict, and the conclusion-- uh, what is the conclusion? i was never sure about that in high school. it seemed as if we were just supposed to restate what we said in the first paragraph, but in different enough words that no one could tell. why bother? but when you understand the origins of this sort of "essay," you can see where the conclusion comes from. its the concluding remarks to the jury. good writing should be convincing, certainly, but it should be convincing because you got the right answers, not because you did a good job of arguing. when i give a draft of an essay to friends, there are two things i want to know: which parts bore them, and which seem unconvincing. the boring bits can usually be fixed by cutting. but i dont try to fix the unconvincing bits by arguing more cleverly. i need to talk the matter over. at the very least i must have explained something badly. in that case, in the course of the conversation ill be forced to come up a with a clearer explanation, which i can just incorporate in the essay. more often than not i have to change what i was saying as well. but the aim is never to be convincing per se. as the reader gets smarter, convincing and true become identical, so if i can convince smart readers i must be near the truth. the sort of writing that attempts to persuade may be a valid (or at least inevitable) form, but its historically inaccurate to call it an essay. an essay is something else. to understand what a real essay is, we have to reach back into history again, though this time not so far. to michel de montaigne, who in 1580 published a book of what he called "essais." he was doing something quite different from what lawyers do, and the difference is embodied in the name. essayer is the french verb meaning "to try" and an essai is an attempt. an essay is something you write to try to figure something out. figure out what? you dont know yet. and so you cant begin with a thesis, because you dont have one, and may never have one. an essay doesnt begin with a statement, but with a question. in a real essay, you dont take a position and defend it. you notice a door thats ajar, and you open it and walk in to see whats inside. if all you want to do is figure things out, why do you need to write anything, though? why not just sit and think? well, there precisely is montaignes great discovery. expressing ideas helps to form them. indeed, helps is far too weak a word. most of what ends up in my essays i only thought of when i sat down to write them. thats why i write them. in the things you write in school you are, in theory, merely explaining yourself to the reader. in a real essay youre writing for yourself. youre thinking out loud. but not quite. just as inviting people over forces you to clean up your apartment, writing something that other people will read forces you to think well. so it does matter to have an audience. the things ive written just for myself are no good. they tend to peter out. when i run into difficulties, i find i conclude with a few vague questions and then drift off to get a cup of tea. many published essays peter out in the same way. particularly the sort written by the staff writers of newsmagazines. outside writers tend to supply editorials of the defend-a-position variety, which make a beeline toward a rousing (and foreordained) conclusion. but the staff writers feel obliged to write something "balanced." since theyre writing for a popular magazine, they start with the most radioactively controversial questions, from which-- because theyre writing for a popular magazine-- they then proceed to recoil in terror. abortion, for or against? this group says one thing. that group says another. one thing is certain: the question is a complex one. (but dont get mad at us. we didnt draw any conclusions.) questions arent enough. an essay has to come up with answers. they dont always, of course. sometimes you start with a promising question and get nowhere. but those you dont publish. those are like experiments that get inconclusive results. an essay you publish ought to tell the reader something he didnt already know. but what you tell him doesnt matter, so long as its interesting. im sometimes accused of meandering. in defend-a-position writing that would be a flaw. there youre not concerned with truth. you already know where youre going, and you want to go straight there, blustering through obstacles, and hand-waving your way across swampy ground. but thats not what youre trying to do in an essay. an essay is supposed to be a search for truth. it would be suspicious if it didnt meander. the meander (aka menderes) is a river in turkey. as you might expect, it winds all over the place. but it doesnt do this out of frivolity. the path it has discovered is the most economical route to the sea.  the rivers algorithm is simple. at each step, flow down. for the essayist this translates to: flow interesting. of all the places to go next, choose the most interesting. one cant have quite as little foresight as a river. i always know generally what i want to write about. but not the specific conclusions i want to reach; from paragraph to paragraph i let the ideas take their course. this doesnt always work. sometimes, like a river, one runs up against a wall. then i do the same thing the river does: backtrack. at one point in this essay i found that after following a certain thread i ran out of ideas. i had to go back seven paragraphs and start over in another direction. fundamentally an essay is a train of thought-- but a cleaned-up train of thought, as dialogue is cleaned-up conversation. real thought, like real conversation, is full of false starts. it would be exhausting to read. you need to cut and fill to emphasize the central thread, like an illustrator inking over a pencil drawing. but dont change so much that you lose the spontaneity of the original. err on the side of the river. an essay is not a reference work. its not something you read looking for a specific answer, and feel cheated if you dont find it. id much rather read an essay that went off in an unexpected but interesting direction than one that plodded dutifully along a prescribed course. so whats interesting? for me, interesting means surprise. interfaces, as geoffrey james has said, should follow the principle of least astonishment. a button that looks like it will make a machine stop should make it stop, not speed up. essays should do the opposite. essays should aim for maximum surprise. i was afraid of flying for a long time and could only travel vicariously. when friends came back from faraway places, it wasnt just out of politeness that i asked what they saw. i really wanted to know. and i found the best way to get information out of them was to ask what surprised them. how was the place different from what they expected? this is an extremely useful question. you can ask it of the most unobservant people, and it will extract information they didnt even know they were recording. surprises are things that you not only didnt know, but that contradict things you thought you knew. and so theyre the most valuable sort of fact you can get. theyre like a food thats not merely healthy, but counteracts the unhealthy effects of things youve already eaten. how do you find surprises? well, therein lies half the work of essay writing. (the other half is expressing yourself well.) the trick is to use yourself as a proxy for the reader. you should only write about things youve thought about a lot. and anything you come across that surprises you, whove thought about the topic a lot, will probably surprise most readers. for example, in a recent essay i pointed out that because you can only judge computer programmers by working with them, no one knows who the best programmers are overall. i didnt realize this when i began that essay, and even now i find it kind of weird. thats what youre looking for. so if you want to write essays, you need two ingredients: a few topics youve thought about a lot, and some ability to ferret out the unexpected. what should you think about? my guess is that it doesnt matter-- that anything can be interesting if you get deeply enough into it. one possible exception might be things that have deliberately had all the variation sucked out of them, like working in fast food. in retrospect, was there anything interesting about working at baskin-robbins? well, it was interesting how important color was to the customers. kids a certain age would point into the case and say that they wanted yellow. did they want french vanilla or lemon? they would just look at you blankly. they wanted yellow. and then there was the mystery of why the perennial favorite pralines n cream was so appealing. (i think now it was the salt.) and the difference in the way fathers and mothers bought ice cream for their kids: the fathers like benevolent kings bestowing largesse, the mothers harried, giving in to pressure. so, yes, there does seem to be some material even in fast food. i didnt notice those things at the time, though. at sixteen i was about as observant as a lump of rock. i can see more now in the fragments of memory i preserve of that age than i could see at the time from having it all happening live, right in front of me. so the ability to ferret out the unexpected must not merely be an inborn one. it must be something you can learn. how do you learn it? to some extent its like learning history. when you first read history, its just a whirl of names and dates. nothing seems to stick. but the more you learn, the more hooks you have for new facts to stick onto-- which means you accumulate knowledge at whats colloquially called an exponential rate. once you remember that normans conquered england in 1066, it will catch your attention when you hear that other normans conquered southern italy at about the same time. which will make you wonder about normandy, and take note when a third book mentions that normans were not, like most of what is now called france, tribes that flowed in as the roman empire collapsed, but vikings (norman  north man) who arrived four centuries later in 911. which makes it easier to remember that dublin was also established by vikings in the 840s. etc, etc squared. collecting surprises is a similar process. the more anomalies youve seen, the more easily youll notice new ones. which means, oddly enough, that as you grow older, life should become more and more surprising. when i was a kid, i used to think adults had it all figured out. i had it backwards. kids are the ones who have it all figured out. theyre just mistaken. when it comes to surprises, the rich get richer. but (as with wealth) there may be habits of mind that will help the process along. its good to have a habit of asking questions, especially questions beginning with why. but not in the random way that three year olds ask why. there are an infinite number of questions. how do you find the fruitful ones? i find it especially useful to ask why about things that seem wrong. for example, why should there be a connection between humor and misfortune? why do we find it funny when a character, even one we like, slips on a banana peel? theres a whole essays worth of surprises there for sure. if you want to notice things that seem wrong, youll find a degree of skepticism helpful. i take it as an axiom that were only achieving 1% of what we could. this helps counteract the rule that gets beaten into our heads as children: that things are the way they are because that is how things have to be. for example, everyone ive talked to while writing this essay felt the same about english classes-- that the whole process seemed pointless. but none of us had the balls at the time to hypothesize that it was, in fact, all a mistake. we all thought there was just something we werent getting. i have a hunch you want to pay attention not just to things that seem wrong, but things that seem wrong in a humorous way. im always pleased when i see someone laugh as they read a draft of an essay. but why should i be? im aiming for good ideas. why should good ideas be funny? the connection may be surprise. surprises make us laugh, and surprises are what one wants to deliver. i write down things that surprise me in notebooks. i never actually get around to reading them and using what ive written, but i do tend to reproduce the same thoughts later. so the main value of notebooks may be what writing things down leaves in your head. people trying to be cool will find themselves at a disadvantage when collecting surprises. to be surprised is to be mistaken. and the essence of cool, as any fourteen year old could tell you, is nil admirari. when youre mistaken, dont dwell on it; just act like nothings wrong and maybe no one will notice. one of the keys to coolness is to avoid situations where inexperience may make you look foolish. if you want to find surprises you should do the opposite. study lots of different things, because some of the most interesting surprises are unexpected connections between different fields. for example, jam, bacon, pickles, and cheese, which are among the most pleasing of foods, were all originally intended as methods of preservation. and so were books and paintings. whatever you study, include history-- but social and economic history, not political history. history seems to me so important that its misleading to treat it as a mere field of study. another way to describe it is all the data we have so far. among other things, studying history gives one confidence that there are good ideas waiting to be discovered right under our noses. swords evolved during the bronze age out of daggers, which (like their flint predecessors) had a hilt separate from the blade. because swords are longer the hilts kept breaking off. but it took five hundred years before someone thought of casting hilt and blade as one piece. above all, make a habit of paying attention to things youre not supposed to, either because theyre " inappropriate ," or not important, or not what youre supposed to be working on. if youre curious about something, trust your instincts. follow the threads that attract your attention. if theres something youre really interested in, youll find they have an uncanny way of leading back to it anyway, just as the conversation of people who are especially proud of something always tends to lead back to it. for example, ive always been fascinated by comb-overs, especially the extreme sort that make a man look as if hes wearing a beret made of his own hair. surely this is a lowly sort of thing to be interested in-- the sort of superficial quizzing best left to teenage girls. and yet there is something underneath. the key question, i realized, is how does the comber-over not see how odd he looks? and the answer is that he got to look that way incrementally. what began as combing his hair a little carefully over a thin patch has gradually, over 20 years, grown into a monstrosity. gradualness is very powerful. and that power can be used for constructive purposes too: just as you can trick yourself into looking like a freak, you can trick yourself into creating something so grand that you would never have dared to plan such a thing. indeed, this is just how most good software gets created. you start by writing a stripped-down kernel (how hard can it be?) and gradually it grows into a complete operating system. hence the next leap: could you do the same thing in painting, or in a novel? see what you can extract from a frivolous question? if theres one piece of advice i would give about writing essays, it would be: dont do as youre told. dont believe what youre supposed to. dont write the essay readers expect; one learns nothing from what one expects. and dont write the way they taught you to in school. the most important sort of disobedience is to write essays at all. fortunately, this sort of disobedience shows signs of becoming rampant . it used to be that only a tiny number of officially approved writers were allowed to write essays. magazines published few of them, and judged them less by what they said than who wrote them; a magazine might publish a story by an unknown writer if it was good enough, but if they published an essay on x it had to be by someone who was at least forty and whose job title had x in it. which is a problem, because there are a lot of things insiders cant say precisely because theyre insiders. the internet is changing that. anyone can publish an essay on the web, and it gets judged, as any writing should, by what it says, not who wrote it. who are you to write about x? you are whatever you wrote. popular magazines made the period between the spread of literacy and the arrival of tv the golden age of the short story. the web may well make this the golden age of the essay. and thats certainly not something i realized when i started writing this.  im thinking of oresme (c. 1323-82). but its hard to pick a date, because there was a sudden drop-off in scholarship just as europeans finished assimilating classical science. the cause may have been the plague of 1347; the trend in scientific progress matches the population curve.  parker, william r. "where do college english departments come from?" college english 28 (1966-67), pp. 339-351. reprinted in gray, donald j. (ed). the department of english at indiana university bloomington 1868-1970. indiana university publications. daniels, robert v. the university of vermont: the first two hundred years. university of vermont, 1991. mueller, friedrich m. letter to the pall mall gazette. 1886/87. reprinted in bacon, alan (ed). the nineteenth-century history of english studies. ashgate, 1998.  im compressing the story a bit. at first literature took a back seat to philology, which (a) seemed more serious and (b) was popular in germany, where many of the leading scholars of that generation had been trained. in some cases the writing teachers were transformed in situ into english professors. francis james child, who had been boylston professor of rhetoric at harvard since 1851, became in 1876 the universitys first professor of english.  parker, op. cit. , p. 25.  the undergraduate curriculum or trivium (whence "trivial") consisted of latin grammar, rhetoric, and logic. candidates for masters degrees went on to study the quadrivium of arithmetic, geometry, music, and astronomy. together these were the seven liberal arts. the study of rhetoric was inherited directly from rome, where it was considered the most important subject. it would not be far from the truth to say that education in the classical world meant training landowners sons to speak well enough to defend their interests in political and legal disputes.  trevor blackwell points out that this isnt strictly true, because the outside edges of curves erode faster. thanks to ken anderson, trevor blackwell, sarah harlin, jessica livingston, jackie mcdonough, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com in a recent talk i said something that upset a lot of people: that you could get smarter programmers to work on a python project than you could to work on a java project. i didnt mean by this that java programmers are dumb. i meant that python programmers are smart. its a lot of work to learn a new programming language. and people dont learn python because it will get them a job; they learn it because they genuinely like to program and arent satisfied with the languages they already know. which makes them exactly the kind of programmers companies should want to hire. hence what, for lack of a better name, ill call the python paradox: if a company chooses to write its software in a comparatively esoteric language, theyll be able to hire better programmers, because theyll attract only those who cared enough to learn it. and for programmers the paradox is even more pronounced: the language to learn, if you want to get a good job, is a language that people dont learn merely to get a job. only a few companies have been smart enough to realize this so far. but there is a kind of selection going on here too: theyre exactly the companies programmers would most like to work for. google, for example. when they advertise java programming jobs, they also want python experience. a friend of mine who knows nearly all the widely used languages uses python for most of his projects. he says the main reason is that he likes the way source code looks. that may seem a frivolous reason to choose one language over another. but it is not so frivolous as it sounds: when you program, you spend more time reading code than writing it. you push blobs of source code around the way a sculptor does blobs of clay. so a language that makes source code ugly is maddening to an exacting programmer, as clay full of lumps would be to a sculptor. at the mention of ugly source code, people will of course think of perl. but the superficial ugliness of perl is not the sort i mean. real ugliness is not harsh-looking syntax, but having to build programs out of the wrong concepts. perl may look like a cartoon character swearing, but there are cases where it surpasses python conceptually. so far, anyway. both languages are of course moving targets. but they share, along with ruby (and icon, and joy, and j, and lisp, and smalltalk) the fact that theyre created by, and used by, people who really care about programming. and those tend to be the ones who do it well. this essay was originally published at paulgraham.com (this essay is derived from a talk at oscon 2004.) a few months ago i finished a new book , and in reviews i keep noticing words like "provocative and "controversial. to say nothing of "idiotic. i didnt mean to make the book controversial. i was trying to make it efficient. i didnt want to waste peoples time telling them things they already knew. its more efficient just to give them the diffs. but i suppose thats bound to yield an alarming book. theres no controversy about which idea is most controversial: the suggestion that variation in wealth might not be as big a problem as we think. i didnt say in the book that variation in wealth was in itself a good thing. i said in some situations it might be a sign of good things. a throbbing headache is not a good thing, but it can be a sign of a good thing-- for example, that youre recovering consciousness after being hit on the head. variation in wealth can be a sign of variation in productivity. (in a society of one, theyre identical.) and that is almost certainly a good thing: if your society has no variation in productivity, its probably not because everyone is thomas edison. its probably because you have no thomas edisons. in a low-tech society you dont see much variation in productivity. if you have a tribe of nomads collecting sticks for a fire, how much more productive is the best stick gatherer going to be than the worst? a factor of two? whereas when you hand people a complex tool like a computer, the variation in what they can do with it is enormous. thats not a new idea. fred brooks wrote about it in 1974, and the study he quoted was published in 1968. but i think he underestimated the variation between programmers. he wrote about productivity in lines of code: the best programmers can solve a given problem in a tenth the time. but what if the problem isnt given? in programming, as in many fields, the hard part isnt solving problems, but deciding what problems to solve. imagination is hard to measure, but in practice it dominates the kind of productivity thats measured in lines of code. productivity varies in any field, but there are few in which it varies so much. the variation between programmers is so great that it becomes a difference in kind. i dont think this is something intrinsic to programming, though. in every field, technology magnifies differences in productivity. i think whats happening in programming is just that we have a lot of technological leverage. but in every field the lever is getting longer, so the variation we see is something that more and more fields will see as time goes on. and the success of companies, and countries, will depend increasingly on how they deal with it. if variation in productivity increases with technology, then the contribution of the most productive individuals will not only be disproportionately large, but will actually grow with time. when you reach the point where 90% of a groups output is created by 1% of its members, you lose big if something (whether viking raids, or central planning) drags their productivity down to the average. if we want to get the most out of them, we need to understand these especially productive people. what motivates them? what do they need to do their jobs? how do you recognize them? how do you get them to come and work for you? and then of course theres the question, how do you become one? i know a handful of super-hackers, so i sat down and thought about what they have in common. their defining quality is probably that they really love to program. ordinary programmers write code to pay the bills. great hackers think of it as something they do for fun, and which theyre delighted to find people will pay them for. great programmers are sometimes said to be indifferent to money. this isnt quite true. it is true that all they really care about is doing interesting work. but if you make enough money, you get to work on whatever you want, and for that reason hackers are attracted by the idea of making really large amounts of money. but as long as they still have to show up for work every day, they care more about what they do there than how much they get paid for it. economically, this is a fact of the greatest importance, because it means you dont have to pay great hackers anything like what theyre worth. a great programmer might be ten or a hundred times as productive as an ordinary one, but hell consider himself lucky to get paid three times as much. as ill explain later, this is partly because great hackers dont know how good they are. but its also because money is not the main thing they want. what do hackers want? like all craftsmen, hackers like good tools. in fact, thats an understatement. good hackers find it unbearable to use bad tools. theyll simply refuse to work on projects with the wrong infrastructure. at a startup i once worked for, one of the things pinned up on our bulletin board was an ad from ibm. it was a picture of an as400, and the headline read, i think, "hackers despise it.  when you decide what infrastructure to use for a project, youre not just making a technical decision. youre also making a social decision, and this may be the more important of the two. for example, if your company wants to write some software, it might seem a prudent choice to write it in java. but when you choose a language, youre also choosing a community. the programmers youll be able to hire to work on a java project wont be as smart as the ones you could get to work on a project written in python. and the quality of your hackers probably matters more than the language you choose. though, frankly, the fact that good hackers prefer python to java should tell you something about the relative merits of those languages. business types prefer the most popular languages because they view languages as standards. they dont want to bet the company on betamax. the thing about languages, though, is that theyre not just standards. if you have to move bits over a network, by all means use tcp/ip. but a programming language isnt just a format. a programming language is a medium of expression. ive read that java has just overtaken cobol as the most popular language. as a standard, you couldnt wish for more. but as a medium of expression, you could do a lot better. of all the great programmers i can think of, i know of only one who would voluntarily program in java. and of all the great programmers i can think of who dont work for sun, on java, i know of zero. great hackers also generally insist on using open source software. not just because its better, but because it gives them more control. good hackers insist on control. this is part of what makes them good hackers: when somethings broken, they need to fix it. you want them to feel this way about the software theyre writing for you. you shouldnt be surprised when they feel the same way about the operating system. a couple years ago a venture capitalist friend told me about a new startup he was involved with. it sounded promising. but the next time i talked to him, he said theyd decided to build their software on windows nt, and had just hired a very experienced nt developer to be their chief technical officer. when i heard this, i thought, these guys are doomed. one, the cto couldnt be a first rate hacker, because to become an eminent nt developer he would have had to use nt voluntarily, multiple times, and i couldnt imagine a great hacker doing that; and two, even if he was good, hed have a hard time hiring anyone good to work for him if the project had to be built on nt.  after software, the most important tool to a hacker is probably his office. big companies think the function of office space is to express rank. but hackers use their offices for more than that: they use their office as a place to think in. and if youre a technology company, their thoughts are your product. so making hackers work in a noisy, distracting environment is like having a paint factory where the air is full of soot. the cartoon strip dilbert has a lot to say about cubicles, and with good reason. all the hackers i know despise them. the mere prospect of being interrupted is enough to prevent hackers from working on hard problems. if you want to get real work done in an office with cubicles, you have two options: work at home, or come in early or late or on a weekend, when no one else is there. dont companies realize this is a sign that something is broken? an office environment is supposed to be something that helps you work, not something you work despite. companies like cisco are proud that everyone there has a cubicle, even the ceo. but theyre not so advanced as they think; obviously they still view office space as a badge of rank. note too that cisco is famous for doing very little product development in house. they get new technology by buying the startups that created it-- where presumably the hackers did have somewhere quiet to work. one big company that understands what hackers need is microsoft. i once saw a recruiting ad for microsoft with a big picture of a door. work for us, the premise was, and well give you a place to work where you can actually get work done. and you know, microsoft is remarkable among big companies in that they are able to develop software in house. not well, perhaps, but well enough. if companies want hackers to be productive, they should look at what they do at home. at home, hackers can arrange things themselves so they can get the most done. and when they work at home, hackers dont work in noisy, open spaces; they work in rooms with doors. they work in cosy, neighborhoody places with people around and somewhere to walk when they need to mull something over, instead of in glass boxes set in acres of parking lots. they have a sofa they can take a nap on when they feel tired, instead of sitting in a coma at their desk, pretending to work. theres no crew of people with vacuum cleaners that roars through every evening during the prime hacking hours. there are no meetings or, god forbid, corporate retreats or team-building exercises. and when you look at what theyre doing on that computer, youll find it reinforces what i said earlier about tools. they may have to use java and windows at work, but at home, where they can choose for themselves, youre more likely to find them using perl and linux. indeed, these statistics about cobol or java being the most popular language can be misleading. what we ought to look at, if we want to know what tools are best, is what hackers choose when they can choose freely-- that is, in projects of their own. when you ask that question, you find that open source operating systems already have a dominant market share, and the number one language is probably perl. along with good tools, hackers want interesting projects. what makes a project interesting? well, obviously overtly sexy applications like stealth planes or special effects software would be interesting to work on. but any application can be interesting if it poses novel technical challenges. so its hard to predict which problems hackers will like, because some become interesting only when the people working on them discover a new kind of solution. before ita (who wrote the software inside orbitz), the people working on airline fare searches probably thought it was one of the most boring applications imaginable. but ita made it interesting by redefining the problem in a more ambitious way. i think the same thing happened at google. when google was founded, the conventional wisdom among the so-called portals was that search was boring and unimportant. but the guys at google didnt think search was boring, and thats why they do it so well. this is an area where managers can make a difference. like a parent saying to a child, i bet you cant clean up your whole room in ten minutes, a good manager can sometimes redefine a problem as a more interesting one. steve jobs seems to be particularly good at this, in part simply by having high standards. there were a lot of small, inexpensive computers before the mac. he redefined the problem as: make one thats beautiful. and that probably drove the developers harder than any carrot or stick could. they certainly delivered. when the mac first appeared, you didnt even have to turn it on to know it would be good; you could tell from the case. a few weeks ago i was walking along the street in cambridge, and in someones trash i saw what appeared to be a mac carrying case. i looked inside, and there was a mac se. i carried it home and plugged it in, and it booted. the happy macintosh face, and then the finder. my god, it was so simple. it was just like ... google. hackers like to work for people with high standards. but its not enough just to be exacting. you have to insist on the right things. which usually means that you have to be a hacker yourself. ive seen occasional articles about how to manage programmers. really there should be two articles: one about what to do if you are yourself a programmer, and one about what to do if youre not. and the second could probably be condensed into two words: give up. the problem is not so much the day to day management. really good hackers are practically self-managing. the problem is, if youre not a hacker, you cant tell who the good hackers are. a similar problem explains why american cars are so ugly. i call it the design paradox. you might think that you could make your products beautiful just by hiring a great designer to design them. but if you yourself dont have good taste , how are you going to recognize a good designer? by definition you cant tell from his portfolio. and you cant go by the awards hes won or the jobs hes had, because in design, as in most fields, those tend to be driven by fashion and schmoozing, with actual ability a distant third. theres no way around it: you cant manage a process intended to produce beautiful things without knowing what beautiful is. american cars are ugly because american car companies are run by people with bad taste. many people in this country think of taste as something elusive, or even frivolous. it is neither. to drive design, a manager must be the most demanding user of a companys products. and if you have really good taste, you can, as steve jobs does, make satisfying you the kind of problem that good people like to work on. its pretty easy to say what kinds of problems are not interesting: those where instead of solving a few big, clear, problems, you have to solve a lot of nasty little ones. one of the worst kinds of projects is writing an interface to a piece of software thats full of bugs. another is when you have to customize something for an individual clients complex and ill-defined needs. to hackers these kinds of projects are the death of a thousand cuts. the distinguishing feature of nasty little problems is that you dont learn anything from them. writing a compiler is interesting because it teaches you what a compiler is. but writing an interface to a buggy piece of software doesnt teach you anything, because the bugs are random.  so its not just fastidiousness that makes good hackers avoid nasty little problems. its more a question of self-preservation. working on nasty little problems makes you stupid. good hackers avoid it for the same reason models avoid cheeseburgers. of course some problems inherently have this character. and because of supply and demand, they pay especially well. so a company that found a way to get great hackers to work on tedious problems would be very successful. how would you do it? one place this happens is in startups. at our startup we had robert morris working as a system administrator. thats like having the rolling stones play at a bar mitzvah. you cant hire that kind of talent. but people will do any amount of drudgery for companies of which theyre the founders.  bigger companies solve the problem by partitioning the company. they get smart people to work for them by establishing a separate r&d; department where employees dont have to work directly on customers nasty little problems.  in this model, the research department functions like a mine. they produce new ideas; maybe the rest of the company will be able to use them. you may not have to go to this extreme. bottom-up programming suggests another way to partition the company: have the smart people work as toolmakers. if your company makes software to do x, have one group that builds tools for writing software of that type, and another that uses these tools to write the applications. this way you might be able to get smart people to write 99% of your code, but still keep them almost as insulated from users as they would be in a traditional research department. the toolmakers would have users, but theyd only be the companys own developers.  if microsoft used this approach, their software wouldnt be so full of security holes, because the less smart people writing the actual applications wouldnt be doing low-level stuff like allocating memory. instead of writing word directly in c, theyd be plugging together big lego blocks of word-language. (duplo, i believe, is the technical term.) along with interesting problems, what good hackers like is other good hackers. great hackers tend to clump together-- sometimes spectacularly so, as at xerox parc. so you wont attract good hackers in linear proportion to how good an environment you create for them. the tendency to clump means its more like the square of the environment. so its winner take all. at any given time, there are only about ten or twenty places where hackers most want to work, and if you arent one of them, you wont just have fewer great hackers, youll have zero. having great hackers is not, by itself, enough to make a company successful. it works well for google and ita, which are two of the hot spots right now, but it didnt help thinking machines or xerox. sun had a good run for a while, but their business model is a down elevator. in that situation, even the best hackers cant save you. i think, though, that all other things being equal, a company that can attract great hackers will have a huge advantage. there are people who would disagree with this. when we were making the rounds of venture capital firms in the 1990s, several told us that software companies didnt win by writing great software, but through brand, and dominating channels, and doing the right deals. they really seemed to believe this, and i think i know why. i think what a lot of vcs are looking for, at least unconsciously, is the next microsoft. and of course if microsoft is your model, you shouldnt be looking for companies that hope to win by writing great software. but vcs are mistaken to look for the next microsoft, because no startup can be the next microsoft unless some other company is prepared to bend over at just the right moment and be the next ibm. its a mistake to use microsoft as a model, because their whole culture derives from that one lucky break. microsoft is a bad data point. if you throw them out, you find that good products do tend to win in the market. what vcs should be looking for is the next apple, or the next google. i think bill gates knows this. what worries him about google is not the power of their brand, but the fact that they have better hackers.  so who are the great hackers? how do you know when you meet one? that turns out to be very hard. even hackers cant tell. im pretty sure now that my friend trevor blackwell is a great hacker. you may have read on slashdot how he made his own segway . the remarkable thing about this project was that he wrote all the software in one day (in python, incidentally). for trevor, thats par for the course. but when i first met him, i thought he was a complete idiot. he was standing in robert morriss office babbling at him about something or other, and i remember standing behind him making frantic gestures at robert to shoo this nut out of his office so we could go to lunch. robert says he misjudged trevor at first too. apparently when robert first met him, trevor had just begun a new scheme that involved writing down everything about every aspect of his life on a stack of index cards, which he carried with him everywhere. hed also just arrived from canada, and had a strong canadian accent and a mullet. the problem is compounded by the fact that hackers, despite their reputation for social obliviousness, sometimes put a good deal of effort into seeming smart. when i was in grad school i used to hang around the mit ai lab occasionally. it was kind of intimidating at first. everyone there spoke so fast. but after a while i learned the trick of speaking fast. you dont have to think any faster; just use twice as many words to say everything. with this amount of noise in the signal, its hard to tell good hackers when you meet them. i cant tell, even now. you also cant tell from their resumes. it seems like the only way to judge a hacker is to work with him on something. and this is the reason that high-tech areas only happen around universities. the active ingredient here is not so much the professors as the students. startups grow up around universities because universities bring together promising young people and make them work on the same projects. the smart ones learn who the other smart ones are, and together they cook up new projects of their own. because you cant tell a great hacker except by working with him, hackers themselves cant tell how good they are. this is true to a degree in most fields. ive found that people who are great at something are not so much convinced of their own greatness as mystified at why everyone else seems so incompetent. but its particularly hard for hackers to know how good they are, because its hard to compare their work. this is easier in most other fields. in the hundred meters, you know in 10 seconds whos fastest. even in math there seems to be a general consensus about which problems are hard to solve, and what constitutes a good solution. but hacking is like writing. who can say which of two novels is better? certainly not the authors. with hackers, at least, other hackers can tell. thats because, unlike novelists, hackers collaborate on projects. when you get to hit a few difficult problems over the net at someone, you learn pretty quickly how hard they hit them back. but hackers cant watch themselves at work. so if you ask a great hacker how good he is, hes almost certain to reply, i dont know. hes not just being modest. he really doesnt know. and none of us know, except about people weve actually worked with. which puts us in a weird situation: we dont know who our heroes should be. the hackers who become famous tend to become famous by random accidents of pr. occasionally i need to give an example of a great hacker, and i never know who to use. the first names that come to mind always tend to be people i know personally, but it seems lame to use them. so, i think, maybe i should say richard stallman, or linus torvalds, or alan kay, or someone famous like that. but i have no idea if these guys are great hackers. ive never worked with them on anything. if there is a michael jordan of hacking, no one knows, including him. finally, the question the hackers have all been wondering about: how do you become a great hacker? i dont know if its possible to make yourself into one. but its certainly possible to do things that make you stupid, and if you can make yourself stupid, you can probably make yourself smart too. the key to being a good hacker may be to work on what you like. when i think about the great hackers i know, one thing they have in common is the extreme difficulty of making them work on anything they dont want to. i dont know if this is cause or effect; it may be both. to do something well you have to love it. so to the extent you can preserve hacking as something you love, youre likely to do it well. try to keep the sense of wonder you had about programming at age 14. if youre worried that your current job is rotting your brain, it probably is. the best hackers tend to be smart, of course, but thats true in a lot of fields. is there some quality thats unique to hackers? i asked some friends, and the number one thing they mentioned was curiosity. id always supposed that all smart people were curious-- that curiosity was simply the first derivative of knowledge. but apparently hackers are particularly curious, especially about how things work. that makes sense, because programs are in effect giant descriptions of how things work. several friends mentioned hackers ability to concentrate-- their ability, as one put it, to "tune out everything outside their own heads. ive certainly noticed this. and ive heard several hackers say that after drinking even half a beer they cant program at all. so maybe hacking does require some special ability to focus. perhaps great hackers can load a large amount of context into their head, so that when they look at a line of code, they see not just that line but the whole program around it. john mcphee wrote that bill bradleys success as a basketball player was due partly to his extraordinary peripheral vision. "perfect eyesight means about 47 degrees of vertical peripheral vision. bill bradley had 70; he could see the basket when he was looking at the floor. maybe great hackers have some similar inborn ability. (i cheat by using a very dense language, which shrinks the court.) this could explain the disconnect over cubicles. maybe the people in charge of facilities, not having any concentration to shatter, have no idea that working in a cubicle feels to a hacker like having ones brain in a blender. (whereas bill, if the rumors of autism are true, knows all too well.) one difference ive noticed between great hackers and smart people in general is that hackers are more politically incorrect . to the extent there is a secret handshake among good hackers, its when they know one another well enough to express opinions that would get them stoned to death by the general public. and i can see why political incorrectness would be a useful quality in programming. programs are very complex and, at least in the hands of good programmers, very fluid. in such situations its helpful to have a habit of questioning assumptions. can you cultivate these qualities? i dont know. but you can at least not repress them. so here is my best shot at a recipe. if it is possible to make yourself into a great hacker, the way to do it may be to make the following deal with yourself: you never have to work on boring projects (unless your family will starve otherwise), and in return, youll never allow yourself to do a half-assed job. all the great hackers i know seem to have made that deal, though perhaps none of them had any choice in the matter.  in fairness, i have to say that ibm makes decent hardware. i wrote this on an ibm laptop.  they did turn out to be doomed. they shut down a few months later.  i think this is what people mean when they talk about the "meaning of life." on the face of it, this seems an odd idea. life isnt an expression; how could it have meaning? but it can have a quality that feels a lot like meaning. in a project like a compiler, you have to solve a lot of problems, but the problems all fall into a pattern, as in a signal. whereas when the problems you have to solve are random, they seem like noise.  einstein at one point worked designing refrigerators. (he had equity.)  its hard to say exactly what constitutes research in the computer world, but as a first approximation, its software that doesnt have users. i dont think its publication that makes the best hackers want to work in research departments. i think its mainly not having to have a three hour meeting with a product manager about problems integrating the korean version of word 13.27 with the talking paperclip.  something similar has been happening for a long time in the construction industry. when you had a house built a couple hundred years ago, the local builders built everything in it. but increasingly what builders do is assemble components designed and manufactured by someone else. this has, like the arrival of desktop publishing, given people the freedom to experiment in disastrous ways, but it is certainly more efficient.  google is much more dangerous to microsoft than netscape was. probably more dangerous than any other company has ever been. not least because theyre determined to fight. on their job listing page, they say that one of their "core values is "dont be evil. from a company selling soybean oil or mining equipment, such a statement would merely be eccentric. but i think all of us in the computer world recognize who that is a declaration of war on. thanks to jessica livingston, robert morris, and sarah harlin for reading earlier versions of this talk. this essay was originally published at paulgraham.com i realized recently that we may be able to solve part of the patent problem without waiting for the government. ive never been 100% sure whether patents help or hinder technological progress. when i was a kid i thought they helped. i thought they protected inventors from having their ideas stolen by big companies. maybe that was truer in the past, when more things were physical. but regardless of whether patents are in general a good thing, there do seem to be bad ways of using them. and since bad uses of patents seem to be increasing, there is an increasing call for patent reform. the problem with patent reform is that it has to go through the government. that tends to be slow. but recently i realized we can also attack the problem downstream. as well as pinching off the stream of patents at the point where theyre issued, we may in some cases be able to pinch it off at the point where theyre used. one way of using patents that clearly does not encourage innovation is when established companies with bad products use patents to suppress small competitors with good products. this is the type of abuse we may be able to decrease without having to go through the government. the way to do it is to get the companies that are above pulling this sort of trick to pledge publicly not to. then the ones that wont make such a pledge will be very conspicuous. potential employees wont want to work for them. and investors, too, will be able to see that theyre the sort of company that competes by litigation rather than by making good products. heres the pledge: no first use of software patents against companies with less than 25 people. ive deliberately traded precision for brevity. the patent pledge is not legally binding. its like googles "dont be evil." they dont define what evil is, but by publicly saying that, theyre saying theyre willing to be held to a standard that, say, altria is not. and though constraining, "dont be evil" has been good for google. technology companies win by attracting the most productive people, and the most productive people are attracted to employers who hold themselves to a higher standard than the law requires.  the patent pledge is in effect a narrower but open source "dont be evil." i encourage every technology company to adopt it. if you want to help fix patents, encourage your employer to. already most technology companies wouldnt sink to using patents on startups. you dont see google or facebook suing startups for patent infringement. they dont need to. so for the better technology companies, the patent pledge requires no change in behavior. theyre just promising to do what theyd do anyway. and when all the companies that wont use patents on startups have said so, the holdouts will be very conspicuous. the patent pledge doesnt fix every problem with patents. it wont stop patent trolls, for example; theyre already pariahs. but the problem the patent pledge does fix may be more serious than the problem of patent trolls. patent trolls are just parasites. a clumsy parasite may occasionally kill the host, but thats not its goal. whereas companies that sue startups for patent infringement generally do it with explicit goal of keeping their product off the market. companies that use patents on startups are attacking innovation at the root. now theres something any individual can do about this problem, without waiting for the government: ask companies where they stand. patent pledge site  because the pledge is deliberately vague, were going to need common sense when intepreting it. and even more vice versa: the pledge is vague in order to make people use common sense when interpreting it. so for example ive deliberately avoided saying whether the 25 people have to be employees, or whether contractors count too. if a company has to split hairs that fine about whether a suit would violate the patent pledge, its probably still a dick move. this essay was originally published at paulgraham.com when people care enough about something to do it well, those who do it best tend to be far better than everyone else. theres a huge gap between leonardo and second-rate contemporaries like borgognone. you see the same gap between raymond chandler and the average writer of detective novels. a top-ranked professional chess player could play ten thousand games against an ordinary club player without losing once. like chess or painting or writing novels, making money is a very specialized skill. but for some reason we treat this skill differently. no one complains when a few people surpass all the rest at playing chess or writing novels, but when a few people make more money than the rest, we get editorials saying this is wrong. why? the pattern of variation seems no different than for any other skill. what causes people to react so strongly when the skill is making money? i think there are three reasons we treat making money as different: the misleading model of wealth we learn as children; the disreputable way in which, till recently, most fortunes were accumulated; and the worry that great variations in income are somehow bad for society. as far as i can tell, the first is mistaken, the second outdated, and the third empirically false. could it be that, in a modern democracy, variation in income is actually a sign of health? when i was five i thought electricity was created by electric sockets. i didnt realize there were power plants out there generating it. likewise, it doesnt occur to most kids that wealth is something that has to be generated. it seems to be something that flows from parents. because of the circumstances in which they encounter it, children tend to misunderstand wealth. they confuse it with money. they think that there is a fixed amount of it. and they think of it as something thats distributed by authorities (and so should be distributed equally), rather than something that has to be created (and might be created unequally). in fact, wealth is not money. money is just a convenient way of trading one form of wealth for another. wealth is the underlying stuffthe goods and services we buy. when you travel to a rich or poor country, you dont have to look at peoples bank accounts to tell which kind youre in. you can see wealthin buildings and streets, in the clothes and the health of the people. where does wealth come from? people make it. this was easier to grasp when most people lived on farms, and made many of the things they wanted with their own hands. then you could see in the house, the herds, and the granary the wealth that each family created. it was obvious then too that the wealth of the world was not a fixed quantity that had to be shared out, like slices of a pie. if you wanted more wealth, you could make it. this is just as true today, though few of us create wealth directly for ourselves (except for a few vestigial domestic tasks). mostly we create wealth for other people in exchange for money, which we then trade for the forms of wealth we want.  because kids are unable to create wealth, whatever they have has to be given to them. and when wealth is something youre given, then of course it seems that it should be distributed equally.  as in most families it is. the kids see to that. "unfair," they cry, when one sibling gets more than another. in the real world, you cant keep living off your parents. if you want something, you either have to make it, or do something of equivalent value for someone else, in order to get them to give you enough money to buy it. in the real world, wealth is (except for a few specialists like thieves and speculators) something you have to create, not something thats distributed by daddy. and since the ability and desire to create it vary from person to person, its not made equally. you get paid by doing or making something people want, and those who make more money are often simply better at doing what people want. top actors make a lot more money than b-list actors. the b-list actors might be almost as charismatic, but when people go to the theater and look at the list of movies playing, they want that extra oomph that the big stars have. doing what people want is not the only way to get money, of course. you could also rob banks, or solicit bribes, or establish a monopoly. such tricks account for some variation in wealth, and indeed for some of the biggest individual fortunes, but they are not the root cause of variation in income. the root cause of variation in income, as occams razor implies, is the same as the root cause of variation in every other human skill. in the united states, the ceo of a large public company makes about 100 times as much as the average person.  basketball players make about 128 times as much, and baseball players 72 times as much. editorials quote this kind of statistic with horror. but i have no trouble imagining that one person could be 100 times as productive as another. in ancient rome the price of slaves varied by a factor of 50 depending on their skills.  and thats without considering motivation, or the extra leverage in productivity that you can get from modern technology. editorials about athletes or ceos salaries remind me of early christian writers, arguing from first principles about whether the earth was round, when they could just walk outside and check.  how much someones work is worth is not a policy question. its something the market already determines. "are they really worth 100 of us?" editorialists ask. depends on what you mean by worth. if you mean worth in the sense of what people will pay for their skills, the answer is yes, apparently. a few ceos incomes reflect some kind of wrongdoing. but are there not others whose incomes really do reflect the wealth they generate? steve jobs saved a company that was in a terminal decline. and not merely in the way a turnaround specialist does, by cutting costs; he had to decide what apples next products should be. few others could have done it. and regardless of the case with ceos, its hard to see how anyone could argue that the salaries of professional basketball players dont reflect supply and demand. it may seem unlikely in principle that one individual could really generate so much more wealth than another. the key to this mystery is to revisit that question, are they really worth 100 of us? would a basketball team trade one of their players for 100 random people? what would apples next product look like if you replaced steve jobs with a committee of 100 random people?  these things dont scale linearly. perhaps the ceo or the professional athlete has only ten times (whatever that means) the skill and determination of an ordinary person. but it makes all the difference that its concentrated in one individual. when we say that one kind of work is overpaid and another underpaid, what are we really saying? in a free market, prices are determined by what buyers want. people like baseball more than poetry, so baseball players make more than poets. to say that a certain kind of work is underpaid is thus identical with saying that people want the wrong things. well, of course people want the wrong things. it seems odd to be surprised by that. and it seems even odder to say that its unjust that certain kinds of work are underpaid.  then youre saying that its unjust that people want the wrong things. its lamentable that people prefer reality tv and corndogs to shakespeare and steamed vegetables, but unjust? that seems like saying that blue is heavy, or that up is circular. the appearance of the word "unjust" here is the unmistakable spectral signature of the daddy model. why else would this idea occur in this odd context? whereas if the speaker were still operating on the daddy model, and saw wealth as something that flowed from a common source and had to be shared out, rather than something generated by doing what other people wanted, this is exactly what youd get on noticing that some people made much more than others. when we talk about "unequal distribution of income," we should also ask, where does that income come from?  who made the wealth it represents? because to the extent that income varies simply according to how much wealth people create, the distribution may be unequal, but its hardly unjust. the second reason we tend to find great disparities of wealth alarming is that for most of human history the usual way to accumulate a fortune was to steal it: in pastoral societies by cattle raiding; in agricultural societies by appropriating others estates in times of war, and taxing them in times of peace. in conflicts, those on the winning side would receive the estates confiscated from the losers. in england in the 1060s, when william the conqueror distributed the estates of the defeated anglo-saxon nobles to his followers, the conflict was military. by the 1530s, when henry viii distributed the estates of the monasteries to his followers, it was mostly political.  but the principle was the same. indeed, the same principle is at work now in zimbabwe. in more organized societies, like china, the ruler and his officials used taxation instead of confiscation. but here too we see the same principle: the way to get rich was not to create wealth, but to serve a ruler powerful enough to appropriate it. this started to change in europe with the rise of the middle class. now we think of the middle class as people who are neither rich nor poor, but originally they were a distinct group. in a feudal society, there are just two classes: a warrior aristocracy, and the serfs who work their estates. the middle class were a new, third group who lived in towns and supported themselves by manufacturing and trade. starting in the tenth and eleventh centuries, petty nobles and former serfs banded together in towns that gradually became powerful enough to ignore the local feudal lords.  like serfs, the middle class made a living largely by creating wealth. (in port cities like genoa and pisa, they also engaged in piracy.) but unlike serfs they had an incentive to create a lot of it. any wealth a serf created belonged to his master. there was not much point in making more than you could hide. whereas the independence of the townsmen allowed them to keep whatever wealth they created. once it became possible to get rich by creating wealth, society as a whole started to get richer very rapidly. nearly everything we have was created by the middle class. indeed, the other two classes have effectively disappeared in industrial societies, and their names been given to either end of the middle class. (in the original sense of the word, bill gates is middle class.) but it was not till the industrial revolution that wealth creation definitively replaced corruption as the best way to get rich. in england, at least, corruption only became unfashionable (and in fact only started to be called "corruption") when there started to be other, faster ways to get rich. seventeenth-century england was much like the third world today, in that government office was a recognized route to wealth. the great fortunes of that time still derived more from what we would now call corruption than from commerce.  by the nineteenth century that had changed. there continued to be bribes, as there still are everywhere, but politics had by then been left to men who were driven more by vanity than greed. technology had made it possible to create wealth faster than you could steal it. the prototypical rich man of the nineteenth century was not a courtier but an industrialist. with the rise of the middle class, wealth stopped being a zero-sum game. jobs and wozniak didnt have to make us poor to make themselves rich. quite the opposite: they created things that made our lives materially richer. they had to, or we wouldnt have paid for them. but since for most of the worlds history the main route to wealth was to steal it, we tend to be suspicious of rich people. idealistic undergraduates find their unconsciously preserved childs model of wealth confirmed by eminent writers of the past. it is a case of the mistaken meeting the outdated. "behind every great fortune, there is a crime," balzac wrote. except he didnt. what he actually said was that a great fortune with no apparent cause was probably due to a crime well enough executed that it had been forgotten. if we were talking about europe in 1000, or most of the third world today, the standard misquotation would be spot on. but balzac lived in nineteenth-century france, where the industrial revolution was well advanced. he knew you could make a fortune without stealing it. after all, he did himself, as a popular novelist.  only a few countries (by no coincidence, the richest ones) have reached this stage. in most, corruption still has the upper hand. in most, the fastest way to get wealth is by stealing it. and so when we see increasing differences in income in a rich country, there is a tendency to worry that its sliding back toward becoming another venezuela. i think the opposite is happening. i think youre seeing a country a full step ahead of venezuela. will technology increase the gap between rich and poor? it will certainly increase the gap between the productive and the unproductive. thats the whole point of technology. with a tractor an energetic farmer could plow six times as much land in a day as he could with a team of horses. but only if he mastered a new kind of farming. ive seen the lever of technology grow visibly in my own time. in high school i made money by mowing lawns and scooping ice cream at baskin-robbins. this was the only kind of work available at the time. now high school kids could write software or design web sites. but only some of them will; the rest will still be scooping ice cream. i remember very vividly when in 1985 improved technology made it possible for me to buy a computer of my own. within months i was using it to make money as a freelance programmer. a few years before, i couldnt have done this. a few years before, there was no such thing as a freelance programmer. but apple created wealth, in the form of powerful, inexpensive computers, and programmers immediately set to work using it to create more. as this example suggests, the rate at which technology increases our productive capacity is probably polynomial, rather than linear. so we should expect to see ever-increasing variation in individual productivity as time goes on. will that increase the gap between rich and the poor? depends which gap you mean. technology should increase the gap in income, but it seems to decrease other gaps. a hundred years ago, the rich led a different kind of life from ordinary people. they lived in houses full of servants, wore elaborately uncomfortable clothes, and travelled about in carriages drawn by teams of horses which themselves required their own houses and servants. now, thanks to technology, the rich live more like the average person. cars are a good example of why. its possible to buy expensive, handmade cars that cost hundreds of thousands of dollars. but there is not much point. companies make more money by building a large number of ordinary cars than a small number of expensive ones. so a company making a mass-produced car can afford to spend a lot more on its design. if you buy a custom-made car, something will always be breaking. the only point of buying one now is to advertise that you can. or consider watches. fifty years ago, by spending a lot of money on a watch you could get better performance. when watches had mechanical movements, expensive watches kept better time. not any more. since the invention of the quartz movement, an ordinary timex is more accurate than a patek philippe costing hundreds of thousands of dollars.  indeed, as with expensive cars, if youre determined to spend a lot of money on a watch, you have to put up with some inconvenience to do it: as well as keeping worse time, mechanical watches have to be wound. the only thing technology cant cheapen is brand. which is precisely why we hear ever more about it. brand is the residue left as the substantive differences between rich and poor evaporate. but what label you have on your stuff is a much smaller matter than having it versus not having it. in 1900, if you kept a carriage, no one asked what year or brand it was. if you had one, you were rich. and if you werent rich, you took the omnibus or walked. now even the poorest americans drive cars, and it is only because were so well trained by advertising that we can even recognize the especially expensive ones.  the same pattern has played out in industry after industry. if there is enough demand for something, technology will make it cheap enough to sell in large volumes, and the mass-produced versions will be, if not better, at least more convenient.  and there is nothing the rich like more than convenience. the rich people i know drive the same cars, wear the same clothes, have the same kind of furniture, and eat the same foods as my other friends. their houses are in different neighborhoods, or if in the same neighborhood are different sizes, but within them life is similar. the houses are made using the same construction techniques and contain much the same objects. its inconvenient to do something expensive and custom. the rich spend their time more like everyone else too. bertie wooster seems long gone. now, most people who are rich enough not to work do anyway. its not just social pressure that makes them; idleness is lonely and demoralizing. nor do we have the social distinctions there were a hundred years ago. the novels and etiquette manuals of that period read now like descriptions of some strange tribal society. "with respect to the continuance of friendships..." hints mrs. beetons book of household management (1880), "it may be found necessary, in some cases, for a mistress to relinquish, on assuming the responsibility of a household, many of those commenced in the earlier part of her life." a woman who married a rich man was expected to drop friends who didnt. youd seem a barbarian if you behaved that way today. youd also have a very boring life. people still tend to segregate themselves somewhat, but much more on the basis of education than wealth.  materially and socially, technology seems to be decreasing the gap between the rich and the poor, not increasing it. if lenin walked around the offices of a company like yahoo or intel or cisco, hed think communism had won. everyone would be wearing the same clothes, have the same kind of office (or rather, cubicle) with the same furnishings, and address one another by their first names instead of by honorifics. everything would seem exactly as hed predicted, until he looked at their bank accounts. oops. is it a problem if technology increases that gap? it doesnt seem to be so far. as it increases the gap in income, it seems to decrease most other gaps. one often hears a policy criticized on the grounds that it would increase the income gap between rich and poor. as if it were an axiom that this would be bad. it might be true that increased variation in income would be bad, but i dont see how we can say its axiomatic. indeed, it may even be false, in industrial democracies. in a society of serfs and warlords, certainly, variation in income is a sign of an underlying problem. but serfdom is not the only cause of variation in income. a 747 pilot doesnt make 40 times as much as a checkout clerk because he is a warlord who somehow holds her in thrall. his skills are simply much more valuable. id like to propose an alternative idea: that in a modern society, increasing variation in income is a sign of health. technology seems to increase the variation in productivity at faster than linear rates. if we dont see corresponding variation in income, there are three possible explanations: (a) that technical innovation has stopped, (b) that the people who would create the most wealth arent doing it, or (c) that they arent getting paid for it. i think we can safely say that (a) and (b) would be bad. if you disagree, try living for a year using only the resources available to the average frankish nobleman in 800, and report back to us. (ill be generous and not send you back to the stone age.) the only option, if youre going to have an increasingly prosperous society without increasing variation in income, seems to be (c), that people will create a lot of wealth without being paid for it. that jobs and wozniak, for example, will cheerfully work 20-hour days to produce the apple computer for a society that allows them, after taxes, to keep just enough of their income to match what they would have made working 9 to 5 at a big company. will people create wealth if they cant get paid for it? only if its fun. people will write operating systems for free. but they wont install them, or take support calls, or train customers to use them. and at least 90% of the work that even the highest tech companies do is of this second, unedifying kind. all the unfun kinds of wealth creation slow dramatically in a society that confiscates private fortunes. we can confirm this empirically. suppose you hear a strange noise that you think may be due to a nearby fan. you turn the fan off, and the noise stops. you turn the fan back on, and the noise starts again. off, quiet. on, noise. in the absence of other information, it would seem the noise is caused by the fan. at various times and places in history, whether you could accumulate a fortune by creating wealth has been turned on and off. northern italy in 800, off (warlords would steal it). northern italy in 1100, on. central france in 1100, off (still feudal). england in 1800, on. england in 1974, off (98% tax on investment income). united states in 1974, on. weve even had a twin study: west germany, on; east germany, off. in every case, the creation of wealth seems to appear and disappear like the noise of a fan as you switch on and off the prospect of keeping it. there is some momentum involved. it probably takes at least a generation to turn people into east germans (luckily for england). but if it were merely a fan we were studying, without all the extra baggage that comes from the controversial topic of wealth, no one would have any doubt that the fan was causing the noise. if you suppress variations in income, whether by stealing private fortunes, as feudal rulers used to do, or by taxing them away, as some modern governments have done, the result always seems to be the same. society as a whole ends up poorer. if i had a choice of living in a society where i was materially much better off than i am now, but was among the poorest, or in one where i was the richest, but much worse off than i am now, id take the first option. if i had children, it would arguably be immoral not to. its absolute poverty you want to avoid, not relative poverty. if, as the evidence so far implies, you have to have one or the other in your society, take relative poverty. you need rich people in your society not so much because in spending their money they create jobs, but because of what they have to do to get rich. im not talking about the trickle-down effect here. im not saying that if you let henry ford get rich, hell hire you as a waiter at his next party. im saying that hell make you a tractor to replace your horse.  part of the reason this subject is so contentious is that some of those most vocal on the subject of wealthuniversity students, heirs, professors, politicians, and journalistshave the least experience creating it. (this phenomenon will be familiar to anyone who has overheard conversations about sports in a bar.) students are mostly still on the parental dole, and have not stopped to think about where that money comes from. heirs will be on the parental dole for life. professors and politicians live within socialist eddies of the economy, at one remove from the creation of wealth, and are paid a flat rate regardless of how hard they work. and journalists as part of their professional code segregate themselves from the revenue-collecting half of the businesses they work for (the ad sales department). many of these people never come face to face with the fact that the money they receive represents wealthwealth that, except in the case of journalists, someone else created earlier. they live in a world in which income is doled out by a central authority according to some abstract notion of fairness (or randomly, in the case of heirs), rather than given by other people in return for something they wanted, so it may seem to them unfair that things dont work the same in the rest of the economy. (some professors do create a great deal of wealth for society. but the money theyre paid isnt a quid pro quo . its more in the nature of an investment.)  when one reads about the origins of the fabian society, it sounds like something cooked up by the high-minded edwardian child-heroes of edith nesbits the wouldbegoods .  according to a study by the corporate library, the median total compensation, including salary, bonus, stock grants, and the exercise of stock options, of s&p; 500 ceos in 2002 was $3.65 million. according to sports illustrated , the average nba players salary during the 2002-03 season was $4.54 million, and the average major league baseball players salary at the start of the 2003 season was $2.56 million. according to the bureau of labor statistics, the mean annual wage in the us in 2002 was $35,560.  in the early empire the price of an ordinary adult slave seems to have been about 2,000 sestertii (e.g. horace, sat. ii.7.43). a servant girl cost 600 (martial vi.66), while columella (iii.3.8) says that a skilled vine-dresser was worth 8,000. a doctor, p. decimus eros merula, paid 50,000 sestertii for his freedom (dessau, inscriptiones 7812). seneca ( ep. xxvii.7) reports that one calvisius sabinus paid 100,000 sestertii apiece for slaves learned in the greek classics. pliny ( hist. nat. vii.39) says that the highest price paid for a slave up to his time was 700,000 sestertii, for the linguist (and presumably teacher) daphnis, but that this had since been exceeded by actors buying their own freedom. classical athens saw a similar variation in prices. an ordinary laborer was worth about 125 to 150 drachmae. xenophon ( mem. ii.5) mentions prices ranging from 50 to 6,000 drachmae (for the manager of a silver mine). for more on the economics of ancient slavery see: jones, a. h. m., "slavery in the ancient world," economic history review , 2:9 (1956), 185-199, reprinted in finley, m. i. (ed.), slavery in classical antiquity , heffer, 1964.  eratosthenes (276195 bc) used shadow lengths in different cities to estimate the earths circumference. he was off by only about 2%.  no, and windows, respectively.  one of the biggest divergences between the daddy model and reality is the valuation of hard work. in the daddy model, hard work is in itself deserving. in reality, wealth is measured by what one delivers, not how much effort it costs. if i paint someones house, the owner shouldnt pay me extra for doing it with a toothbrush. it will seem to someone still implicitly operating on the daddy model that it is unfair when someone works hard and doesnt get paid much. to help clarify the matter, get rid of everyone else and put our worker on a desert island, hunting and gathering fruit. if hes bad at it hell work very hard and not end up with much food. is this unfair? who is being unfair to him?  part of the reason for the tenacity of the daddy model may be the dual meaning of "distribution." when economists talk about "distribution of income," they mean statistical distribution. but when you use the phrase frequently, you cant help associating it with the other sense of the word (as in e.g. "distribution of alms"), and thereby subconsciously seeing wealth as something that flows from some central tap. the word "regressive" as applied to tax rates has a similar effect, at least on me; how can anything regressive be good?  "from the beginning of the reign thomas lord roos was an assiduous courtier of the young henry viii and was soon to reap the rewards. in 1525 he was made a knight of the garter and given the earldom of rutland. in the thirties his support of the breach with rome, his zeal in crushing the pilgrimage of grace, and his readiness to vote the death-penalty in the succession of spectacular treason trials that punctuated henrys erratic matrimonial progress made him an obvious candidate for grants of monastic property." stone, lawrence, family and fortune: studies in aristocratic finance in the sixteenth and seventeenth centuries , oxford university press, 1973, p. 166.  there is archaeological evidence for large settlements earlier, but its hard to say what was happening in them. hodges, richard and david whitehouse, mohammed, charlemagne and the origins of europe , cornell university press, 1983.  william cecil and his son robert were each in turn the most powerful minister of the crown, and both used their position to amass fortunes among the largest of their times. robert in particular took bribery to the point of treason. "as secretary of state and the leading advisor to king james on foreign policy,  was a special recipient of favour, being offered large bribes by the dutch not to make peace with spain, and large bribes by spain to make peace." (stone, op. cit. , p. 17.)  though balzac made a lot of money from writing, he was notoriously improvident and was troubled by debts all his life.  a timex will gain or lose about .5 seconds per day. the most accurate mechanical watch, the patek philippe 10 day tourbillon, is rated at -1.5 to +2 seconds. its retail price is about $220,000.  if asked to choose which was more expensive, a well-preserved 1989 lincoln town car ten-passenger limousine ($5,000) or a 2004 mercedes s600 sedan ($122,000), the average edwardian might well guess wrong.  to say anything meaningful about income trends, you have to talk about real income, or income as measured in what it can buy. but the usual way of calculating real income ignores much of the growth in wealth over time, because it depends on a consumer price index created by bolting end to end a series of numbers that are only locally accurate, and that dont include the prices of new inventions until they become so common that their prices stabilize. so while we might think it was very much better to live in a world with antibiotics or air travel or an electric power grid than without, real income statistics calculated in the usual way will prove to us that we are only slightly richer for having these things. another approach would be to ask, if you were going back to the year x in a time machine, how much would you have to spend on trade goods to make your fortune? for example, if you were going back to 1970 it would certainly be less than $500, because the processing power you can get for $500 today would have been worth at least $150 million in 1970. the function goes asymptotic fairly quickly, because for times over a hundred years or so you could get all you needed in present-day trash. in 1800 an empty plastic drink bottle with a screw top would have seemed a miracle of workmanship.  some will say this amounts to the same thing, because the rich have better opportunities for education. thats a valid point. it is still possible, to a degree, to buy your kids way into top colleges by sending them to private schools that in effect hack the college admissions process. according to a 2002 report by the national center for education statistics, about 1.7% of american kids attend private, non-sectarian schools. at princeton, 36% of the class of 2007 came from such schools. (interestingly, the number at harvard is significantly lower, about 28%.) obviously this is a huge loophole. it does at least seem to be closing, not widening. perhaps the designers of admissions processes should take a lesson from the example of computer security, and instead of just assuming that their system cant be hacked, measure the degree to which it is. this essay was originally published at paulgraham.com (this essay was originally published in hackers & painters .) if you wanted to get rich, how would you do it? i think your best bet would be to start or join a startup. thats been a reliable way to get rich for hundreds of years. the word "startup" dates from the 1960s, but what happens in one is very similar to the venture-backed trading voyages of the middle ages. startups usually involve technology, so much so that the phrase "high-tech startup" is almost redundant. a startup is a small company that takes on a hard technical problem. lots of people get rich knowing nothing more than that. you dont have to know physics to be a good pitcher. but i think it could give you an edge to understand the underlying principles. why do startups have to be small? will a startup inevitably stop being a startup as it grows larger? and why do they so often work on developing new technology? why are there so many startups selling new drugs or computer software, and none selling corn oil or laundry detergent? economically, you can think of a startup as a way to compress your whole working life into a few years. instead of working at a low intensity for forty years, you work as hard as you possibly can for four. this pays especially well in technology, where you earn a premium for working fast. here is a brief sketch of the economic proposition. if youre a good hacker in your mid twenties, you can get a job paying about $80,000 per year. so on average such a hacker must be able to do at least $80,000 worth of work per year for the company just to break even. you could probably work twice as many hours as a corporate employee, and if you focus you can probably get three times as much done in an hour.  you should get another multiple of two, at least, by eliminating the drag of the pointy-haired middle manager who would be your boss in a big company. then there is one more multiple: how much smarter are you than your job description expects you to be? suppose another multiple of three. combine all these multipliers, and im claiming you could be 36 times more productive than youre expected to be in a random corporate job.  if a fairly good hacker is worth $80,000 a year at a big company, then a smart hacker working very hard without any corporate bullshit to slow him down should be able to do work worth about $3 million a year. like all back-of-the-envelope calculations, this one has a lot of wiggle room. i wouldnt try to defend the actual numbers. but i stand by the structure of the calculation. im not claiming the multiplier is precisely 36, but it is certainly more than 10, and probably rarely as high as 100. if $3 million a year seems high, remember that were talking about the limit case: the case where you not only have zero leisure time but indeed work so hard that you endanger your health. startups are not magic. they dont change the laws of wealth creation. they just represent a point at the far end of the curve. there is a conservation law at work here: if you want to make a million dollars, you have to endure a million dollars worth of pain. for example, one way to make a million dollars would be to work for the post office your whole life, and save every penny of your salary. imagine the stress of working for the post office for fifty years. in a startup you compress all this stress into three or four years. you do tend to get a certain bulk discount if you buy the economy-size pain, but you cant evade the fundamental conservation law. if starting a startup were easy, everyone would do it. if $3 million a year seems high to some people, it will seem low to others. three million? how do i get to be a billionaire, like bill gates? so lets get bill gates out of the way right now. its not a good idea to use famous rich people as examples, because the press only write about the very richest, and these tend to be outliers. bill gates is a smart, determined, and hardworking man, but you need more than that to make as much money as he has. you also need to be very lucky. there is a large random factor in the success of any company. so the guys you end up reading about in the papers are the ones who are very smart, totally dedicated, and win the lottery. certainly bill is smart and dedicated, but microsoft also happens to have been the beneficiary of one of the most spectacular blunders in the history of business: the licensing deal for dos. no doubt bill did everything he could to steer ibm into making that blunder, and he has done an excellent job of exploiting it, but if there had been one person with a brain on ibms side, microsofts future would have been very different. microsoft at that stage had little leverage over ibm. they were effectively a component supplier. if ibm had required an exclusive license, as they should have, microsoft would still have signed the deal. it would still have meant a lot of money for them, and ibm could easily have gotten an operating system elsewhere. instead ibm ended up using all its power in the market to give microsoft control of the pc standard. from that point, all microsoft had to do was execute. they never had to bet the company on a bold decision. all they had to do was play hardball with licensees and copy more innovative products reasonably promptly. if ibm hadnt made this mistake, microsoft would still have been a successful company, but it could not have grown so big so fast. bill gates would be rich, but hed be somewhere near the bottom of the forbes 400 with the other guys his age. there are a lot of ways to get rich, and this essay is about only one of them. this essay is about how to make money by creating wealth and getting paid for it. there are plenty of other ways to get money, including chance, speculation, marriage, inheritance, theft, extortion, fraud, monopoly, graft, lobbying, counterfeiting, and prospecting. most of the greatest fortunes have probably involved several of these. the advantage of creating wealth, as a way to get rich, is not just that its more legitimate (many of the other methods are now illegal) but that its more straightforward. you just have to do something people want. if you want to create wealth, it will help to understand what it is. wealth is not the same thing as money.  wealth is as old as human history. far older, in fact; ants have wealth. money is a comparatively recent invention. wealth is the fundamental thing. wealth is stuff we want: food, clothes, houses, cars, gadgets, travel to interesting places, and so on. you can have wealth without having money. if you had a magic machine that could on command make you a car or cook you dinner or do your laundry, or do anything else you wanted, you wouldnt need money. whereas if you were in the middle of antarctica, where there is nothing to buy, it wouldnt matter how much money you had. wealth is what you want, not money. but if wealth is the important thing, why does everyone talk about making money? it is a kind of shorthand: money is a way of moving wealth, and in practice they are usually interchangeable. but they are not the same thing, and unless you plan to get rich by counterfeiting, talking about making money can make it harder to understand how to make money. money is a side effect of specialization. in a specialized society, most of the things you need, you cant make for yourself. if you want a potato or a pencil or a place to live, you have to get it from someone else. how do you get the person who grows the potatoes to give you some? by giving him something he wants in return. but you cant get very far by trading things directly with the people who need them. if you make violins, and none of the local farmers wants one, how will you eat? the solution societies find, as they get more specialized, is to make the trade into a two-step process. instead of trading violins directly for potatoes, you trade violins for, say, silver, which you can then trade again for anything else you need. the intermediate stuff-- the medium of exchange -- can be anything thats rare and portable. historically metals have been the most common, but recently weve been using a medium of exchange, called the dollar , that doesnt physically exist. it works as a medium of exchange, however, because its rarity is guaranteed by the u.s. government. the advantage of a medium of exchange is that it makes trade work. the disadvantage is that it tends to obscure what trade really means. people think that what a business does is make money. but money is just the intermediate stage-- just a shorthand-- for whatever people want. what most businesses really do is make wealth. they do something people want.  a surprising number of people retain from childhood the idea that there is a fixed amount of wealth in the world. there is, in any normal family, a fixed amount of money at any moment. but thats not the same thing. when wealth is talked about in this context, it is often described as a pie. "you cant make the pie larger," say politicians. when youre talking about the amount of money in one familys bank account, or the amount available to a government from one years tax revenue, this is true. if one person gets more, someone else has to get less. i can remember believing, as a child, that if a few rich people had all the money, it left less for everyone else. many people seem to continue to believe something like this well into adulthood. this fallacy is usually there in the background when you hear someone talking about how x percent of the population have y percent of the wealth. if you plan to start a startup, then whether you realize it or not, youre planning to disprove the pie fallacy. what leads people astray here is the abstraction of money. money is not wealth. its just something we use to move wealth around. so although there may be, in certain specific moments (like your family, this month) a fixed amount of money available to trade with other people for things you want, there is not a fixed amount of wealth in the world. you can make more wealth. wealth has been getting created and destroyed (but on balance, created) for all of human history. suppose you own a beat-up old car. instead of sitting on your butt next summer, you could spend the time restoring your car to pristine condition. in doing so you create wealth. the world is-- and you specifically are-- one pristine old car the richer. and not just in some metaphorical way. if you sell your car, youll get more for it. in restoring your old car you have made yourself richer. you havent made anyone else poorer. so there is obviously not a fixed pie. and in fact, when you look at it this way, you wonder why anyone would think there was.  kids know, without knowing they know, that they can create wealth. if you need to give someone a present and dont have any money, you make one. but kids are so bad at making things that they consider home-made presents to be a distinct, inferior, sort of thing to store-bought ones-- a mere expression of the proverbial thought that counts. and indeed, the lumpy ashtrays we made for our parents did not have much of a resale market. the people most likely to grasp that wealth can be created are the ones who are good at making things, the craftsmen. their hand-made objects become store-bought ones. but with the rise of industrialization there are fewer and fewer craftsmen. one of the biggest remaining groups is computer programmers. a programmer can sit down in front of a computer and create wealth . a good piece of software is, in itself, a valuable thing. there is no manufacturing to confuse the issue. those characters you type are a complete, finished product. if someone sat down and wrote a web browser that didnt suck (a fine idea, by the way), the world would be that much richer.  everyone in a company works together to create wealth, in the sense of making more things people want. many of the employees (e.g. the people in the mailroom or the personnel department) work at one remove from the actual making of stuff. not the programmers. they literally think the product, one line at a time. and so its clearer to programmers that wealth is something thats made, rather than being distributed, like slices of a pie, by some imaginary daddy. its also obvious to programmers that there are huge variations in the rate at which wealth is created. at viaweb we had one programmer who was a sort of monster of productivity. i remember watching what he did one long day and estimating that he had added several hundred thousand dollars to the market value of the company. a great programmer, on a roll, could create a million dollars worth of wealth in a couple weeks. a mediocre programmer over the same period will generate zero or even negative wealth (e.g. by introducing bugs). this is why so many of the best programmers are libertarians. in our world, you sink or swim, and there are no excuses. when those far removed from the creation of wealth-- undergraduates, reporters, politicians-- hear that the richest 5% of the people have half the total wealth, they tend to think injustice! an experienced programmer would be more likely to think is that all? the top 5% of programmers probably write 99% of the good software. wealth can be created without being sold. scientists, till recently at least, effectively donated the wealth they created. we are all richer for knowing about penicillin, because were less likely to die from infections. wealth is whatever people want, and not dying is certainly something we want. hackers often donate their work by writing open source software that anyone can use for free. i am much the richer for the operating system freebsd, which im running on the computer im using now, and so is yahoo, which runs it on all their servers. in industrialized countries, people belong to one institution or another at least until their twenties. after all those years you get used to the idea of belonging to a group of people who all get up in the morning, go to some set of buildings, and do things that they do not, ordinarily, enjoy doing. belonging to such a group becomes part of your identity: name, age, role, institution. if you have to introduce yourself, or someone else describes you, it will be as something like, john smith, age 10, a student at such and such elementary school, or john smith, age 20, a student at such and such college. when john smith finishes school he is expected to get a job. and what getting a job seems to mean is joining another institution. superficially its a lot like college. you pick the companies you want to work for and apply to join them. if one likes you, you become a member of this new group. you get up in the morning and go to a new set of buildings, and do things that you do not, ordinarily, enjoy doing. there are a few differences: life is not as much fun, and you get paid, instead of paying, as you did in college. but the similarities feel greater than the differences. john smith is now john smith, 22, a software developer at such and such corporation. in fact john smiths life has changed more than he realizes. socially, a company looks much like college, but the deeper you go into the underlying reality, the more different it gets. what a company does, and has to do if it wants to continue to exist, is earn money. and the way most companies make money is by creating wealth. companies can be so specialized that this similarity is concealed, but it is not only manufacturing companies that create wealth. a big component of wealth is location. remember that magic machine that could make you cars and cook you dinner and so on? it would not be so useful if it delivered your dinner to a random location in central asia. if wealth means what people want, companies that move things also create wealth. ditto for many other kinds of companies that dont make anything physical. nearly all companies exist to do something people want. and thats what you do, as well, when you go to work for a company. but here there is another layer that tends to obscure the underlying reality. in a company, the work you do is averaged together with a lot of other peoples. you may not even be aware youre doing something people want. your contribution may be indirect. but the company as a whole must be giving people something they want, or they wont make any money. and if they are paying you x dollars a year, then on average you must be contributing at least x dollars a year worth of work, or the company will be spending more than it makes, and will go out of business. someone graduating from college thinks, and is told, that he needs to get a job, as if the important thing were becoming a member of an institution. a more direct way to put it would be: you need to start doing something people want. you dont need to join a company to do that. all a company is is a group of people working together to do something people want. its doing something people want that matters, not joining the group.  for most people the best plan probably is to go to work for some existing company. but it is a good idea to understand whats happening when you do this. a job means doing something people want, averaged together with everyone else in that company. that averaging gets to be a problem. i think the single biggest problem afflicting large companies is the difficulty of assigning a value to each persons work. for the most part they punt. in a big company you get paid a fairly predictable salary for working fairly hard. youre expected not to be obviously incompetent or lazy, but youre not expected to devote your whole life to your work. it turns out, though, that there are economies of scale in how much of your life you devote to your work. in the right kind of business, someone who really devoted himself to work could generate ten or even a hundred times as much wealth as an average employee. a programmer, for example, instead of chugging along maintaining and updating an existing piece of software, could write a whole new piece of software, and with it create a new source of revenue. companies are not set up to reward people who want to do this. you cant go to your boss and say, id like to start working ten times as hard, so will you please pay me ten times as much? for one thing, the official fiction is that you are already working as hard as you can. but a more serious problem is that the company has no way of measuring the value of your work. salesmen are an exception. its easy to measure how much revenue they generate, and theyre usually paid a percentage of it. if a salesman wants to work harder, he can just start doing it, and he will automatically get paid proportionally more. there is one other job besides sales where big companies can hire first-rate people: in the top management jobs. and for the same reason: their performance can be measured. the top managers are held responsible for the performance of the entire company. because an ordinary employees performance cant usually be measured, he is not expected to do more than put in a solid effort. whereas top management, like salespeople, have to actually come up with the numbers. the ceo of a company that tanks cannot plead that he put in a solid effort. if the company does badly, hes done badly. a company that could pay all its employees so straightforwardly would be enormously successful. many employees would work harder if they could get paid for it. more importantly, such a company would attract people who wanted to work especially hard. it would crush its competitors. unfortunately, companies cant pay everyone like salesmen. salesmen work alone. most employees work is tangled together. suppose a company makes some kind of consumer gadget. the engineers build a reliable gadget with all kinds of new features; the industrial designers design a beautiful case for it; and then the marketing people convince everyone that its something theyve got to have. how do you know how much of the gadgets sales are due to each groups efforts? or, for that matter, how much is due to the creators of past gadgets that gave the company a reputation for quality? theres no way to untangle all their contributions. even if you could read the minds of the consumers, youd find these factors were all blurred together. if you want to go faster, its a problem to have your work tangled together with a large number of other peoples. in a large group, your performance is not separately measurable-- and the rest of the group slows you down. to get rich you need to get yourself in a situation with two things, measurement and leverage. you need to be in a position where your performance can be measured, or there is no way to get paid more by doing more. and you have to have leverage, in the sense that the decisions you make have a big effect. measurement alone is not enough. an example of a job with measurement but not leverage is doing piecework in a sweatshop. your performance is measured and you get paid accordingly, but you have no scope for decisions. the only decision you get to make is how fast you work, and that can probably only increase your earnings by a factor of two or three. an example of a job with both measurement and leverage would be lead actor in a movie. your performance can be measured in the gross of the movie. and you have leverage in the sense that your performance can make or break it. ceos also have both measurement and leverage. theyre measured, in that the performance of the company is their performance. and they have leverage in that their decisions set the whole company moving in one direction or another. i think everyone who gets rich by their own efforts will be found to be in a situation with measurement and leverage. everyone i can think of does: ceos, movie stars, hedge fund managers, professional athletes. a good hint to the presence of leverage is the possibility of failure. upside must be balanced by downside, so if there is big potential for gain there must also be a terrifying possibility of loss. ceos, stars, fund managers, and athletes all live with the sword hanging over their heads; the moment they start to suck, theyre out. if youre in a job that feels safe, you are not going to get rich, because if there is no danger there is almost certainly no leverage. but you dont have to become a ceo or a movie star to be in a situation with measurement and leverage. all you need to do is be part of a small group working on a hard problem. if you cant measure the value of the work done by individual employees, you can get close. you can measure the value of the work done by small groups. one level at which you can accurately measure the revenue generated by employees is at the level of the whole company. when the company is small, you are thereby fairly close to measuring the contributions of individual employees. a viable startup might only have ten employees, which puts you within a factor of ten of measuring individual effort. starting or joining a startup is thus as close as most people can get to saying to ones boss, i want to work ten times as hard, so please pay me ten times as much. there are two differences: youre not saying it to your boss, but directly to the customers (for whom your boss is only a proxy after all), and youre not doing it individually, but along with a small group of other ambitious people. it will, ordinarily, be a group. except in a few unusual kinds of work, like acting or writing books, you cant be a company of one person. and the people you work with had better be good, because its their work that yours is going to be averaged with. a big company is like a giant galley driven by a thousand rowers. two things keep the speed of the galley down. one is that individual rowers dont see any result from working harder. the other is that, in a group of a thousand people, the average rower is likely to be pretty average. if you took ten people at random out of the big galley and put them in a boat by themselves, they could probably go faster. they would have both carrot and stick to motivate them. an energetic rower would be encouraged by the thought that he could have a visible effect on the speed of the boat. and if someone was lazy, the others would be more likely to notice and complain. but the real advantage of the ten-man boat shows when you take the ten best rowers out of the big galley and put them in a boat together. they will have all the extra motivation that comes from being in a small group. but more importantly, by selecting that small a group you can get the best rowers. each one will be in the top 1%. its a much better deal for them to average their work together with a small group of their peers than to average it with everyone. thats the real point of startups. ideally, you are getting together with a group of other people who also want to work a lot harder, and get paid a lot more, than they would in a big company. and because startups tend to get founded by self-selecting groups of ambitious people who already know one another (at least by reputation), the level of measurement is more precise than you get from smallness alone. a startup is not merely ten people, but ten people like you. steve jobs once said that the success or failure of a startup depends on the first ten employees. i agree. if anything, its more like the first five. being small is not, in itself, what makes startups kick butt, but rather that small groups can be select. you dont want small in the sense of a village, but small in the sense of an all-star team. the larger a group, the closer its average member will be to the average for the population as a whole. so all other things being equal, a very able person in a big company is probably getting a bad deal, because his performance is dragged down by the overall lower performance of the others. of course, all other things often are not equal: the able person may not care about money, or may prefer the stability of a large company. but a very able person who does care about money will ordinarily do better to go off and work with a small group of peers. startups offer anyone a way to be in a situation with measurement and leverage. they allow measurement because theyre small, and they offer leverage because they make money by inventing new technology. what is technology? its technique . its the way we all do things. and when you discover a new way to do things, its value is multiplied by all the people who use it. it is the proverbial fishing rod, rather than the fish. thats the difference between a startup and a restaurant or a barber shop. you fry eggs or cut hair one customer at a time. whereas if you solve a technical problem that a lot of people care about, you help everyone who uses your solution. thats leverage. if you look at history, it seems that most people who got rich by creating wealth did it by developing new technology. you just cant fry eggs or cut hair fast enough. what made the florentines rich in 1200 was the discovery of new techniques for making the high-tech product of the time, fine woven cloth. what made the dutch rich in 1600 was the discovery of shipbuilding and navigation techniques that enabled them to dominate the seas of the far east. fortunately there is a natural fit between smallness and solving hard problems. the leading edge of technology moves fast. technology thats valuable today could be worthless in a couple years. small companies are more at home in this world, because they dont have layers of bureaucracy to slow them down. also, technical advances tend to come from unorthodox approaches, and small companies are less constrained by convention. big companies can develop technology. they just cant do it quickly. their size makes them slow and prevents them from rewarding employees for the extraordinary effort required. so in practice big companies only get to develop technology in fields where large capital requirements prevent startups from competing with them, like microprocessors, power plants, or passenger aircraft. and even in those fields they depend heavily on startups for components and ideas. its obvious that biotech or software startups exist to solve hard technical problems, but i think it will also be found to be true in businesses that dont seem to be about technology. mcdonalds, for example, grew big by designing a system, the mcdonalds franchise, that could then be reproduced at will all over the face of the earth. a mcdonalds franchise is controlled by rules so precise that it is practically a piece of software. write once, run everywhere. ditto for wal-mart. sam walton got rich not by being a retailer, but by designing a new kind of store. use difficulty as a guide not just in selecting the overall aim of your company, but also at decision points along the way. at viaweb one of our rules of thumb was run upstairs. suppose you are a little, nimble guy being chased by a big, fat, bully. you open a door and find yourself in a staircase. do you go up or down? i say up. the bully can probably run downstairs as fast as you can. going upstairs his bulk will be more of a disadvantage. running upstairs is hard for you but even harder for him. what this meant in practice was that we deliberately sought hard problems. if there were two features we could add to our software, both equally valuable in proportion to their difficulty, wed always take the harder one. not just because it was more valuable, but because it was harder. we delighted in forcing bigger, slower competitors to follow us over difficult ground. like guerillas, startups prefer the difficult terrain of the mountains, where the troops of the central government cant follow. i can remember times when we were just exhausted after wrestling all day with some horrible technical problem. and id be delighted, because something that was hard for us would be impossible for our competitors. this is not just a good way to run a startup. its what a startup is. venture capitalists know about this and have a phrase for it: barriers to entry. if you go to a vc with a new idea and ask him to invest in it, one of the first things hell ask is, how hard would this be for someone else to develop? that is, how much difficult ground have you put between yourself and potential pursuers?  and you had better have a convincing explanation of why your technology would be hard to duplicate. otherwise as soon as some big company becomes aware of it, theyll make their own, and with their brand name, capital, and distribution clout, theyll take away your market overnight. youd be like guerillas caught in the open field by regular army forces. one way to put up barriers to entry is through patents. but patents may not provide much protection. competitors commonly find ways to work around a patent. and if they cant, they may simply violate it and invite you to sue them. a big company is not afraid to be sued; its an everyday thing for them. theyll make sure that suing them is expensive and takes a long time. ever heard of philo farnsworth? he invented television. the reason youve never heard of him is that his company was not the one to make money from it.  the company that did was rca, and farnsworths reward for his efforts was a decade of patent litigation. here, as so often, the best defense is a good offense. if you can develop technology thats simply too hard for competitors to duplicate, you dont need to rely on other defenses. start by picking a hard problem, and then at every decision point, take the harder choice.  if it were simply a matter of working harder than an ordinary employee and getting paid proportionately, it would obviously be a good deal to start a startup. up to a point it would be more fun. i dont think many people like the slow pace of big companies, the interminable meetings, the water-cooler conversations, the clueless middle managers, and so on. unfortunately there are a couple catches. one is that you cant choose the point on the curve that you want to inhabit. you cant decide, for example, that youd like to work just two or three times as hard, and get paid that much more. when youre running a startup, your competitors decide how hard you work. and they pretty much all make the same decision: as hard as you possibly can. the other catch is that the payoff is only on average proportionate to your productivity. there is, as i said before, a large random multiplier in the success of any company. so in practice the deal is not that youre 30 times as productive and get paid 30 times as much. it is that youre 30 times as productive, and get paid between zero and a thousand times as much. if the mean is 30x, the median is probably zero. most startups tank, and not just the dogfood portals we all heard about during the internet bubble. its common for a startup to be developing a genuinely good product, take slightly too long to do it, run out of money, and have to shut down. a startup is like a mosquito. a bear can absorb a hit and a crab is armored against one, but a mosquito is designed for one thing: to score. no energy is wasted on defense. the defense of mosquitos, as a species, is that there are a lot of them, but this is little consolation to the individual mosquito. startups, like mosquitos, tend to be an all-or-nothing proposition. and you dont generally know which of the two youre going to get till the last minute. viaweb came close to tanking several times. our trajectory was like a sine wave. fortunately we got bought at the top of the cycle, but it was damned close. while we were visiting yahoo in california to talk about selling the company to them, we had to borrow a conference room to reassure an investor who was about to back out of a new round of funding that we needed to stay alive. the all-or-nothing aspect of startups was not something we wanted. viawebs hackers were all extremely risk-averse. if there had been some way just to work super hard and get paid for it, without having a lottery mixed in, we would have been delighted. we would have much preferred a 100% chance of $1 million to a 20% chance of $10 million, even though theoretically the second is worth twice as much. unfortunately, there is not currently any space in the business world where you can get the first deal. the closest you can get is by selling your startup in the early stages, giving up upside (and risk) for a smaller but guaranteed payoff. we had a chance to do this, and stupidly, as we then thought, let it slip by. after that we became comically eager to sell. for the next year or so, if anyone expressed the slightest curiousity about viaweb we would try to sell them the company. but there were no takers, so we had to keep going. it would have been a bargain to buy us at an early stage, but companies doing acquisitions are not looking for bargains. a company big enough to acquire startups will be big enough to be fairly conservative, and within the company the people in charge of acquisitions will be among the more conservative, because they are likely to be business school types who joined the company late. they would rather overpay for a safe choice. so it is easier to sell an established startup, even at a large premium, than an early-stage one. i think its a good idea to get bought, if you can. running a business is different from growing one. it is just as well to let a big company take over once you reach cruising altitude. its also financially wiser, because selling allows you to diversify. what would you think of a financial advisor who put all his clients assets into one volatile stock? how do you get bought? mostly by doing the same things youd do if you didnt intend to sell the company. being profitable, for example. but getting bought is also an art in its own right, and one that we spent a lot of time trying to master. potential buyers will always delay if they can. the hard part about getting bought is getting them to act. for most people, the most powerful motivator is not the hope of gain, but the fear of loss. for potential acquirers, the most powerful motivator is the prospect that one of their competitors will buy you. this, as we found, causes ceos to take red-eyes. the second biggest is the worry that, if they dont buy you now, youll continue to grow rapidly and will cost more to acquire later, or even become a competitor. in both cases, what it all comes down to is users. youd think that a company about to buy you would do a lot of research and decide for themselves how valuable your technology was. not at all. what they go by is the number of users you have. in effect, acquirers assume the customers know who has the best technology. and this is not as stupid as it sounds. users are the only real proof that youve created wealth. wealth is what people want, and if people arent using your software, maybe its not just because youre bad at marketing. maybe its because you havent made what they want. venture capitalists have a list of danger signs to watch out for. near the top is the company run by techno-weenies who are obsessed with solving interesting technical problems, instead of making users happy. in a startup, youre not just trying to solve problems. youre trying to solve problems that users care about. so i think you should make users the test, just as acquirers do. treat a startup as an optimization problem in which performance is measured by number of users. as anyone who has tried to optimize software knows, the key is measurement. when you try to guess where your program is slow, and what would make it faster, you almost always guess wrong. number of users may not be the perfect test, but it will be very close. its what acquirers care about. its what revenues depend on. its what makes competitors unhappy. its what impresses reporters, and potential new users. certainly its a better test than your a priori notions of what problems are important to solve, no matter how technically adept you are. among other things, treating a startup as an optimization problem will help you avoid another pitfall that vcs worry about, and rightly-- taking a long time to develop a product. now we can recognize this as something hackers already know to avoid: premature optimization. get a version 1.0 out there as soon as you can. until you have some users to measure, youre optimizing based on guesses. the ball you need to keep your eye on here is the underlying principle that wealth is what people want. if you plan to get rich by creating wealth, you have to know what people want. so few businesses really pay attention to making customers happy. how often do you walk into a store, or call a company on the phone, with a feeling of dread in the back of your mind? when you hear "your call is important to us, please stay on the line," do you think, oh good, now everything will be all right? a restaurant can afford to serve the occasional burnt dinner. but in technology, you cook one thing and thats what everyone eats. so any difference between what people want and what you deliver is multiplied. you please or annoy customers wholesale. the closer you can get to what they want, the more wealth you generate. making wealth is not the only way to get rich. for most of human history it has not even been the most common. until a few centuries ago, the main sources of wealth were mines, slaves and serfs, land, and cattle, and the only ways to acquire these rapidly were by inheritance, marriage, conquest, or confiscation. naturally wealth had a bad reputation. two things changed. the first was the rule of law. for most of the worlds history, if you did somehow accumulate a fortune, the ruler or his henchmen would find a way to steal it. but in medieval europe something new happened. a new class of merchants and manufacturers began to collect in towns.  together they were able to withstand the local feudal lord. so for the first time in our history, the bullies stopped stealing the nerds lunch money. this was naturally a great incentive, and possibly indeed the main cause of the second big change, industrialization. a great deal has been written about the causes of the industrial revolution. but surely a necessary, if not sufficient, condition was that people who made fortunes be able to enjoy them in peace.  one piece of evidence is what happened to countries that tried to return to the old model, like the soviet union, and to a lesser extent britain under the labor governments of the 1960s and early 1970s. take away the incentive of wealth, and technical innovation grinds to a halt. remember what a startup is, economically: a way of saying, i want to work faster. instead of accumulating money slowly by being paid a regular wage for fifty years, i want to get it over with as soon as possible. so governments that forbid you to accumulate wealth are in effect decreeing that you work slowly. theyre willing to let you earn $3 million over fifty years, but theyre not willing to let you work so hard that you can do it in two. they are like the corporate boss that you cant go to and say, i want to work ten times as hard, so please pay me ten times a much. except this is not a boss you can escape by starting your own company. the problem with working slowly is not just that technical innovation happens slowly. its that it tends not to happen at all. its only when youre deliberately looking for hard problems, as a way to use speed to the greatest advantage, that you take on this kind of project. developing new technology is a pain in the ass. it is, as edison said, one percent inspiration and ninety-nine percent perspiration. without the incentive of wealth, no one wants to do it. engineers will work on sexy projects like fighter planes and moon rockets for ordinary salaries, but more mundane technologies like light bulbs or semiconductors have to be developed by entrepreneurs. startups are not just something that happened in silicon valley in the last couple decades. since it became possible to get rich by creating wealth, everyone who has done it has used essentially the same recipe: measurement and leverage, where measurement comes from working with a small group, and leverage from developing new techniques. the recipe was the same in florence in 1200 as it is in santa clara today. understanding this may help to answer an important question: why europe grew so powerful. was it something about the geography of europe? was it that europeans are somehow racially superior? was it their religion? the answer (or at least the proximate cause) may be that the europeans rode on the crest of a powerful new idea: allowing those who made a lot of money to keep it. once youre allowed to do that, people who want to get rich can do it by generating wealth instead of stealing it. the resulting technological growth translates not only into wealth but into military power. the theory that led to the stealth plane was developed by a soviet mathematician. but because the soviet union didnt have a computer industry, it remained for them a theory; they didnt have hardware capable of executing the calculations fast enough to design an actual airplane. in that respect the cold war teaches the same lesson as world war ii and, for that matter, most wars in recent history. dont let a ruling class of warriors and politicians squash the entrepreneurs. the same recipe that makes individuals rich makes countries powerful. let the nerds keep their lunch money, and you rule the world.  one valuable thing you tend to get only in startups is uninterruptability . different kinds of work have different time quanta. someone proofreading a manuscript could probably be interrupted every fifteen minutes with little loss of productivity. but the time quantum for hacking is very long: it might take an hour just to load a problem into your head. so the cost of having someone from personnel call you about a form you forgot to fill out can be huge. this is why hackers give you such a baleful stare as they turn from their screen to answer your question. inside their heads a giant house of cards is tottering. the mere possibility of being interrupted deters hackers from starting hard projects. this is why they tend to work late at night, and why its next to impossible to write great software in a cubicle (except late at night). one great advantage of startups is that they dont yet have any of the people who interrupt you. there is no personnel department, and thus no form nor anyone to call you about it.  faced with the idea that people working for startups might be 20 or 30 times as productive as those working for large companies, executives at large companies will naturally wonder, how could i get the people working for me to do that? the answer is simple: pay them to. internally most companies are run like communist states. if you believe in free markets, why not turn your company into one? hypothesis: a company will be maximally profitable when each employee is paid in proportion to the wealth they generate.  until recently even governments sometimes didnt grasp the distinction between money and wealth. adam smith ( wealth of nations , v:i) mentions several that tried to preserve their "wealth" by forbidding the export of gold or silver. but having more of the medium of exchange would not make a country richer; if you have more money chasing the same amount of material wealth, the only result is higher prices.  there are many senses of the word "wealth," not all of them material. im not trying to make a deep philosophical point here about which is the true kind. im writing about one specific, rather technical sense of the word "wealth." what people will give you money for. this is an interesting sort of wealth to study, because it is the kind that prevents you from starving. and what people will give you money for depends on them, not you. when youre starting a business, its easy to slide into thinking that customers want what you do. during the internet bubble i talked to a woman who, because she liked the outdoors, was starting an "outdoor portal." you know what kind of business you should start if you like the outdoors? one to recover data from crashed hard disks. whats the connection? none at all. which is precisely my point. if you want to create wealth (in the narrow technical sense of not starving) then you should be especially skeptical about any plan that centers on things you like doing. that is where your idea of whats valuable is least likely to coincide with other peoples.  in the average car restoration you probably do make everyone else microscopically poorer, by doing a small amount of damage to the environment. while environmental costs should be taken into account, they dont make wealth a zero-sum game. for example, if you repair a machine thats broken because a part has come unscrewed, you create wealth with no environmental cost.  this essay was written before firefox.  many people feel confused and depressed in their early twenties. life seemed so much more fun in college. well, of course it was. dont be fooled by the surface similarities. youve gone from guest to servant. its possible to have fun in this new world. among other things, you now get to go behind the doors that say "authorized personnel only." but the change is a shock at first, and all the worse if youre not consciously aware of it.  when vcs asked us how long it would take another startup to duplicate our software, we used to reply that they probably wouldnt be able to at all. i think this made us seem naive, or liars.  few technologies have one clear inventor. so as a rule, if you know the "inventor" of something (the telephone, the assembly line, the airplane, the light bulb, the transistor) it is because their company made money from it, and the companys pr people worked hard to spread the story. if you dont know who invented something (the automobile, the television, the computer, the jet engine, the laser), its because other companies made all the money.  this is a good plan for life in general. if you have two choices, choose the harder. if youre trying to decide whether to go out running or sit home and watch tv, go running. probably the reason this trick works so well is that when you have two choices and one is harder, the only reason youre even considering the other is laziness. you know in the back of your mind whats the right thing to do, and this trick merely forces you to acknowledge it.  it is probably no accident that the middle class first appeared in northern italy and the low countries, where there were no strong central governments. these two regions were the richest of their time and became the twin centers from which renaissance civilization radiated. if they no longer play that role, it is because other places, like the united states, have been truer to the principles they discovered.  it may indeed be a sufficient condition. but if so, why didnt the industrial revolution happen earlier? two possible (and not incompatible) answers: (a) it did. the industrial revolution was one in a series. (b) because in medieval towns, monopolies and guild regulations initially slowed the development of new means of production. comment on this essay. this essay was originally published at paulgraham.com to the popular press, "hacker" means someone who breaks into computers. among programmers it means a good programmer. but the two meanings are connected. to programmers, "hacker" connotes mastery in the most literal sense: someone who can make a computer do what he wantswhether the computer wants to or not. to add to the confusion, the noun "hack" also has two senses. it can be either a compliment or an insult. its called a hack when you do something in an ugly way. but when you do something so clever that you somehow beat the system, thats also called a hack. the word is used more often in the former than the latter sense, probably because ugly solutions are more common than brilliant ones. believe it or not, the two senses of "hack" are also connected. ugly and imaginative solutions have something in common: they both break the rules. and there is a gradual continuum between rule breaking thats merely ugly (using duct tape to attach something to your bike) and rule breaking that is brilliantly imaginative (discarding euclidean space). hacking predates computers. when he was working on the manhattan project, richard feynman used to amuse himself by breaking into safes containing secret documents. this tradition continues today. when we were in grad school, a hacker friend of mine who spent too much time around mit had his own lock picking kit. (he now runs a hedge fund, a not unrelated enterprise.) it is sometimes hard to explain to authorities why one would want to do such things. another friend of mine once got in trouble with the government for breaking into computers. this had only recently been declared a crime, and the fbi found that their usual investigative technique didnt work. police investigation apparently begins with a motive. the usual motives are few: drugs, money, sex, revenge. intellectual curiosity was not one of the motives on the fbis list. indeed, the whole concept seemed foreign to them. those in authority tend to be annoyed by hackers general attitude of disobedience. but that disobedience is a byproduct of the qualities that make them good programmers. they may laugh at the ceo when he talks in generic corporate newspeech, but they also laugh at someone who tells them a certain problem cant be solved. suppress one, and you suppress the other. this attitude is sometimes affected. sometimes young programmers notice the eccentricities of eminent hackers and decide to adopt some of their own in order to seem smarter. the fake version is not merely annoying; the prickly attitude of these posers can actually slow the process of innovation. but even factoring in their annoying eccentricities, the disobedient attitude of hackers is a net win. i wish its advantages were better understood. for example, i suspect people in hollywood are simply mystified by hackers attitudes toward copyrights. they are a perennial topic of heated discussion on slashdot. but why should people who program computers be so concerned about copyrights, of all things? partly because some companies use mechanisms to prevent copying. show any hacker a lock and his first thought is how to pick it. but there is a deeper reason that hackers are alarmed by measures like copyrights and patents. they see increasingly aggressive measures to protect "intellectual property" as a threat to the intellectual freedom they need to do their job. and they are right. it is by poking about inside current technology that hackers get ideas for the next generation. no thanks, intellectual homeowners may say, we dont need any outside help. but theyre wrong. the next generation of computer technology has oftenperhaps more often than notbeen developed by outsiders. in 1977 there was no doubt some group within ibm developing what they expected to be the next generation of business computer. they were mistaken. the next generation of business computer was being developed on entirely different lines by two long-haired guys called steve in a garage in los altos. at about the same time, the powers that be were cooperating to develop the official next generation operating system, multics. but two guys who thought multics excessively complex went off and wrote their own. they gave it a name that was a joking reference to multics: unix. the latest intellectual property laws impose unprecedented restrictions on the sort of poking around that leads to new ideas. in the past, a competitor might use patents to prevent you from selling a copy of something they made, but they couldnt prevent you from taking one apart to see how it worked. the latest laws make this a crime. how are we to develop new technology if we cant study current technology to figure out how to improve it? ironically, hackers have brought this on themselves. computers are responsible for the problem. the control systems inside machines used to be physical: gears and levers and cams. increasingly, the brains (and thus the value) of products is in software. and by this i mean software in the general sense: i.e. data. a song on an lp is physically stamped into the plastic. a song on an ipods disk is merely stored on it. data is by definition easy to copy. and the internet makes copies easy to distribute. so it is no wonder companies are afraid. but, as so often happens, fear has clouded their judgement. the government has responded with draconian laws to protect intellectual property. they probably mean well. but they may not realize that such laws will do more harm than good. why are programmers so violently opposed to these laws? if i were a legislator, id be interested in this mysteryfor the same reason that, if i were a farmer and suddenly heard a lot of squawking coming from my hen house one night, id want to go out and investigate. hackers are not stupid, and unanimity is very rare in this world. so if theyre all squawking, perhaps there is something amiss. could it be that such laws, though intended to protect america, will actually harm it? think about it. there is something very american about feynman breaking into safes during the manhattan project. its hard to imagine the authorities having a sense of humor about such things over in germany at that time. maybe its not a coincidence. hackers are unruly. that is the essence of hacking. and it is also the essence of americanness. it is no accident that silicon valley is in america, and not france, or germany, or england, or japan. in those countries, people color inside the lines. i lived for a while in florence. but after id been there a few months i realized that what id been unconsciously hoping to find there was back in the place id just left. the reason florence is famous is that in 1450, it was new york. in 1450 it was filled with the kind of turbulent and ambitious people you find now in america. (so i went back to america.) it is greatly to americas advantage that it is a congenial atmosphere for the right sort of unrulinessthat it is a home not just for the smart, but for smart-alecks. and hackers are invariably smart-alecks. if we had a national holiday, it would be april 1st. it says a great deal about our work that we use the same word for a brilliant or a horribly cheesy solution. when we cook one up were not always 100% sure which kind it is. but as long as it has the right sort of wrongness, thats a promising sign. its odd that people think of programming as precise and methodical. computers are precise and methodical. hacking is something you do with a gleeful laugh. in our world some of the most characteristic solutions are not far removed from practical jokes. ibm was no doubt rather surprised by the consequences of the licensing deal for dos, just as the hypothetical "adversary" must be when michael rabin solves a problem by redefining it as one thats easier to solve. smart-alecks have to develop a keen sense of how much they can get away with. and lately hackers have sensed a change in the atmosphere. lately hackerliness seems rather frowned upon. to hackers the recent contraction in civil liberties seems especially ominous. that must also mystify outsiders. why should we care especially about civil liberties? why programmers, more than dentists or salesmen or landscapers? let me put the case in terms a government official would appreciate. civil liberties are not just an ornament, or a quaint american tradition. civil liberties make countries rich. if you made a graph of gnp per capita vs. civil liberties, youd notice a definite trend. could civil liberties really be a cause, rather than just an effect? i think so. i think a society in which people can do and say what they want will also tend to be one in which the most efficient solutions win, rather than those sponsored by the most influential people. authoritarian countries become corrupt; corrupt countries become poor; and poor countries are weak. it seems to me there is a laffer curve for government power, just as for tax revenues. at least, it seems likely enough that it would be stupid to try the experiment and find out. unlike high tax rates, you cant repeal totalitarianism if it turns out to be a mistake. this is why hackers worry. the government spying on people doesnt literally make programmers write worse code. it just leads eventually to a world in which bad ideas win. and because this is so important to hackers, theyre especially sensitive to it. they can sense totalitarianism approaching from a distance, as animals can sense an approaching thunderstorm. it would be ironic if, as hackers fear, recent measures intended to protect national security and intellectual property turned out to be a missile aimed right at what makes america successful. but it would not be the first time that measures taken in an atmosphere of panic had the opposite of the intended effect. there is such a thing as americanness. theres nothing like living abroad to teach you that. and if you want to know whether something will nurture or squash this quality, it would be hard to find a better focus group than hackers, because they come closest of any group i know to embodying it. closer, probably, than the men running our government, who for all their talk of patriotism remind me more of richelieu or mazarin than thomas jefferson or george washington. when you read what the founding fathers had to say for themselves, they sound more like hackers. "the spirit of resistance to government," jefferson wrote, "is so valuable on certain occasions, that i wish it always to be kept alive." imagine an american president saying that today. like the remarks of an outspoken old grandmother, the sayings of the founding fathers have embarrassed generations of their less confident successors. they remind us where we come from. they remind us that it is the people who break rules that are the source of americas wealth and power. those in a position to impose rules naturally want them to be obeyed. but be careful what you ask for. you might get it. thanks to ken anderson, trevor blackwell, daniel giffin, sarah harlin, shiro kawai, jessica livingston, matz, jackie mcdonough, robert morris, eric raymond, guido van rossum, david weinberger, and steven wolfram for reading drafts of this essay. (the image shows steves jobs and wozniak with a "blue box." photo by margret wozniak. reproduced by permission of steve wozniak.) this essay was originally published at paulgraham.com have you ever seen an old photo of yourself and been embarrassed at the way you looked? did we actually dress like that? we did. and we had no idea how silly we looked. its the nature of fashion to be invisible, in the same way the movement of the earth is invisible to all of us riding on it. what scares me is that there are moral fashions too. theyre just as arbitrary, and just as invisible to most people. but theyre much more dangerous. fashion is mistaken for good design; moral fashion is mistaken for good. dressing oddly gets you laughed at. violating moral fashions can get you fired, ostracized, imprisoned, or even killed. if you could travel back in a time machine, one thing would be true no matter where you went: youd have to watch what you said. opinions we consider harmless could have gotten you in big trouble. ive already said at least one thing that would have gotten me in big trouble in most of europe in the seventeenth century, and did get galileo in big trouble when he said it-- that the earth moves.  it seems to be a constant throughout history: in every period, people believed things that were just ridiculous, and believed them so strongly that you would have gotten in terrible trouble for saying otherwise. is our time any different? to anyone who has read any amount of history, the answer is almost certainly no. it would be a remarkable coincidence if ours were the first era to get everything just right. its tantalizing to think we believe things that people in the future will find ridiculous. what would someone coming back to visit us in a time machine have to be careful not to say? thats what i want to study here. but i want to do more than just shock everyone with the heresy du jour. i want to find general recipes for discovering what you cant say, in any era. lets start with a test: do you have any opinions that you would be reluctant to express in front of a group of your peers? if the answer is no, you might want to stop and think about that. if everything you believe is something youre supposed to believe, could that possibly be a coincidence? odds are it isnt. odds are you just think whatever youre told. the other alternative would be that you independently considered every question and came up with the exact same answers that are now considered acceptable. that seems unlikely, because youd also have to make the same mistakes. mapmakers deliberately put slight mistakes in their maps so they can tell when someone copies them. if another map has the same mistake, thats very convincing evidence. like every other era in history, our moral map almost certainly contains a few mistakes. and anyone who makes the same mistakes probably didnt do it by accident. it would be like someone claiming they had independently decided in 1972 that bell-bottom jeans were a good idea. if you believe everything youre supposed to now, how can you be sure you wouldnt also have believed everything you were supposed to if you had grown up among the plantation owners of the pre-civil war south, or in germany in the 1930s-- or among the mongols in 1200, for that matter? odds are you would have. back in the era of terms like "well-adjusted," the idea seemed to be that there was something wrong with you if you thought things you didnt dare say out loud. this seems backward. almost certainly, there is something wrong with you if you dont think things you dont dare say out loud. what cant we say? one way to find these ideas is simply to look at things people do say, and get in trouble for.  of course, were not just looking for things we cant say. were looking for things we cant say that are true, or at least have enough chance of being true that the question should remain open. but many of the things people get in trouble for saying probably do make it over this second, lower threshold. no one gets in trouble for saying that 2 + 2 is 5, or that people in pittsburgh are ten feet tall. such obviously false statements might be treated as jokes, or at worst as evidence of insanity, but they are not likely to make anyone mad. the statements that make people mad are the ones they worry might be believed. i suspect the statements that make people maddest are those they worry might be true. if galileo had said that people in padua were ten feet tall, he would have been regarded as a harmless eccentric. saying the earth orbited the sun was another matter. the church knew this would set people thinking. certainly, as we look back on the past, this rule of thumb works well. a lot of the statements people got in trouble for seem harmless now. so its likely that visitors from the future would agree with at least some of the statements that get people in trouble today. do we have no galileos? not likely. to find them, keep track of opinions that get people in trouble, and start asking, could this be true? ok, it may be heretical (or whatever modern equivalent), but might it also be true? this wont get us all the answers, though. what if no one happens to have gotten in trouble for a particular idea yet? what if some idea would be so radioactively controversial that no one would dare express it in public? how can we find these too? another approach is to follow that word, heresy. in every period of history, there seem to have been labels that got applied to statements to shoot them down before anyone had a chance to ask if they were true or not. "blasphemy", "sacrilege", and "heresy" were such labels for a good part of western history, as in more recent times "indecent", "improper", and "unamerican" have been. by now these labels have lost their sting. they always do. by now theyre mostly used ironically. but in their time, they had real force. the word "defeatist", for example, has no particular political connotations now. but in germany in 1917 it was a weapon, used by ludendorff in a purge of those who favored a negotiated peace. at the start of world war ii it was used extensively by churchill and his supporters to silence their opponents. in 1940, any argument against churchills aggressive policy was "defeatist". was it right or wrong? ideally, no one got far enough to ask that. we have such labels today, of course, quite a lot of them, from the all-purpose "inappropriate" to the dreaded "divisive." in any period, it should be easy to figure out what such labels are, simply by looking at what people call ideas they disagree with besides untrue. when a politician says his opponent is mistaken, thats a straightforward criticism, but when he attacks a statement as "divisive" or "racially insensitive" instead of arguing that its false, we should start paying attention. so another way to figure out which of our taboos future generations will laugh at is to start with the labels. take a label-- "sexist", for example-- and try to think of some ideas that would be called that. then for each ask, might this be true? just start listing ideas at random? yes, because they wont really be random. the ideas that come to mind first will be the most plausible ones. theyll be things youve already noticed but didnt let yourself think. in 1989 some clever researchers tracked the eye movements of radiologists as they scanned chest images for signs of lung cancer.  they found that even when the radiologists missed a cancerous lesion, their eyes had usually paused at the site of it. part of their brain knew there was something there; it just didnt percolate all the way up into conscious knowledge. i think many interesting heretical thoughts are already mostly formed in our minds. if we turn off our self-censorship temporarily, those will be the first to emerge. if we could look into the future it would be obvious which of our taboos theyd laugh at. we cant do that, but we can do something almost as good: we can look into the past. another way to figure out what were getting wrong is to look at what used to be acceptable and is now unthinkable. changes between the past and the present sometimes do represent progress. in a field like physics, if we disagree with past generations its because were right and theyre wrong. but this becomes rapidly less true as you move away from the certainty of the hard sciences. by the time you get to social questions, many changes are just fashion. the age of consent fluctuates like hemlines. we may imagine that we are a great deal smarter and more virtuous than past generations, but the more history you read, the less likely this seems. people in past times were much like us. not heroes, not barbarians. whatever their ideas were, they were ideas reasonable people could believe. so here is another source of interesting heresies. diff present ideas against those of various past cultures, and see what you get.  some will be shocking by present standards. ok, fine; but which might also be true? you dont have to look into the past to find big differences. in our own time, different societies have wildly varying ideas of whats ok and what isnt. so you can try diffing other cultures ideas against ours as well. (the best way to do that is to visit them.) you might find contradictory taboos. in one culture it might seem shocking to think x, while in another it was shocking not to. but i think usually the shock is on one side. in one culture x is ok, and in another its considered shocking. my hypothesis is that the side thats shocked is most likely to be the mistaken one.  i suspect the only taboos that are more than taboos are the ones that are universal, or nearly so. murder for example. but any idea thats considered harmless in a significant percentage of times and places, and yet is taboo in ours, is a good candidate for something were mistaken about. for example, at the high water mark of political correctness in the early 1990s, harvard distributed to its faculty and staff a brochure saying, among other things, that it was inappropriate to compliment a colleague or students clothes. no more "nice shirt." i think this principle is rare among the worlds cultures, past or present. there are probably more where its considered especially polite to compliment someones clothing than where its considered improper. so odds are this is, in a mild form, an example of one of the taboos a visitor from the future would have to be careful to avoid if he happened to set his time machine for cambridge, massachusetts, 1992. of course, if they have time machines in the future theyll probably have a separate reference manual just for cambridge. this has always been a fussy place, a town of i dotters and t crossers, where youre liable to get both your grammar and your ideas corrected in the same conversation. and that suggests another way to find taboos. look for prigs, and see whats inside their heads. kids heads are repositories of all our taboos. it seems fitting to us that kids ideas should be bright and clean. the picture we give them of the world is not merely simplified, to suit their developing minds, but sanitized as well, to suit our ideas of what kids ought to think.  you can see this on a small scale in the matter of dirty words. a lot of my friends are starting to have children now, and theyre all trying not to use words like "fuck" and "shit" within babys hearing, lest baby start using these words too. but these words are part of the language, and adults use them all the time. so parents are giving their kids an inaccurate idea of the language by not using them. why do they do this? because they dont think its fitting that kids should use the whole language. we like children to seem innocent.  most adults, likewise, deliberately give kids a misleading view of the world. one of the most obvious examples is santa claus. we think its cute for little kids to believe in santa claus. i myself think its cute for little kids to believe in santa claus. but one wonders, do we tell them this stuff for their sake, or for ours? im not arguing for or against this idea here. it is probably inevitable that parents should want to dress up their kids minds in cute little baby outfits. ill probably do it myself. the important thing for our purposes is that, as a result, a well brought-up teenage kids brain is a more or less complete collection of all our taboos-- and in mint condition, because theyre untainted by experience. whatever we think that will later turn out to be ridiculous, its almost certainly inside that head. how do we get at these ideas? by the following thought experiment. imagine a kind of latter-day conrad character who has worked for a time as a mercenary in africa, for a time as a doctor in nepal, for a time as the manager of a nightclub in miami. the specifics dont matter-- just someone who has seen a lot. now imagine comparing whats inside this guys head with whats inside the head of a well-behaved sixteen year old girl from the suburbs. what does he think that would shock her? he knows the world; she knows, or at least embodies, present taboos. subtract one from the other, and the result is what we cant say. i can think of one more way to figure out what we cant say: to look at how taboos are created. how do moral fashions arise, and why are they adopted? if we can understand this mechanism, we may be able to see it at work in our own time. moral fashions dont seem to be created the way ordinary fashions are. ordinary fashions seem to arise by accident when everyone imitates the whim of some influential person. the fashion for broad-toed shoes in late fifteenth century europe began because charles viii of france had six toes on one foot. the fashion for the name gary began when the actor frank cooper adopted the name of a tough mill town in indiana. moral fashions more often seem to be created deliberately. when theres something we cant say, its often because some group doesnt want us to. the prohibition will be strongest when the group is nervous. the irony of galileos situation was that he got in trouble for repeating copernicuss ideas. copernicus himself didnt. in fact, copernicus was a canon of a cathedral, and dedicated his book to the pope. but by galileos time the church was in the throes of the counter-reformation and was much more worried about unorthodox ideas. to launch a taboo, a group has to be poised halfway between weakness and power. a confident group doesnt need taboos to protect it. its not considered improper to make disparaging remarks about americans, or the english. and yet a group has to be powerful enough to enforce a taboo. coprophiles, as of this writing, dont seem to be numerous or energetic enough to have had their interests promoted to a lifestyle. i suspect the biggest source of moral taboos will turn out to be power struggles in which one side only barely has the upper hand. thats where youll find a group powerful enough to enforce taboos, but weak enough to need them. most struggles, whatever theyre really about, will be cast as struggles between competing ideas. the english reformation was at bottom a struggle for wealth and power, but it ended up being cast as a struggle to preserve the souls of englishmen from the corrupting influence of rome. its easier to get people to fight for an idea. and whichever side wins, their ideas will also be considered to have triumphed, as if god wanted to signal his agreement by selecting that side as the victor. we often like to think of world war ii as a triumph of freedom over totalitarianism. we conveniently forget that the soviet union was also one of the winners. im not saying that struggles are never about ideas, just that they will always be made to seem to be about ideas, whether they are or not. and just as there is nothing so unfashionable as the last, discarded fashion, there is nothing so wrong as the principles of the most recently defeated opponent. representational art is only now recovering from the approval of both hitler and stalin.  although moral fashions tend to arise from different sources than fashions in clothing, the mechanism of their adoption seems much the same. the early adopters will be driven by ambition: self-consciously cool people who want to distinguish themselves from the common herd. as the fashion becomes established theyll be joined by a second, much larger group, driven by fear.  this second group adopt the fashion not because they want to stand out but because they are afraid of standing out. so if you want to figure out what we cant say, look at the machinery of fashion and try to predict what it would make unsayable. what groups are powerful but nervous, and what ideas would they like to suppress? what ideas were tarnished by association when they ended up on the losing side of a recent struggle? if a self-consciously cool person wanted to differentiate himself from preceding fashions (e.g. from his parents), which of their ideas would he tend to reject? what are conventional-minded people afraid of saying? this technique wont find us all the things we cant say. i can think of some that arent the result of any recent struggle. many of our taboos are rooted deep in the past. but this approach, combined with the preceding four, will turn up a good number of unthinkable ideas. some would ask, why would one want to do this? why deliberately go poking around among nasty, disreputable ideas? why look under rocks? i do it, first of all, for the same reason i did look under rocks as a kid: plain curiosity. and im especially curious about anything thats forbidden. let me see and decide for myself. second, i do it because i dont like the idea of being mistaken. if, like other eras, we believe things that will later seem ridiculous, i want to know what they are so that i, at least, can avoid believing them. third, i do it because its good for the brain. to do good work you need a brain that can go anywhere. and you especially need a brain thats in the habit of going where its not supposed to. great work tends to grow out of ideas that others have overlooked, and no idea is so overlooked as one thats unthinkable. natural selection, for example. its so simple. why didnt anyone think of it before? well, that is all too obvious. darwin himself was careful to tiptoe around the implications of his theory. he wanted to spend his time thinking about biology, not arguing with people who accused him of being an atheist. in the sciences, especially, its a great advantage to be able to question assumptions. the m.o. of scientists, or at least of the good ones, is precisely that: look for places where conventional wisdom is broken, and then try to pry apart the cracks and see whats underneath. thats where new theories come from. a good scientist, in other words, does not merely ignore conventional wisdom, but makes a special effort to break it. scientists go looking for trouble. this should be the m.o. of any scholar, but scientists seem much more willing to look under rocks.  why? it could be that the scientists are simply smarter; most physicists could, if necessary, make it through a phd program in french literature, but few professors of french literature could make it through a phd program in physics. or it could be because its clearer in the sciences whether theories are true or false, and this makes scientists bolder. (or it could be that, because its clearer in the sciences whether theories are true or false, you have to be smart to get jobs as a scientist, rather than just a good politician.) whatever the reason, there seems a clear correlation between intelligence and willingness to consider shocking ideas. this isnt just because smart people actively work to find holes in conventional thinking. i think conventions also have less hold over them to start with. you can see that in the way they dress. its not only in the sciences that heresy pays off. in any competitive field, you can win big by seeing things that others darent. and in every field there are probably heresies few dare utter. within the us car industry there is a lot of hand-wringing now about declining market share. yet the cause is so obvious that any observant outsider could explain it in a second: they make bad cars. and they have for so long that by now the us car brands are antibrands-- something youd buy a car despite, not because of. cadillac stopped being the cadillac of cars in about 1970. and yet i suspect no one dares say this.  otherwise these companies would have tried to fix the problem. training yourself to think unthinkable thoughts has advantages beyond the thoughts themselves. its like stretching. when you stretch before running, you put your body into positions much more extreme than any it will assume during the run. if you can think things so outside the box that theyd make peoples hair stand on end, youll have no trouble with the small trips outside the box that people call innovative. when you find something you cant say, what do you do with it? my advice is, dont say it. or at least, pick your battles. suppose in the future there is a movement to ban the color yellow. proposals to paint anything yellow are denounced as "yellowist", as is anyone suspected of liking the color. people who like orange are tolerated but viewed with suspicion. suppose you realize there is nothing wrong with yellow. if you go around saying this, youll be denounced as a yellowist too, and youll find yourself having a lot of arguments with anti-yellowists. if your aim in life is to rehabilitate the color yellow, that may be what you want. but if youre mostly interested in other questions, being labelled as a yellowist will just be a distraction. argue with idiots, and you become an idiot. the most important thing is to be able to think what you want, not to say what you want. and if you feel you have to say everything you think, it may inhibit you from thinking improper thoughts. i think its better to follow the opposite policy. draw a sharp line between your thoughts and your speech. inside your head, anything is allowed. within my head i make a point of encouraging the most outrageous thoughts i can imagine. but, as in a secret society, nothing that happens within the building should be told to outsiders. the first rule of fight club is, you do not talk about fight club. when milton was going to visit italy in the 1630s, sir henry wootton, who had been ambassador to venice, told him his motto should be "i pensieri stretti & il viso sciolto." closed thoughts and an open face. smile at everyone, and dont tell them what youre thinking. this was wise advice. milton was an argumentative fellow, and the inquisition was a bit restive at that time. but i think the difference between miltons situation and ours is only a matter of degree. every era has its heresies, and if you dont get imprisoned for them you will at least get in enough trouble that it becomes a complete distraction. i admit it seems cowardly to keep quiet. when i read about the harassment to which the scientologists subject their critics , or that pro-israel groups are "compiling dossiers" on those who speak out against israeli human rights abuses , or about people being sued for violating the dmca , part of me wants to say, "all right, you bastards, bring it on." the problem is, there are so many things you cant say. if you said them all youd have no time left for your real work. youd have to turn into noam chomsky.  the trouble with keeping your thoughts secret, though, is that you lose the advantages of discussion. talking about an idea leads to more ideas. so the optimal plan, if you can manage it, is to have a few trusted friends you can speak openly to. this is not just a way to develop ideas; its also a good rule of thumb for choosing friends. the people you can say heretical things to without getting jumped on are also the most interesting to know. i dont think we need the viso sciolto so much as the pensieri stretti. perhaps the best policy is to make it plain that you dont agree with whatever zealotry is current in your time, but not to be too specific about what you disagree with. zealots will try to draw you out, but you dont have to answer them. if they try to force you to treat a question on their terms by asking "are you with us or against us?" you can always just answer "neither". better still, answer "i havent decided." thats what larry summers did when a group tried to put him in this position. explaining himself later, he said "i dont do litmus tests."  a lot of the questions people get hot about are actually quite complicated. there is no prize for getting the answer quickly. if the anti-yellowists seem to be getting out of hand and you want to fight back, there are ways to do it without getting yourself accused of being a yellowist. like skirmishers in an ancient army, you want to avoid directly engaging the main body of the enemys troops. better to harass them with arrows from a distance. one way to do this is to ratchet the debate up one level of abstraction. if you argue against censorship in general, you can avoid being accused of whatever heresy is contained in the book or film that someone is trying to censor. you can attack labels with meta-labels: labels that refer to the use of labels to prevent discussion. the spread of the term "political correctness" meant the beginning of the end of political correctness, because it enabled one to attack the phenomenon as a whole without being accused of any of the specific heresies it sought to suppress. another way to counterattack is with metaphor. arthur miller undermined the house un-american activities committee by writing a play, "the crucible," about the salem witch trials. he never referred directly to the committee and so gave them no way to reply. what could huac do, defend the salem witch trials? and yet millers metaphor stuck so well that to this day the activities of the committee are often described as a "witch-hunt." best of all, probably, is humor. zealots, whatever their cause, invariably lack a sense of humor. they cant reply in kind to jokes. theyre as unhappy on the territory of humor as a mounted knight on a skating rink. victorian prudishness, for example, seems to have been defeated mainly by treating it as a joke. likewise its reincarnation as political correctness. "i am glad that i managed to write the crucible," arthur miller wrote, "but looking back i have often wished id had the temperament to do an absurd comedy, which is what the situation deserved."  a dutch friend says i should use holland as an example of a tolerant society. its true they have a long tradition of comparative open-mindedness. for centuries the low countries were the place to go to say things you couldnt say anywhere else, and this helped to make the region a center of scholarship and industry (which have been closely tied for longer than most people realize). descartes, though claimed by the french, did much of his thinking in holland. and yet, i wonder. the dutch seem to live their lives up to their necks in rules and regulations. theres so much you cant do there; is there really nothing you cant say? certainly the fact that they value open-mindedness is no guarantee. who thinks theyre not open-minded? our hypothetical prim miss from the suburbs thinks shes open-minded. hasnt she been taught to be? ask anyone, and theyll say the same thing: theyre pretty open-minded, though they draw the line at things that are really wrong. (some tribes may avoid "wrong" as judgemental, and may instead use a more neutral sounding euphemism like "negative" or "destructive".) when people are bad at math, they know it, because they get the wrong answers on tests. but when people are bad at open-mindedness they dont know it. in fact they tend to think the opposite. remember, its the nature of fashion to be invisible. it wouldnt work otherwise. fashion doesnt seem like fashion to someone in the grip of it. it just seems like the right thing to do. its only by looking from a distance that we see oscillations in peoples idea of the right thing to do, and can identify them as fashions. time gives us such distance for free. indeed, the arrival of new fashions makes old fashions easy to see, because they seem so ridiculous by contrast. from one end of a pendulums swing, the other end seems especially far away. to see fashion in your own time, though, requires a conscious effort. without time to give you distance, you have to create distance yourself. instead of being part of the mob, stand as far away from it as you can and watch what its doing. and pay especially close attention whenever an idea is being suppressed. web filters for children and employees often ban sites containing pornography, violence, and hate speech. what counts as pornography and violence? and what, exactly, is "hate speech?" this sounds like a phrase out of 1984. labels like that are probably the biggest external clue. if a statement is false, thats the worst thing you can say about it. you dont need to say that its heretical. and if it isnt false, it shouldnt be suppressed. so when you see statements being attacked as x-ist or y-ic (substitute your current values of x and y), whether in 1630 or 2030, thats a sure sign that something is wrong. when you hear such labels being used, ask why. especially if you hear yourself using them. its not just the mob you need to learn to watch from a distance. you need to be able to watch your own thoughts from a distance. thats not a radical idea, by the way; its the main difference between children and adults. when a child gets angry because hes tired, he doesnt know whats happening. an adult can distance himself enough from the situation to say "never mind, im just tired." i dont see why one couldnt, by a similar process, learn to recognize and discount the effects of moral fashions. you have to take that extra step if you want to think clearly. but its harder, because now youre working against social customs instead of with them. everyone encourages you to grow up to the point where you can discount your own bad moods. few encourage you to continue to the point where you can discount societys bad moods. how can you see the wave, when youre the water? always be questioning. thats the only defence. what cant you say? and why? notes thanks to sarah harlin, trevor blackwell, jessica livingston, robert morris, eric raymond and bob van der zwaan for reading drafts of this essay, and to lisa randall, jackie mcdonough, ryan stanley and joel rainey for conversations about heresy. needless to say they bear no blame for opinions expressed in it, and especially for opinions not expressed in it. this essay was originally published at paulgraham.com we may be able to improve the accuracy of bayesian spam filters by having them follow links to see whats waiting at the other end. richard jowsey of death2spam now does this in borderline cases, and reports that it works well. why only do it in borderline cases? and why only do it once? as i mentioned in will filters kill spam? , following all the urls in a spam would have an amusing side-effect. if popular email clients did this in order to filter spam, the spammers servers would take a serious pounding. the more i think about this, the better an idea it seems. this isnt just amusing; it would be hard to imagine a more perfectly targeted counterattack on spammers. so id like to suggest an additional feature to those working on spam filters: a "punish" mode which, if turned on, would spider every url in a suspected spam n times, where n could be set by the user.  as many people have noted, one of the problems with the current email system is that its too passive. it does whatever you tell it. so far all the suggestions for fixing the problem seem to involve new protocols. this one wouldnt. if widely used, auto-retrieving spam filters would make the email system rebound. the huge volume of the spam, which has so far worked in the spammers favor, would now work against him, like a branch snapping back in his face. auto-retrieving spam filters would drive the spammers costs up, and his sales down: his bandwidth usage would go through the roof, and his servers would grind to a halt under the load, which would make them unavailable to the people who would have responded to the spam. pump out a million emails an hour, get a million hits an hour on your servers. we would want to ensure that this is only done to suspected spams. as a rule, any url sent to millions of people is likely to be a spam url, so submitting every http request in every email would work fine nearly all the time. but there are a few cases where this isnt true: the urls at the bottom of mails sent from free email services like yahoo mail and hotmail, for example. to protect such sites, and to prevent abuse, auto-retrieval should be combined with blacklists of spamvertised sites. only sites on a blacklist would get crawled, and sites would be blacklisted only after being inspected by humans. the lifetime of a spam must be several hours at least, so it should be easy to update such a list in time to interfere with a spam promoting a new site.  high-volume auto-retrieval would only be practical for users on high-bandwidth connections, but there are enough of those to cause spammers serious trouble. indeed, this solution neatly mirrors the problem. the problem with spam is that in order to reach a few gullible people the spammer sends mail to everyone. the non-gullible recipients are merely collateral damage. but the non-gullible majority wont stop getting spam until they can stop (or threaten to stop) the gullible from responding to it. auto-retrieving spam filters offer them a way to do this. would that kill spam? not quite. the biggest spammers could probably protect their servers against auto-retrieving filters. however, the easiest and cheapest way for them to do it would be to include working unsubscribe links in their mails. and this would be a necessity for smaller fry, and for "legitimate" sites that hired spammers to promote them. so if auto-retrieving filters became widespread, theyd become auto-unsubscribing filters. in this scenario, spam would, like os crashes, viruses, and popups, become one of those plagues that only afflict people who dont bother to use the right software.  auto-retrieving filters will have to follow redirects, and should in some cases (e.g. a page that just says "click here") follow more than one level of links. make sure too that the http requests are indistinguishable from those of popular web browsers, including the order and referrer. if the response doesnt come back within x amount of time, default to some fairly high spam probability. instead of making n constant, it might be a good idea to make it a function of the number of spams that have been seen mentioning the site. this would add a further level of protection against abuse and accidents.  the original version of this article used the term "whitelist" instead of "blacklist". though they were to work like blacklists, i preferred to call them whitelists because it might make them less vulnerable to legal attack. this just seems to have confused readers, though. there should probably be multiple blacklists. a single point of failure would be vulnerable both to attack and abuse. thanks to brian burton, bill yerazunis, dan giffin, eric raymond, and richard jowsey for reading drafts of this. this essay was originally published at paulgraham.com (this essay is derived from a guest lecture at harvard, which incorporated an earlier talk at northeastern.) when i finished grad school in computer science i went to art school to study painting. a lot of people seemed surprised that someone interested in computers would also be interested in painting. they seemed to think that hacking and painting were very different kinds of work-- that hacking was cold, precise, and methodical, and that painting was the frenzied expression of some primal urge. both of these images are wrong. hacking and painting have a lot in common. in fact, of all the different types of people ive known, hackers and painters are among the most alike. what hackers and painters have in common is that theyre both makers. along with composers, architects, and writers, what hackers and painters are trying to do is make good things. theyre not doing research per se, though if in the course of trying to make good things they discover some new technique, so much the better. ive never liked the term "computer science." the main reason i dont like it is that theres no such thing. computer science is a grab bag of tenuously related areas thrown together by an accident of history, like yugoslavia. at one end you have people who are really mathematicians, but call what theyre doing computer science so they can get darpa grants. in the middle you have people working on something like the natural history of computers-- studying the behavior of algorithms for routing data through networks, for example. and then at the other extreme you have the hackers, who are trying to write interesting software, and for whom computers are just a medium of expression, as concrete is for architects or paint for painters. its as if mathematicians, physicists, and architects all had to be in the same department. sometimes what the hackers do is called "software engineering," but this term is just as misleading. good software designers are no more engineers than architects are. the border between architecture and engineering is not sharply defined, but its there. it falls between what and how: architects decide what to do, and engineers figure out how to do it. what and how should not be kept too separate. youre asking for trouble if you try to decide what to do without understanding how to do it. but hacking can certainly be more than just deciding how to implement some spec. at its best, its creating the spec-- though it turns out the best way to do that is to implement it. perhaps one day "computer science" will, like yugoslavia, get broken up into its component parts. that might be a good thing. especially if it meant independence for my native land, hacking. bundling all these different types of work together in one department may be convenient administratively, but its confusing intellectually. thats the other reason i dont like the name "computer science." arguably the people in the middle are doing something like an experimental science. but the people at either end, the hackers and the mathematicians, are not actually doing science. the mathematicians dont seem bothered by this. they happily set to work proving theorems like the other mathematicians over in the math department, and probably soon stop noticing that the building they work in says computer science on the outside. but for the hackers this label is a problem. if what theyre doing is called science, it makes them feel they ought to be acting scientific. so instead of doing what they really want to do, which is to design beautiful software, hackers in universities and research labs feel they ought to be writing research papers. in the best case, the papers are just a formality. hackers write cool software, and then write a paper about it, and the paper becomes a proxy for the achievement represented by the software. but often this mismatch causes problems. its easy to drift away from building beautiful things toward building ugly things that make more suitable subjects for research papers. unfortunately, beautiful things dont always make the best subjects for papers. number one, research must be original-- and as anyone who has written a phd dissertation knows, the way to be sure that youre exploring virgin territory is to to stake out a piece of ground that no one wants. number two, research must be substantial-- and awkward systems yield meatier papers, because you can write about the obstacles you have to overcome in order to get things done. nothing yields meaty problems like starting with the wrong assumptions. most of ai is an example of this rule; if you assume that knowledge can be represented as a list of predicate logic expressions whose arguments represent abstract concepts, youll have a lot of papers to write about how to make this work. as ricky ricardo used to say, "lucy, you got a lot of explaining to do." the way to create something beautiful is often to make subtle tweaks to something that already exists, or to combine existing ideas in a slightly new way. this kind of work is hard to convey in a research paper. so why do universities and research labs continue to judge hackers by publications? for the same reason that "scholastic aptitude" gets measured by simple-minded standardized tests, or the productivity of programmers gets measured in lines of code. these tests are easy to apply, and there is nothing so tempting as an easy test that kind of works. measuring what hackers are actually trying to do, designing beautiful software, would be much more difficult. you need a good sense of design to judge good design . and there is no correlation, except possibly a negative one, between peoples ability to recognize good design and their confidence that they can. the only external test is time. over time, beautiful things tend to thrive, and ugly things tend to get discarded. unfortunately, the amounts of time involved can be longer than human lifetimes. samuel johnson said it took a hundred years for a writers reputation to converge. you have to wait for the writers influential friends to die, and then for all their followers to die. i think hackers just have to resign themselves to having a large random component in their reputations. in this they are no different from other makers. in fact, theyre lucky by comparison. the influence of fashion is not nearly so great in hacking as it is in painting. there are worse things than having people misunderstand your work. a worse danger is that you will yourself misunderstand your work. related fields are where you go looking for ideas. if you find yourself in the computer science department, there is a natural temptation to believe, for example, that hacking is the applied version of what theoretical computer science is the theory of. all the time i was in graduate school i had an uncomfortable feeling in the back of my mind that i ought to know more theory, and that it was very remiss of me to have forgotten all that stuff within three weeks of the final exam. now i realize i was mistaken. hackers need to understand the theory of computation about as much as painters need to understand paint chemistry. you need to know how to calculate time and space complexity and about turing completeness. you might also want to remember at least the concept of a state machine, in case you have to write a parser or a regular expression library. painters in fact have to remember a good deal more about paint chemistry than that. ive found that the best sources of ideas are not the other fields that have the word "computer" in their names, but the other fields inhabited by makers. painting has been a much richer source of ideas than the theory of computation. for example, i was taught in college that one ought to figure out a program completely on paper before even going near a computer. i found that i did not program this way. i found that i liked to program sitting in front of a computer, not a piece of paper. worse still, instead of patiently writing out a complete program and assuring myself it was correct, i tended to just spew out code that was hopelessly broken, and gradually beat it into shape. debugging, i was taught, was a kind of final pass where you caught typos and oversights. the way i worked, it seemed like programming consisted of debugging. for a long time i felt bad about this, just as i once felt bad that i didnt hold my pencil the way they taught me to in elementary school. if i had only looked over at the other makers, the painters or the architects, i would have realized that there was a name for what i was doing: sketching. as far as i can tell, the way they taught me to program in college was all wrong. you should figure out programs as youre writing them, just as writers and painters and architects do. realizing this has real implications for software design. it means that a programming language should, above all, be malleable. a programming language is for thinking of programs, not for expressing programs youve already thought of. it should be a pencil, not a pen. static typing would be a fine idea if people actually did write programs the way they taught me to in college. but thats not how any of the hackers i know write programs. we need a language that lets us scribble and smudge and smear, not a language where you have to sit with a teacup of types balanced on your knee and make polite conversation with a strict old aunt of a compiler. while were on the subject of static typing, identifying with the makers will save us from another problem that afflicts the sciences: math envy. everyone in the sciences secretly believes that mathematicians are smarter than they are. i think mathematicians also believe this. at any rate, the result is that scientists tend to make their work look as mathematical as possible. in a field like physics this probably doesnt do much harm, but the further you get from the natural sciences, the more of a problem it becomes. a page of formulas just looks so impressive. (tip: for extra impressiveness, use greek variables.) and so there is a great temptation to work on problems you can treat formally, rather than problems that are, say, important. if hackers identified with other makers, like writers and painters, they wouldnt feel tempted to do this. writers and painters dont suffer from math envy. they feel as if theyre doing something completely unrelated. so are hackers, i think. if universities and research labs keep hackers from doing the kind of work they want to do, perhaps the place for them is in companies. unfortunately, most companies wont let hackers do what they want either. universities and research labs force hackers to be scientists, and companies force them to be engineers. i only discovered this myself quite recently. when yahoo bought viaweb, they asked me what i wanted to do. i had never liked the business side very much, and said that i just wanted to hack. when i got to yahoo, i found that what hacking meant to them was implementing software, not designing it. programmers were seen as technicians who translated the visions (if that is the word) of product managers into code. this seems to be the default plan in big companies. they do it because it decreases the standard deviation of the outcome. only a small percentage of hackers can actually design software, and its hard for the people running a company to pick these out. so instead of entrusting the future of the software to one brilliant hacker, most companies set things up so that it is designed by committee, and the hackers merely implement the design. if you want to make money at some point, remember this, because this is one of the reasons startups win. big companies want to decrease the standard deviation of design outcomes because they want to avoid disasters. but when you damp oscillations, you lose the high points as well as the low. this is not a problem for big companies, because they dont win by making great products. big companies win by sucking less than other big companies. so if you can figure out a way to get in a design war with a company big enough that its software is designed by product managers, theyll never be able to keep up with you. these opportunities are not easy to find, though. its hard to engage a big company in a design war, just as its hard to engage an opponent inside a castle in hand to hand combat. it would be pretty easy to write a better word processor than microsoft word, for example, but microsoft, within the castle of their operating system monopoly, probably wouldnt even notice if you did. the place to fight design wars is in new markets, where no one has yet managed to establish any fortifications. thats where you can win big by taking the bold approach to design, and having the same people both design and implement the product. microsoft themselves did this at the start. so did apple. and hewlett-packard. i suspect almost every successful startup has. so one way to build great software is to start your own startup. there are two problems with this, though. one is that in a startup you have to do so much besides write software. at viaweb i considered myself lucky if i got to hack a quarter of the time. and the things i had to do the other three quarters of the time ranged from tedious to terrifying. i have a benchmark for this, because i once had to leave a board meeting to have some cavities filled. i remember sitting back in the dentists chair, waiting for the drill, and feeling like i was on vacation. the other problem with startups is that there is not much overlap between the kind of software that makes money and the kind thats interesting to write. programming languages are interesting to write, and microsofts first product was one, in fact, but no one will pay for programming languages now. if you want to make money, you tend to be forced to work on problems that are too nasty for anyone to solve for free. all makers face this problem. prices are determined by supply and demand, and there is just not as much demand for things that are fun to work on as there is for things that solve the mundane problems of individual customers. acting in off-broadway plays just doesnt pay as well as wearing a gorilla suit in someones booth at a trade show. writing novels doesnt pay as well as writing ad copy for garbage disposals. and hacking programming languages doesnt pay as well as figuring out how to connect some companys legacy database to their web server. i think the answer to this problem, in the case of software, is a concept known to nearly all makers: the day job. this phrase began with musicians, who perform at night. more generally, it means that you have one kind of work you do for money, and another for love. nearly all makers have day jobs early in their careers. painters and writers notoriously do. if youre lucky you can get a day job thats closely related to your real work. musicians often seem to work in record stores. a hacker working on some programming language or operating system might likewise be able to get a day job using it.  when i say that the answer is for hackers to have day jobs, and work on beautiful software on the side, im not proposing this as a new idea. this is what open-source hacking is all about. what im saying is that open-source is probably the right model, because it has been independently confirmed by all the other makers. it seems surprising to me that any employer would be reluctant to let hackers work on open-source projects. at viaweb, we would have been reluctant to hire anyone who didnt. when we interviewed programmers, the main thing we cared about was what kind of software they wrote in their spare time. you cant do anything really well unless you love it, and if you love to hack youll inevitably be working on projects of your own.  because hackers are makers rather than scientists, the right place to look for metaphors is not in the sciences, but among other kinds of makers. what else can painting teach us about hacking? one thing we can learn, or at least confirm, from the example of painting is how to learn to hack. you learn to paint mostly by doing it. ditto for hacking. most hackers dont learn to hack by taking college courses in programming. they learn to hack by writing programs of their own at age thirteen. even in college classes, you learn to hack mostly by hacking.  because painters leave a trail of work behind them, you can watch them learn by doing. if you look at the work of a painter in chronological order, youll find that each painting builds on things that have been learned in previous ones. when theres something in a painting that works very well, you can usually find version 1 of it in a smaller form in some earlier painting. i think most makers work this way. writers and architects seem to as well. maybe it would be good for hackers to act more like painters, and regularly start over from scratch, instead of continuing to work for years on one project, and trying to incorporate all their later ideas as revisions. the fact that hackers learn to hack by doing it is another sign of how different hacking is from the sciences. scientists dont learn science by doing it, but by doing labs and problem sets. scientists start out doing work thats perfect, in the sense that theyre just trying to reproduce work someone else has already done for them. eventually, they get to the point where they can do original work. whereas hackers, from the start, are doing original work; its just very bad. so hackers start original, and get good, and scientists start good, and get original. the other way makers learn is from examples. for a painter, a museum is a reference library of techniques. for hundreds of years it has been part of the traditional education of painters to copy the works of the great masters, because copying forces you to look closely at the way a painting is made. writers do this too. benjamin franklin learned to write by summarizing the points in the essays of addison and steele and then trying to reproduce them. raymond chandler did the same thing with detective stories. hackers, likewise, can learn to program by looking at good programs-- not just at what they do, but the source code too. one of the less publicized benefits of the open-source movement is that it has made it easier to learn to program. when i learned to program, we had to rely mostly on examples in books. the one big chunk of code available then was unix, but even this was not open source. most of the people who read the source read it in illicit photocopies of john lions book, which though written in 1977 was not allowed to be published until 1996. another example we can take from painting is the way that paintings are created by gradual refinement. paintings usually begin with a sketch. gradually the details get filled in. but it is not merely a process of filling in. sometimes the original plans turn out to be mistaken. countless paintings, when you look at them in xrays, turn out to have limbs that have been moved or facial features that have been readjusted. heres a case where we can learn from painting. i think hacking should work this way too. its unrealistic to expect that the specifications for a program will be perfect. youre better off if you admit this up front, and write programs in a way that allows specifications to change on the fly. (the structure of large companies makes this hard for them to do, so here is another place where startups have an advantage.) everyone by now presumably knows about the danger of premature optimization. i think we should be just as worried about premature design-- deciding too early what a program should do. the right tools can help us avoid this danger. a good programming language should, like oil paint, make it easy to change your mind. dynamic typing is a win here because you dont have to commit to specific data representations up front. but the key to flexibility, i think, is to make the language very abstract . the easiest program to change is one thats very short. this sounds like a paradox, but a great painting has to be better than it has to be. for example, when leonardo painted the portrait of ginevra de benci in the national gallery, he put a juniper bush behind her head. in it he carefully painted each individual leaf. many painters might have thought, this is just something to put in the background to frame her head. no one will look that closely at it. not leonardo. how hard he worked on part of a painting didnt depend at all on how closely he expected anyone to look at it. he was like michael jordan. relentless. relentlessness wins because, in the aggregate, unseen details become visible. when people walk by the portrait of ginevra de benci, their attention is often immediately arrested by it, even before they look at the label and notice that it says leonardo da vinci. all those unseen details combine to produce something thats just stunning, like a thousand barely audible voices all singing in tune. great software, likewise, requires a fanatical devotion to beauty. if you look inside good software, you find that parts no one is ever supposed to see are beautiful too. im not claiming i write great software, but i know that when it comes to code i behave in a way that would make me eligible for prescription drugs if i approached everyday life the same way. it drives me crazy to see code thats badly indented, or that uses ugly variable names. if a hacker were a mere implementor, turning a spec into code, then he could just work his way through it from one end to the other like someone digging a ditch. but if the hacker is a creator, we have to take inspiration into account. in hacking, like painting, work comes in cycles. sometimes you get excited about some new project and you want to work sixteen hours a day on it. other times nothing seems interesting. to do good work you have to take these cycles into account, because theyre affected by how you react to them. when youre driving a car with a manual transmission on a hill, you have to back off the clutch sometimes to avoid stalling. backing off can likewise prevent ambition from stalling. in both painting and hacking there are some tasks that are terrifyingly ambitious, and others that are comfortingly routine. its a good idea to save some easy tasks for moments when you would otherwise stall. in hacking, this can literally mean saving up bugs. i like debugging: its the one time that hacking is as straightforward as people think it is. you have a totally constrained problem, and all you have to do is solve it. your program is supposed to do x. instead it does y. where does it go wrong? you know youre going to win in the end. its as relaxing as painting a wall. the example of painting can teach us not only how to manage our own work, but how to work together. a lot of the great art of the past is the work of multiple hands, though there may only be one name on the wall next to it in the museum. leonardo was an apprentice in the workshop of verrocchio and painted one of the angels in his baptism of christ . this sort of thing was the rule, not the exception. michelangelo was considered especially dedicated for insisting on painting all the figures on the ceiling of the sistine chapel himself. as far as i know, when painters worked together on a painting, they never worked on the same parts. it was common for the master to paint the principal figures and for assistants to paint the others and the background. but you never had one guy painting over the work of another. i think this is the right model for collaboration in software too. dont push it too far. when a piece of code is being hacked by three or four different people, no one of whom really owns it, it will end up being like a common-room. it will tend to feel bleak and abandoned, and accumulate cruft. the right way to collaborate, i think, is to divide projects into sharply defined modules, each with a definite owner, and with interfaces between them that are as carefully designed and, if possible, as articulated as programming languages. like painting, most software is intended for a human audience. and so hackers, like painters, must have empathy to do really great work. you have to be able to see things from the users point of view. when i was a kid i was always being told to look at things from someone elses point of view. what this always meant in practice was to do what someone else wanted, instead of what i wanted. this of course gave empathy a bad name, and i made a point of not cultivating it. boy, was i wrong. it turns out that looking at things from other peoples point of view is practically the secret of success. it doesnt necessarily mean being self-sacrificing. far from it. understanding how someone else sees things doesnt imply that youll act in his interest; in some situations-- in war, for example-- you want to do exactly the opposite.  most makers make things for a human audience. and to engage an audience you have to understand what they need. nearly all the greatest paintings are paintings of people, for example, because people are what people are interested in. empathy is probably the single most important difference between a good hacker and a great one. some hackers are quite smart, but when it comes to empathy are practically solipsists. its hard for such people to design great software , because they cant see things from the users point of view. one way to tell how good people are at empathy is to watch them explain a technical question to someone without a technical background. we probably all know people who, though otherwise smart, are just comically bad at this. if someone asks them at a dinner party what a programming language is, theyll say something like oh, a high-level language is what the compiler uses as input to generate object code. high-level language? compiler? object code? someone who doesnt know what a programming language is obviously doesnt know what these things are, either. part of what software has to do is explain itself. so to write good software you have to understand how little users understand. theyre going to walk up to the software with no preparation, and it had better do what they guess it will, because theyre not going to read the manual. the best system ive ever seen in this respect was the original macintosh, in 1985. it did what software almost never does: it just worked.  source code, too, should explain itself. if i could get people to remember just one quote about programming, it would be the one at the beginning of structure and interpretation of computer programs. programs should be written for people to read, and only incidentally for machines to execute. you need to have empathy not just for your users, but for your readers. its in your interest, because youll be one of them. many a hacker has written a program only to find on returning to it six months later that he has no idea how it works. i know several people whove sworn off perl after such experiences.  lack of empathy is associated with intelligence, to the point that there is even something of a fashion for it in some places. but i dont think theres any correlation. you can do well in math and the natural sciences without having to learn empathy, and people in these fields tend to be smart, so the two qualities have come to be associated. but there are plenty of dumb people who are bad at empathy too. just listen to the people who call in with questions on talk shows. they ask whatever it is theyre asking in such a roundabout way that the hosts often have to rephrase the question for them. so, if hacking works like painting and writing, is it as cool? after all, you only get one life. you might as well spend it working on something great. unfortunately, the question is hard to answer. there is always a big time lag in prestige. its like light from a distant star. painting has prestige now because of great work people did five hundred years ago. at the time, no one thought these paintings were as important as we do today. it would have seemed very odd to people at the time that federico da montefeltro, the duke of urbino, would one day be known mostly as the guy with the strange nose in a painting by piero della francesca. so while i admit that hacking doesnt seem as cool as painting now, we should remember that painting itself didnt seem as cool in its glory days as it does now. what we can say with some confidence is that these are the glory days of hacking. in most fields the great work is done early on. the paintings made between 1430 and 1500 are still unsurpassed. shakespeare appeared just as professional theater was being born, and pushed the medium so far that every playwright since has had to live in his shadow. albrecht durer did the same thing with engraving, and jane austen with the novel. over and over we see the same pattern. a new medium appears, and people are so excited about it that they explore most of its possibilities in the first couple generations. hacking seems to be in this phase now. painting was not, in leonardos time, as cool as his work helped make it. how cool hacking turns out to be will depend on what we can do with this new medium.  the greatest damage that photography has done to painting may be the fact that it killed the best day job. most of the great painters in history supported themselves by painting portraits.  ive been told that microsoft discourages employees from contributing to open-source projects, even in their spare time. but so many of the best hackers work on open-source projects now that the main effect of this policy may be to ensure that they wont be able to hire any first-rate programmers.  what you learn about programming in college is much like what you learn about books or clothes or dating: what bad taste you had in high school.  heres an example of applied empathy. at viaweb, if we couldnt decide between two alternatives, wed ask, what would our competitors hate most? at one point a competitor added a feature to their software that was basically useless, but since it was one of few they had that we didnt, they made much of it in the trade press. we could have tried to explain that the feature was useless, but we decided it would annoy our competitor more if we just implemented it ourselves, so we hacked together our own version that afternoon.  except text editors and compilers. hackers dont need empathy to design these, because they are themselves typical users.  well, almost. they overshot the available ram somewhat, causing much inconvenient disk swapping, but this could be fixed within a few months by buying an additional disk drive.  the way to make programs easy to read is not to stuff them with comments. i would take abelson and sussmans quote a step further. programming languages should be designed to express algorithms, and only incidentally to tell computers how to execute them. a good programming language ought to be better for explaining software than english. you should only need comments when there is some kind of kludge you need to warn readers about, just as on a road there are only arrows on parts with unexpectedly sharp curves. thanks to trevor blackwell, robert morris, dan giffin, and lisa randall for reading drafts of this, and to henry leitner and larry finkelstein for inviting me to speak. this essay was originally published at paulgraham.com if lisp is so great, why dont more people use it? i was asked this question by a student in the audience at a talk i gave recently. not for the first time, either. in languages, as in so many things, theres not much correlation between popularity and quality. why does john grisham ( king of torts sales rank, 44) outsell jane austen ( pride and prejudice sales rank, 6191)? would even grisham claim that its because hes a better writer? heres the first sentence of pride and prejudice: it is a truth universally acknowledged, that a single man in possession of a good fortune must be in want of a wife. "it is a truth universally acknowledged?" long words for the first sentence of a love story. like jane austen, lisp looks hard. its syntax, or lack of syntax, makes it look completely unlike the languages most people are used to. before i learned lisp, i was afraid of it too. i recently came across a notebook from 1983 in which id written: i suppose i should learn lisp, but it seems so foreign. fortunately, i was 19 at the time and not too resistant to learning new things. i was so ignorant that learning almost anything meant learning new things. people frightened by lisp make up other reasons for not using it. the standard excuse, back when c was the default language, was that lisp was too slow. now that lisp dialects are among the faster languages available, that excuse has gone away. now the standard excuse is openly circular: that other languages are more popular. (beware of such reasoning. it gets you windows.) popularity is always self-perpetuating, but its especially so in programming languages. more libraries get written for popular languages, which makes them still more popular. programs often have to work with existing programs, and this is easier if theyre written in the same language, so languages spread from program to program like a virus. and managers prefer popular languages, because they give them more leverage over developers, who can more easily be replaced. indeed, if programming languages were all more or less equivalent, there would be little justification for using any but the most popular. but they arent all equivalent, not by a long shot. and thats why less popular languages, like jane austens novels, continue to survive at all. when everyone else is reading the latest john grisham novel, there will always be a few people reading jane austen instead. this essay was originally published at paulgraham.com (this essay is derived from a keynote talk at pycon 2003.) its hard to predict what life will be like in a hundred years. there are only a few things we can say with certainty. we know that everyone will drive flying cars, that zoning laws will be relaxed to allow buildings hundreds of stories tall, that it will be dark most of the time, and that women will all be trained in the martial arts. here i want to zoom in on one detail of this picture. what kind of programming language will they use to write the software controlling those flying cars? this is worth thinking about not so much because well actually get to use these languages as because, if were lucky, well use languages on the path from this point to that. i think that, like species, languages will form evolutionary trees, with dead-ends branching off all over. we can see this happening already. cobol, for all its sometime popularity, does not seem to have any intellectual descendants. it is an evolutionary dead-end-- a neanderthal language. i predict a similar fate for java. people sometimes send me mail saying, "how can you say that java wont turn out to be a successful language? its already a successful language." and i admit that it is, if you measure success by shelf space taken up by books on it (particularly individual books on it), or by the number of undergrads who believe they have to learn it to get a job. when i say java wont turn out to be a successful language, i mean something more specific: that java will turn out to be an evolutionary dead-end, like cobol. this is just a guess. i may be wrong. my point here is not to dis java, but to raise the issue of evolutionary trees and get people asking, where on the tree is language x? the reason to ask this question isnt just so that our ghosts can say, in a hundred years, i told you so. its because staying close to the main branches is a useful heuristic for finding languages that will be good to program in now. at any given time, youre probably happiest on the main branches of an evolutionary tree. even when there were still plenty of neanderthals, it must have sucked to be one. the cro-magnons would have been constantly coming over and beating you up and stealing your food. the reason i want to know what languages will be like in a hundred years is so that i know what branch of the tree to bet on now. the evolution of languages differs from the evolution of species because branches can converge. the fortran branch, for example, seems to be merging with the descendants of algol. in theory this is possible for species too, but its not likely to have happened to any bigger than a cell. convergence is more likely for languages partly because the space of possibilities is smaller, and partly because mutations are not random. language designers deliberately incorporate ideas from other languages. its especially useful for language designers to think about where the evolution of programming languages is likely to lead, because they can steer accordingly. in that case, "stay on a main branch" becomes more than a way to choose a good language. it becomes a heuristic for making the right decisions about language design. any programming language can be divided into two parts: some set of fundamental operators that play the role of axioms, and the rest of the language, which could in principle be written in terms of these fundamental operators. i think the fundamental operators are the most important factor in a languages long term survival. the rest you can change. its like the rule that in buying a house you should consider location first of all. everything else you can fix later, but you cant fix the location. i think its important not just that the axioms be well chosen, but that there be few of them. mathematicians have always felt this way about axioms-- the fewer, the better-- and i think theyre onto something. at the very least, it has to be a useful exercise to look closely at the core of a language to see if there are any axioms that could be weeded out. ive found in my long career as a slob that cruft breeds cruft, and ive seen this happen in software as well as under beds and in the corners of rooms. i have a hunch that the main branches of the evolutionary tree pass through the languages that have the smallest, cleanest cores. the more of a language you can write in itself, the better. of course, im making a big assumption in even asking what programming languages will be like in a hundred years. will we even be writing programs in a hundred years? wont we just tell computers what we want them to do? there hasnt been a lot of progress in that department so far. my guess is that a hundred years from now people will still tell computers what to do using programs we would recognize as such. there may be tasks that we solve now by writing programs and which in a hundred years you wont have to write programs to solve, but i think there will still be a good deal of programming of the type that we do today. it may seem presumptuous to think anyone can predict what any technology will look like in a hundred years. but remember that we already have almost fifty years of history behind us. looking forward a hundred years is a graspable idea when we consider how slowly languages have evolved in the past fifty. languages evolve slowly because theyre not really technologies. languages are notation. a program is a formal description of the problem you want a computer to solve for you. so the rate of evolution in programming languages is more like the rate of evolution in mathematical notation than, say, transportation or communications. mathematical notation does evolve, but not with the giant leaps you see in technology. whatever computers are made of in a hundred years, it seems safe to predict they will be much faster than they are now. if moores law continues to put out, they will be 74 quintillion (73,786,976,294,838,206,464) times faster. thats kind of hard to imagine. and indeed, the most likely prediction in the speed department may be that moores law will stop working. anything that is supposed to double every eighteen months seems likely to run up against some kind of fundamental limit eventually. but i have no trouble believing that computers will be very much faster. even if they only end up being a paltry million times faster, that should change the ground rules for programming languages substantially. among other things, there will be more room for what would now be considered slow languages, meaning languages that dont yield very efficient code. and yet some applications will still demand speed. some of the problems we want to solve with computers are created by computers; for example, the rate at which you have to process video images depends on the rate at which another computer can generate them. and there is another class of problems which inherently have an unlimited capacity to soak up cycles: image rendering, cryptography, simulations. if some applications can be increasingly inefficient while others continue to demand all the speed the hardware can deliver, faster computers will mean that languages have to cover an ever wider range of efficiencies. weve seen this happening already. current implementations of some popular new languages are shockingly wasteful by the standards of previous decades. this isnt just something that happens with programming languages. its a general historical trend. as technologies improve, each generation can do things that the previous generation would have considered wasteful. people thirty years ago would be astonished at how casually we make long distance phone calls. people a hundred years ago would be even more astonished that a package would one day travel from boston to new york via memphis. i can already tell you whats going to happen to all those extra cycles that faster hardware is going to give us in the next hundred years. theyre nearly all going to be wasted. i learned to program when computer power was scarce. i can remember taking all the spaces out of my basic programs so they would fit into the memory of a 4k trs-80. the thought of all this stupendously inefficient software burning up cycles doing the same thing over and over seems kind of gross to me. but i think my intuitions here are wrong. im like someone who grew up poor, and cant bear to spend money even for something important, like going to the doctor. some kinds of waste really are disgusting. suvs, for example, would arguably be gross even if they ran on a fuel which would never run out and generated no pollution. suvs are gross because theyre the solution to a gross problem. (how to make minivans look more masculine.) but not all waste is bad. now that we have the infrastructure to support it, counting the minutes of your long-distance calls starts to seem niggling. if you have the resources, its more elegant to think of all phone calls as one kind of thing, no matter where the other person is. theres good waste, and bad waste. im interested in good waste-- the kind where, by spending more, we can get simpler designs. how will we take advantage of the opportunities to waste cycles that well get from new, faster hardware? the desire for speed is so deeply engrained in us, with our puny computers, that it will take a conscious effort to overcome it. in language design, we should be consciously seeking out situations where we can trade efficiency for even the smallest increase in convenience. most data structures exist because of speed. for example, many languages today have both strings and lists. semantically, strings are more or less a subset of lists in which the elements are characters. so why do you need a separate data type? you dont, really. strings only exist for efficiency. but its lame to clutter up the semantics of the language with hacks to make programs run faster. having strings in a language seems to be a case of premature optimization. if we think of the core of a language as a set of axioms, surely its gross to have additional axioms that add no expressive power, simply for the sake of efficiency. efficiency is important, but i dont think thats the right way to get it. the right way to solve that problem, i think, is to separate the meaning of a program from the implementation details. instead of having both lists and strings, have just lists, with some way to give the compiler optimization advice that will allow it to lay out strings as contiguous bytes if necessary. since speed doesnt matter in most of a program, you wont ordinarily need to bother with this sort of micromanagement. this will be more and more true as computers get faster. saying less about implementation should also make programs more flexible. specifications change while a program is being written, and this is not only inevitable, but desirable. the word "essay" comes from the french verb "essayer", which means "to try". an essay, in the original sense, is something you write to try to figure something out. this happens in software too. i think some of the best programs were essays, in the sense that the authors didnt know when they started exactly what they were trying to write. lisp hackers already know about the value of being flexible with data structures. we tend to write the first version of a program so that it does everything with lists. these initial versions can be so shockingly inefficient that it takes a conscious effort not to think about what theyre doing, just as, for me at least, eating a steak requires a conscious effort not to think where it came from. what programmers in a hundred years will be looking for, most of all, is a language where you can throw together an unbelievably inefficient version 1 of a program with the least possible effort. at least, thats how wed describe it in present-day terms. what theyll say is that they want a language thats easy to program in. inefficient software isnt gross. whats gross is a language that makes programmers do needless work. wasting programmer time is the true inefficiency, not wasting machine time. this will become ever more clear as computers get faster. i think getting rid of strings is already something we could bear to think about. we did it in arc , and it seems to be a win; some operations that would be awkward to describe as regular expressions can be described easily as recursive functions. how far will this flattening of data structures go? i can think of possibilities that shock even me, with my conscientiously broadened mind. will we get rid of arrays, for example? after all, theyre just a subset of hash tables where the keys are vectors of integers. will we replace hash tables themselves with lists? there are more shocking prospects even than that. the lisp that mccarthy described in 1960, for example, didnt have numbers. logically, you dont need to have a separate notion of numbers, because you can represent them as lists: the integer n could be represented as a list of n elements. you can do math this way. its just unbearably inefficient. no one actually proposed implementing numbers as lists in practice. in fact, mccarthys 1960 paper was not, at the time, intended to be implemented at all. it was a theoretical exercise , an attempt to create a more elegant alternative to the turing machine. when someone did, unexpectedly, take this paper and translate it into a working lisp interpreter, numbers certainly werent represented as lists; they were represented in binary, as in every other language. could a programming language go so far as to get rid of numbers as a fundamental data type? i ask this not so much as a serious question as as a way to play chicken with the future. its like the hypothetical case of an irresistible force meeting an immovable object-- here, an unimaginably inefficient implementation meeting unimaginably great resources. i dont see why not. the future is pretty long. if theres something we can do to decrease the number of axioms in the core language, that would seem to be the side to bet on as t approaches infinity. if the idea still seems unbearable in a hundred years, maybe it wont in a thousand. just to be clear about this, im not proposing that all numerical calculations would actually be carried out using lists. im proposing that the core language, prior to any additional notations about implementation, be defined this way. in practice any program that wanted to do any amount of math would probably represent numbers in binary, but this would be an optimization, not part of the core language semantics. another way to burn up cycles is to have many layers of software between the application and the hardware. this too is a trend we see happening already: many recent languages are compiled into byte code. bill woods once told me that, as a rule of thumb, each layer of interpretation costs a factor of 10 in speed. this extra cost buys you flexibility. the very first version of arc was an extreme case of this sort of multi-level slowness, with corresponding benefits. it was a classic "metacircular" interpreter written on top of common lisp, with a definite family resemblance to the eval function defined in mccarthys original lisp paper. the whole thing was only a couple hundred lines of code, so it was very easy to understand and change. the common lisp we used, clisp, itself runs on top of a byte code interpreter. so here we had two levels of interpretation, one of them (the top one) shockingly inefficient, and the language was usable. barely usable, i admit, but usable. writing software as multiple layers is a powerful technique even within applications. bottom-up programming means writing a program as a series of layers, each of which serves as a language for the one above. this approach tends to yield smaller, more flexible programs. its also the best route to that holy grail, reusability. a language is by definition reusable. the more of your application you can push down into a language for writing that type of application, the more of your software will be reusable. somehow the idea of reusability got attached to object-oriented programming in the 1980s, and no amount of evidence to the contrary seems to be able to shake it free. but although some object-oriented software is reusable, what makes it reusable is its bottom-upness, not its object-orientedness. consider libraries: theyre reusable because theyre language, whether theyre written in an object-oriented style or not. i dont predict the demise of object-oriented programming, by the way. though i dont think it has much to offer good programmers, except in certain specialized domains, it is irresistible to large organizations. object-oriented programming offers a sustainable way to write spaghetti code. it lets you accrete programs as a series of patches. large organizations always tend to develop software this way, and i expect this to be as true in a hundred years as it is today. as long as were talking about the future, we had better talk about parallel computation, because thats where this idea seems to live. that is, no matter when youre talking, parallel computation seems to be something that is going to happen in the future. will the future ever catch up with it? people have been talking about parallel computation as something imminent for at least 20 years, and it hasnt affected programming practice much so far. or hasnt it? already chip designers have to think about it, and so must people trying to write systems software on multi-cpu computers. the real question is, how far up the ladder of abstraction will parallelism go? in a hundred years will it affect even application programmers? or will it be something that compiler writers think about, but which is usually invisible in the source code of applications? one thing that does seem likely is that most opportunities for parallelism will be wasted. this is a special case of my more general prediction that most of the extra computer power were given will go to waste. i expect that, as with the stupendous speed of the underlying hardware, parallelism will be something that is available if you ask for it explicitly, but ordinarily not used. this implies that the kind of parallelism we have in a hundred years will not, except in special applications, be massive parallelism. i expect for ordinary programmers it will be more like being able to fork off processes that all end up running in parallel. and this will, like asking for specific implementations of data structures, be something that you do fairly late in the life of a program, when you try to optimize it. version 1s will ordinarily ignore any advantages to be got from parallel computation, just as they will ignore advantages to be got from specific representations of data. except in special kinds of applications, parallelism wont pervade the programs that are written in a hundred years. it would be premature optimization if it did. how many programming languages will there be in a hundred years? there seem to be a huge number of new programming languages lately. part of the reason is that faster hardware has allowed programmers to make different tradeoffs between speed and convenience, depending on the application. if this is a real trend, the hardware well have in a hundred years should only increase it. and yet there may be only a few widely-used languages in a hundred years. part of the reason i say this is optimism: it seems that, if you did a really good job, you could make a language that was ideal for writing a slow version 1, and yet with the right optimization advice to the compiler, would also yield very fast code when necessary. so, since im optimistic, im going to predict that despite the huge gap theyll have between acceptable and maximal efficiency, programmers in a hundred years will have languages that can span most of it. as this gap widens, profilers will become increasingly important. little attention is paid to profiling now. many people still seem to believe that the way to get fast applications is to write compilers that generate fast code. as the gap between acceptable and maximal performance widens, it will become increasingly clear that the way to get fast applications is to have a good guide from one to the other. when i say there may only be a few languages, im not including domain-specific "little languages". i think such embedded languages are a great idea, and i expect them to proliferate. but i expect them to be written as thin enough skins that users can see the general-purpose language underneath. who will design the languages of the future? one of the most exciting trends in the last ten years has been the rise of open-source languages like perl, python, and ruby. language design is being taken over by hackers. the results so far are messy, but encouraging. there are some stunningly novel ideas in perl, for example. many are stunningly bad, but thats always true of ambitious efforts. at its current rate of mutation, god knows what perl might evolve into in a hundred years. its not true that those who cant do, teach (some of the best hackers i know are professors), but it is true that there are a lot of things that those who teach cant do. research imposes constraining caste restrictions. in any academic field there are topics that are ok to work on and others that arent. unfortunately the distinction between acceptable and forbidden topics is usually based on how intellectual the work sounds when described in research papers, rather than how important it is for getting good results. the extreme case is probably literature; people studying literature rarely say anything that would be of the slightest use to those producing it. though the situation is better in the sciences, the overlap between the kind of work youre allowed to do and the kind of work that yields good languages is distressingly small. (olin shivers has grumbled eloquently about this.) for example, types seem to be an inexhaustible source of research papers, despite the fact that static typing seems to preclude true macros-- without which, in my opinion, no language is worth using. the trend is not merely toward languages being developed as open-source projects rather than "research", but toward languages being designed by the application programmers who need to use them, rather than by compiler writers. this seems a good trend and i expect it to continue. unlike physics in a hundred years, which is almost necessarily impossible to predict, i think it may be possible in principle to design a language now that would appeal to users in a hundred years. one way to design a language is to just write down the program youd like to be able to write, regardless of whether there is a compiler that can translate it or hardware that can run it. when you do this you can assume unlimited resources. it seems like we ought to be able to imagine unlimited resources as well today as in a hundred years. what program would one like to write? whatever is least work. except not quite: whatever would be least work if your ideas about programming werent already influenced by the languages youre currently used to. such influence can be so pervasive that it takes a great effort to overcome it. youd think it would be obvious to creatures as lazy as us how to express a program with the least effort. in fact, our ideas about whats possible tend to be so limited by whatever language we think in that easier formulations of programs seem very surprising. theyre something you have to discover, not something you naturally sink into. one helpful trick here is to use the length of the program as an approximation for how much work it is to write. not the length in characters, of course, but the length in distinct syntactic elements-- basically, the size of the parse tree. it may not be quite true that the shortest program is the least work to write, but its close enough that youre better off aiming for the solid target of brevity than the fuzzy, nearby one of least work. then the algorithm for language design becomes: look at a program and ask, is there any way to write this thats shorter? in practice, writing programs in an imaginary hundred-year language will work to varying degrees depending on how close you are to the core. sort routines you can write now. but it would be hard to predict now what kinds of libraries might be needed in a hundred years. presumably many libraries will be for domains that dont even exist yet. if seti@home works, for example, well need libraries for communicating with aliens. unless of course they are sufficiently advanced that they already communicate in xml. at the other extreme, i think you might be able to design the core language today. in fact, some might argue that it was already mostly designed in 1958. if the hundred year language were available today, would we want to program in it? one way to answer this question is to look back. if present-day programming languages had been available in 1960, would anyone have wanted to use them? in some ways, the answer is no. languages today assume infrastructure that didnt exist in 1960. for example, a language in which indentation is significant, like python, would not work very well on printer terminals. but putting such problems aside-- assuming, for example, that programs were all just written on paper-- would programmers of the 1960s have liked writing programs in the languages we use now? i think so. some of the less imaginative ones, who had artifacts of early languages built into their ideas of what a program was, might have had trouble. (how can you manipulate data without doing pointer arithmetic? how can you implement flow charts without gotos?) but i think the smartest programmers would have had no trouble making the most of present-day languages, if theyd had them. if we had the hundred-year language now, it would at least make a great pseudocode. what about using it to write software? since the hundred-year language will need to generate fast code for some applications, presumably it could generate code efficient enough to run acceptably well on our hardware. we might have to give more optimization advice than users in a hundred years, but it still might be a net win. now we have two ideas that, if you combine them, suggest interesting possibilities: (1) the hundred-year language could, in principle, be designed today, and (2) such a language, if it existed, might be good to program in today. when you see these ideas laid out like that, its hard not to think, why not try writing the hundred-year language now? when youre working on language design, i think it is good to have such a target and to keep it consciously in mind. when you learn to drive, one of the principles they teach you is to align the car not by lining up the hood with the stripes painted on the road, but by aiming at some point in the distance. even if all you care about is what happens in the next ten feet, this is the right answer. i think we can and should do the same thing with programming languages. i believe lisp machine lisp was the first language to embody the principle that declarations (except those of dynamic variables) were merely optimization advice, and would not change the meaning of a correct program. common lisp seems to have been the first to state this explicitly. thanks to trevor blackwell, robert morris, and dan giffin for reading drafts of this, and to guido van rossum, jeremy hylton, and the rest of the python crew for inviting me to speak at pycon. this essay was originally published at paulgraham.com when we were in junior high school, my friend rich and i made a map of the school lunch tables according to popularity. this was easy to do, because kids only ate lunch with others of about the same popularity. we graded them from a to e. a tables were full of football players and cheerleaders and so on. e tables contained the kids with mild cases of downs syndrome, what in the language of the time we called "retards." we sat at a d table, as low as you could get without looking physically different. we were not being especially candid to grade ourselves as d. it would have taken a deliberate lie to say otherwise. everyone in the school knew exactly how popular everyone else was, including us. my stock gradually rose during high school. puberty finally arrived; i became a decent soccer player; i started a scandalous underground newspaper. so ive seen a good part of the popularity landscape. i know a lot of people who were nerds in school, and they all tell the same story: there is a strong correlation between being smart and being a nerd, and an even stronger inverse correlation between being a nerd and being popular. being smart seems to make you unpopular. why? to someone in school now, that may seem an odd question to ask. the mere fact is so overwhelming that it may seem strange to imagine that it could be any other way. but it could. being smart doesnt make you an outcast in elementary school. nor does it harm you in the real world. nor, as far as i can tell, is the problem so bad in most other countries. but in a typical american secondary school, being smart is likely to make your life difficult. why? the key to this mystery is to rephrase the question slightly. why dont smart kids make themselves popular? if theyre so smart, why dont they figure out how popularity works and beat the system, just as they do for standardized tests? one argument says that this would be impossible, that the smart kids are unpopular because the other kids envy them for being smart, and nothing they could do could make them popular. i wish. if the other kids in junior high school envied me, they did a great job of concealing it. and in any case, if being smart were really an enviable quality, the girls would have broken ranks. the guys that guys envy, girls like. in the schools i went to, being smart just didnt matter much. kids didnt admire it or despise it. all other things being equal, they would have preferred to be on the smart side of average rather than the dumb side, but intelligence counted far less than, say, physical appearance, charisma, or athletic ability. so if intelligence in itself is not a factor in popularity, why are smart kids so consistently unpopular? the answer, i think, is that they dont really want to be popular. if someone had told me that at the time, i would have laughed at him. being unpopular in school makes kids miserable, some of them so miserable that they commit suicide. telling me that i didnt want to be popular would have seemed like telling someone dying of thirst in a desert that he didnt want a glass of water. of course i wanted to be popular. but in fact i didnt, not enough. there was something else i wanted more: to be smart. not simply to do well in school, though that counted for something, but to design beautiful rockets, or to write well, or to understand how to program computers. in general, to make great things. at the time i never tried to separate my wants and weigh them against one another. if i had, i would have seen that being smart was more important. if someone had offered me the chance to be the most popular kid in school, but only at the price of being of average intelligence (humor me here), i wouldnt have taken it. much as they suffer from their unpopularity, i dont think many nerds would. to them the thought of average intelligence is unbearable. but most kids would take that deal. for half of them, it would be a step up. even for someone in the eightieth percentile (assuming, as everyone seemed to then, that intelligence is a scalar), who wouldnt drop thirty points in exchange for being loved and admired by everyone? and that, i think, is the root of the problem. nerds serve two masters. they want to be popular, certainly, but they want even more to be smart. and popularity is not something you can do in your spare time, not in the fiercely competitive environment of an american secondary school. alberti, arguably the archetype of the renaissance man, writes that "no art, however minor, demands less than total dedication if you want to excel in it." i wonder if anyone in the world works harder at anything than american school kids work at popularity. navy seals and neurosurgery residents seem slackers by comparison. they occasionally take vacations; some even have hobbies. an american teenager may work at being popular every waking hour, 365 days a year. i dont mean to suggest they do this consciously. some of them truly are little machiavellis, but what i really mean here is that teenagers are always on duty as conformists. for example, teenage kids pay a great deal of attention to clothes. they dont consciously dress to be popular. they dress to look good. but to who? to the other kids. other kids opinions become their definition of right, not just for clothes, but for almost everything they do, right down to the way they walk. and so every effort they make to do things "right" is also, consciously or not, an effort to be more popular. nerds dont realize this. they dont realize that it takes work to be popular. in general, people outside some very demanding field dont realize the extent to which success depends on constant (though often unconscious) effort. for example, most people seem to consider the ability to draw as some kind of innate quality, like being tall. in fact, most people who "can draw" like drawing, and have spent many hours doing it; thats why theyre good at it. likewise, popular isnt just something you are or you arent, but something you make yourself. the main reason nerds are unpopular is that they have other things to think about. their attention is drawn to books or the natural world, not fashions and parties. theyre like someone trying to play soccer while balancing a glass of water on his head. other players who can focus their whole attention on the game beat them effortlessly, and wonder why they seem so incapable. even if nerds cared as much as other kids about popularity, being popular would be more work for them. the popular kids learned to be popular, and to want to be popular, the same way the nerds learned to be smart, and to want to be smart: from their parents. while the nerds were being trained to get the right answers, the popular kids were being trained to please. so far ive been finessing the relationship between smart and nerd, using them as if they were interchangeable. in fact its only the context that makes them so. a nerd is someone who isnt socially adept enough. but "enough" depends on where you are. in a typical american school, standards for coolness are so high (or at least, so specific) that you dont have to be especially awkward to look awkward by comparison. few smart kids can spare the attention that popularity requires. unless they also happen to be good-looking, natural athletes, or siblings of popular kids, theyll tend to become nerds. and thats why smart peoples lives are worst between, say, the ages of eleven and seventeen. life at that age revolves far more around popularity than before or after. before that, kids lives are dominated by their parents, not by other kids. kids do care what their peers think in elementary school, but this isnt their whole life, as it later becomes. around the age of eleven, though, kids seem to start treating their family as a day job. they create a new world among themselves, and standing in this world is what matters, not standing in their family. indeed, being in trouble in their family can win them points in the world they care about. the problem is, the world these kids create for themselves is at first a very crude one. if you leave a bunch of eleven-year-olds to their own devices, what you get is lord of the flies. like a lot of american kids, i read this book in school. presumably it was not a coincidence. presumably someone wanted to point out to us that we were savages, and that we had made ourselves a cruel and stupid world. this was too subtle for me. while the book seemed entirely believable, i didnt get the additional message. i wish they had just told us outright that we were savages and our world was stupid. nerds would find their unpopularity more bearable if it merely caused them to be ignored. unfortunately, to be unpopular in school is to be actively persecuted. why? once again, anyone currently in school might think this a strange question to ask. how could things be any other way? but they could be. adults dont normally persecute nerds. why do teenage kids do it? partly because teenagers are still half children, and many children are just intrinsically cruel. some torture nerds for the same reason they pull the legs off spiders. before you develop a conscience, torture is amusing. another reason kids persecute nerds is to make themselves feel better. when you tread water, you lift yourself up by pushing water down. likewise, in any social hierarchy, people unsure of their own position will try to emphasize it by maltreating those they think rank below. ive read that this is why poor whites in the united states are the group most hostile to blacks. but i think the main reason other kids persecute nerds is that its part of the mechanism of popularity. popularity is only partially about individual attractiveness. its much more about alliances. to become more popular, you need to be constantly doing things that bring you close to other popular people, and nothing brings people closer than a common enemy. like a politician who wants to distract voters from bad times at home, you can create an enemy if there isnt a real one. by singling out and persecuting a nerd, a group of kids from higher in the hierarchy create bonds between themselves. attacking an outsider makes them all insiders. this is why the worst cases of bullying happen with groups. ask any nerd: you get much worse treatment from a group of kids than from any individual bully, however sadistic. if its any consolation to the nerds, its nothing personal. the group of kids who band together to pick on you are doing the same thing, and for the same reason, as a bunch of guys who get together to go hunting. they dont actually hate you. they just need something to chase. because theyre at the bottom of the scale, nerds are a safe target for the entire school. if i remember correctly, the most popular kids dont persecute nerds; they dont need to stoop to such things. most of the persecution comes from kids lower down, the nervous middle classes. the trouble is, there are a lot of them. the distribution of popularity is not a pyramid, but tapers at the bottom like a pear. the least popular group is quite small. (i believe we were the only d table in our cafeteria map.) so there are more people who want to pick on nerds than there are nerds. as well as gaining points by distancing oneself from unpopular kids, one loses points by being close to them. a woman i know says that in high school she liked nerds, but was afraid to be seen talking to them because the other girls would make fun of her. unpopularity is a communicable disease; kids too nice to pick on nerds will still ostracize them in self-defense. its no wonder, then, that smart kids tend to be unhappy in middle school and high school. their other interests leave them little attention to spare for popularity, and since popularity resembles a zero-sum game, this in turn makes them targets for the whole school. and the strange thing is, this nightmare scenario happens without any conscious malice, merely because of the shape of the situation. for me the worst stretch was junior high, when kid culture was new and harsh, and the specialization that would later gradually separate the smarter kids had barely begun. nearly everyone ive talked to agrees: the nadir is somewhere between eleven and fourteen. in our school it was eighth grade, which was ages twelve and thirteen for me. there was a brief sensation that year when one of our teachers overheard a group of girls waiting for the school bus, and was so shocked that the next day she devoted the whole class to an eloquent plea not to be so cruel to one another. it didnt have any noticeable effect. what struck me at the time was that she was surprised. you mean she doesnt know the kind of things they say to one another? you mean this isnt normal? its important to realize that, no, the adults dont know what the kids are doing to one another. they know, in the abstract, that kids are monstrously cruel to one another, just as we know in the abstract that people get tortured in poorer countries. but, like us, they dont like to dwell on this depressing fact, and they dont see evidence of specific abuses unless they go looking for it. public school teachers are in much the same position as prison wardens. wardens main concern is to keep the prisoners on the premises. they also need to keep them fed, and as far as possible prevent them from killing one another. beyond that, they want to have as little to do with the prisoners as possible, so they leave them to create whatever social organization they want. from what ive read, the society that the prisoners create is warped, savage, and pervasive, and it is no fun to be at the bottom of it. in outline, it was the same at the schools i went to. the most important thing was to stay on the premises. while there, the authorities fed you, prevented overt violence, and made some effort to teach you something. but beyond that they didnt want to have too much to do with the kids. like prison wardens, the teachers mostly left us to ourselves. and, like prisoners, the culture we created was barbaric. why is the real world more hospitable to nerds? it might seem that the answer is simply that its populated by adults, who are too mature to pick on one another. but i dont think this is true. adults in prison certainly pick on one another. and so, apparently, do society wives; in some parts of manhattan, life for women sounds like a continuation of high school, with all the same petty intrigues. i think the important thing about the real world is not that its populated by adults, but that its very large, and the things you do have real effects. thats what school, prison, and ladies-who-lunch all lack. the inhabitants of all those worlds are trapped in little bubbles where nothing they do can have more than a local effect. naturally these societies degenerate into savagery. they have no function for their form to follow. when the things you do have real effects, its no longer enough just to be pleasing. it starts to be important to get the right answers, and thats where nerds show to advantage. bill gates will of course come to mind. though notoriously lacking in social skills, he gets the right answers, at least as measured in revenue. the other thing thats different about the real world is that its much larger. in a large enough pool, even the smallest minorities can achieve a critical mass if they clump together. out in the real world, nerds collect in certain places and form their own societies where intelligence is the most important thing. sometimes the current even starts to flow in the other direction: sometimes, particularly in university math and science departments, nerds deliberately exaggerate their awkwardness in order to seem smarter. john nash so admired norbert wiener that he adopted his habit of touching the wall as he walked down a corridor. as a thirteen-year-old kid, i didnt have much more experience of the world than what i saw immediately around me. the warped little world we lived in was, i thought, the world. the world seemed cruel and boring, and im not sure which was worse. because i didnt fit into this world, i thought that something must be wrong with me. i didnt realize that the reason we nerds didnt fit in was that in some ways we were a step ahead. we were already thinking about the kind of things that matter in the real world, instead of spending all our time playing an exacting but mostly pointless game like the others. we were a bit like an adult would be if he were thrust back into middle school. he wouldnt know the right clothes to wear, the right music to like, the right slang to use. hed seem to the kids a complete alien. the thing is, hed know enough not to care what they thought. we had no such confidence. a lot of people seem to think its good for smart kids to be thrown together with "normal" kids at this stage of their lives. perhaps. but in at least some cases the reason the nerds dont fit in really is that everyone else is crazy. i remember sitting in the audience at a "pep rally" at my high school, watching as the cheerleaders threw an effigy of an opposing player into the audience to be torn to pieces. i felt like an explorer witnessing some bizarre tribal ritual. if i could go back and give my thirteen year old self some advice, the main thing id tell him would be to stick his head up and look around. i didnt really grasp it at the time, but the whole world we lived in was as fake as a twinkie. not just school, but the entire town. why do people move to suburbia? to have kids! so no wonder it seemed boring and sterile. the whole place was a giant nursery, an artificial town created explicitly for the purpose of breeding children. where i grew up, it felt as if there was nowhere to go, and nothing to do. this was no accident. suburbs are deliberately designed to exclude the outside world, because it contains things that could endanger children. and as for the schools, they were just holding pens within this fake world. officially the purpose of schools is to teach kids. in fact their primary purpose is to keep kids locked up in one place for a big chunk of the day so adults can get things done. and i have no problem with this: in a specialized industrial society, it would be a disaster to have kids running around loose. what bothers me is not that the kids are kept in prisons, but that (a) they arent told about it, and (b) the prisons are run mostly by the inmates. kids are sent off to spend six years memorizing meaningless facts in a world ruled by a caste of giants who run after an oblong brown ball, as if this were the most natural thing in the world. and if they balk at this surreal cocktail, theyre called misfits. life in this twisted world is stressful for the kids. and not just for the nerds. like any war, its damaging even to the winners. adults cant avoid seeing that teenage kids are tormented. so why dont they do something about it? because they blame it on puberty. the reason kids are so unhappy, adults tell themselves, is that monstrous new chemicals, hormones , are now coursing through their bloodstream and messing up everything. theres nothing wrong with the system; its just inevitable that kids will be miserable at that age. this idea is so pervasive that even the kids believe it, which probably doesnt help. someone who thinks his feet naturally hurt is not going to stop to consider the possibility that he is wearing the wrong size shoes. im suspicious of this theory that thirteen-year-old kids are intrinsically messed up. if its physiological, it should be universal. are mongol nomads all nihilists at thirteen? ive read a lot of history, and i have not seen a single reference to this supposedly universal fact before the twentieth century. teenage apprentices in the renaissance seem to have been cheerful and eager. they got in fights and played tricks on one another of course (michelangelo had his nose broken by a bully), but they werent crazy. as far as i can tell, the concept of the hormone-crazed teenager is coeval with suburbia. i dont think this is a coincidence. i think teenagers are driven crazy by the life theyre made to lead. teenage apprentices in the renaissance were working dogs. teenagers now are neurotic lapdogs. their craziness is the craziness of the idle everywhere. when i was in school, suicide was a constant topic among the smarter kids. no one i knew did it, but several planned to, and some may have tried. mostly this was just a pose. like other teenagers, we loved the dramatic, and suicide seemed very dramatic. but partly it was because our lives were at times genuinely miserable. bullying was only part of the problem. another problem, and possibly an even worse one, was that we never had anything real to work on. humans like to work; in most of the world, your work is your identity. and all the work we did was pointless , or seemed so at the time. at best it was practice for real work we might do far in the future, so far that we didnt even know at the time what we were practicing for. more often it was just an arbitrary series of hoops to jump through, words without content designed mainly for testability. (the three main causes of the civil war were.... test: list the three main causes of the civil war.) and there was no way to opt out. the adults had agreed among themselves that this was to be the route to college. the only way to escape this empty life was to submit to it. teenage kids used to have a more active role in society. in pre-industrial times, they were all apprentices of one sort or another, whether in shops or on farms or even on warships. they werent left to create their own societies. they were junior members of adult societies. teenagers seem to have respected adults more then, because the adults were the visible experts in the skills they were trying to learn. now most kids have little idea what their parents do in their distant offices, and see no connection (indeed, there is precious little) between schoolwork and the work theyll do as adults. and if teenagers respected adults more, adults also had more use for teenagers. after a couple years training, an apprentice could be a real help. even the newest apprentice could be made to carry messages or sweep the workshop. now adults have no immediate use for teenagers. they would be in the way in an office. so they drop them off at school on their way to work, much as they might drop the dog off at a kennel if they were going away for the weekend. what happened? were up against a hard one here. the cause of this problem is the same as the cause of so many present ills: specialization. as jobs become more specialized, we have to train longer for them. kids in pre-industrial times started working at about 14 at the latest; kids on farms, where most people lived, began far earlier. now kids who go to college dont start working full-time till 21 or 22. with some degrees, like mds and phds, you may not finish your training till 30. teenagers now are useless, except as cheap labor in industries like fast food, which evolved to exploit precisely this fact. in almost any other kind of work, theyd be a net loss. but theyre also too young to be left unsupervised. someone has to watch over them, and the most efficient way to do this is to collect them together in one place. then a few adults can watch all of them. if you stop there, what youre describing is literally a prison, albeit a part-time one. the problem is, many schools practically do stop there. the stated purpose of schools is to educate the kids. but there is no external pressure to do this well. and so most schools do such a bad job of teaching that the kids dont really take it seriously-- not even the smart kids. much of the time we were all, students and teachers both, just going through the motions. in my high school french class we were supposed to read hugos les miserables. i dont think any of us knew french well enough to make our way through this enormous book. like the rest of the class, i just skimmed the cliffs notes. when we were given a test on the book, i noticed that the questions sounded odd. they were full of long words that our teacher wouldnt have used. where had these questions come from? from the cliffs notes, it turned out. the teacher was using them too. we were all just pretending. there are certainly great public school teachers. the energy and imagination of my fourth grade teacher, mr. mihalko, made that year something his students still talk about, thirty years later. but teachers like him were individuals swimming upstream. they couldnt fix the system. in almost any group of people youll find hierarchy. when groups of adults form in the real world, its generally for some common purpose, and the leaders end up being those who are best at it. the problem with most schools is, they have no purpose. but hierarchy there must be. and so the kids make one out of nothing. we have a phrase to describe what happens when rankings have to be created without any meaningful criteria. we say that the situation degenerates into a popularity contest. and thats exactly what happens in most american schools. instead of depending on some real test, ones rank depends mostly on ones ability to increase ones rank. its like the court of louis xiv. there is no external opponent, so the kids become one anothers opponents. when there is some real external test of skill, it isnt painful to be at the bottom of the hierarchy. a rookie on a football team doesnt resent the skill of the veteran; he hopes to be like him one day and is happy to have the chance to learn from him. the veteran may in turn feel a sense of noblesse oblige . and most importantly, their status depends on how well they do against opponents, not on whether they can push the other down. court hierarchies are another thing entirely. this type of society debases anyone who enters it. there is neither admiration at the bottom, nor noblesse oblige at the top. its kill or be killed. this is the sort of society that gets created in american secondary schools. and it happens because these schools have no real purpose beyond keeping the kids all in one place for a certain number of hours each day. what i didnt realize at the time, and in fact didnt realize till very recently, is that the twin horrors of school life, the cruelty and the boredom, both have the same cause. the mediocrity of american public schools has worse consequences than just making kids unhappy for six years. it breeds a rebelliousness that actively drives kids away from the things theyre supposed to be learning. like many nerds, probably, it was years after high school before i could bring myself to read anything wed been assigned then. and i lost more than books. i mistrusted words like "character" and "integrity" because they had been so debased by adults. as they were used then, these words all seemed to mean the same thing: obedience. the kids who got praised for these qualities tended to be at best dull-witted prize bulls, and at worst facile schmoozers. if that was what character and integrity were, i wanted no part of them. the word i most misunderstood was "tact." as used by adults, it seemed to mean keeping your mouth shut. i assumed it was derived from the same root as "tacit" and "taciturn," and that it literally meant being quiet. i vowed that i would never be tactful; they were never going to shut me up. in fact, its derived from the same root as "tactile," and what it means is to have a deft touch. tactful is the opposite of clumsy. i dont think i learned this until college. nerds arent the only losers in the popularity rat race. nerds are unpopular because theyre distracted. there are other kids who deliberately opt out because theyre so disgusted with the whole process. teenage kids, even rebels, dont like to be alone, so when kids opt out of the system, they tend to do it as a group. at the schools i went to, the focus of rebellion was drug use, specifically marijuana. the kids in this tribe wore black concert t-shirts and were called "freaks." freaks and nerds were allies, and there was a good deal of overlap between them. freaks were on the whole smarter than other kids, though never studying (or at least never appearing to) was an important tribal value. i was more in the nerd camp, but i was friends with a lot of freaks. they used drugs, at least at first, for the social bonds they created. it was something to do together, and because the drugs were illegal, it was a shared badge of rebellion. im not claiming that bad schools are the whole reason kids get into trouble with drugs. after a while, drugs have their own momentum. no doubt some of the freaks ultimately used drugs to escape from other problems-- trouble at home, for example. but, in my school at least, the reason most kids started using drugs was rebellion. fourteen-year-olds didnt start smoking pot because theyd heard it would help them forget their problems. they started because they wanted to join a different tribe. misrule breeds rebellion; this is not a new idea. and yet the authorities still for the most part act as if drugs were themselves the cause of the problem. the real problem is the emptiness of school life. we wont see solutions till adults realize that. the adults who may realize it first are the ones who were themselves nerds in school. do you want your kids to be as unhappy in eighth grade as you were? i wouldnt. well, then, is there anything we can do to fix things? almost certainly. there is nothing inevitable about the current system. it has come about mostly by default. adults, though, are busy. showing up for school plays is one thing. taking on the educational bureaucracy is another. perhaps a few will have the energy to try to change things. i suspect the hardest part is realizing that you can. nerds still in school should not hold their breath. maybe one day a heavily armed force of adults will show up in helicopters to rescue you, but they probably wont be coming this month. any immediate improvement in nerds lives is probably going to have to come from the nerds themselves. merely understanding the situation theyre in should make it less painful. nerds arent losers. theyre just playing a different game, and a game much closer to the one played in the real world. adults know this. its hard to find successful adults now who dont claim to have been nerds in high school. its important for nerds to realize, too, that school is not life. school is a strange, artificial thing, half sterile and half feral. its all-encompassing, like life, but it isnt the real thing. its only temporary, and if you look, you can see beyond it even while youre still in it. if life seems awful to kids, its neither because hormones are turning you all into monsters (as your parents believe), nor because life actually is awful (as you believe). its because the adults, who no longer have any economic use for you, have abandoned you to spend years cooped up together with nothing real to do. any society of that type is awful to live in. you dont have to look any further to explain why teenage kids are unhappy. ive said some harsh things in this essay, but really the thesis is an optimistic one-- that several problems we take for granted are in fact not insoluble after all. teenage kids are not inherently unhappy monsters. that should be encouraging news to kids and adults both. thanks to sarah harlin, trevor blackwell, robert morris, eric raymond, and jackie weicker for reading drafts of this essay, and maria daniels for scanning photos. this essay was originally published at paulgraham.com (this article was given as a talk at the 2003 spam conference. it describes the work ive done to improve the performance of the algorithm described in a plan for spam , and what i plan to do in the future.) the first discovery id like to present here is an algorithm for lazy evaluation of research papers. just write whatever you want and dont cite any previous work, and indignant readers will send you references to all the papers you should have cited. i discovered this algorithm after "a plan for spam"  was on slashdot. spam filtering is a subset of text classification, which is a well established field, but the first papers about bayesian spam filtering per se seem to have been two given at the same conference in 1998, one by pantel and lin , and another by a group from microsoft research . when i heard about this work i was a bit surprised. if people had been onto bayesian filtering four years ago, why wasnt everyone using it? when i read the papers i found out why. pantel and lins filter was the more effective of the two, but it only caught 92% of spam, with 1.16% false positives. when i tried writing a bayesian spam filter, it caught 99.5% of spam with less than .03% false positives . its always alarming when two people trying the same experiment get widely divergent results. its especially alarming here because those two sets of numbers might yield opposite conclusions. different users have different requirements, but i think for many people a filtering rate of 92% with 1.16% false positives means that filtering is not an acceptable solution, whereas 99.5% with less than .03% false positives means that it is. so why did we get such different numbers? i havent tried to reproduce pantel and lins results, but from reading the paper i see five things that probably account for the difference. one is simply that they trained their filter on very little data: 160 spam and 466 nonspam mails. filter performance should still be climbing with data sets that small. so their numbers may not even be an accurate measure of the performance of their algorithm, let alone of bayesian spam filtering in general. but i think the most important difference is probably that they ignored message headers. to anyone who has worked on spam filters, this will seem a perverse decision. and yet in the very first filters i tried writing, i ignored the headers too. why? because i wanted to keep the problem neat. i didnt know much about mail headers then, and they seemed to me full of random stuff. there is a lesson here for filter writers: dont ignore data. youd think this lesson would be too obvious to mention, but ive had to learn it several times. third, pantel and lin stemmed the tokens, meaning they reduced e.g. both mailing and mailed to the root mail. they may have felt they were forced to do this by the small size of their corpus, but if so this is a kind of premature optimization. fourth, they calculated probabilities differently. they used all the tokens, whereas i only use the 15 most significant. if you use all the tokens youll tend to miss longer spams, the type where someone tells you their life story up to the point where they got rich from some multilevel marketing scheme. and such an algorithm would be easy for spammers to spoof: just add a big chunk of random text to counterbalance the spam terms. finally, they didnt bias against false positives. i think any spam filtering algorithm ought to have a convenient knob you can twist to decrease the false positive rate at the expense of the filtering rate. i do this by counting the occurrences of tokens in the nonspam corpus double. i dont think its a good idea to treat spam filtering as a straight text classification problem. you can use text classification techniques, but solutions can and should reflect the fact that the text is email, and spam in particular. email is not just text; it has structure. spam filtering is not just classification, because false positives are so much worse than false negatives that you should treat them as a different kind of error. and the source of error is not just random variation, but a live human spammer working actively to defeat your filter. another project i heard about after the slashdot article was bill yerazunis crm114 . this is the counterexample to the design principle i just mentioned. its a straight text classifier, but such a stunningly effective one that it manages to filter spam almost perfectly without even knowing thats what its doing. once i understood how crm114 worked, it seemed inevitable that i would eventually have to move from filtering based on single words to an approach like this. but first, i thought, ill see how far i can get with single words. and the answer is, surprisingly far. mostly ive been working on smarter tokenization. on current spam, ive been able to achieve filtering rates that approach crm114s. these techniques are mostly orthogonal to bills; an optimal solution might incorporate both. "a plan for spam" uses a very simple definition of a token. letters, digits, dashes, apostrophes, and dollar signs are constituent characters, and everything else is a token separator. i also ignored case. now i have a more complicated definition of a token: here are some of the current probabilities : in the plan for spam filter, all these tokens would have had the same probability, .7602. that filter recognized about 23,000 tokens. the current one recognizes about 187,000. the disadvantage of having a larger universe of tokens is that there is more chance of misses. spreading your corpus out over more tokens has the same effect as making it smaller. if you consider exclamation points as constituents, for example, then you could end up not having a spam probability for free with seven exclamation points, even though you know that free with just two exclamation points has a probability of 99.99%. one solution to this is what i call degeneration. if you cant find an exact match for a token, treat it as if it were a less specific version. i consider terminal exclamation points, uppercase letters, and occurring in one of the five marked contexts as making a token more specific. for example, if i dont find a probability for "subjectfree!", i look for probabilities for "subjectfree", "free!", and "free", and take whichever one is farthest from .5. here are the alternatives  considered if the filter sees "free!!!" in the subject line and doesnt have a probability for it. if you do this, be sure to consider versions with initial caps as well as all uppercase and all lowercase. spams tend to have more sentences in imperative mood, and in those the first word is a verb. so verbs with initial caps have higher spam probabilities than they would in all lowercase. in my filter, the spam probability of "act" is 98% and for "act" only 62%. if you increase your filters vocabulary, you can end up counting the same word multiple times, according to your old definition of same. logically, theyre not the same token anymore. but if this still bothers you, let me add from experience that the words you seem to be counting multiple times tend to be exactly the ones youd want to. another effect of a larger vocabulary is that when you look at an incoming mail you find more interesting tokens, meaning those with probabilities far from .5. i use the 15 most interesting to decide if mail is spam. but you can run into a problem when you use a fixed number like this. if you find a lot of maximally interesting tokens, the result can end up being decided by whatever random factor determines the ordering of equally interesting tokens. one way to deal with this is to treat some as more interesting than others. for example, the token "dalco" occurs 3 times in my spam corpus and never in my legitimate corpus. the token "urloptmails" (meaning "optmails" within a url) occurs 1223 times. and yet, as i used to calculate probabilities for tokens, both would have the same spam probability, the threshold of .99. that doesnt feel right. there are theoretical arguments for giving these two tokens substantially different probabilities (pantel and lin do), but i havent tried that yet. it does seem at least that if we find more than 15 tokens that only occur in one corpus or the other, we ought to give priority to the ones that occur a lot. so now there are two threshold values. for tokens that occur only in the spam corpus, the probability is .9999 if they occur more than 10 times and .9998 otherwise. ditto at the other end of the scale for tokens found only in the legitimate corpus. i may later scale token probabilities substantially, but this tiny amount of scaling at least ensures that tokens get sorted the right way. another possibility would be to consider not just 15 tokens, but all the tokens over a certain threshold of interestingness. steven hauser does this in his statistical spam filter . if you use a threshold, make it very high, or spammers could spoof you by packing messages with more innocent words. finally, what should one do about html? ive tried the whole spectrum of options, from ignoring it to parsing it all. ignoring html is a bad idea, because its full of useful spam signs. but if you parse it all, your filter might degenerate into a mere html recognizer. the most effective approach seems to be the middle course, to notice some tokens but not others. i look at a, img, and font tags, and ignore the rest. links and images you should certainly look at, because they contain urls. i could probably be smarter about dealing with html, but i dont think its worth putting a lot of time into this. spams full of html are easy to filter. the smarter spammers already avoid it. so performance in the future should not depend much on how you deal with html. between december 10 2002 and january 10 2003 i got about 1750 spams. of these, 4 got through. thats a filtering rate of about 99.75%. two of the four spams i missed got through because they happened to use words that occur often in my legitimate email. the third was one of those that exploit an insecure cgi script to send mail to third parties. theyre hard to filter based just on the content because the headers are innocent and theyre careful about the words they use. even so i can usually catch them. this one squeaked by with a probability of .88, just under the threshold of .9. of course, looking at multiple token sequences would catch it easily. "below is the result of your feedback form" is an instant giveaway. the fourth spam was what i call a spam-of-the-future, because this is what i expect spam to evolve into: some completely neutral text followed by a url. in this case it was was from someone saying they had finally finished their homepage and would i go look at it. (the page was of course an ad for a porn site.) if the spammers are careful about the headers and use a fresh url, there is nothing in spam-of-the-future for filters to notice. we can of course counter by sending a crawler to look at the page. but that might not be necessary. the response rate for spam-of-the-future must be low, or everyone would be doing it. if its low enough, it wont pay for spammers to send it, and we wont have to work too hard on filtering it. now for the really shocking news: during that same one-month period i got three false positives. in a way its a relief to get some false positives. when i wrote "a plan for spam" i hadnt had any, and i didnt know what theyd be like. now that ive had a few, im relieved to find theyre not as bad as i feared. false positives yielded by statistical filters turn out to be mails that sound a lot like spam, and these tend to be the ones you would least mind missing . two of the false positives were newsletters from companies ive bought things from. i never asked to receive them, so arguably they were spams, but i count them as false positives because i hadnt been deleting them as spams before. the reason the filters caught them was that both companies in january switched to commercial email senders instead of sending the mails from their own servers, and both the headers and the bodies became much spammier. the third false positive was a bad one, though. it was from someone in egypt and written in all uppercase. this was a direct result of making tokens case sensitive; the plan for spam filter wouldnt have caught it. its hard to say what the overall false positive rate is, because were up in the noise, statistically. anyone who has worked on filters (at least, effective filters) will be aware of this problem. with some emails its hard to say whether theyre spam or not, and these are the ones you end up looking at when you get filters really tight. for example, so far the filter has caught two emails that were sent to my address because of a typo, and one sent to me in the belief that i was someone else. arguably, these are neither my spam nor my nonspam mail. another false positive was from a vice president at virtumundo. i wrote to them pretending to be a customer, and since the reply came back through virtumundos mail servers it had the most incriminating headers imaginable. arguably this isnt a real false positive either, but a sort of heisenberg uncertainty effect: i only got it because i was writing about spam filtering. not counting these, ive had a total of five false positives so far, out of about 7740 legitimate emails, a rate of .06%. the other two were a notice that something i bought was back-ordered, and a party reminder from evite. i dont think this number can be trusted, partly because the sample is so small, and partly because i think i can fix the filter not to catch some of these. false positives seem to me a different kind of error from false negatives. filtering rate is a measure of performance. false positives i consider more like bugs. i approach improving the filtering rate as optimization, and decreasing false positives as debugging. so these five false positives are my bug list. for example, the mail from egypt got nailed because the uppercase text made it look to the filter like a nigerian spam. this really is kind of a bug. as with html, the email being all uppercase is really conceptually one feature, not one for each word. i need to handle case in a more sophisticated way. so what to make of this .06%? not much, i think. you could treat it as an upper bound, bearing in mind the small sample size. but at this stage it is more a measure of the bugs in my implementation than some intrinsic false positive rate of bayesian filtering. what next? filtering is an optimization problem, and the key to optimization is profiling. dont try to guess where your code is slow, because youll guess wrong. look at where your code is slow, and fix that. in filtering, this translates to: look at the spams you miss, and figure out what you could have done to catch them. for example, spammers are now working aggressively to evade filters, and one of the things theyre doing is breaking up and misspelling words to prevent filters from recognizing them. but working on this is not my first priority, because i still have no trouble catching these spams . there are two kinds of spams i currently do have trouble with. one is the type that pretends to be an email from a woman inviting you to go chat with her or see her profile on a dating site. these get through because theyre the one type of sales pitch you can make without using sales talk. they use the same vocabulary as ordinary email. the other kind of spams i have trouble filtering are those from companies in e.g. bulgaria offering contract programming services. these get through because im a programmer too, and the spams are full of the same words as my real mail. ill probably focus on the personal ad type first. i think if i look closer ill be able to find statistical differences between these and my real mail. the style of writing is certainly different, though it may take multiword filtering to catch that. also, i notice they tend to repeat the url, and someone including a url in a legitimate mail wouldnt do that . the outsourcing type are going to be hard to catch. even if you sent a crawler to the site, you wouldnt find a smoking statistical gun. maybe the only answer is a central list of domains advertised in spams . but there cant be that many of this type of mail. if the only spams left were unsolicited offers of contract programming services from bulgaria, we could all probably move on to working on something else. will statistical filtering actually get us to that point? i dont know. right now, for me personally, spam is not a problem. but spammers havent yet made a serious effort to spoof statistical filters. what will happen when they do? im not optimistic about filters that work at the network level . when there is a static obstacle worth getting past, spammers are pretty efficient at getting past it. there is already a company called assurance systems that will run your mail through spamassassin and tell you whether it will get filtered out. network-level filters wont be completely useless. they may be enough to kill all the "opt-in" spam, meaning spam from companies like virtumundo and equalamail who claim that theyre really running opt-in lists. you can filter those based just on the headers, no matter what they say in the body. but anyone willing to falsify headers or use open relays, presumably including most porn spammers, should be able to get some message past network-level filters if they want to. (by no means the message theyd like to send though, which is something.) the kind of filters im optimistic about are ones that calculate probabilities based on each individual users mail. these can be much more effective, not only in avoiding false positives, but in filtering too: for example, finding the recipients email address base-64 encoded anywhere in a message is a very good spam indicator. but the real advantage of individual filters is that theyll all be different. if everyones filters have different probabilities, it will make the spammers optimization loop, what programmers would call their edit-compile-test cycle, appallingly slow. instead of just tweaking a spam till it gets through a copy of some filter they have on their desktop, theyll have to do a test mailing for each tweak. it would be like programming in a language without an interactive toplevel, and i wouldnt wish that on anyone.  paul graham. "a plan for spam." august 2002. http://paulgraham.com/spam.html. probabilities in this algorithm are calculated using a degenerate case of bayes rule. there are two simplifying assumptions: that the probabilities of features (i.e. words) are independent, and that we know nothing about the prior probability of an email being spam. the first assumption is widespread in text classification. algorithms that use it are called "naive bayesian." the second assumption i made because the proportion of spam in my incoming mail fluctuated so much from day to day (indeed, from hour to hour) that the overall prior ratio seemed worthless as a predictor. if you assume that p(spam) and p(nonspam) are both .5, they cancel out and you can remove them from the formula. if you were doing bayesian filtering in a situation where the ratio of spam to nonspam was consistently very high or (especially) very low, you could probably improve filter performance by incorporating prior probabilities. to do this right youd have to track ratios by time of day, because spam and legitimate mail volume both have distinct daily patterns.  patrick pantel and dekang lin. "spamcop-- a spam classification & organization program." proceedings of aaai-98 workshop on learning for text categorization.  mehran sahami, susan dumais, david heckerman and eric horvitz. "a bayesian approach to filtering junk e-mail." proceedings of aaai-98 workshop on learning for text categorization.  at the time i had zero false positives out of about 4,000 legitimate emails. if the next legitimate email was a false positive, this would give us .03%. these false positive rates are untrustworthy, as i explain later. i quote a number here only to emphasize that whatever the false positive rate is, it is less than 1.16%.  bill yerazunis. "sparse binary polynomial hash message filtering and the crm114 discriminator." proceedings of 2003 spam conference.  in "a plan for spam" i used thresholds of .99 and .01. it seems justifiable to use thresholds proportionate to the size of the corpora. since i now have on the order of 10,000 of each type of mail, i use .9999 and .0001.  there is a flaw here i should probably fix. currently, when "subjectfoo" degenerates to just "foo", what that means is youre getting the stats for occurrences of "foo" in the body or header lines other than those i mark. what i should do is keep track of statistics for "foo" overall as well as specific versions, and degenerate from "subjectfoo" not to "foo" but to "anywherefoo". ditto for case: i should degenerate from uppercase to any-case, not lowercase. it would probably be a win to do this with prices too, e.g. to degenerate from "$129.99" to "$--9.99", "$--.99", and "$--". you could also degenerate from words to their stems, but this would probably only improve filtering rates early on when you had small corpora.  steven hauser. "statistical spam filter works for me". http://www.sofbot.com.  false positives are not all equal, and we should remember this when comparing techniques for stopping spam. whereas many of the false positives caused by filters will be near-spams that you wouldnt mind missing, false positives caused by blacklists, for example, will be just mail from people who chose the wrong isp. in both cases you catch mail thats near spam, but for blacklists nearness is physical, and for filters its textual.  if spammers get good enough at obscuring tokens for this to be a problem, we can respond by simply removing whitespace, periods, commas, etc. and using a dictionary to pick the words out of the resulting sequence. and of course finding words this way that werent visible in the original text would in itself be evidence of spam. picking out the words wont be trivial. it will require more than just reconstructing word boundaries; spammers both add ("xhot nporn csite") and omit ("p#rn") letters. vision research may be useful here, since human vision is the limit that such tricks will approach.  in general, spams are more repetitive than regular email. they want to pound that message home. i currently dont allow duplicates in the top 15 tokens, because you could get a false positive if the sender happens to use some bad word multiple times. (in my current filter, dick has a spam probabilty of .9999, but its also a name.) it seems we should at least notice duplication though, so i may try allowing up to two of each token, as brian burton does in spamprobe.  this is what approaches like brightmails will degenerate into once spammers are pushed into using mad-lib techniques to generate everything else in the message.  its sometimes argued that we should be working on filtering at the network level, because it is more efficient. what people usually mean when they say this is: we currently filter at the network level, and we dont want to start over from scratch. but you cant dictate the problem to fit your solution. historically, scarce-resource arguments have been the losing side in debates about software design. people only tend to use them to justify choices (inaction in particular) made for other reasons. thanks to sarah harlin, trevor blackwell, and dan giffin for reading drafts of this paper, and to dan again for most of the infrastructure that this filter runs on. this essay was originally published at paulgraham.com yesterday fred wilson published a remarkable post about missing airbnb . vcs miss good startups all the time, but its extraordinarily rare for one to talk about it publicly till long afterward. so that post is further evidence what a rare bird fred is. hes probably the nicest vc i know. reading freds post made me go back and look at the emails i exchanged with him at the time, trying to convince him to invest in airbnb. it was quite interesting to read. you can see freds mind at work as he circles the deal. fred and the airbnb founders have generously agreed to let me publish this email exchange (with one sentence redacted about something thats strategically important to airbnb and not an important part of the conversation). its an interesting illustration of an element of the startup ecosystem that few except the participants ever see: investors trying to convince one another to invest in their portfolio companies. hundreds if not thousands of conversations of this type are happening now, but if one has ever been published, i havent seen it. the airbnbs themselves never even saw these emails at the time. we do a lot of this behind the scenes stuff at yc, because we invest in such a large number of companies, and we invest so early that investors sometimes need a lot of convincing to see their merits. i dont always try as hard as this though. fred must have found me quite annoying. this essay was originally published at paulgraham.com (this article is derived from a keynote talk at the fall 2002 meeting of nepls.) visitors to this country are often surprised to find that americans like to begin a conversation by asking "what do you do?" ive never liked this question. ive rarely had a neat answer to it. but i think i have finally solved the problem. now, when someone asks me what i do, i look them straight in the eye and say "im designing a new dialect of lisp ." i recommend this answer to anyone who doesnt like being asked what they do. the conversation will turn immediately to other topics. i dont consider myself to be doing research on programming languages. im just designing one, in the same way that someone might design a building or a chair or a new typeface. im not trying to discover anything new. i just want to make a language that will be good to program in. in some ways, this assumption makes life a lot easier. the difference between design and research seems to be a question of new versus good. design doesnt have to be new, but it has to be good. research doesnt have to be good, but it has to be new. i think these two paths converge at the top: the best design surpasses its predecessors by using new ideas, and the best research solves problems that are not only new, but actually worth solving. so ultimately were aiming for the same destination, just approaching it from different directions. what im going to talk about today is what your target looks like from the back. what do you do differently when you treat programming languages as a design problem instead of a research topic? the biggest difference is that you focus more on the user. design begins by asking, who is this for and what do they need from it? a good architect, for example, does not begin by creating a design that he then imposes on the users, but by studying the intended users and figuring out what they need. notice i said "what they need," not "what they want." i dont mean to give the impression that working as a designer means working as a sort of short-order cook, making whatever the client tells you to. this varies from field to field in the arts, but i dont think there is any field in which the best work is done by the people who just make exactly what the customers tell them to. the customer is always right in the sense that the measure of good design is how well it works for the user. if you make a novel that bores everyone, or a chair thats horribly uncomfortable to sit in, then youve done a bad job, period. its no defense to say that the novel or the chair is designed according to the most advanced theoretical principles. and yet, making what works for the user doesnt mean simply making what the user tells you to. users dont know what all the choices are, and are often mistaken about what they really want. the answer to the paradox, i think, is that you have to design for the user, but you have to design what the user needs, not simply what he says he wants. its much like being a doctor. you cant just treat a patients symptoms. when a patient tells you his symptoms, you have to figure out whats actually wrong with him, and treat that. this focus on the user is a kind of axiom from which most of the practice of good design can be derived, and around which most design issues center. if good design must do what the user needs, who is the user? when i say that design must be for users, i dont mean to imply that good design aims at some kind of lowest common denominator. you can pick any group of users you want. if youre designing a tool, for example, you can design it for anyone from beginners to experts, and whats good design for one group might be bad for another. the point is, you have to pick some group of users. i dont think you can even talk about good or bad design except with reference to some intended user. youre most likely to get good design if the intended users include the designer himself. when you design something for a group that doesnt include you, it tends to be for people you consider to be less sophisticated than you, not more sophisticated. thats a problem, because looking down on the user, however benevolently, seems inevitably to corrupt the designer. i suspect that very few housing projects in the us were designed by architects who expected to live in them. you can see the same thing in programming languages. c, lisp, and smalltalk were created for their own designers to use. cobol, ada, and java, were created for other people to use. if you think youre designing something for idiots, the odds are that youre not designing something good, even for idiots. even if youre designing something for the most sophisticated users, though, youre still designing for humans. its different in research. in math you dont choose abstractions because theyre easy for humans to understand; you choose whichever make the proof shorter. i think this is true for the sciences generally. scientific ideas are not meant to be ergonomic. over in the arts, things are very different. design is all about people. the human body is a strange thing, but when youre designing a chair, thats what youre designing for, and theres no way around it. all the arts have to pander to the interests and limitations of humans. in painting, for example, all other things being equal a painting with people in it will be more interesting than one without. it is not merely an accident of history that the great paintings of the renaissance are all full of people. if they hadnt been, painting as a medium wouldnt have the prestige that it does. like it or not, programming languages are also for people, and i suspect the human brain is just as lumpy and idiosyncratic as the human body. some ideas are easy for people to grasp and some arent. for example, we seem to have a very limited capacity for dealing with detail. its this fact that makes programing languages a good idea in the first place; if we could handle the detail, we could just program in machine language. remember, too, that languages are not primarily a form for finished programs, but something that programs have to be developed in. anyone in the arts could tell you that you might want different mediums for the two situations. marble, for example, is a nice, durable medium for finished ideas, but a hopelessly inflexible one for developing new ideas. a program, like a proof, is a pruned version of a tree that in the past has had false starts branching off all over it. so the test of a language is not simply how clean the finished program looks in it, but how clean the path to the finished program was. a design choice that gives you elegant finished programs may not give you an elegant design process. for example, ive written a few macro-defining macros full of nested backquotes that look now like little gems, but writing them took hours of the ugliest trial and error, and frankly, im still not entirely sure theyre correct. we often act as if the test of a language were how good finished programs look in it. it seems so convincing when you see the same program written in two languages, and one version is much shorter. when you approach the problem from the direction of the arts, youre less likely to depend on this sort of test. you dont want to end up with a programming language like marble. for example, it is a huge win in developing software to have an interactive toplevel, what in lisp is called a read-eval-print loop. and when you have one this has real effects on the design of the language. it would not work well for a language where you have to declare variables before using them, for example. when youre just typing expressions into the toplevel, you want to be able to set x to some value and then start doing things to x. you dont want to have to declare the type of x first. you may dispute either of the premises, but if a language has to have a toplevel to be convenient, and mandatory type declarations are incompatible with a toplevel, then no language that makes type declarations mandatory could be convenient to program in. in practice, to get good design you have to get close, and stay close, to your users. you have to calibrate your ideas on actual users constantly, especially in the beginning. one of the reasons jane austens novels are so good is that she read them out loud to her family. thats why she never sinks into self-indulgently arty descriptions of landscapes, or pretentious philosophizing. (the philosophys there, but its woven into the story instead of being pasted onto it like a label.) if you open an average "literary" novel and imagine reading it out loud to your friends as something youd written, youll feel all too keenly what an imposition that kind of thing is upon the reader. in the software world, this idea is known as worse is better. actually, there are several ideas mixed together in the concept of worse is better, which is why people are still arguing about whether worse is actually better or not. but one of the main ideas in that mix is that if youre building something new, you should get a prototype in front of users as soon as possible. the alternative approach might be called the hail mary strategy. instead of getting a prototype out quickly and gradually refining it, you try to create the complete, finished, product in one long touchdown pass. as far as i know, this is a recipe for disaster. countless startups destroyed themselves this way during the internet bubble. ive never heard of a case where it worked. what people outside the software world may not realize is that worse is better is found throughout the arts. in drawing, for example, the idea was discovered during the renaissance. now almost every drawing teacher will tell you that the right way to get an accurate drawing is not to work your way slowly around the contour of an object, because errors will accumulate and youll find at the end that the lines dont meet. instead you should draw a few quick lines in roughly the right place, and then gradually refine this initial sketch. in most fields, prototypes have traditionally been made out of different materials. typefaces to be cut in metal were initially designed with a brush on paper. statues to be cast in bronze were modelled in wax. patterns to be embroidered on tapestries were drawn on paper with ink wash. buildings to be constructed from stone were tested on a smaller scale in wood. what made oil paint so exciting, when it first became popular in the fifteenth century, was that you could actually make the finished work from the prototype. you could make a preliminary drawing if you wanted to, but you werent held to it; you could work out all the details, and even make major changes, as you finished the painting. you can do this in software too. a prototype doesnt have to be just a model; you can refine it into the finished product. i think you should always do this when you can. it lets you take advantage of new insights you have along the way. but perhaps even more important, its good for morale. morale is key in design. im surprised people dont talk more about it. one of my first drawing teachers told me: if youre bored when youre drawing something, the drawing will look boring. for example, suppose you have to draw a building, and you decide to draw each brick individually. you can do this if you want, but if you get bored halfway through and start making the bricks mechanically instead of observing each one, the drawing will look worse than if you had merely suggested the bricks. building something by gradually refining a prototype is good for morale because it keeps you engaged. in software, my rule is: always have working code. if youre writing something that youll be able to test in an hour, then you have the prospect of an immediate reward to motivate you. the same is true in the arts, and particularly in oil painting. most painters start with a blurry sketch and gradually refine it. if you work this way, then in principle you never have to end the day with something that actually looks unfinished. indeed, there is even a saying among painters: "a painting is never finished, you just stop working on it." this idea will be familiar to anyone who has worked on software. morale is another reason that its hard to design something for an unsophisticated user. its hard to stay interested in something you dont like yourself. to make something good, you have to be thinking, "wow, this is really great," not "what a piece of shit; those fools will love it." design means making things for humans. but its not just the user whos human. the designer is human too. notice all this time ive been talking about "the designer." design usually has to be under the control of a single person to be any good. and yet it seems to be possible for several people to collaborate on a research project. this seems to me one of the most interesting differences between research and design. there have been famous instances of collaboration in the arts, but most of them seem to have been cases of molecular bonding rather than nuclear fusion. in an opera its common for one person to write the libretto and another to write the music. and during the renaissance, journeymen from northern europe were often employed to do the landscapes in the backgrounds of italian paintings. but these arent true collaborations. theyre more like examples of robert frosts "good fences make good neighbors." you can stick instances of good design together, but within each individual project, one person has to be in control. im not saying that good design requires that one person think of everything. theres nothing more valuable than the advice of someone whose judgement you trust. but after the talking is done, the decision about what to do has to rest with one person. why is it that research can be done by collaborators and design cant? this is an interesting question. i dont know the answer. perhaps, if design and research converge, the best research is also good design, and in fact cant be done by collaborators. a lot of the most famous scientists seem to have worked alone. but i dont know enough to say whether there is a pattern here. it could be simply that many famous scientists worked when collaboration was less common. whatever the story is in the sciences, true collaboration seems to be vanishingly rare in the arts. design by committee is a synonym for bad design. why is that so? is there some way to beat this limitation? im inclined to think there isnt-- that good design requires a dictator. one reason is that good design has to be all of a piece. design is not just for humans, but for individual humans. if a design represents an idea that fits in one persons head, then the idea will fit in the users head too. this essay was originally published at paulgraham.com (this article describes the spam-filtering techniques used in the spamproof web-based mail reader we built to exercise arc . an improved algorithm is described in bette bayesian filtering .) i think its possible to stop spam, and that content-based filters are the way to do it. the achilles heel of the spammers is their message. they can circumvent any other barrier you set up. they have so far, at least. but they have to deliver their message, whatever it is. if we can write software that recognizes their messages, there is no way they can get around that. _ _ _ to the recipient, spam is easily recognizable. if you hired someone to read your mail and discard the spam, they would have little trouble doing it. how much do we have to do, short of ai, to automate this process? i think we will be able to solve the problem with fairly simple algorithms. in fact, ive found that you can filter present-day spam acceptably well using nothing more than a bayesian combination of the spam probabilities of individual words. using a slightly tweaked (as described below) bayesian filter, we now miss less than 5 per 1000 spams, with 0 false positives. the statistical approach is not usually the first one people try when they write spam filters. most hackers first instinct is to try to write software that recognizes individual properties of spam. you look at spams and you think, the gall of these guys to try sending me mail that begins "dear friend" or has a subject line thats all uppercase and ends in eight exclamation points. i can filter out that stuff with about one line of code. and so you do, and in the beginning it works. a few simple rules will take a big bite out of your incoming spam. merely looking for the word "click" will catch 79.7% of the emails in my spam corpus, with only 1.2% false positives. i spent about six months writing software that looked for individual spam features before i tried the statistical approach. what i found was that recognizing that last few percent of spams got very hard, and that as i made the filters stricter i got more false positives. false positives are innocent emails that get mistakenly identified as spams. for most users, missing legitimate email is an order of magnitude worse than receiving spam, so a filter that yields false positives is like an acne cure that carries a risk of death to the patient. the more spam a user gets, the less likely hell be to notice one innocent mail sitting in his spam folder. and strangely enough, the better your spam filters get, the more dangerous false positives become, because when the filters are really good, users will be more likely to ignore everything they catch. i dont know why i avoided trying the statistical approach for so long. i think it was because i got addicted to trying to identify spam features myself, as if i were playing some kind of competitive game with the spammers. (nonhackers dont often realize this, but most hackers are very competitive.) when i did try statistical analysis, i found immediately that it was much cleverer than i had been. it discovered, of course, that terms like "virtumundo" and "teens" were good indicators of spam. but it also discovered that "per" and "fl" and "ff0000" are good indicators of spam. in fact, "ff0000" (html for bright red) turns out to be as good an indicator of spam as any pornographic term. _ _ _ heres a sketch of how i do statistical filtering. i start with one corpus of spam and one of nonspam mail. at the moment each one has about 4000 messages in it. i scan the entire text, including headers and embedded html and javascript, of each message in each corpus. i currently consider alphanumeric characters, dashes, apostrophes, and dollar signs to be part of tokens, and everything else to be a token separator. (there is probably room for improvement here.) i ignore tokens that are all digits, and i also ignore html comments, not even considering them as token separators. i count the number of times each token (ignoring case, currently) occurs in each corpus. at this stage i end up with two large hash tables, one for each corpus, mapping tokens to number of occurrences. next i create a third hash table, this time mapping each token to the probability that an email containing it is a spam, which i calculate as follows : where word is the token whose probability were calculating, good and bad are the hash tables i created in the first step, and ngood and nbad are the number of nonspam and spam messages respectively. i explained this as code to show a couple of important details. i want to bias the probabilities slightly to avoid false positives, and by trial and error ive found that a good way to do it is to double all the numbers in good . this helps to distinguish between words that occasionally do occur in legitimate email and words that almost never do. i only consider words that occur more than five times in total (actually, because of the doubling, occurring three times in nonspam mail would be enough). and then there is the question of what probability to assign to words that occur in one corpus but not the other. again by trial and error i chose .01 and .99. there may be room for tuning here, but as the corpus grows such tuning will happen automatically anyway. the especially observant will notice that while i consider each corpus to be a single long stream of text for purposes of counting occurrences, i use the number of emails in each, rather than their combined length, as the divisor in calculating spam probabilities. this adds another slight bias to protect against false positives. when new mail arrives, it is scanned into tokens, and the most interesting fifteen tokens, where interesting is measured by how far their spam probability is from a neutral .5, are used to calculate the probability that the mail is spam. if probs is a list of the fifteen individual probabilities, you calculate the combined probability thus: one question that arises in practice is what probability to assign to a word youve never seen, i.e. one that doesnt occur in the hash table of word probabilities. ive found, again by trial and error, that .4 is a good number to use. if youve never seen a word before, it is probably fairly innocent; spam words tend to be all too familiar. there are examples of this algorithm being applied to actual emails in an appendix at the end. i treat mail as spam if the algorithm above gives it a probability of more than .9 of being spam. but in practice it would not matter much where i put this threshold, because few probabilities end up in the middle of the range. _ _ _ one great advantage of the statistical approach is that you dont have to read so many spams. over the past six months, ive read literally thousands of spams, and it is really kind of demoralizing. norbert wiener said if you compete with slaves you become a slave, and there is something similarly degrading about competing with spammers. to recognize individual spam features you have to try to get into the mind of the spammer, and frankly i want to spend as little time inside the minds of spammers as possible. but the real advantage of the bayesian approach, of course, is that you know what youre measuring. feature-recognizing filters like spamassassin assign a spam "score" to email. the bayesian approach assigns an actual probability. the problem with a "score" is that no one knows what it means. the user doesnt know what it means, but worse still, neither does the developer of the filter. how many points should an email get for having the word "sex" in it? a probability can of course be mistaken, but there is little ambiguity about what it means, or how evidence should be combined to calculate it. based on my corpus, "sex" indicates a .97 probability of the containing email being a spam, whereas "sexy" indicates .99 probability. and bayes rule, equally unambiguous, says that an email containing both words would, in the (unlikely) absence of any other evidence, have a 99.97% chance of being a spam. because it is measuring probabilities, the bayesian approach considers all the evidence in the email, both good and bad. words that occur disproportionately rarely in spam (like "though" or "tonight" or "apparently") contribute as much to decreasing the probability as bad words like "unsubscribe" and "opt-in" do to increasing it. so an otherwise innocent email that happens to include the word "sex" is not going to get tagged as spam. ideally, of course, the probabilities should be calculated individually for each user. i get a lot of email containing the word "lisp", and (so far) no spam that does. so a word like that is effectively a kind of password for sending mail to me. in my earlier spam-filtering software, the user could set up a list of such words and mail containing them would automatically get past the filters. on my list i put words like "lisp" and also my zipcode, so that (otherwise rather spammy-sounding) receipts from online orders would get through. i thought i was being very clever, but i found that the bayesian filter did the same thing for me, and moreover discovered of a lot of words i hadnt thought of. when i said at the start that our filters let through less than 5 spams per 1000 with 0 false positives, im talking about filtering my mail based on a corpus of my mail. but these numbers are not misleading, because that is the approach im advocating: filter each users mail based on the spam and nonspam mail he receives. essentially, each user should have two delete buttons, ordinary delete and delete-as-spam. anything deleted as spam goes into the spam corpus, and everything else goes into the nonspam corpus. you could start users with a seed filter, but ultimately each user should have his own per-word probabilities based on the actual mail he receives. this (a) makes the filters more effective, (b) lets each user decide their own precise definition of spam, and (c) perhaps best of all makes it hard for spammers to tune mails to get through the filters. if a lot of the brain of the filter is in the individual databases, then merely tuning spams to get through the seed filters wont guarantee anything about how well theyll get through individual users varying and much more trained filters. content-based spam filtering is often combined with a whitelist, a list of senders whose mail can be accepted with no filtering. one easy way to build such a whitelist is to keep a list of every address the user has ever sent mail to. if a mail reader has a delete-as-spam button then you could also add the from address of every email the user has deleted as ordinary trash. im an advocate of whitelists, but more as a way to save computation than as a way to improve filtering. i used to think that whitelists would make filtering easier, because youd only have to filter email from people youd never heard from, and someone sending you mail for the first time is constrained by convention in what they can say to you. someone you already know might send you an email talking about sex, but someone sending you mail for the first time would not be likely to. the problem is, people can have more than one email address, so a new from-address doesnt guarantee that the sender is writing to you for the first time. it is not unusual for an old friend (especially if he is a hacker) to suddenly send you an email with a new from-address, so you cant risk false positives by filtering mail from unknown addresses especially stringently. in a sense, though, my filters do themselves embody a kind of whitelist (and blacklist) because they are based on entire messages, including the headers. so to that extent they "know" the email addresses of trusted senders and even the routes by which mail gets from them to me. and they know the same about spam, including the server names, mailer versions, and protocols. _ _ _ if i thought that i could keep up current rates of spam filtering, i would consider this problem solved. but it doesnt mean much to be able to filter out most present-day spam, because spam evolves. indeed, most antispam techniques so far have been like pesticides that do nothing more than create a new, resistant strain of bugs. im more hopeful about bayesian filters, because they evolve with the spam. so as spammers start using "c0ck" instead of "cock" to evade simple-minded spam filters based on individual words, bayesian filters automatically notice. indeed, "c0ck" is far more damning evidence than "cock", and bayesian filters know precisely how much more. still, anyone who proposes a plan for spam filtering has to be able to answer the question: if the spammers knew exactly what you were doing, how well could they get past you? for example, i think that if checksum-based spam filtering becomes a serious obstacle, the spammers will just switch to mad-lib techniques for generating message bodies. to beat bayesian filters, it would not be enough for spammers to make their emails unique or to stop using individual naughty words. theyd have to make their mails indistinguishable from your ordinary mail. and this i think would severely constrain them. spam is mostly sales pitches, so unless your regular mail is all sales pitches, spams will inevitably have a different character. and the spammers would also, of course, have to change (and keep changing) their whole infrastructure, because otherwise the headers would look as bad to the bayesian filters as ever, no matter what they did to the message body. i dont know enough about the infrastructure that spammers use to know how hard it would be to make the headers look innocent, but my guess is that it would be even harder than making the message look innocent. assuming they could solve the problem of the headers, the spam of the future will probably look something like this: because that is about as much sales pitch as content-based filtering will leave the spammer room to make. (indeed, it will be hard even to get this past filters, because if everything else in the email is neutral, the spam probability will hinge on the url, and it will take some effort to make that look neutral.) spammers range from businesses running so-called opt-in lists who dont even try to conceal their identities, to guys who hijack mail servers to send out spams promoting porn sites. if we use filtering to whittle their options down to mails like the one above, that should pretty much put the spammers on the "legitimate" end of the spectrum out of business; they feel obliged by various state laws to include boilerplate about why their spam is not spam, and how to cancel your "subscription," and that kind of text is easy to recognize. (i used to think it was naive to believe that stricter laws would decrease spam. now i think that while stricter laws may not decrease the amount of spam that spammers send, they can certainly help filters to decrease the amount of spam that recipients actually see.) all along the spectrum, if you restrict the sales pitches spammers can make, you will inevitably tend to put them out of business. that word business is an important one to remember. the spammers are businessmen. they send spam because it works. it works because although the response rate is abominably low (at best 15 per million, vs 3000 per million for a catalog mailing), the cost, to them, is practically nothing. the cost is enormous for the recipients, about 5 man-weeks for each million recipients who spend a second to delete the spam, but the spammer doesnt have to pay that. sending spam does cost the spammer something, though.  so the lower we can get the response rate-- whether by filtering, or by using filters to force spammers to dilute their pitches-- the fewer businesses will find it worth their while to send spam. the reason the spammers use the kinds of sales pitches that they do is to increase response rates. this is possibly even more disgusting than getting inside the mind of a spammer, but lets take a quick look inside the mind of someone who responds to a spam. this person is either astonishingly credulous or deeply in denial about their sexual interests. in either case, repulsive or idiotic as the spam seems to us, it is exciting to them. the spammers wouldnt say these things if they didnt sound exciting. and "thought you should check out the following" is just not going to have nearly the pull with the spam recipient as the kinds of things that spammers say now. result: if it cant contain exciting sales pitches, spam becomes less effective as a marketing vehicle, and fewer businesses want to use it. that is the big win in the end. i started writing spam filtering software because i didnt want have to look at the stuff anymore. but if we get good enough at filtering out spam, it will stop working, and the spammers will actually stop sending it. _ _ _ of all the approaches to fighting spam, from software to laws, i believe bayesian filtering will be the single most effective. but i also think that the more different kinds of antispam efforts we undertake, the better, because any measure that constrains spammers will tend to make filtering easier. and even within the world of content-based filtering, i think it will be a good thing if there are many different kinds of software being used simultaneously. the more different filters there are, the harder it will be for spammers to tune spams to get through them. here is an example of a spam that arrived while i was writing this article. the fifteen most interesting words in this spam are: the words are a mix of stuff from the headers and from the message body, which is typical of spam. also typical of spam is that every one of these words has a spam probability, in my database, of .99. in fact there are more than fifteen words with probabilities of .99, and these are just the first fifteen seen. unfortunately that makes this email a boring example of the use of bayes rule. to see an interesting variety of probabilities we have to look at this actually quite atypical spam. the fifteen most interesting words in this spam, with their probabilities, are: this time the evidence is a mix of good and bad. a word like "shortest" is almost as much evidence for innocence as a word like "madam" or "promotion" is for guilt. but still the case for guilt is stronger. if you combine these numbers according to bayes rule, the resulting probability is .9027. "madam" is obviously from spams beginning "dear sir or madam." theyre not very common, but the word "madam" never occurs in my legitimate email, and its all about the ratio. "republic" scores high because it often shows up in nigerian scam emails, and also occurs once or twice in spams referring to korea and south africa. you might say that its an accident that it thus helps identify this spam. but ive found when examining spam probabilities that there are a lot of these accidents, and they have an uncanny tendency to push things in the right direction rather than the wrong one. in this case, it is not entirely a coincidence that the word "republic" occurs in nigerian scam emails and this spam. there is a whole class of dubious business propositions involving less developed countries, and these in turn are more likely to have names that specify explicitly (because they arent) that they are republics. on the other hand, "enter" is a genuine miss. it occurs mostly in unsubscribe instructions, but here is used in a completely innocent way. fortunately the statistical approach is fairly robust, and can tolerate quite a lot of misses before the results start to be thrown off. for comparison, here is an example of that rare bird, a spam that gets through the filters. why? because by sheer chance it happens to be loaded with words that occur in my actual email: there are a couple pieces of good news here. first, this mail probably wouldnt get through the filters of someone who didnt happen to specialize in programming languages and have a good friend called morris. for the average user, all the top five words here would be neutral and would not contribute to the spam probability. second, i think filtering based on word pairs (see below) might well catch this one: "cost effective", "setup fee", "money back" -- pretty incriminating stuff. and of course if they continued to spam me (or a network i was part of), "hostex" itself would be recognized as a spam term. finally, here is an innocent email. its fifteen most interesting words are as follows: most of the words here indicate the mail is an innocent one. there are two bad smelling words, "color" (spammers love colored fonts) and "california" (which occurs in testimonials and also in menus in forms), but they are not enough to outweigh obviously innocent words like "continuation" and "example". its interesting that "describe" rates as so thoroughly innocent. it hasnt occurred in a single one of my 4000 spams. the data turns out to be full of such surprises. one of the things you learn when you analyze spam texts is how narrow a subset of the language spammers operate in. its that fact, together with the equally characteristic vocabulary of any individual users mail, that makes bayesian filtering a good bet. one idea that i havent tried yet is to filter based on word pairs, or even triples, rather than individual words. this should yield a much sharper estimate of the probability. for example, in my current database, the word "offers" has a probability of .96. if you based the probabilities on word pairs, youd end up with "special offers" and "valuable offers" having probabilities of .99 and, say, "approach offers" (as in "this approach offers") having a probability of .1 or less. the reason i havent done this is that filtering based on individual words already works so well. but it does mean that there is room to tighten the filters if spam gets harder to detect. (curiously, a filter based on word pairs would be in effect a markov-chaining text generator running in reverse.) specific spam features (e.g. not seeing the recipients address in the to: field) do of course have value in recognizing spam. they can be considered in this algorithm by treating them as virtual words. ill probably do this in future versions, at least for a handful of the most egregious spam indicators. feature-recognizing spam filters are right in many details; what they lack is an overall discipline for combining evidence. recognizing nonspam features may be more important than recognizing spam features. false positives are such a worry that they demand extraordinary measures. i will probably in future versions add a second level of testing designed specifically to avoid false positives. if a mail triggers this second level of filters it will be accepted even if its spam probability is above the threshold. i dont expect this second level of filtering to be bayesian. it will inevitably be not only ad hoc, but based on guesses, because the number of false positives will not tend to be large enough to notice patterns. (it is just as well, anyway, if a backup system doesnt rely on the same technology as the primary system.) another thing i may try in the future is to focus extra attention on specific parts of the email. for example, about 95% of current spam includes the url of a site they want you to visit. (the remaining 5% want you to call a phone number, reply by email or to a us mail address, or in a few cases to buy a certain stock.) the url is in such cases practically enough by itself to determine whether the email is spam. domain names differ from the rest of the text in a (non-german) email in that they often consist of several words stuck together. though computationally expensive in the general case, it might be worth trying to decompose them. if a filter has never seen the token "xxxporn" before it will have an individual spam probability of .4, whereas "xxx" and "porn" individually have probabilities (in my corpus) of .9889 and .99 respectively, and a combined probability of .9998. i expect decomposing domain names to become more important as spammers are gradually forced to stop using incriminating words in the text of their messages. (a url with an ip address is of course an extremely incriminating sign, except in the mail of a few sysadmins.) it might be a good idea to have a cooperatively maintained list of urls promoted by spammers. wed need a trust metric of the type studied by raph levien to prevent malicious or incompetent submissions, but if we had such a thing it would provide a boost to any filtering software. it would also be a convenient basis for boycotts. another way to test dubious urls would be to send out a crawler to look at the site before the user looked at the email mentioning it. you could use a bayesian filter to rate the site just as you would an email, and whatever was found on the site could be included in calculating the probability of the email being a spam. a url that led to a redirect would of course be especially suspicious. one cooperative project that i think really would be a good idea would be to accumulate a giant corpus of spam. a large, clean corpus is the key to making bayesian filtering work well. bayesian filters could actually use the corpus as input. but such a corpus would be useful for other kinds of filters too, because it could be used to test them. creating such a corpus poses some technical problems. wed need trust metrics to prevent malicious or incompetent submissions, of course. wed also need ways of erasing personal information (not just to-addresses and ccs, but also e.g. the arguments to unsubscribe urls, which often encode the to-address) from mails in the corpus. if anyone wants to take on this project, it would be a good thing for the world. i think there is a rough consensus on what spam is, but it would be useful to have an explicit definition. well need to do this if we want to establish a central corpus of spam, or even to compare spam filtering rates meaningfully. to start with, spam is not unsolicited commercial email. if someone in my neighborhood heard that i was looking for an old raleigh three-speed in good condition, and sent me an email offering to sell me one, id be delighted, and yet this email would be both commercial and unsolicited. the defining feature of spam (in fact, its raison detre ) is not that it is unsolicited, but that it is automated. it is merely incidental, too, that spam is usually commercial. if someone started sending mass email to support some political cause, for example, it would be just as much spam as email promoting a porn site. i propose we define spam as unsolicited automated email . this definition thus includes some email that many legal definitions of spam dont. legal definitions of spam, influenced presumably by lobbyists, tend to exclude mail sent by companies that have an "existing relationship" with the recipient. but buying something from a company, for example, does not imply that you have solicited ongoing email from them. if i order something from an online store, and they then send me a stream of spam, its still spam. companies sending spam often give you a way to "unsubscribe," or ask you to go to their site and change your "account preferences" if you want to stop getting spam. this is not enough to stop the mail from being spam. not opting out is not the same as opting in. unless the recipient explicitly checked a clearly labelled box (whose default was no) asking to receive the email, then it is spam. in some business relationships, you do implicitly solicit certain kinds of mail. when you order online, i think you implicitly solicit a receipt, and notification when the order ships. i dont mind when verisign sends me mail warning that a domain name is about to expire (at least, if they are the actual registrar for it). but when verisign sends me email offering a free guide to building my e-commerce web site, thats spam.  the examples in this article are translated into common lisp for, believe it or not, greater accessibility. the application described here is one that we wrote in order to test a new lisp dialect called arc that is not yet released.  currently the lowest rate seems to be about $200 to send a million spams. thats very cheap, 1/50th of a cent per spam. but filtering out 95% of spam, for example, would increase the spammers cost to reach a given audience by a factor of 20. few can have margins big enough to absorb that.  as a rule of thumb, the more qualifiers there are before the name of a country, the more corrupt the rulers. a country called the socialist peoples democratic republic of x is probably the last place in the world youd want to live. thanks to sarah harlin for reading drafts of this; daniel giffin (who is also writing the production arc interpreter) for several good ideas about filtering and for creating our mail infrastructure; robert morris, trevor blackwell and erann gat for many discussions about spam; raph levien for advice about trust metrics; and chip coldwell and sam steingold for advice about statistics. this essay was originally published at paulgraham.com in the software business there is an ongoing struggle between the pointy-headed academics, and another equally formidable force, the pointy-haired bosses. everyone knows who the pointy-haired boss is, right? i think most people in the technology world not only recognize this cartoon character, but know the actual person in their company that he is modelled upon. the pointy-haired boss miraculously combines two qualities that are common by themselves, but rarely seen together: (a) he knows nothing whatsoever about technology, and (b) he has very strong opinions about it. suppose, for example, you need to write a piece of software. the pointy-haired boss has no idea how this software has to work, and cant tell one programming language from another, and yet he knows what language you should write it in. exactly. he thinks you should write it in java. why does he think this? lets take a look inside the brain of the pointy-haired boss. what hes thinking is something like this. java is a standard. i know it must be, because i read about it in the press all the time. since it is a standard, i wont get in trouble for using it. and that also means there will always be lots of java programmers, so if the programmers working for me now quit, as programmers working for me mysteriously always do, i can easily replace them. well, this doesnt sound that unreasonable. but its all based on one unspoken assumption, and that assumption turns out to be false. the pointy-haired boss believes that all programming languages are pretty much equivalent. if that were true, he would be right on target. if languages are all equivalent, sure, use whatever language everyone else is using. but all languages are not equivalent, and i think i can prove this to you without even getting into the differences between them. if you asked the pointy-haired boss in 1992 what language software should be written in, he would have answered with as little hesitation as he does today. software should be written in c++. but if languages are all equivalent, why should the pointy-haired bosss opinion ever change? in fact, why should the developers of java have even bothered to create a new language? presumably, if you create a new language, its because you think its better in some way than what people already had. and in fact, gosling makes it clear in the first java white paper that java was designed to fix some problems with c++. so there you have it: languages are not all equivalent. if you follow the trail through the pointy-haired bosss brain to java and then back through javas history to its origins, you end up holding an idea that contradicts the assumption you started with. so, whos right? james gosling, or the pointy-haired boss? not surprisingly, gosling is right. some languages are better, for certain problems, than others. and you know, that raises some interesting questions. java was designed to be better, for certain problems, than c++. what problems? when is java better and when is c++? are there situations where other languages are better than either of them? once you start considering this question, you have opened a real can of worms. if the pointy-haired boss had to think about the problem in its full complexity, it would make his brain explode. as long as he considers all languages equivalent, all he has to do is choose the one that seems to have the most momentum, and since that is more a question of fashion than technology, even he can probably get the right answer. but if languages vary, he suddenly has to solve two simultaneous equations, trying to find an optimal balance between two things he knows nothing about: the relative suitability of the twenty or so leading languages for the problem he needs to solve, and the odds of finding programmers, libraries, etc. for each. if thats whats on the other side of the door, it is no surprise that the pointy-haired boss doesnt want to open it. the disadvantage of believing that all programming languages are equivalent is that its not true. but the advantage is that it makes your life a lot simpler. and i think thats the main reason the idea is so widespread. it is a comfortable idea. we know that java must be pretty good, because it is the cool, new programming language. or is it? if you look at the world of programming languages from a distance, it looks like java is the latest thing. (from far enough away, all you can see is the large, flashing billboard paid for by sun.) but if you look at this world up close, you find that there are degrees of coolness. within the hacker subculture, there is another language called perl that is considered a lot cooler than java. slashdot, for example, is generated by perl. i dont think you would find those guys using java server pages. but there is another, newer language, called python, whose users tend to look down on perl, and more waiting in the wings. if you look at these languages in order, java, perl, python, you notice an interesting pattern. at least, you notice this pattern if you are a lisp hacker. each one is progressively more like lisp. python copies even features that many lisp hackers consider to be mistakes. you could translate simple lisp programs into python line for line. its 2002, and programming languages have almost caught up with 1958. what i mean is that lisp was first discovered by john mccarthy in 1958, and popular programming languages are only now catching up with the ideas he developed then. now, how could that be true? isnt computer technology something that changes very rapidly? i mean, in 1958, computers were refrigerator-sized behemoths with the processing power of a wristwatch. how could any technology that old even be relevant, let alone superior to the latest developments? ill tell you how. its because lisp was not really designed to be a programming language, at least not in the sense we mean today. what we mean by a programming language is something we use to tell a computer what to do. mccarthy did eventually intend to develop a programming language in this sense, but the lisp that we actually ended up with was based on something separate that he did as a theoretical exercise -- an effort to define a more convenient alternative to the turing machine. as mccarthy said later, another way to show that lisp was neater than turing machines was to write a universal lisp function and show that it is briefer and more comprehensible than the description of a universal turing machine. this was the lisp function eval ..., which computes the value of a lisp expression.... writing eval required inventing a notation representing lisp functions as lisp data, and such a notation was devised for the purposes of the paper with no thought that it would be used to express lisp programs in practice. what happened next was that, some time in late 1958, steve russell, one of mccarthys grad students, looked at this definition of eval and realized that if he translated it into machine language, the result would be a lisp interpreter. this was a big surprise at the time. here is what mccarthy said about it later in an interview: steve russell said, look, why dont i program this eval ..., and i said to him, ho, ho, youre confusing theory with practice, this eval is intended for reading, not for computing. but he went ahead and did it. that is, he compiled the eval in my paper into  704 machine code, fixing bugs, and then advertised this as a lisp interpreter, which it certainly was. so at that point lisp had essentially the form that it has today.... suddenly, in a matter of weeks i think, mccarthy found his theoretical exercise transformed into an actual programming language-- and a more powerful one than he had intended. so the short explanation of why this 1950s language is not obsolete is that it was not technology but math, and math doesnt get stale. the right thing to compare lisp to is not 1950s hardware, but, say, the quicksort algorithm, which was discovered in 1960 and is still the fastest general-purpose sort. there is one other language still surviving from the 1950s, fortran, and it represents the opposite approach to language design. lisp was a piece of theory that unexpectedly got turned into a programming language. fortran was developed intentionally as a programming language, but what we would now consider a very low-level one. fortran i , the language that was developed in 1956, was a very different animal from present-day fortran. fortran i was pretty much assembly language with math. in some ways it was less powerful than more recent assembly languages; there were no subroutines, for example, only branches. present-day fortran is now arguably closer to lisp than to fortran i. lisp and fortran were the trunks of two separate evolutionary trees, one rooted in math and one rooted in machine architecture. these two trees have been converging ever since. lisp started out powerful, and over the next twenty years got fast. so-called mainstream languages started out fast, and over the next forty years gradually got more powerful, until now the most advanced of them are fairly close to lisp. close, but they are still missing a few things.... when it was first developed, lisp embodied nine new ideas. some of these we now take for granted, others are only seen in more advanced languages, and two are still unique to lisp. the nine ideas are, in order of their adoption by the mainstream, as for number 8, this may be the most interesting of the lot. ideas 8 and 9 only became part of lisp by accident, because steve russell implemented something mccarthy had never intended to be implemented. and yet these ideas turn out to be responsible for both lisps strange appearance and its most distinctive features. lisp looks strange not so much because it has a strange syntax as because it has no syntax; you express programs directly in the parse trees that get built behind the scenes when other languages are parsed, and these trees are made of lists, which are lisp data structures. expressing the language in its own data structures turns out to be a very powerful feature. ideas 8 and 9 together mean that you can write programs that write programs. that may sound like a bizarre idea, but its an everyday thing in lisp. the most common way to do it is with something called a macro. the term "macro" does not mean in lisp what it means in other languages. a lisp macro can be anything from an abbreviation to a compiler for a new language. if you want to really understand lisp, or just expand your programming horizons, i would learn more about macros. macros (in the lisp sense) are still, as far as i know, unique to lisp. this is partly because in order to have macros you probably have to make your language look as strange as lisp. it may also be because if you do add that final increment of power, you can no longer claim to have invented a new language, but only a new dialect of lisp. i mention this mostly as a joke, but it is quite true. if you define a language that has car, cdr, cons, quote, cond, atom, eq, and a notation for functions expressed as lists, then you can build all the rest of lisp out of it. that is in fact the defining quality of lisp: it was in order to make this so that mccarthy gave lisp the shape it has. so suppose lisp does represent a kind of limit that mainstream languages are approaching asymptotically-- does that mean you should actually use it to write software? how much do you lose by using a less powerful language? isnt it wiser, sometimes, not to be at the very edge of innovation? and isnt popularity to some extent its own justification? isnt the pointy-haired boss right, for example, to want to use a language for which he can easily hire programmers? there are, of course, projects where the choice of programming language doesnt matter much. as a rule, the more demanding the application, the more leverage you get from using a powerful language. but plenty of projects are not demanding at all. most programming probably consists of writing little glue programs, and for little glue programs you can use any language that youre already familiar with and that has good libraries for whatever you need to do. if you just need to feed data from one windows app to another, sure, use visual basic. you can write little glue programs in lisp too (i use it as a desktop calculator), but the biggest win for languages like lisp is at the other end of the spectrum, where you need to write sophisticated programs to solve hard problems in the face of fierce competition. a good example is the airline fare search program that ita software licenses to orbitz. these guys entered a market already dominated by two big, entrenched competitors, travelocity and expedia, and seem to have just humiliated them technologically. the core of itas application is a 200,000 line common lisp program that searches many orders of magnitude more possibilities than their competitors, who apparently are still using mainframe-era programming techniques. (though ita is also in a sense using a mainframe-era programming language.) i have never seen any of itas code, but according to one of their top hackers they use a lot of macros, and i am not surprised to hear it. im not saying there is no cost to using uncommon technologies. the pointy-haired boss is not completely mistaken to worry about this. but because he doesnt understand the risks, he tends to magnify them. i can think of three problems that could arise from using less common languages. your programs might not work well with programs written in other languages. you might have fewer libraries at your disposal. and you might have trouble hiring programmers. how much of a problem is each of these? the importance of the first varies depending on whether you have control over the whole system. if youre writing software that has to run on a remote users machine on top of a buggy, closed operating system (i mention no names), there may be advantages to writing your application in the same language as the os. but if you control the whole system and have the source code of all the parts, as ita presumably does, you can use whatever languages you want. if any incompatibility arises, you can fix it yourself. in server-based applications you can get away with using the most advanced technologies, and i think this is the main cause of what jonathan erickson calls the " programming language renaissance ." this is why we even hear about new languages like perl and python. were not hearing about these languages because people are using them to write windows apps, but because people are using them on servers. and as software shifts off the desktop and onto servers (a future even microsoft seems resigned to), there will be less and less pressure to use middle-of-the-road technologies. as for libraries, their importance also depends on the application. for less demanding problems, the availability of libraries can outweigh the intrinsic power of the language. where is the breakeven point? hard to say exactly, but wherever it is, it is short of anything youd be likely to call an application. if a company considers itself to be in the software business, and theyre writing an application that will be one of their products, then it will probably involve several hackers and take at least six months to write. in a project of that size, powerful languages probably start to outweigh the convenience of pre-existing libraries. the third worry of the pointy-haired boss, the difficulty of hiring programmers, i think is a red herring. how many hackers do you need to hire, after all? surely by now we all know that software is best developed by teams of less than ten people. and you shouldnt have trouble hiring hackers on that scale for any language anyone has ever heard of. if you cant find ten lisp hackers, then your company is probably based in the wrong city for developing software. in fact, choosing a more powerful language probably decreases the size of the team you need, because (a) if you use a more powerful language you probably wont need as many hackers, and (b) hackers who work in more advanced languages are likely to be smarter. im not saying that you wont get a lot of pressure to use what are perceived as "standard" technologies. at viaweb (now yahoo store), we raised some eyebrows among vcs and potential acquirers by using lisp. but we also raised eyebrows by using generic intel boxes as servers instead of "industrial strength" servers like suns, for using a then-obscure open-source unix variant called freebsd instead of a real commercial os like windows nt, for ignoring a supposed e-commerce standard called set that no one now even remembers, and so on. you cant let the suits make technical decisions for you. did it alarm some potential acquirers that we used lisp? some, slightly, but if we hadnt used lisp, we wouldnt have been able to write the software that made them want to buy us. what seemed like an anomaly to them was in fact cause and effect. if you start a startup, dont design your product to please vcs or potential acquirers. design your product to please the users. if you win the users, everything else will follow. and if you dont, no one will care how comfortingly orthodox your technology choices were. how much do you lose by using a less powerful language? there is actually some data out there about that. the most convenient measure of power is probably code size . the point of high-level languages is to give you bigger abstractions-- bigger bricks, as it were, so you dont need as many to build a wall of a given size. so the more powerful the language, the shorter the program (not simply in characters, of course, but in distinct elements). how does a more powerful language enable you to write shorter programs? one technique you can use, if the language will let you, is something called bottom-up programming . instead of simply writing your application in the base language, you build on top of the base language a language for writing programs like yours, then write your program in it. the combined code can be much shorter than if you had written your whole program in the base language-- indeed, this is how most compression algorithms work. a bottom-up program should be easier to modify as well, because in many cases the language layer wont have to change at all. code size is important, because the time it takes to write a program depends mostly on its length. if your program would be three times as long in another language, it will take three times as long to write-- and you cant get around this by hiring more people, because beyond a certain size new hires are actually a net lose. fred brooks described this phenomenon in his famous book the mythical man-month, and everything ive seen has tended to confirm what he said. so how much shorter are your programs if you write them in lisp? most of the numbers ive heard for lisp versus c, for example, have been around 7-10x. but a recent article about ita in new architect magazine said that "one line of lisp can replace 20 lines of c," and since this article was full of quotes from itas president, i assume they got this number from ita. if so then we can put some faith in it; itas software includes a lot of c and c++ as well as lisp, so they are speaking from experience. my guess is that these multiples arent even constant. i think they increase when you face harder problems and also when you have smarter programmers. a really good hacker can squeeze more out of better tools. as one data point on the curve, at any rate, if you were to compete with ita and chose to write your software in c, they would be able to develop software twenty times faster than you. if you spent a year on a new feature, theyd be able to duplicate it in less than three weeks. whereas if they spent just three months developing something new, it would be five years before you had it too. and you know what? thats the best-case scenario. when you talk about code-size ratios, youre implicitly assuming that you can actually write the program in the weaker language. but in fact there are limits on what programmers can do. if youre trying to solve a hard problem with a language thats too low-level, you reach a point where there is just too much to keep in your head at once. so when i say it would take itas imaginary competitor five years to duplicate something ita could write in lisp in three months, i mean five years if nothing goes wrong. in fact, the way things work in most companies, any development project that would take five years is likely never to get finished at all. i admit this is an extreme case. itas hackers seem to be unusually smart, and c is a pretty low-level language. but in a competitive market, even a differential of two or three to one would be enough to guarantee that youd always be behind. this is the kind of possibility that the pointy-haired boss doesnt even want to think about. and so most of them dont. because, you know, when it comes down to it, the pointy-haired boss doesnt mind if his company gets their ass kicked, so long as no one can prove its his fault. the safest plan for him personally is to stick close to the center of the herd. within large organizations, the phrase used to describe this approach is "industry best practice." its purpose is to shield the pointy-haired boss from responsibility: if he chooses something that is "industry best practice," and the company loses, he cant be blamed. he didnt choose, the industry did. i believe this term was originally used to describe accounting methods and so on. what it means, roughly, is dont do anything weird. and in accounting thats probably a good idea. the terms "cutting-edge" and "accounting" do not sound good together. but when you import this criterion into decisions about technology, you start to get the wrong answers. technology often should be cutting-edge. in programming languages, as erann gat has pointed out, what "industry best practice" actually gets you is not the best, but merely the average. when a decision causes you to develop software at a fraction of the rate of more aggressive competitors, "best practice" is a misnomer. so here we have two pieces of information that i think are very valuable. in fact, i know it from my own experience. number 1, languages vary in power. number 2, most managers deliberately ignore this. between them, these two facts are literally a recipe for making money. ita is an example of this recipe in action. if you want to win in a software business, just take on the hardest problem you can find, use the most powerful language you can get, and wait for your competitors pointy-haired bosses to revert to the mean. as an illustration of what i mean about the relative power of programming languages, consider the following problem. we want to write a function that generates accumulators-- a function that takes a number n, and returns a function that takes another number i and returns n incremented by i. (thats incremented by , not plus. an accumulator has to accumulate.) in common lisp this would be and in perl 5, which has more elements than the lisp version because you have to extract parameters manually in perl. in smalltalk the code is slightly longer than in lisp because although in general lexical variables work, you cant do an assignment to a parameter, so you have to create a new variable s. in javascript the example is, again, slightly longer, because javascript retains the distinction between statements and expressions, so you need explicit return statements to return values (to be fair, perl also retains this distinction, but deals with it in typical perl fashion by letting you omit return s.) if you try to translate the lisp/perl/smalltalk/javascript code into python you run into some limitations. because python doesnt fully support lexical variables, you have to create a data structure to hold the value of n. and although python does have a function data type, there is no literal representation for one (unless the body is only a single expression) so you need to create a named function to return. this is what you end up with: python users might legitimately ask why they cant just write or even and my guess is that they probably will, one day. (but if they dont want to wait for python to evolve the rest of the way into lisp, they could always just...) in oo languages, you can, to a limited extent, simulate a closure (a function that refers to variables defined in enclosing scopes) by defining a class with one method and a field to replace each variable from an enclosing scope. this makes the programmer do the kind of code analysis that would be done by the compiler in a language with full support for lexical scope, and it wont work if more than one function refers to the same variable, but it is enough in simple cases like this. python experts seem to agree that this is the preferred way to solve the problem in python, writing either or i include these because i wouldnt want python advocates to say i was misrepresenting the language, but both seem to me more complex than the first version. youre doing the same thing, setting up a separate place to hold the accumulator; its just a field in an object instead of the head of a list. and the use of these special, reserved field names, especially __call__ , seems a bit of a hack. in the rivalry between perl and python, the claim of the python hackers seems to be that that python is a more elegant alternative to perl, but what this case shows is that power is the ultimate elegance: the perl program is simpler (has fewer elements), even if the syntax is a bit uglier. how about other languages? in the other languages mentioned in this talk-- fortran, c, c++, java, and visual basic-- it is not clear whether you can actually solve this problem. ken anderson says that the following code is about as close as you can get in java: this falls short of the spec because it only works for integers. after many email exchanges with java hackers, i would say that writing a properly polymorphic version that behaves like the preceding examples is somewhere between damned awkward and impossible. if anyone wants to write one id be very curious to see it, but i personally have timed out. its not literally true that you cant solve this problem in other languages, of course. the fact that all these languages are turing-equivalent means that, strictly speaking, you can write any program in any of them. so how would you do it? in the limit case, by writing a lisp interpreter in the less powerful language. that sounds like a joke, but it happens so often to varying degrees in large programming projects that there is a name for the phenomenon, greenspuns tenth rule: any sufficiently complicated c or fortran program contains an ad hoc informally-specified bug-ridden slow implementation of half of common lisp. if you try to solve a hard problem, the question is not whether you will use a powerful enough language, but whether you will (a) use a powerful language, (b) write a de facto interpreter for one, or (c) yourself become a human compiler for one. we see this already begining to happen in the python example, where we are in effect simulating the code that a compiler would generate to implement a lexical variable. this practice is not only common, but institutionalized. for example, in the oo world you hear a good deal about "patterns". i wonder if these patterns are not sometimes evidence of case (c), the human compiler, at work. when i see patterns in my programs, i consider it a sign of trouble. the shape of a program should reflect only the problem it needs to solve. any other regularity in the code is a sign, to me at least, that im using abstractions that arent powerful enough-- often that im generating by hand the expansions of some macro that i need to write. many people have responded to this talk, so i have set up an additional page to deal with the issues they have raised: re: revenge of the nerds . it also set off an extensive and often useful discussion on the ll1 mailing list. see particularly the mail by anton van straaten on semantic compression. some of the mail on ll1 led me to try to go deeper into the subject of language power in succinctness is power . a larger set of canonical implementations of the accumulator generator benchmark are collected together on their own page. this essay was originally published at paulgraham.com in the discussion about issues raised by revenge of the nerds on the ll1 mailing list, paul prescod wrote something that stuck in my mind. pythons goal is regularity and readability, not succinctness. on the face of it, this seems a rather damning thing to claim about a programming language. as far as i can tell, succinctness  power. if so, then substituting, we get pythons goal is regularity and readability, not power. and this doesnt seem a tradeoff (if it is a tradeoff) that youd want to make. its not far from saying that pythons goal is not to be effective as a programming language. does succinctness  power? this seems to me an important question, maybe the most important question for anyone interested in language design, and one that it would be useful to confront directly. i dont feel sure yet that the answer is a simple yes, but it seems a good hypothesis to begin with. my hypothesis is that succinctness is power, or is close enough that except in pathological examples you can treat them as identical. it seems to me that succinctness is what programming languages are for. computers would be just as happy to be told what to do directly in machine language. i think that the main reason we take the trouble to develop high-level languages is to get leverage, so that we can say (and more importantly, think) in 10 lines of a high-level language what would require 1000 lines of machine language. in other words, the main point of high-level languages is to make source code smaller. if smaller source code is the purpose of high-level languages, and the power of something is how well it achieves its purpose, then the measure of the power of a programming language is how small it makes your programs. conversely, a language that doesnt make your programs small is doing a bad job of what programming languages are supposed to do, like a knife that doesnt cut well, or printing thats illegible. small in what sense though? the most common measure of code size is lines of code. but i think that this metric is the most common because it is the easiest to measure. i dont think anyone really believes it is the true test of the length of a program. different languages have different conventions for how much you should put on a line; in c a lot of lines have nothing on them but a delimiter or two. another easy test is the number of characters in a program, but this is not very good either; some languages (perl, for example) just use shorter identifiers than others. i think a better measure of the size of a program would be the number of elements, where an element is anything that would be a distinct node if you drew a tree representing the source code. the name of a variable or function is an element; an integer or a floating-point number is an element; a segment of literal text is an element; an element of a pattern, or a format directive, is an element; a new block is an element. there are borderline cases (is -5 two elements or one?) but i think most of them are the same for every language, so they dont affect comparisons much. this metric needs fleshing out, and it could require interpretation in the case of specific languages, but i think it tries to measure the right thing, which is the number of parts a program has. i think the tree youd draw in this exercise is what you have to make in your head in order to conceive of the program, and so its size is proportionate to the amount of work you have to do to write or read it. this kind of metric would allow us to compare different languages, but that is not, at least for me, its main value. the main value of the succinctness test is as a guide in designing languages. the most useful comparison between languages is between two potential variants of the same language. what can i do in the language to make programs shorter? if the conceptual load of a program is proportionate to its complexity, and a given programmer can tolerate a fixed conceptual load, then this is the same as asking, what can i do to enable programmers to get the most done? and that seems to me identical to asking, how can i design a good language? (incidentally, nothing makes it more patently obvious that the old chestnut "all languages are equivalent" is false than designing languages. when you are designing a new language, youre constantly comparing two languages-- the language if i did x, and if i didnt-- to decide which is better. if this were really a meaningless question, you might as well flip a coin.) aiming for succinctness seems a good way to find new ideas. if you can do something that makes many different programs shorter, it is probably not a coincidence: you have probably discovered a useful new abstraction. you might even be able to write a program to help by searching source code for repeated patterns. among other languages, those with a reputation for succinctness would be the ones to look to for new ideas: forth, joy, icon. the first person to write about these issues, as far as i know, was fred brooks in the mythical man month . he wrote that programmers seemed to generate about the same amount of code per day regardless of the language. when i first read this in my early twenties, it was a big surprise to me and seemed to have huge implications. it meant that (a) the only way to get software written faster was to use a more succinct language, and (b) someone who took the trouble to do this could leave competitors who didnt in the dust. brooks hypothesis, if its true, seems to be at the very heart of hacking. in the years since, ive paid close attention to any evidence i could get on the question, from formal studies to anecdotes about individual projects. i have seen nothing to contradict him. i have not yet seen evidence that seemed to me conclusive, and i dont expect to. studies like lutz prechelts comparison of programming languages, while generating the kind of results i expected, tend to use problems that are too short to be meaningful tests. a better test of a language is what happens in programs that take a month to write. and the only real test, if you believe as i do that the main purpose of a language is to be good to think in (rather than just to tell a computer what to do once youve thought of it) is what new things you can write in it. so any language comparison where you have to meet a predefined spec is testing slightly the wrong thing. the true test of a language is how well you can discover and solve new problems, not how well you can use it to solve a problem someone else has already formulated. these two are quite different criteria. in art, mediums like embroidery and mosaic work well if you know beforehand what you want to make, but are absolutely lousy if you dont. when you want to discover the image as you make it-- as you have to do with anything as complex as an image of a person, for example-- you need to use a more fluid medium like pencil or ink wash or oil paint. and indeed, the way tapestries and mosaics are made in practice is to make a painting first, then copy it. (the word "cartoon" was originally used to describe a painting intended for this purpose). what this means is that we are never likely to have accurate comparisons of the relative power of programming languages. well have precise comparisons, but not accurate ones. in particular, explicit studies for the purpose of comparing languages, because they will probably use small problems, and will necessarily use predefined problems, will tend to underestimate the power of the more powerful languages. reports from the field, though they will necessarily be less precise than "scientific" studies, are likely to be more meaningful. for example, ulf wiger of ericsson did a study that concluded that erlang was 4-10x more succinct than c++, and proportionately faster to develop software in: comparisons between ericsson-internal development projects indicate similar line/hour productivity, including all phases of software development, rather independently of which language (erlang, plex, c, c++, or java) was used. what differentiates the different languages then becomes source code volume. the study also deals explictly with a point that was only implicit in brooks book (since he measured lines of debugged code): programs written in more powerful languages tend to have fewer bugs. that becomes an end in itself, possibly more important than programmer productivity, in applications like network switches. ultimately, i think you have to go with your gut. what does it feel like to program in the language? i think the way to find (or design) the best language is to become hypersensitive to how well a language lets you think, then choose/design the language that feels best. if some language feature is awkward or restricting, dont worry, youll know about it. such hypersensitivity will come at a cost. youll find that you cant stand programming in clumsy languages. i find it unbearably restrictive to program in languages without macros, just as someone used to dynamic typing finds it unbearably restrictive to have to go back to programming in a language where you have to declare the type of every variable, and cant make a list of objects of different types. im not the only one. i know many lisp hackers that this has happened to. in fact, the most accurate measure of the relative power of programming languages might be the percentage of people who know the language who will take any job where they get to use that language, regardless of the application domain. i think most hackers know what it means for a language to feel restrictive. whats happening when you feel that? i think its the same feeling you get when the street you want to take is blocked off, and you have to take a long detour to get where you wanted to go. there is something you want to say, and the language wont let you. whats really going on here, i think, is that a restrictive language is one that isnt succinct enough. the problem is not simply that you cant say what you planned to. its that the detour the language makes you take is longer. try this thought experiment. suppose there were some program you wanted to write, and the language wouldnt let you express it the way you planned to, but instead forced you to write the program in some other way that was shorter. for me at least, that wouldnt feel very restrictive. it would be like the street you wanted to take being blocked off, and the policeman at the intersection directing you to a shortcut instead of a detour. great! i think most (ninety percent?) of the feeling of restrictiveness comes from being forced to make the program you write in the language longer than one you have in your head. restrictiveness is mostly lack of succinctness. so when a language feels restrictive, what that (mostly) means is that it isnt succinct enough, and when a language isnt succinct, it will feel restrictive. the quote i began with mentions two other qualities, regularity and readability. im not sure what regularity is, or what advantage, if any, code that is regular and readable has over code that is merely readable. but i think i know what is meant by readability, and i think it is also related to succinctness. we have to be careful here to distinguish between the readability of an individual line of code and the readability of the whole program. its the second that matters. i agree that a line of basic is likely to be more readable than a line of lisp. but a program written in basic is is going to have more lines than the same program written in lisp (especially once you cross over into greenspunland). the total effort of reading the basic program will surely be greater. total effort  effort per line x number of lines im not as sure that readability is directly proportionate to succinctness as i am that power is, but certainly succinctness is a factor (in the mathematical sense; see equation above) in readability. so it may not even be meaningful to say that the goal of a language is readability, not succinctness; it could be like saying the goal was readability, not readability. what readability-per-line does mean, to the user encountering the language for the first time, is that source code will look unthreatening . so readability-per-line could be a good marketing decision, even if it is a bad design decision. its isomorphic to the very successful technique of letting people pay in installments: instead of frightening them with a high upfront price, you tell them the low monthly payment. installment plans are a net lose for the buyer, though, as mere readability-per-line probably is for the programmer. the buyer is going to make a lot of those low, low payments; and the programmer is going to read a lot of those individually readable lines. this tradeoff predates programming languages. if youre used to reading novels and newspaper articles, your first experience of reading a math paper can be dismaying. it could take half an hour to read a single page. and yet, i am pretty sure that the notation is not the problem, even though it may feel like it is. the math paper is hard to read because the ideas are hard. if you expressed the same ideas in prose (as mathematicians had to do before they evolved succinct notations), they wouldnt be any easier to read, because the paper would grow to the size of a book. a number of people have rejected the idea that succinctness  power. i think it would be more useful, instead of simply arguing that they are the same or arent, to ask: to what extent does succinctness  power? because clearly succinctness is a large part of what higher-level languages are for. if it is not all theyre for, then what else are they for, and how important, relatively, are these other functions? im not proposing this just to make the debate more civilized. i really want to know the answer. when, if ever, is a language too succinct for its own good? the hypothesis i began with was that, except in pathological examples, i thought succinctness could be considered identical with power. what i meant was that in any language anyone would design, they would be identical, but that if someone wanted to design a language explicitly to disprove this hyphothesis, they could probably do it. im not even sure of that, actually. we should be clear that we are talking about the succinctness of languages, not of individual programs. it certainly is possible for individual programs to be written too densely. i wrote about this in on lisp . a complex macro may have to save many times its own length to be justified. if writing some hairy macro could save you ten lines of code every time you use it, and the macro is itself ten lines of code, then you get a net saving in lines if you use it more than twice. but that could still be a bad move, because macro definitions are harder to read than ordinary code. you might have to use the macro ten or twenty times before it yielded a net improvement in readability. im sure every language has such tradeoffs (though i suspect the stakes get higher as the language gets more powerful). every programmer must have seen code that some clever person has made marginally shorter by using dubious programming tricks. so there is no argument about that-- at least, not from me. individual programs can certainly be too succinct for their own good. the question is, can a language be? can a language compel programmers to write code thats short (in elements) at the expense of overall readability? one reason its hard to imagine a language being too succinct is that if there were some excessively compact way to phrase something, there would probably also be a longer way. for example, if you felt lisp programs using a lot of macros or higher-order functions were too dense, you could, if you preferred, write code that was isomorphic to pascal. if you dont want to express factorial in arc as a call to a higher-order function you can also write out a recursive definition: though i cant off the top of my head think of any examples, i am interested in the question of whether a language could be too succinct. are there languages that force you to write code in a way that is crabbed and incomprehensible? if anyone has examples, i would be very interested to see them. (reminder: what im looking for are programs that are very dense according to the metric of "elements" sketched above, not merely programs that are short because delimiters can be omitted and everything has a one-character name.) this essay was originally published at paulgraham.com kevin kelleher suggested an interesting way to compare programming languages: to describe each in terms of the problem it fixes. the surprising thing is how many, and how well, languages can be described this way. this essay was originally published at paulgraham.com i was talking recently to a friend who teaches at mit. his field is hot now and every year he is inundated by applications from would-be graduate students. "a lot of them seem smart," he said. "what i cant tell is whether they have any kind of taste." taste. you dont hear that word much now. and yet we still need the underlying concept, whatever we call it. what my friend meant was that he wanted students who were not just good technicians, but who could use their technical knowledge to design beautiful things. mathematicians call good work "beautiful," and so, either now or in the past, have scientists, engineers, musicians, architects, designers, writers, and painters. is it just a coincidence that they used the same word, or is there some overlap in what they meant? if there is an overlap, can we use one fields discoveries about beauty to help us in another? for those of us who design things, these are not just theoretical questions. if there is such a thing as beauty, we need to be able to recognize it. we need good taste to make good things. instead of treating beauty as an airy abstraction, to be either blathered about or avoided depending on how one feels about airy abstractions, lets try considering it as a practical question: how do you make good stuff? if you mention taste nowadays, a lot of people will tell you that "taste is subjective." they believe this because it really feels that way to them. when they like something, they have no idea why. it could be because its beautiful, or because their mother had one, or because they saw a movie star with one in a magazine, or because they know its expensive. their thoughts are a tangle of unexamined impulses. most of us are encouraged, as children, to leave this tangle unexamined. if you make fun of your little brother for coloring people green in his coloring book, your mother is likely to tell you something like "you like to do it your way and he likes to do it his way." your mother at this point is not trying to teach you important truths about aesthetics. shes trying to get the two of you to stop bickering. like many of the half-truths adults tell us, this one contradicts other things they tell us. after dinning into you that taste is merely a matter of personal preference, they take you to the museum and tell you that you should pay attention because leonardo is a great artist. what goes through the kids head at this point? what does he think "great artist" means? after having been told for years that everyone just likes to do things their own way, he is unlikely to head straight for the conclusion that a great artist is someone whose work is better than the others. a far more likely theory, in his ptolemaic model of the universe, is that a great artist is something thats good for you, like broccoli, because someone said so in a book. saying that taste is just personal preference is a good way to prevent disputes. the trouble is, its not true. you feel this when you start to design things. whatever job people do, they naturally want to do better. football players like to win games. ceos like to increase earnings. its a matter of pride, and a real pleasure, to get better at your job. but if your job is to design things, and there is no such thing as beauty, then there is no way to get better at your job. if taste is just personal preference, then everyones is already perfect: you like whatever you like, and thats it. as in any job, as you continue to design things, youll get better at it. your tastes will change. and, like anyone who gets better at their job, youll know youre getting better. if so, your old tastes were not merely different, but worse. poof goes the axiom that taste cant be wrong. relativism is fashionable at the moment, and that may hamper you from thinking about taste, even as yours grows. but if you come out of the closet and admit, at least to yourself, that there is such a thing as good and bad design, then you can start to study good design in detail. how has your taste changed? when you made mistakes, what caused you to make them? what have other people learned about design? once you start to examine the question, its surprising how much different fields ideas of beauty have in common. the same principles of good design crop up again and again. you hear this from math to painting. in math it means that a shorter proof tends to be a better one. where axioms are concerned, especially, less is more. it means much the same thing in programming. for architects and designers it means that beauty should depend on a few carefully chosen structural elements rather than a profusion of superficial ornament. (ornament is not in itself bad, only when its camouflage on insipid form.) similarly, in painting, a still life of a few carefully observed and solidly modelled objects will tend to be more interesting than a stretch of flashy but mindlessly repetitive painting of, say, a lace collar. in writing it means: say what you mean and say it briefly. it seems strange to have to emphasize simplicity. youd think simple would be the default. ornate is more work. but something seems to come over people when they try to be creative. beginning writers adopt a pompous tone that doesnt sound anything like the way they speak. designers trying to be artistic resort to swooshes and curlicues. painters discover that theyre expressionists. its all evasion. underneath the long words or the "expressive" brush strokes, there is not much going on, and thats frightening. when youre forced to be simple, youre forced to face the real problem. when you cant deliver ornament, you have to deliver substance. in math, every proof is timeless unless it contains a mistake. so what does hardy mean when he says there is no permanent place for ugly mathematics? he means the same thing kelly johnson did: if something is ugly, it cant be the best solution. there must be a better one, and eventually someone will discover it. aiming at timelessness is a way to make yourself find the best answer: if you can imagine someone surpassing you, you should do it yourself. some of the greatest masters did this so well that they left little room for those who came after. every engraver since durer has had to live in his shadow. aiming at timelessness is also a way to evade the grip of fashion. fashions almost by definition change with time, so if you can make something that will still look good far into the future, then its appeal must derive more from merit and less from fashion. strangely enough, if you want to make something that will appeal to future generations, one way to do it is to try to appeal to past generations. its hard to guess what the future will be like, but we can be sure it will be like the past in caring nothing for present fashions. so if you can make something that appeals to people today and would also have appealed to people in 1500, there is a good chance it will appeal to people in 2500. the typical stove has four burners arranged in a square, and a dial to control each. how do you arrange the dials? the simplest answer is to put them in a row. but this is a simple answer to the wrong question. the dials are for humans to use, and if you put them in a row, the unlucky human will have to stop and think each time about which dial matches which burner. better to arrange the dials in a square like the burners. a lot of bad design is industrious, but misguided. in the mid twentieth century there was a vogue for setting text in sans-serif fonts. these fonts are closer to the pure, underlying letterforms. but in text thats not the problem youre trying to solve. for legibility its more important that letters be easy to tell apart. it may look victorian, but a times roman lowercase g is easy to tell from a lowercase y. problems can be improved as well as solutions. in software, an intractable problem can usually be replaced by an equivalent one thats easy to solve. physics progressed faster as the problem became predicting observable behavior, instead of reconciling it with scripture. jane austens novels contain almost no description; instead of telling you how everything looks, she tells her story so well that you envision the scene for yourself. likewise, a painting that suggests is usually more engaging than one that tells. everyone makes up their own story about the mona lisa. in architecture and design, this principle means that a building or object should let you use it how you want: a good building, for example, will serve as a backdrop for whatever life people want to lead in it, instead of making them live as if they were executing a program written by the architect. in software, it means you should give users a few basic elements that they can combine as they wish, like lego. in math it means a proof that becomes the basis for a lot of new work is preferable to a proof that was difficult, but doesnt lead to future discoveries; in the sciences generally, citation is considered a rough indicator of merit. this one may not always be true. but durers engravings and saarinens womb chair and the pantheon and the original porsche 911 all seem to me slightly funny. godels incompleteness theorem seems like a practical joke. i think its because humor is related to strength. to have a sense of humor is to be strong: to keep ones sense of humor is to shrug off misfortunes, and to lose ones sense of humor is to be wounded by them. and so the mark-- or at least the prerogative-- of strength is not to take oneself too seriously. the confident will often, like swallows, seem to be making fun of the whole process slightly, as hitchcock does in his films or bruegel in his paintings-- or shakespeare, for that matter. good design may not have to be funny, but its hard to imagine something that could be called humorless also being good design. if you look at the people whove done great work, one thing they all seem to have in common is that they worked very hard. if youre not working hard, youre probably wasting your time. hard problems call for great efforts. in math, difficult proofs require ingenious solutions, and those tend to be interesting. ditto in engineering. when you have to climb a mountain you toss everything unnecessary out of your pack. and so an architect who has to build on a difficult site, or a small budget, will find that he is forced to produce an elegant design. fashions and flourishes get knocked aside by the difficult business of solving the problem at all. not every kind of hard is good. there is good pain and bad pain. you want the kind of pain you get from going running, not the kind you get from stepping on a nail. a difficult problem could be good for a designer, but a fickle client or unreliable materials would not be. in art, the highest place has traditionally been given to paintings of people. there is something to this tradition, and not just because pictures of faces get to press buttons in our brains that other pictures dont. we are so good at looking at faces that we force anyone who draws them to work hard to satisfy us. if you draw a tree and you change the angle of a branch five degrees, no one will know. when you change the angle of someones eye five degrees, people notice. when bauhaus designers adopted sullivans "form follows function," what they meant was, form should follow function. and if function is hard enough, form is forced to follow it, because there is no effort to spare for error. wild animals are beautiful because they have hard lives. like great athletes, great designers make it look easy. mostly this is an illusion. the easy, conversational tone of good writing comes only on the eighth rewrite. in science and engineering, some of the greatest discoveries seem so simple that you say to yourself, i could have thought of that. the discoverer is entitled to reply, why didnt you? some leonardo heads are just a few lines. you look at them and you think, all you have to do is get eight or ten lines in the right place and youve made this beautiful portrait. well, yes, but you have to get them in exactly the right place. the slightest error will make the whole thing collapse. line drawings are in fact the most difficult visual medium, because they demand near perfection. in math terms, they are a closed-form solution; lesser artists literally solve the same problems by successive approximation. one of the reasons kids give up drawing at ten or so is that they decide to start drawing like grownups, and one of the first things they try is a line drawing of a face. smack! in most fields the appearance of ease seems to come with practice. perhaps what practice does is train your unconscious mind to handle tasks that used to require conscious thought. in some cases you literally train your body. an expert pianist can play notes faster than the brain can send signals to his hand. likewise an artist, after a while, can make visual perception flow in through his eye and out through his hand as automatically as someone tapping his foot to a beat. when people talk about being in "the zone," i think what they mean is that the spinal cord has the situation under control. your spinal cord is less hesitant, and it frees conscious thought for the hard problems. i think symmetry may just be one way to achieve simplicity, but its important enough to be mentioned on its own. nature uses it a lot, which is a good sign. there are two kinds of symmetry, repetition and recursion. recursion means repetition in subelements, like the pattern of veins in a leaf. symmetry is unfashionable in some fields now, in reaction to excesses in the past. architects started consciously making buildings asymmetric in victorian times and by the 1920s asymmetry was an explicit premise of modernist architecture. even these buildings only tended to be asymmetric about major axes, though; there were hundreds of minor symmetries. in writing you find symmetry at every level, from the phrases in a sentence to the plot of a novel. you find the same in music and art. mosaics (and some cezannes) get extra visual punch by making the whole picture out of the same atoms. compositional symmetry yields some of the most memorable paintings, especially when two halves react to one another, as in the creation of adam or american gothic . in math and engineering, recursion, especially, is a big win. inductive proofs are wonderfully short. in software, a problem that can be solved by recursion is nearly always best solved that way. the eiffel tower looks striking partly because it is a recursive solution, a tower on a tower. the danger of symmetry, and repetition especially, is that it can be used as a substitute for thought. its not so much that resembling nature is intrinsically good as that nature has had a long time to work on the problem. its a good sign when your answer resembles natures. its not cheating to copy. few would deny that a story should be like life. working from life is a valuable tool in painting too, though its role has often been misunderstood. the aim is not simply to make a record. the point of painting from life is that it gives your mind something to chew on: when your eyes are looking at something, your hand will do more interesting work. imitating nature also works in engineering. boats have long had spines and ribs like an animals ribcage. in some cases we may have to wait for better technology: early aircraft designers were mistaken to design aircraft that looked like birds, because they didnt have materials or power sources light enough (the wrights engine weighed 152 lbs. and generated only 12 hp.) or control systems sophisticated enough for machines that flew like birds, but i could imagine little unmanned reconnaissance planes flying like birds in fifty years. now that we have enough computer power, we can imitate natures method as well as its results. genetic algorithms may let us create things too complex to design in the ordinary sense. its rare to get things right the first time. experts expect to throw away some early work. they plan for plans to change. it takes confidence to throw work away. you have to be able to think, theres more where that came from. when people first start drawing, for example, theyre often reluctant to redo parts that arent right; they feel theyve been lucky to get that far, and if they try to redo something, it will turn out worse. instead they convince themselves that the drawing is not that bad, really-- in fact, maybe they meant it to look that way. dangerous territory, that; if anything you should cultivate dissatisfaction. in leonardos drawings there are often five or six attempts to get a line right. the distinctive back of the porsche 911 only appeared in the redesign of an awkward prototype . in wrights early plans for the guggenheim , the right half was a ziggurat; he inverted it to get the present shape. mistakes are natural. instead of treating them as disasters, make them easy to acknowledge and easy to fix. leonardo more or less invented the sketch, as a way to make drawing bear a greater weight of exploration. open-source software has fewer bugs because it admits the possibility of bugs. it helps to have a medium that makes change easy. when oil paint replaced tempera in the fifteenth century, it helped painters to deal with difficult subjects like the human figure because, unlike tempera, oil can be blended and overpainted. attitudes to copying often make a round trip. a novice imitates without knowing it; next he tries consciously to be original; finally, he decides its more important to be right than original. unknowing imitation is almost a recipe for bad design. if you dont know where your ideas are coming from, youre probably imitating an imitator. raphael so pervaded mid-nineteenth century taste that almost anyone who tried to draw was imitating him, often at several removes. it was this, more than raphaels own work, that bothered the pre-raphaelites. the ambitious are not content to imitate. the second phase in the growth of taste is a conscious attempt at originality. i think the greatest masters go on to achieve a kind of selflessness. they just want to get the right answer, and if part of the right answer has already been discovered by someone else, thats no reason not to use it. theyre confident enough to take from anyone without feeling that their own vision will be lost in the process. some of the very best work has an uncanny quality: eulers formula , bruegels hunters in the snow , the sr-71 , lisp . theyre not just beautiful, but strangely beautiful. im not sure why. it may just be my own stupidity. a can-opener must seem miraculous to a dog. maybe if i were smart enough it would seem the most natural thing in the world that e ipi  -1. it is after all necessarily true. most of the qualities ive mentioned are things that can be cultivated, but i dont think it works to cultivate strangeness. the best you can do is not squash it if it starts to appear. einstein didnt try to make relativity strange. he tried to make it true, and the truth turned out to be strange. at an art school where i once studied, the students wanted most of all to develop a personal style. but if you just try to make good things, youll inevitably do it in a distinctive way, just as each person walks in a distinctive way. michelangelo was not trying to paint like michelangelo. he was just trying to paint well; he couldnt help painting like michelangelo. the only style worth having is the one you cant help. and this is especially true for strangeness. there is no shortcut to it. the northwest passage that the mannerists, the romantics, and two generations of american high school students have searched for does not seem to exist. the only way to get there is to go through good and come out the other side. the inhabitants of fifteenth century florence included brunelleschi, ghiberti, donatello, masaccio, filippo lippi, fra angelico, verrocchio, botticelli, leonardo, and michelangelo. milan at the time was as big as florence. how many fifteenth century milanese artists can you name? something was happening in florence in the fifteenth century. and it cant have been heredity, because it isnt happening now. you have to assume that whatever inborn ability leonardo and michelangelo had, there were people born in milan with just as much. what happened to the milanese leonardo? there are roughly a thousand times as many people alive in the us right now as lived in florence during the fifteenth century. a thousand leonardos and a thousand michelangelos walk among us. if dna ruled, we should be greeted daily by artistic marvels. we arent, and the reason is that to make leonardo you need more than his innate ability. you also need florence in 1450. nothing is more powerful than a community of talented people working on related problems. genes count for little by comparison: being a genetic leonardo was not enough to compensate for having been born near milan instead of florence. today we move around more, but great work still comes disproportionately from a few hotspots: the bauhaus, the manhattan project, the new yorker, lockheeds skunk works, xerox parc. at any given time there are a few hot topics and a few groups doing great work on them, and its nearly impossible to do good work yourself if youre too far removed from one of these centers. you can push or pull these trends to some extent, but you cant break away from them. (maybe you can, but the milanese leonardo couldnt.) at every period of history, people have believed things that were just ridiculous, and believed them so strongly that you risked ostracism or even violence by saying otherwise. if our own time were any different, that would be remarkable. as far as i can tell it isnt . this problem afflicts not just every era, but in some degree every field. much renaissance art was in its time considered shockingly secular: according to vasari, botticelli repented and gave up painting, and fra bartolommeo and lorenzo di credi actually burned some of their work. einsteins theory of relativity offended many contemporary physicists, and was not fully accepted for decades-- in france, not until the 1950s. todays experimental error is tomorrows new theory. if you want to discover great new things, then instead of turning a blind eye to the places where conventional wisdom and truth dont quite meet, you should pay particular attention to them. as a practical matter, i think its easier to see ugliness than to imagine beauty. most of the people whove made beautiful things seem to have done it by fixing something that they thought ugly. great work usually seems to happen because someone sees something and thinks, i could do better than that. giotto saw traditional byzantine madonnas painted according to a formula that had satisfied everyone for centuries, and to him they looked wooden and unnatural. copernicus was so troubled by a hack that all his contemporaries could tolerate that he felt there must be a better solution. intolerance for ugliness is not in itself enough. you have to understand a field well before you develop a good nose for what needs fixing. you have to do your homework. but as you become expert in a field, youll start to hear little voices saying, what a hack! there must be a better way. dont ignore those voices. cultivate them. the recipe for great work is: very exacting taste, plus the ability to gratify it. sullivan actually said "form ever follows function," but i think the usual misquotation is closer to what modernist architects meant. stephen g. brush, "why was relativity accepted?" phys. perspect. 1 (1999) 184-214. this essay was originally published at paulgraham.com there is a kind of mania for object-oriented programming at the moment, but some of the smartest programmers i know are some of the least excited about it. my own feeling is that object-oriented programming is a useful technique in some cases, but it isnt something that has to pervade every program you write. you should be able to define new types, but you shouldnt have to express every program as the definition of new types. i think there are five reasons people like object-oriented programming, and three and a half of them are bad: i personally have never needed object-oriented abstractions. common lisp has an enormously powerful object system and ive never used it once. ive done a lot of things (e.g. making hash tables full of closures) that would have required object-oriented techniques to do in wimpier languages, but i have never had to use clos. maybe im just stupid, or have worked on some limited subset of applications. there is a danger in designing a language based on ones own experience of programming. but it seems more dangerous to put stuff in that youve never needed because its thought to be a good idea. this essay was originally published at paulgraham.com (this article came about in response to some questions on the ll1 mailing list. it is now incorporated in revenge of the nerds .) when mccarthy designed lisp in the late 1950s, it was a radical departure from existing languages, the most important of which was fortran . lisp embodied nine new ideas: a conditional is an if-then-else construct. we take these for granted now. they were invented by mccarthy in the course of developing lisp. (fortran at that time only had a conditional goto, closely based on the branch instruction in the underlying hardware.) mccarthy, who was on the algol committee, got conditionals into algol, whence they spread to most other languages. in lisp, functions are first class objects-- theyre a data type just like integers, strings, etc, and have a literal representation, can be stored in variables, can be passed as arguments, and so on. recursion existed as a mathematical concept before lisp of course, but lisp was the first programming language to support it. (its arguably implicit in making functions first class objects.) in lisp, all variables are effectively pointers. values are what have types, not variables, and assigning or binding variables means copying pointers, not what they point to. lisp programs are trees of expressions, each of which returns a value. (in some lisps expressions can return multiple values.) this is in contrast to fortran and most succeeding languages, which distinguish between expressions and statements. it was natural to have this distinction in fortran because (not surprisingly in a language where the input format was punched cards) the language was line-oriented. you could not nest statements. and so while you needed expressions for math to work, there was no point in making anything else return a value, because there could not be anything waiting for it. this limitation went away with the arrival of block-structured languages, but by then it was too late. the distinction between expressions and statements was entrenched. it spread from fortran into algol and thence to both their descendants. when a language is made entirely of expressions, you can compose expressions however you want. you can say either (using arc syntax) or symbols differ from strings in that you can test equality by comparing a pointer. there is no real distinction between read-time, compile-time, and runtime. you can compile or run code while reading, read or run code while compiling, and read or compile code at runtime. running code at read-time lets users reprogram lisps syntax; running code at compile-time is the basis of macros; compiling at runtime is the basis of lisps use as an extension language in programs like emacs; and reading at runtime enables programs to communicate using s-expressions, an idea recently reinvented as xml. when lisp was first invented, all these ideas were far removed from ordinary programming practice, which was dictated largely by the hardware available in the late 1950s. over time, the default language, embodied in a succession of popular languages, has gradually evolved toward lisp. 1-5 are now widespread. 6 is starting to appear in the mainstream. python has a form of 7, though there doesnt seem to be any syntax for it. 8, which (with 9) is what makes lisp macros possible, is so far still unique to lisp, perhaps because (a) it requires those parens, or something just as bad, and (b) if you add that final increment of power, you can no longer claim to have invented a new language, but only to have designed a new dialect of lisp ; -) though useful to present-day programmers, its strange to describe lisp in terms of its variation from the random expedients other languages adopted. that was not, probably, how mccarthy thought of it. lisp wasnt designed to fix the mistakes in fortran; it came about more as the byproduct of an attempt to axiomatize computation . this essay was originally published at paulgraham.com (this article explains why much of the next generation of software may be server-based, what that will mean for programmers, and why this new kind of software is a great opportunity for startups. its derived from a talk at bbn labs.) in the summer of 1995, my friend robert morris and i decided to start a startup. the pr campaign leading up to netscapes ipo was running full blast then, and there was a lot of talk in the press about online commerce. at the time there might have been thirty actual stores on the web, all made by hand. if there were going to be a lot of online stores, there would need to be software for making them, so we decided to write some. for the first week or so we intended to make this an ordinary desktop application. then one day we had the idea of making the software run on our web server, using the browser as an interface. we tried rewriting the software to work over the web, and it was clear that this was the way to go. if we wrote our software to run on the server, it would be a lot easier for the users and for us as well. this turned out to be a good plan. now, as yahoo store , this software is the most popular online store builder, with about 14,000 users. when we started viaweb, hardly anyone understood what we meant when we said that the software ran on the server. it was not until hotmail was launched a year later that people started to get it. now everyone knows that this is a valid approach. there is a name now for what we were: an application service provider, or asp. i think that a lot of the next generation of software will be written on this model. even microsoft, who have the most to lose, seem to see the inevitablity of moving some things off the desktop. if software moves off the desktop and onto servers, it will mean a very different world for developers. this article describes the surprising things we saw, as some of the first visitors to this new world. to the extent software does move onto servers, what im describing here is the future. when we look back on the desktop software era, i think well marvel at the inconveniences people put up with, just as we marvel now at what early car owners put up with. for the first twenty or thirty years, you had to be a car expert to own a car. but cars were such a big win that lots of people who werent car experts wanted to have them as well. computers are in this phase now. when you own a desktop computer, you end up learning a lot more than you wanted to know about whats happening inside it. but more than half the households in the us own one. my mother has a computer that she uses for email and for keeping accounts. about a year ago she was alarmed to receive a letter from apple, offering her a discount on a new version of the operating system. theres something wrong when a sixty-five year old woman who wants to use a computer for email and accounts has to think about installing new operating sytems. ordinary users shouldnt even know the words "operating system," much less "device driver" or "patch." there is now another way to deliver software that will save users from becoming system administrators. web-based applications are programs that run on web servers and use web pages as the user interface. for the average user this new kind of software will be easier, cheaper, more mobile, more reliable, and often more powerful than desktop software. with web-based software, most users wont have to think about anything except the applications they use. all the messy, changing stuff will be sitting on a server somewhere, maintained by the kind of people who are good at that kind of thing. and so you wont ordinarily need a computer, per se, to use software. all youll need will be something with a keyboard, a screen, and a web browser. maybe it will have wireless internet access. maybe it will also be your cell phone. whatever it is, it will be consumer electronics: something that costs about $200, and that people choose mostly based on how the case looks. youll pay more for internet services than you do for the hardware, just as you do now with telephones.  it will take about a tenth of a second for a click to get to the server and back, so users of heavily interactive software, like photoshop, will still want to have the computations happening on the desktop. but if you look at the kind of things most people use computers for, a tenth of a second latency would not be a problem. my mother doesnt really need a desktop computer, and there are a lot of people like her. near my house there is a car with a bumper sticker that reads "death before inconvenience." most people, most of the time, will take whatever choice requires least work. if web-based software wins, it will be because its more convenient. and it looks as if it will be, for users and developers both. to use a purely web-based application, all you need is a browser connected to the internet. so you can use a web-based application anywhere. when you install software on your desktop computer, you can only use it on that computer. worse still, your files are trapped on that computer. the inconvenience of this model becomes more and more evident as people get used to networks. the thin end of the wedge here was web-based email. millions of people now realize that you should have access to email messages no matter where you are. and if you can see your email, why not your calendar? if you can discuss a document with your colleagues, why cant you edit it? why should any of your data be trapped on some computer sitting on a faraway desk? the whole idea of "your computer" is going away, and being replaced with "your data." you should be able to get at your data from any computer. or rather, any client, and a client doesnt have to be a computer. clients shouldnt store data; they should be like telephones. in fact they may become telephones, or vice versa. and as clients get smaller, you have another reason not to keep your data on them: something you carry around with you can be lost or stolen. leaving your pda in a taxi is like a disk crash, except that your data is handed to someone else instead of being vaporized. with purely web-based software, neither your data nor the applications are kept on the client. so you dont have to install anything to use it. and when theres no installation, you dont have to worry about installation going wrong. there cant be incompatibilities between the application and your operating system, because the software doesnt run on your operating system. because it needs no installation, it will be easy, and common, to try web-based software before you "buy" it. you should expect to be able to test-drive any web-based application for free, just by going to the site where its offered. at viaweb our whole site was like a big arrow pointing users to the test drive. after trying the demo, signing up for the service should require nothing more than filling out a brief form (the briefer the better). and that should be the last work the user has to do. with web-based software, you should get new releases without paying extra, or doing any work, or possibly even knowing about it. upgrades wont be the big shocks they are now. over time applications will quietly grow more powerful. this will take some effort on the part of the developers. they will have to design software so that it can be updated without confusing the users. thats a new problem, but there are ways to solve it. with web-based applications, everyone uses the same version, and bugs can be fixed as soon as theyre discovered. so web-based software should have far fewer bugs than desktop software. at viaweb, i doubt we ever had ten known bugs at any one time. thats orders of magnitude better than desktop software. web-based applications can be used by several people at the same time. this is an obvious win for collaborative applications, but i bet users will start to want this in most applications once they realize its possible. it will often be useful to let two people edit the same document, for example. viaweb let multiple users edit a site simultaneously, more because that was the right way to write the software than because we expected users to want to, but it turned out that many did. when you use a web-based application, your data will be safer. disk crashes wont be a thing of the past, but users wont hear about them anymore. theyll happen within server farms. and companies offering web-based applications will actually do backups-- not only because theyll have real system administrators worrying about such things, but because an asp that does lose peoples data will be in big, big trouble. when people lose their own data in a disk crash, they cant get that mad, because they only have themselves to be mad at. when a company loses their data for them, theyll get a lot madder. finally, web-based software should be less vulnerable to viruses. if the client doesnt run anything except a browser, theres less chance of running viruses, and no data locally to damage. and a program that attacked the servers themselves should find them very well defended.  for users, web-based software will be less stressful. i think if you looked inside the average windows user youd find a huge and pretty much untapped desire for software meeting that description. unleashed, it could be a powerful force. to developers, the most conspicuous difference between web-based and desktop software is that a web-based application is not a single piece of code. it will be a collection of programs of different types rather than a single big binary. and so designing web-based software is like desiging a city rather than a building: as well as buildings you need roads, street signs, utilities, police and fire departments, and plans for both growth and various kinds of disasters. at viaweb, software included fairly big applications that users talked to directly, programs that those programs used, programs that ran constantly in the background looking for problems, programs that tried to restart things if they broke, programs that ran occasionally to compile statistics or build indexes for searches, programs we ran explicitly to garbage-collect resources or to move or restore data, programs that pretended to be users (to measure performance or expose bugs), programs for diagnosing network troubles, programs for doing backups, interfaces to outside services, software that drove an impressive collection of dials displaying real-time server statistics (a hit with visitors, but indispensable for us too), modifications (including bug fixes) to open-source software, and a great many configuration files and settings. trevor blackwell wrote a spectacular program for moving stores to new servers across the country, without shutting them down, after we were bought by yahoo. programs paged us, sent faxes and email to users, conducted transactions with credit card processors, and talked to one another through sockets, pipes, http requests, ssh, udp packets, shared memory, and files. some of viaweb even consisted of the absence of programs, since one of the keys to unix security is not to run unnecessary utilities that people might use to break into your servers. it did not end with software. we spent a lot of time thinking about server configurations. we built the servers ourselves, from components-- partly to save money, and partly to get exactly what we wanted. we had to think about whether our upstream isp had fast enough connections to all the backbones. we serially dated raid suppliers. but hardware is not just something to worry about. when you control it you can do more for users. with a desktop application, you can specify certain minimum hardware, but you cant add more. if you administer the servers, you can in one step enable all your users to page people, or send faxes, or send commands by phone, or process credit cards, etc, just by installing the relevant hardware. we always looked for new ways to add features with hardware, not just because it pleased users, but also as a way to distinguish ourselves from competitors who (either because they sold desktop software, or resold web-based applications through isps) didnt have direct control over the hardware. because the software in a web-based application will be a collection of programs rather than a single binary, it can be written in any number of different languages. when youre writing desktop software, youre practically forced to write the application in the same language as the underlying operating system-- meaning c and c++. and so these languages (especially among nontechnical people like managers and vcs) got to be considered as the languages for "serious" software development. but that was just an artifact of the way desktop software had to be delivered. for server-based software you can use any language you want.  today a lot of the top hackers are using languages far removed from c and c++: perl, python, and even lisp. with server-based software, no one can tell you what language to use, because you control the whole system, right down to the hardware. different languages are good for different tasks. you can use whichever is best for each. and when you have competitors, "you can" means "you must" (well return to this later), because if you dont take advantage of this possibility, your competitors will. most of our competitors used c and c++, and this made their software visibly inferior because (among other things), they had no way around the statelessness of cgi scripts. if you were going to change something, all the changes had to happen on one page, with an update button at the bottom. as ive written elsewhere, by using lisp , which many people still consider a research language, we could make the viaweb editor behave more like desktop software. one of the most important changes in this new world is the way you do releases. in the desktop software business, doing a release is a huge trauma, in which the whole company sweats and strains to push out a single, giant piece of code. obvious comparisons suggest themselves, both to the process and the resulting product. with server-based software, you can make changes almost as you would in a program you were writing for yourself. you release software as a series of incremental changes instead of an occasional big explosion. a typical desktop software company might do one or two releases a year. at viaweb we often did three to five releases a day. when you switch to this new model, you realize how much software development is affected by the way it is released. many of the nastiest problems you see in the desktop software business are due to catastrophic nature of releases. when you release only one new version a year, you tend to deal with bugs wholesale. some time before the release date you assemble a new version in which half the code has been torn out and replaced, introducing countless bugs. then a squad of qa people step in and start counting them, and the programmers work down the list, fixing them. they do not generally get to the end of the list, and indeed, no one is sure where the end is. its like fishing rubble out of a pond. you never really know whats happening inside the software. at best you end up with a statistical sort of correctness. with server-based software, most of the change is small and incremental. that in itself is less likely to introduce bugs. it also means you know what to test most carefully when youre about to release software: the last thing you changed. you end up with a much firmer grip on the code. as a general rule, you do know whats happening inside it. you dont have the source code memorized, of course, but when you read the source you do it like a pilot scanning the instrument panel, not like a detective trying to unravel some mystery. desktop software breeds a certain fatalism about bugs. you know that youre shipping something loaded with bugs, and youve even set up mechanisms to compensate for it (e.g. patch releases). so why worry about a few more? soon youre releasing whole features you know are broken. apple did this earlier this year. they felt under pressure to release their new os, whose release date had already slipped four times, but some of the software (support for cds and dvds) wasnt ready. the solution? they released the os without the unfinished parts, and users will have to install them later. with web-based software, you never have to release software before it works, and you can release it as soon as it does work. the industry veteran may be thinking, its a fine-sounding idea to say that you never have to release software before it works, but what happens when youve promised to deliver a new version of your software by a certain date? with web-based software, you wouldnt make such a promise, because there are no versions. your software changes gradually and continuously. some changes might be bigger than others, but the idea of versions just doesnt naturally fit onto web-based software. if anyone remembers viaweb this might sound odd, because we were always announcing new versions. this was done entirely for pr purposes. the trade press, we learned, thinks in version numbers. they will give you major coverage for a major release, meaning a new first digit on the version number, and generally a paragraph at most for a point release, meaning a new digit after the decimal point. some of our competitors were offering desktop software and actually had version numbers. and for these releases, the mere fact of which seemed to us evidence of their backwardness, they would get all kinds of publicity. we didnt want to miss out, so we started giving version numbers to our software too. when we wanted some publicity, wed make a list of all the features wed added since the last "release," stick a new version number on the software, and issue a press release saying that the new version was available immediately. amazingly, no one ever called us on it. by the time we were bought, we had done this three times, so we were on version 4. version 4.1 if i remember correctly. after viaweb became yahoo store, there was no longer such a desperate need for publicity, so although the software continued to evolve, the whole idea of version numbers was quietly dropped. the other major technical advantage of web-based software is that you can reproduce most bugs. you have the users data right there on your disk. if someone breaks your software, you dont have to try to guess whats going on, as you would with desktop software: you should be able to reproduce the error while theyre on the phone with you. you might even know about it already, if you have code for noticing errors built into your application. web-based software gets used round the clock, so everything you do is immediately put through the wringer. bugs turn up quickly. software companies are sometimes accused of letting the users debug their software. and that is just what im advocating. for web-based software its actually a good plan, because the bugs are fewer and transient. when you release software gradually you get far fewer bugs to start with. and when you can reproduce errors and release changes instantly, you can find and fix most bugs as soon as they appear. we never had enough bugs at any one time to bother with a formal bug-tracking system. you should test changes before you release them, of course, so no major bugs should get released. those few that inevitably slip through will involve borderline cases and will only affect the few users that encounter them before someone calls in to complain. as long as you fix bugs right away, the net effect, for the average user, is far fewer bugs. i doubt the average viaweb user ever saw a bug. fixing fresh bugs is easier than fixing old ones. its usually fairly quick to find a bug in code you just wrote. when it turns up you often know whats wrong before you even look at the source, because you were already worrying about it subconsciously. fixing a bug in something you wrote six months ago (the average case if you release once a year) is a lot more work. and since you dont understand the code as well, youre more likely to fix it in an ugly way, or even introduce more bugs.  when you catch bugs early, you also get fewer compound bugs. compound bugs are two separate bugs that interact: you trip going downstairs, and when you reach for the handrail it comes off in your hand. in software this kind of bug is the hardest to find, and also tends to have the worst consequences.  the traditional "break everything and then filter out the bugs" approach inherently yields a lot of compound bugs. and software thats released in a series of small changes inherently tends not to. the floors are constantly being swept clean of any loose objects that might later get stuck in something. it helps if you use a technique called functional programming. functional programming means avoiding side-effects. its something youre more likely to see in research papers than commercial software, but for web-based applications it turns out to be really useful. its hard to write entire programs as purely functional code, but you can write substantial chunks this way. it makes those parts of your software easier to test, because they have no state, and that is very convenient in a situation where you are constantly making and testing small modifications. i wrote much of viawebs editor in this style, and we made our scripting language, rtml , a purely functional language. people from the desktop software business will find this hard to credit, but at viaweb bugs became almost a game. since most released bugs involved borderline cases, the users who encountered them were likely to be advanced users, pushing the envelope. advanced users are more forgiving about bugs, especially since you probably introduced them in the course of adding some feature they were asking for. in fact, because bugs were rare and you had to be doing sophisticated things to see them, advanced users were often proud to catch one. they would call support in a spirit more of triumph than anger, as if they had scored points off us. when you can reproduce errors, it changes your approach to customer support. at most software companies, support is offered as a way to make customers feel better. theyre either calling you about a known bug, or theyre just doing something wrong and you have to figure out what. in either case theres not much you can learn from them. and so you tend to view support calls as a pain in the ass that you want to isolate from your developers as much as possible. this was not how things worked at viaweb. at viaweb, support was free, because we wanted to hear from customers. if someone had a problem, we wanted to know about it right away so that we could reproduce the error and release a fix. so at viaweb the developers were always in close contact with support. the customer support people were about thirty feet away from the programmers, and knew that they could always interrupt anything with a report of a genuine bug. we would leave a board meeting to fix a serious bug. our approach to support made everyone happier. the customers were delighted. just imagine how it would feel to call a support line and be treated as someone bringing important news. the customer support people liked it because it meant they could help the users, instead of reading scripts to them. and the programmers liked it because they could reproduce bugs instead of just hearing vague second-hand reports about them. our policy of fixing bugs on the fly changed the relationship between customer support people and hackers. at most software companies, support people are underpaid human shields, and hackers are little copies of god the father, creators of the world. whatever the procedure for reporting bugs, it is likely to be one-directional: support people who hear about bugs fill out some form that eventually gets passed on (possibly via qa) to programmers, who put it on their list of things to do. it was very different at viaweb. within a minute of hearing about a bug from a customer, the support people could be standing next to a programmer hearing him say "shit, youre right, its a bug." it delighted the support people to hear that "youre right" from the hackers. they used to bring us bugs with the same expectant air as a cat bringing you a mouse it has just killed. it also made them more careful in judging the seriousness of a bug, because now their honor was on the line. after we were bought by yahoo, the customer support people were moved far away from the programmers. it was only then that we realized that they were effectively qa and to some extent marketing as well. in addition to catching bugs, they were the keepers of the knowledge of vaguer, buglike things, like features that confused users.  they were also a kind of proxy focus group; we could ask them which of two new features users wanted more, and they were always right. being able to release software immediately is a big motivator. often as i was walking to work i would think of some change i wanted to make to the software, and do it that day. this worked for bigger features as well. even if something was going to take two weeks to write (few projects took longer), i knew i could see the effect in the software as soon as it was done. if id had to wait a year for the next release, i would have shelved most of these ideas, for a while at least. the thing about ideas, though, is that they lead to more ideas. have you ever noticed that when you sit down to write something, half the ideas that end up in it are ones you thought of while writing it? the same thing happens with software. working to implement one idea gives you more ideas. so shelving an idea costs you not only that delay in implementing it, but also all the ideas that implementing it would have led to. in fact, shelving an idea probably even inhibits new ideas: as you start to think of some new feature, you catch sight of the shelf and think "but i already have a lot of new things i want to do for the next release." what big companies do instead of implementing features is plan them. at viaweb we sometimes ran into trouble on this account. investors and analysts would ask us what we had planned for the future. the truthful answer would have been, we didnt have any plans. we had general ideas about things we wanted to improve, but if we knew how we would have done it already. what were we going to do in the next six months? whatever looked like the biggest win. i dont know if i ever dared give this answer, but that was the truth. plans are just another word for ideas on the shelf. when we thought of good ideas, we implemented them. at viaweb, as at many software companies, most code had one definite owner. but when you owned something you really owned it: no one except the owner of a piece of software had to approve (or even know about) a release. there was no protection against breakage except the fear of looking like an idiot to ones peers, and that was more than enough. i may have given the impression that we just blithely plowed forward writing code. we did go fast, but we thought very carefully before we released software onto those servers. and paying attention is more important to reliability than moving slowly. because he pays close attention, a navy pilot can land a 40,000 lb. aircraft at 140 miles per hour on a pitching carrier deck, at night, more safely than the average teenager can cut a bagel. this way of writing software is a double-edged sword of course. it works a lot better for a small team of good, trusted programmers than it would for a big company of mediocre ones, where bad ideas are caught by committees instead of the people that had them. fortunately, web-based software does require fewer programmers. i once worked for a medium-sized desktop software company that had over 100 people working in engineering as a whole. only 13 of these were in product development. all the rest were working on releases, ports, and so on. with web-based software, all you need (at most) are the 13 people, because there are no releases, ports, and so on. viaweb was written by just three people.  i was always under pressure to hire more, because we wanted to get bought, and we knew that buyers would have a hard time paying a high price for a company with only three programmers. (solution: we hired more, but created new projects for them.) when you can write software with fewer programmers, it saves you more than money. as fred brooks pointed out in the mythical man-month, adding people to a project tends to slow it down. the number of possible connections between developers grows exponentially with the size of the group. the larger the group, the more time theyll spend in meetings negotiating how their software will work together, and the more bugs theyll get from unforseen interactions. fortunately, this process also works in reverse: as groups get smaller, software development gets exponentially more efficient. i cant remember the programmers at viaweb ever having an actual meeting. we never had more to say at any one time than we could say as we were walking to lunch. if there is a downside here, it is that all the programmers have to be to some degree system administrators as well. when youre hosting software, someone has to be watching the servers, and in practice the only people who can do this properly are the ones who wrote the software. at viaweb our system had so many components and changed so frequently that there was no definite border between software and infrastructure. arbitrarily declaring such a border would have constrained our design choices. and so although we were constantly hoping that one day ("in a couple months") everything would be stable enough that we could hire someone whose job was just to worry about the servers, it never happened. i dont think it could be any other way, as long as youre still actively developing the product. web-based software is never going to be something you write, check in, and go home. its a live thing, running on your servers right now. a bad bug might not just crash one users process; it could crash them all. if a bug in your code corrupts some data on disk, you have to fix it. and so on. we found that you dont have to watch the servers every minute (after the first year or so), but you definitely want to keep an eye on things youve changed recently. you dont release code late at night and then go home. with server-based software, youre in closer touch with your code. you can also be in closer touch with your users. intuit is famous for introducing themselves to customers at retail stores and asking to follow them home. if youve ever watched someone use your software for the first time, you know what surprises must have awaited them. software should do what users think it will. but you cant have any idea what users will be thinking, believe me, until you watch them. and server-based software gives you unprecedented information about their behavior. youre not limited to small, artificial focus groups. you can see every click made by every user. you have to consider carefully what youre going to look at, because you dont want to violate users privacy, but even the most general statistical sampling can be very useful. when you have the users on your server, you dont have to rely on benchmarks, for example. benchmarks are simulated users. with server-based software, you can watch actual users. to decide what to optimize, just log into a server and see whats consuming all the cpu. and you know when to stop optimizing too: we eventually got the viaweb editor to the point where it was memory-bound rather than cpu-bound, and since there was nothing we could do to decrease the size of users data (well, nothing easy), we knew we might as well stop there. efficiency matters for server-based software, because youre paying for the hardware. the number of users you can support per server is the divisor of your capital cost, so if you can make your software very efficient you can undersell competitors and still make a profit. at viaweb we got the capital cost per user down to about $5. it would be less now, probably less than the cost of sending them the first months bill. hardware is free now, if your software is reasonably efficient. watching users can guide you in design as well as optimization. viaweb had a scripting language called rtml that let advanced users define their own page styles. we found that rtml became a kind of suggestion box, because users only used it when the predefined page styles couldnt do what they wanted. originally the editor put button bars across the page, for example, but after a number of users used rtml to put buttons down the left side , we made that an option (in fact the default) in the predefined page styles. finally, by watching users you can often tell when theyre in trouble. and since the customer is always right, thats a sign of something you need to fix. at viaweb the key to getting users was the online test drive. it was not just a series of slides built by marketing people. in our test drive, users actually used the software. it took about five minutes, and at the end of it they had built a real, working store. the test drive was the way we got nearly all our new users. i think it will be the same for most web-based applications. if users can get through a test drive successfully, theyll like the product. if they get confused or bored, they wont. so anything we could do to get more people through the test drive would increase our growth rate. i studied click trails of people taking the test drive and found that at a certain step they would get confused and click on the browsers back button. (if you try writing web-based applications, youll find that the back button becomes one of your most interesting philosophical problems.) so i added a message at that point, telling users that they were nearly finished, and reminding them not to click on the back button. another great thing about web-based software is that you get instant feedback from changes: the number of people completing the test drive rose immediately from 60% to 90%. and since the number of new users was a function of the number of completed test drives, our revenue growth increased by 50%, just from that change. in the early 1990s i read an article in which someone said that software was a subscription business. at first this seemed a very cynical statement. but later i realized that it reflects reality: software development is an ongoing process. i think its cleaner if you openly charge subscription fees, instead of forcing people to keep buying and installing new versions so that theyll keep paying you. and fortunately, subscriptions are the natural way to bill for web-based applications. hosting applications is an area where companies will play a role that is not likely to be filled by freeware. hosting applications is a lot of stress, and has real expenses. no one is going to want to do it for free. for companies, web-based applications are an ideal source of revenue. instead of starting each quarter with a blank slate, you have a recurring revenue stream. because your software evolves gradually, you dont have to worry that a new model will flop; there never need be a new model, per se, and if you do something to the software that users hate, youll know right away. you have no trouble with uncollectable bills; if someone wont pay you can just turn off the service. and there is no possibility of piracy. that last "advantage" may turn out to be a problem. some amount of piracy is to the advantage of software companies. if some user really would not have bought your software at any price, you havent lost anything if he uses a pirated copy. in fact you gain, because he is one more user helping to make your software the standard-- or who might buy a copy later, when he graduates from high school. when they can, companies like to do something called price discrimination, which means charging each customer as much as they can afford.  software is particularly suitable for price discrimination, because the marginal cost is close to zero. this is why some software costs more to run on suns than on intel boxes: a company that uses suns is not interested in saving money and can safely be charged more. piracy is effectively the lowest tier of price discrimination. i think that software companies understand this and deliberately turn a blind eye to some kinds of piracy.  with server-based software they are going to have to come up with some other solution. web-based software sells well, especially in comparison to desktop software, because its easy to buy. you might think that people decide to buy something, and then buy it, as two separate steps. thats what i thought before viaweb, to the extent i thought about the question at all. in fact the second step can propagate back into the first: if something is hard to buy, people will change their mind about whether they wanted it. and vice versa: youll sell more of something when its easy to buy. i buy more books because amazon exists. web-based software is just about the easiest thing in the world to buy, especially if you have just done an online demo. users should not have to do much more than enter a credit card number. (make them do more at your peril.) sometimes web-based software is offered through isps acting as resellers. this is a bad idea. you have to be administering the servers, because you need to be constantly improving both hardware and software. if you give up direct control of the servers, you give up most of the advantages of developing web-based applications. several of our competitors shot themselves in the foot this way-- usually, i think, because they were overrun by suits who were excited about this huge potential channel, and didnt realize that it would ruin the product they hoped to sell through it. selling web-based software through isps is like selling sushi through vending machines. who will the customers be? at viaweb they were initially individuals and smaller companies, and i think this will be the rule with web-based applications. these are the users who are ready to try new things, partly because theyre more flexible, and partly because they want the lower costs of new technology. web-based applications will often be the best thing for big companies too (though theyll be slow to realize it). the best intranet is the internet. if a company uses true web-based applications, the software will work better, the servers will be better administered, and employees will have access to the system from anywhere. the argument against this approach usually hinges on security: if access is easier for employees, it will be for bad guys too. some larger merchants were reluctant to use viaweb because they thought customers credit card information would be safer on their own servers. it was not easy to make this point diplomatically, but in fact the data was almost certainly safer in our hands than theirs. who can hire better people to manage security, a technology startup whose whole business is running servers, or a clothing retailer? not only did we have better people worrying about security, we worried more about it. if someone broke into the clothing retailers servers, it would affect at most one merchant, could probably be hushed up, and in the worst case might get one person fired. if someone broke into ours, it could affect thousands of merchants, would probably end up as news on cnet, and could put us out of business. if you want to keep your money safe, do you keep it under your mattress at home, or put it in a bank? this argument applies to every aspect of server administration: not just security, but uptime, bandwidth, load management, backups, etc. our existence depended on doing these things right. server problems were the big no-no for us, like a dangerous toy would be for a toy maker, or a salmonella outbreak for a food processor. a big company that uses web-based applications is to that extent outsourcing it. drastic as it sounds, i think this is generally a good idea. companies are likely to get better service this way than they would from in-house system administrators. system administrators can become cranky and unresponsive because theyre not directly exposed to competitive pressure: a salesman has to deal with customers, and a developer has to deal with competitors software, but a system administrator, like an old bachelor, has few external forces to keep him in line.  at viaweb we had external forces in plenty to keep us in line. the people calling us were customers, not just co-workers. if a server got wedged, we jumped; just thinking about it gives me a jolt of adrenaline, years later. so web-based applications will ordinarily be the right answer for big companies too. they will be the last to realize it, however, just as they were with desktop computers. and partly for the same reason: it will be worth a lot of money to convince big companies that they need something more expensive. there is always a tendency for rich customers to buy expensive solutions, even when cheap solutions are better, because the people offering expensive solutions can spend more to sell them. at viaweb we were always up against this. we lost several high-end merchants to web consulting firms who convinced them theyd be better off if they paid half a million dollars for a custom-made online store on their own server. they were, as a rule, not better off, as more than one discovered when christmas shopping season came around and loads rose on their server. viaweb was a lot more sophisticated than what most of these merchants got, but we couldnt afford to tell them. at $300 a month, we couldnt afford to send a team of well-dressed and authoritative-sounding people to make presentations to customers. a large part of what big companies pay extra for is the cost of selling expensive things to them. (if the defense department pays a thousand dollars for toilet seats, its partly because it costs a lot to sell toilet seats for a thousand dollars.) and this is one reason intranet software will continue to thrive, even though it is probably a bad idea. its simply more expensive. there is nothing you can do about this conundrum, so the best plan is to go for the smaller customers first. the rest will come in time. running software on the server is nothing new. in fact its the old model: mainframe applications are all server-based. if server-based software is such a good idea, why did it lose last time? why did desktop computers eclipse mainframes? at first desktop computers didnt look like much of a threat. the first users were all hackers-- or hobbyists, as they were called then. they liked microcomputers because they were cheap. for the first time, you could have your own computer. the phrase "personal computer" is part of the language now, but when it was first used it had a deliberately audacious sound, like the phrase "personal satellite" would today. why did desktop computers take over? i think it was because they had better software. and i think the reason microcomputer software was better was that it could be written by small companies. i dont think many people realize how fragile and tentative startups are in the earliest stage. many startups begin almost by accident-- as a couple guys, either with day jobs or in school, writing a prototype of something that might, if it looks promising, turn into a company. at this larval stage, any significant obstacle will stop the startup dead in its tracks. writing mainframe software required too much commitment up front. development machines were expensive, and because the customers would be big companies, youd need an impressive-looking sales force to sell it to them. starting a startup to write mainframe software would be a much more serious undertaking than just hacking something together on your apple ii in the evenings. and so you didnt get a lot of startups writing mainframe applications. the arrival of desktop computers inspired a lot of new software, because writing applications for them seemed an attainable goal to larval startups. development was cheap, and the customers would be individual people that you could reach through computer stores or even by mail-order. the application that pushed desktop computers out into the mainstream was visicalc , the first spreadsheet. it was written by two guys working in an attic, and yet did things no mainframe software could do.  visicalc was such an advance, in its time, that people bought apple iis just to run it. and this was the beginning of a trend: desktop computers won because startups wrote software for them. it looks as if server-based software will be good this time around, because startups will write it. computers are so cheap now that you can get started, as we did, using a desktop computer as a server. inexpensive processors have eaten the workstation market (you rarely even hear the word now) and are most of the way through the server market; yahoos servers, which deal with loads as high as any on the internet, all have the same inexpensive intel processors that you have in your desktop machine. and once youve written the software, all you need to sell it is a web site. nearly all our users came direct to our site through word of mouth and references in the press.  viaweb was a typical larval startup. we were terrified of starting a company, and for the first few months comforted ourselves by treating the whole thing as an experiment that we might call off at any moment. fortunately, there were few obstacles except technical ones. while we were writing the software, our web server was the same desktop machine we used for development, connected to the outside world by a dialup line. our only expenses in that phase were food and rent. there is all the more reason for startups to write web-based software now, because writing desktop software has become a lot less fun. if you want to write desktop software now you do it on microsofts terms, calling their apis and working around their buggy os. and if you manage to write something that takes off, you may find that you were merely doing market research for microsoft. if a company wants to make a platform that startups will build on, they have to make it something that hackers themselves will want to use. that means it has to be inexpensive and well-designed. the mac was popular with hackers when it first came out, and a lot of them wrote software for it.  you see this less with windows, because hackers dont use it. the kind of people who are good at writing software tend to be running linux or freebsd now. i dont think we would have started a startup to write desktop software, because desktop software has to run on windows, and before we could write software for windows wed have to use it. the web let us do an end-run around windows, and deliver software running on unix direct to users through the browser. that is a liberating prospect, a lot like the arrival of pcs twenty-five years ago. back when desktop computers arrived, ibm was the giant that everyone was afraid of. its hard to imagine now, but i remember the feeling very well. now the frightening giant is microsoft, and i dont think they are as blind to the threat facing them as ibm was. after all, microsoft deliberately built their business in ibms blind spot. i mentioned earlier that my mother doesnt really need a desktop computer. most users probably dont. thats a problem for microsoft, and they know it. if applications run on remote servers, no one needs windows. what will microsoft do? will they be able to use their control of the desktop to prevent, or constrain, this new generation of software? my guess is that microsoft will develop some kind of server/desktop hybrid, where the operating system works together with servers they control. at a minimum, files will be centrally available for users who want that. i dont expect microsoft to go all the way to the extreme of doing the computations on the server, with only a browser for a client, if they can avoid it. if you only need a browser for a client, you dont need microsoft on the client, and if microsoft doesnt control the client, they cant push users towards their server-based applications. i think microsoft will have a hard time keeping the genie in the bottle. there will be too many different types of clients for them to control them all. and if microsofts applications only work with some clients, competitors will be able to trump them by offering applications that work from any client.  in a world of web-based applications, there is no automatic place for microsoft. they may succeed in making themselves a place, but i dont think theyll dominate this new world as they did the world of desktop applications. its not so much that a competitor will trip them up as that they will trip over themselves. with the rise of web-based software, they will be facing not just technical problems but their own wishful thinking. what they need to do is cannibalize their existing business, and i cant see them facing that. the same single-mindedness that has brought them this far will now be working against them. ibm was in exactly the same situation, and they could not master it. ibm made a late and half-hearted entry into the microcomputer business because they were ambivalent about threatening their cash cow, mainframe computing. microsoft will likewise be hampered by wanting to save the desktop. a cash cow can be a damned heavy monkey on your back. im not saying that no one will dominate server-based applications. someone probably will eventually. but i think that there will be a good long period of cheerful chaos, just as there was in the early days of microcomputers. that was a good time for startups. lots of small companies flourished, and did it by making cool things. the classic startup is fast and informal, with few people and little money. those few people work very hard, and technology magnifies the effect of the decisions they make. if they win, they win big. in a startup writing web-based applications, everything you associate with startups is taken to an extreme. you can write and launch a product with even fewer people and even less money. you have to be even faster, and you can get away with being more informal. you can literally launch your product as three guys sitting in the living room of an apartment, and a server collocated at an isp. we did. over time the teams have gotten smaller, faster, and more informal. in 1960, software development meant a roomful of men with horn rimmed glasses and narrow black neckties, industriously writing ten lines of code a day on ibm coding forms. in 1980, it was a team of eight to ten people wearing jeans to the office and typing into vt100s. now its a couple of guys sitting in a living room with laptops. (and jeans turn out not to be the last word in informality.) startups are stressful, and this, unfortunately, is also taken to an extreme with web-based applications. many software companies, especially at the beginning, have periods where the developers slept under their desks and so on. the alarming thing about web-based software is that there is nothing to prevent this becoming the default. the stories about sleeping under desks usually end: then at last we shipped it and we all went home and slept for a week. web-based software never ships. you can work 16-hour days for as long as you want to. and because you can, and your competitors can, you tend to be forced to. you can, so you must. its parkinsons law running in reverse. the worst thing is not the hours but the responsibility. programmers and system administrators traditionally each have their own separate worries. programmers have to worry about bugs, and system administrators have to worry about infrastructure. programmers may spend a long day up to their elbows in source code, but at some point they get to go home and forget about it. system administrators never quite leave the job behind, but when they do get paged at 4:00 am, they dont usually have to do anything very complicated. with web-based applications, these two kinds of stress get combined. the programmers become system administrators, but without the sharply defined limits that ordinarily make the job bearable. at viaweb we spent the first six months just writing software. we worked the usual long hours of an early startup. in a desktop software company, this would have been the part where we were working hard, but it felt like a vacation compared to the next phase, when we took users onto our server. the second biggest benefit of selling viaweb to yahoo (after the money) was to be able to dump ultimate responsibility for the whole thing onto the shoulders of a big company. desktop software forces users to become system administrators. web-based software forces programmers to. there is less stress in total, but more for the programmers. thats not necessarily bad news. if youre a startup competing with a big company, its good news.  web-based applications offer a straightforward way to outwork your competitors. no startup asks for more. one thing that might deter you from writing web-based applications is the lameness of web pages as a ui. that is a problem, i admit. there were a few things we would have really liked to add to html and http. what matters, though, is that web pages are just good enough. there is a parallel here with the first microcomputers. the processors in those machines werent actually intended to be the cpus of computers. they were designed to be used in things like traffic lights. but guys like ed roberts, who designed the altair , realized that they were just good enough. you could combine one of these chips with some memory (256 bytes in the first altair), and front panel switches, and youd have a working computer. being able to have your own computer was so exciting that there were plenty of people who wanted to buy them, however limited. web pages werent designed to be a ui for applications, but theyre just good enough. and for a significant number of users, software that you can use from any browser will be enough of a win in itself to outweigh any awkwardness in the ui. maybe you cant write the best-looking spreadsheet using html, but you can write a spreadsheet that several people can use simultaneously from different locations without special client software, or that can incorporate live data feeds, or that can page you when certain conditions are triggered. more importantly, you can write new kinds of applications that dont even have names yet. visicalc was not merely a microcomputer version of a mainframe application, after all-- it was a new type of application. of course, server-based applications dont have to be web-based. you could have some other kind of client. but im pretty sure thats a bad idea. it would be very convenient if you could assume that everyone would install your client-- so convenient that you could easily convince yourself that they all would-- but if they dont, youre hosed. because web-based software assumes nothing about the client, it will work anywhere the web works. thats a big advantage already, and the advantage will grow as new web devices proliferate. users will like you because your software just works, and your life will be easier because you wont have to tweak it for every new client.  i feel like ive watched the evolution of the web as closely as anyone, and i cant predict whats going to happen with clients. convergence is probably coming, but where? i cant pick a winner. one thing i can predict is conflict between aol and microsoft. whatever microsofts .net turns out to be, it will probably involve connecting the desktop to servers. unless aol fights back, they will either be pushed aside or turned into a pipe between microsoft client and server software. if microsoft and aol get into a client war, the only thing sure to work on both will be browsing the web, meaning web-based applications will be the only kind that work everywhere. how will it all play out? i dont know. and you dont have to know if you bet on web-based applications. no one can break that without breaking browsing. the web may not be the only way to deliver software, but its one that works now and will continue to work for a long time. web-based applications are cheap to develop, and easy for even the smallest startup to deliver. theyre a lot of work, and of a particularly stressful kind, but that only makes the odds better for startups. e. b. white was amused to learn from a farmer friend that many electrified fences dont have any current running through them. the cows apparently learn to stay away from them, and after that you dont need the current. "rise up, cows!" he wrote, "take your liberty while despots snore!" if youre a hacker who has thought of one day starting a startup, there are probably two things keeping you from doing it. one is that you dont know anything about business. the other is that youre afraid of competition. neither of these fences have any current in them. there are only two things you have to know about business: build something users love, and make more than you spend. if you get these two right, youll be ahead of most startups. you can figure out the rest as you go. you may not at first make more than you spend, but as long as the gap is closing fast enough youll be ok. if you start out underfunded, it will at least encourage a habit of frugality. the less you spend, the easier it is to make more than you spend. fortunately, it can be very cheap to launch a web-based application. we launched on under $10,000, and it would be even cheaper today. we had to spend thousands on a server, and thousands more to get ssl. (the only company selling ssl software at the time was netscape.) now you can rent a much more powerful server, with ssl included, for less than we paid for bandwidth alone. you could launch a web-based application now for less than the cost of a fancy office chair. as for building something users love, here are some general tips. start by making something clean and simple that you would want to use yourself. get a version 1.0 out fast, then continue to improve the software, listening closely to the users as you do. the customer is always right, but different customers are right about different things; the least sophisticated users show you what you need to simplify and clarify, and the most sophisticated tell you what features you need to add. the best thing software can be is easy, but the way to do this is to get the defaults right, not to limit users choices. dont get complacent if your competitors software is lame; the standard to compare your software to is what it could be, not what your current competitors happen to have. use your software yourself, all the time. viaweb was supposed to be an online store builder, but we used it to make our own site too. dont listen to marketing people or designers or product managers just because of their job titles. if they have good ideas, use them, but its up to you to decide; software has to be designed by hackers who understand design, not designers who know a little about software. if you cant design software as well as implement it, dont start a startup. now lets talk about competition. what youre afraid of is not presumably groups of hackers like you, but actual companies, with offices and business plans and salesmen and so on, right? well, they are more afraid of you than you are of them, and theyre right. its a lot easier for a couple of hackers to figure out how to rent office space or hire sales people than it is for a company of any size to get software written. ive been on both sides, and i know. when viaweb was bought by yahoo, i suddenly found myself working for a big company, and it was like trying to run through waist-deep water. i dont mean to disparage yahoo. they had some good hackers, and the top management were real butt-kickers. for a big company, they were exceptional. but they were still only about a tenth as productive as a small startup. no big company can do much better than that. whats scary about microsoft is that a company so big can develop software at all. theyre like a mountain that can walk. dont be intimidated. you can do as much that microsoft cant as they can do that you cant. and no one can stop you. you dont have to ask anyones permission to develop web-based applications. you dont have to do licensing deals, or get shelf space in retail stores, or grovel to have your application bundled with the os. you can deliver software right to the browser, and no one can get between you and potential users without preventing them from browsing the web. you may not believe it, but i promise you, microsoft is scared of you. the complacent middle managers may not be, but bill is, because he was you once, back in 1975, the last time a new way of delivering software appeared.  realizing that much of the money is in the services, companies building lightweight clients have usually tried to combine the hardware with an online service . this approach has not worked well, partly because you need two different kinds of companies to build consumer electronics and to run an online service, and partly because users hate the idea. giving away the razor and making money on the blades may work for gillette, but a razor is much smaller commitment than a web terminal. cell phone handset makers are satisfied to sell hardware without trying to capture the service revenue as well. that should probably be the model for internet clients too. if someone just sold a nice-looking little box with a web browser that you could use to connect through any isp, every technophobe in the country would buy one.  security always depends more on not screwing up than any design decision, but the nature of server-based software will make developers pay more attention to not screwing up. compromising a server could cause such damage that asps (that want to stay in business) are likely to be careful about security.  in 1995, when we started viaweb, java applets were supposed to be the technology everyone was going to use to develop server-based applications. applets seemed to us an old-fashioned idea. download programs to run on the client? simpler just to go all the way and run the programs on the server. we wasted little time on applets, but countless other startups must have been lured into this tar pit. few can have escaped alive, or microsoft could not have gotten away with dropping java in the most recent version of explorer.  this point is due to trevor blackwell, who adds "the cost of writing software goes up more than linearly with its size. perhaps this is mainly due to fixing old bugs, and the cost can be more linear if all bugs are found quickly."  the hardest kind of bug to find may be a variant of compound bug where one bug happens to compensate for another. when you fix one bug, the other becomes visible. but it will seem as if the fix is at fault, since that was the last thing you changed.  within viaweb we once had a contest to describe the worst thing about our software. two customer support people tied for first prize with entries i still shiver to recall. we fixed both problems immediately.  robert morris wrote the ordering system, which shoppers used to place orders. trevor blackwell wrote the image generator and the manager, which merchants used to retrieve orders, view statistics, and configure domain names etc. i wrote the editor, which merchants used to build their sites. the ordering system and image generator were written in c and c++, the manager mostly in perl, and the editor in lisp .  price discrimination is so pervasive (how often have you heard a retailer claim that their buying power meant lower prices for you?) that i was surprised to find it was outlawed in the u.s. by the robinson-patman act of 1936. this law does not appear to be vigorously enforced.  in no logo, naomi klein says that clothing brands favored by "urban youth" do not try too hard to prevent shoplifting because in their target market the shoplifters are also the fashion leaders.  companies often wonder what to outsource and what not to. one possible answer: outsource any job thats not directly exposed to competitive pressure, because outsourcing it will thereby expose it to competitive pressure.  the two guys were dan bricklin and bob frankston. dan wrote a prototype in basic in a couple days, then over the course of the next year they worked together (mostly at night) to make a more powerful version written in 6502 machine language. dan was at harvard business school at the time and bob nominally had a day job writing software. "there was no great risk in doing a business," bob wrote, "if it failed it failed. no big deal."  its not quite as easy as i make it sound. it took a painfully long time for word of mouth to get going, and we did not start to get a lot of press coverage until we hired a pr firm (admittedly the best in the business) for $16,000 per month. however, it was true that the only significant channel was our own web site.  if the mac was so great, why did it lose? cost, again. microsoft concentrated on the software business, and unleashed a swarm of cheap component suppliers on apple hardware. it did not help, either, that suits took over during a critical period.  one thing that would help web-based applications, and help keep the next generation of software from being overshadowed by microsoft, would be a good open-source browser. mozilla is open-source but seems to have suffered from having been corporate software for so long. a small, fast browser that was actively maintained would be a great thing in itself, and would probably also encourage companies to build little web appliances. among other things, a proper open-source browser would cause http and html to continue to evolve (as e.g. perl has). it would help web-based applications greatly to be able to distinguish between selecting a link and following it; all youd need to do this would be a trivial enhancement of http, to allow multiple urls in a request. cascading menus would also be good. if you want to change the world, write a new mosaic. think its too late? in 1998 a lot of people thought it was too late to launch a new search engine, but google proved them wrong. there is always room for something new if the current options suck enough. make sure it works on all the free oses first-- new things start with their users.  trevor blackwell, who probably knows more about this from personal experience than anyone, writes: "i would go farther in saying that because server-based software is so hard on the programmers, it causes a fundamental economic shift away from large companies. it requires the kind of intensity and dedication from programmers that they will only be willing to provide when its their own company. software companies can hire skilled people to work in a not-too-demanding environment, and can hire unskilled people to endure hardships, but they cant hire highly skilled people to bust their asses. since capital is no longer needed, big companies have little to bring to the table."  in the original version of this essay, i advised avoiding javascript. that was a good plan in 2001, but javascript now works. thanks to sarah harlin, trevor blackwell, robert morris, eric raymond, ken anderson, and dan giffin for reading drafts of this paper; to dan bricklin and bob frankston for information about visicalc; and again to ken anderson for inviting me to speak at bbn. youll find this essay and 14 others in hackers & painters . this essay was originally published at paulgraham.com (i wrote this article to help myself understand exactly what mccarthy discovered. you dont need to know this stuff to program in lisp, but it should be helpful to anyone who wants to understand the essence of lisp-- both in the sense of its origins and its semantic core. the fact that it has such a core is one of lisps distinguishing features, and the reason why, unlike other languages, lisp has dialects.) in 1960, john mccarthy published a remarkable paper in which he did for programming something like what euclid did for geometry. he showed how, given a handful of simple operators and a notation for functions, you can build a whole programming language. he called this language lisp, for "list processing," because one of his key ideas was to use a simple data structure called a list for both code and data. its worth understanding what mccarthy discovered, not just as a landmark in the history of computers, but as a model for what programming is tending to become in our own time. it seems to me that there have been two really clean, consistent models of programming so far: the c model and the lisp model. these two seem points of high ground, with swampy lowlands between them. as computers have grown more powerful, the new languages being developed have been moving steadily toward the lisp model. a popular recipe for new programming languages in the past 20 years has been to take the c model of computing and add to it, piecemeal, parts taken from the lisp model, like runtime typing and garbage collection. in this article im going to try to explain in the simplest possible terms what mccarthy discovered. the point is not just to learn about an interesting theoretical result someone figured out forty years ago, but to show where languages are heading. the unusual thing about lisp-- in fact, the defining quality of lisp-- is that it can be written in itself. to understand what mccarthy meant by this, were going to retrace his steps, with his mathematical notation translated into running common lisp code. this essay was originally published at paulgraham.com someone we funded is talking to vcs now, and asked me how common it was for a startups founders to retain control of the board after a series a round. he said vcs told him this almost never happened. ten years ago that was true. in the past, founders rarely kept control of the board through a series a. the traditional series a board consisted of two founders, two vcs, and one independent member. more recently the recipe is often one founder, one vc, and one independent. in either case the founders lose their majority. but not always. mark zuckerberg kept control of facebooks board through the series a and still has it today. mark pincus has kept control of zyngas too. but are these just outliers? how common is it for founders to keep control after an a round? id heard of several cases among the companies weve funded, but i wasnt sure how many there were, so i emailed the ycfounders list. the replies surprised me. in a dozen companies weve funded, the founders still had a majority of the board seats after the series a round. i feel like were at a tipping point here. a lot of vcs still act as if founders retaining board control after a series a is unheard-of. a lot of them try to make you feel bad if you even askas if youre a noob or a control freak for wanting such a thing. but the founders i heard from arent noobs or control freaks. or if they are, they are, like mark zuckerberg, the kind of noobs and control freaks vcs should be trying to fund more of. founders retaining control after a series a is clearly heard-of. and barring financial catastrophe, i think in the coming year it will become the norm. control of a company is a more complicated matter than simply outvoting other parties in board meetings. investors usually get vetos over certain big decisions, like selling the company, regardless of how many board seats they have. and board votes are rarely split. matters are decided in the discussion preceding the vote, not in the vote itself, which is usually unanimous. but if opinion is divided in such discussions, the side that knows it would lose in a vote will tend to be less insistent. thats what board control means in practice. you dont simply get to do whatever you want; the board still has to act in the interest of the shareholders; but if you have a majority of board seats, then your opinion about whats in the interest of the shareholders will tend to prevail. so while board control is not total control, its not imaginary either. theres inevitably a difference in how things feel within the company. which means if it becomes the norm for founders to retain board control after a series a, that will change the way things feel in the whole startup world. the switch to the new norm may be surprisingly fast, because the startups that can retain control tend to be the best ones. theyre the ones that set the trends, both for other startups and for vcs. a lot of the reason vcs are harsh when negotiating with startups is that theyre embarrassed to go back to their partners looking like they got beaten. when they sign a termsheet, they want to be able to brag about the good terms they got. a lot of them dont care that much personally about whether founders keep board control. they just dont want to seem like they had to make concessions. which means if letting the founders keep control stops being perceived as a concession, it will rapidly become much more common. like a lot of changes that have been forced on vcs, this change wont turn out to be as big a problem as they might think. vcs will still be able to convince; they just wont be able to compel. and the startups where they have to resort to compulsion are not the ones that matter anyway. vcs make most of their money from a few big hits, and those arent them. knowing that founders will keep control of the board may even help vcs pick better. if they know they cant fire the founders, theyll have to choose founders they can trust. and thats who they should have been choosing all along. thanks to sam altman, john bautista, trevor blackwell, paul buchheit, brian chesky, bill clerico, patrick collison, adam goldstein, james lindenbaum, jessica livingston, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com (these are some notes i made for a panel discussion on programming language design at mit on may 10, 2001.) programming languages are how people talk to computers. the computer would be just as happy speaking any language that was unambiguous. the reason we have high level languages is because people cant deal with machine language. the point of programming languages is to prevent our poor frail human brains from being overwhelmed by a mass of detail. architects know that some kinds of design problems are more personal than others. one of the cleanest, most abstract design problems is designing bridges. there your job is largely a matter of spanning a given distance with the least material. the other end of the spectrum is designing chairs. chair designers have to spend their time thinking about human butts. software varies in the same way. designing algorithms for routing data through a network is a nice, abstract problem, like designing bridges. whereas designing programming languages is like designing chairs: its all about dealing with human weaknesses. most of us hate to acknowledge this. designing systems of great mathematical elegance sounds a lot more appealing to most of us than pandering to human weaknesses. and there is a role for mathematical elegance: some kinds of elegance make programs easier to understand. but elegance is not an end in itself. and when i say languages have to be designed to suit human weaknesses, i dont mean that languages have to be designed for bad programmers. in fact i think you ought to design for the best programmers , but even the best programmers have limitations. i dont think anyone would like programming in a language where all the variables were the letter x with integer subscripts. if you look at the history of programming languages, a lot of the best ones were languages designed for their own authors to use, and a lot of the worst ones were designed for other people to use. when languages are designed for other people, its always a specific group of other people: people not as smart as the language designer. so you get a language that talks down to you. cobol is the most extreme case, but a lot of languages are pervaded by this spirit. it has nothing to do with how abstract the language is. c is pretty low-level, but it was designed for its authors to use, and thats why hackers like it. the argument for designing languages for bad programmers is that there are more bad programmers than good programmers. that may be so. but those few good programmers write a disproportionately large percentage of the software. im interested in the question, how do you design a language that the very best hackers will like? i happen to think this is identical to the question, how do you design a good programming language?, but even if it isnt, it is at least an interesting question. many languages (especially the ones designed for other people) have the attitude of a governess: they try to prevent you from doing things that they think arent good for you. i like the opposite approach: give the programmer as much control as you can. when i first learned lisp, what i liked most about it was that it considered me an equal partner. in the other languages i had learned up till then, there was the language and there was my program, written in the language, and the two were very separate. but in lisp the functions and macros i wrote were just like those that made up the language itself. i could rewrite the language if i wanted. it had the same appeal as open-source software. brevity is underestimated and even scorned. but if you look into the hearts of hackers, youll see that they really love it. how many times have you heard hackers speak fondly of how in, say, apl, they could do amazing things with just a couple lines of code? i think anything that really smart people really love is worth paying attention to. i think almost anything you can do to make programs shorter is good. there should be lots of library functions; anything that can be implicit should be; the syntax should be terse to a fault; even the names of things should be short. and its not only programs that should be short. the manual should be thin as well. a good part of manuals is taken up with clarifications and reservations and warnings and special cases. if you force yourself to shorten the manual, in the best case you do it by fixing the things in the language that required so much explanation. a lot of people wish that hacking was mathematics, or at least something like a natural science. i think hacking is more like architecture. architecture is related to physics, in the sense that architects have to design buildings that dont fall down, but the actual goal of architects is to make great buildings, not to make discoveries about statics. what hackers like to do is make great programs. and i think, at least in our own minds, we have to remember that its an admirable thing to write great programs, even when this work doesnt translate easily into the conventional intellectual currency of research papers. intellectually, it is just as worthwhile to design a language programmers will love as it is to design a horrible one that embodies some idea you can publish a paper about. libraries are becoming an increasingly important component of programming languages. theyre also getting bigger, and this can be dangerous. if it takes longer to find the library function that will do what you want than it would take to write it yourself, then all that code is doing nothing but make your manual thick. (the symbolics manuals were a case in point.) so i think we will have to work on ways to organize libraries. the ideal would be to design them so that the programmer could guess what library call would do the right thing. this is an open problem in the sense that i have wondered about it for years and still dont know the answer. prefix syntax seems perfectly natural to me, except possibly for math. but it could be that a lot of lisps unpopularity is simply due to having an unfamiliar syntax. whether to do anything about it, if it is true, is another question. i think a lot of the most exciting new applications that get written in the next twenty years will be web-based applications, meaning programs that sit on the server and talk to you through a web browser. and to write these kinds of programs we may need some new things. one thing well need is support for the new way that server-based apps get released. instead of having one or two big releases a year, like desktop software, server-based apps get released as a series of small changes. you may have as many as five or ten releases a day. and as a rule everyone will always use the latest version. you know how you can design programs to be debuggable? well, server-based software likewise has to be designed to be changeable. you have to be able to change it easily, or at least to know what is a small change and what is a momentous one. another thing that might turn out to be useful for server based software, surprisingly, is continuations. in web-based software you can use something like continuation-passing style to get the effect of subroutines in the inherently stateless world of a web session. maybe it would be worthwhile having actual continuations, if it was not too expensive. im not sure how reasonable a hope this is, but one thing i would really love to do, personally, is discover a new abstraction-- something that would make as much of a difference as having first class functions or recursion or even keyword parameters. this may be an impossible dream. these things dont get discovered that often. but i am always looking. writing application programs used to mean writing desktop software. and in desktop software there is a big bias toward writing the application in the same language as the operating system. and so ten years ago, writing software pretty much meant writing software in c. eventually a tradition evolved: application programs must not be written in unusual languages. and this tradition had so long to develop that nontechnical people like managers and venture capitalists also learned it. server-based software blows away this whole model. with server-based software you can use any language you want. almost nobody understands this yet (especially not managers and venture capitalists). a few hackers understand it, and thats why we even hear about new, indy languages like perl and python. were not hearing about perl and python because people are using them to write windows apps. what this means for us, as people interested in designing programming languages, is that there is now potentially an actual audience for our work. language designers, or at least language implementors, like to write compilers that generate fast code. but i dont think this is what makes languages fast for users. knuth pointed out long ago that speed only matters in a few critical bottlenecks. and anyone whos tried it knows that you cant guess where these bottlenecks are. profilers are the answer. language designers are solving the wrong problem. users dont need benchmarks to run fast. what they need is a language that can show them what parts of their own programs need to be rewritten. thats where speed comes from in practice. so maybe it would be a net win if language implementors took half the time they would have spent doing compiler optimizations and spent it writing a good profiler instead. this may not be an absolute rule, but it seems like the best languages all evolved together with some application they were being used to write. c was written by people who needed it for systems programming. lisp was developed partly to do symbolic differentiation, and mccarthy was so eager to get started that he was writing differentiation programs even in the first paper on lisp, in 1960. its especially good if your application solves some new problem. that will tend to drive your language to have new features that programmers need. i personally am interested in writing a language that will be good for writing server-based applications.  you know what a throwaway program is: something you write quickly for some limited task. i think if you looked around youd find that a lot of big, serious programs started as throwaway programs. i would not be surprised if most programs started as throwaway programs. and so if you want to make a language thats good for writing software in general, it has to be good for writing throwaway programs, because that is the larval stage of most software. its traditional to think of syntax and semantics as being completely separate. this will sound shocking, but it may be that they arent. i think that what you want in your language may be related to how you express it. i was talking recently to robert morris, and he pointed out that operator overloading is a bigger win in languages with infix syntax. in a language with prefix syntax, any function you define is effectively an operator. if you want to define a plus for a new type of number youve made up, you can just define a new function to add them. if you do that in a language with infix syntax, theres a big difference in appearance between the use of an overloaded operator and a function call. back in the 1970s it was fashionable to design new programming languages. recently it hasnt been. but i think server-based software will make new languages fashionable again. with server-based software, you can use any language you want, so if someone does design a language that actually seems better than others that are available, there will be people who take a risk and use it. richard kelsey gave this as an idea whose time has come again in the last panel, and i completely agree with him. my guess (and microsofts guess, it seems) is that much computing will move from the desktop onto remote servers. in other words, time-sharing is back. and i think there will need to be support for it at the language level. for example, i know that richard and jonathan rees have done a lot of work implementing process scheduling within scheme 48. recently it was starting to seem that computers were finally fast enough. more and more we were starting to hear about byte code, which implies to me at least that we feel we have cycles to spare. but i dont think we will, with server-based software. someone is going to have to pay for the servers that the software runs on, and the number of users they can support per machine will be the divisor of their capital cost. so i think efficiency will matter, at least in computational bottlenecks. it will be especially important to do i/o fast, because server-based applications do a lot of i/o. it may turn out that byte code is not a win, in the end. sun and microsoft seem to be facing off in a kind of a battle of the byte codes at the moment. but theyre doing it because byte code is a convenient place to insert themselves into the process, not because byte code is in itself a good idea. it may turn out that this whole battleground gets bypassed. that would be kind of amusing. this is just a guess, but my guess is that the winning model for most applications will be purely server-based. designing software that works on the assumption that everyone will have your client is like designing a society on the assumption that everyone will just be honest. it would certainly be convenient, but you have to assume it will never happen. i think there will be a proliferation of devices that have some kind of web access, and all youll be able to assume about them is that they can support simple html and forms. will you have a browser on your cell phone? will there be a phone in your palm pilot? will your blackberry get a bigger screen? will you be able to browse the web on your gameboy? your watch? i dont know. and i dont have to know if i bet on everything just being on the server. its just so much more robust to have all the brains on the server . i realize this is a controversial one, but i dont think object-oriented programming is such a big deal. i think it is a fine model for certain kinds of applications that need that specific kind of data structure, like window systems, simulations, and cad programs. but i dont see why it ought to be the model for all programming. i think part of the reason people in big companies like object-oriented programming is because it yields a lot of what looks like work. something that might naturally be represented as, say, a list of integers, can now be represented as a class with all kinds of scaffolding and hustle and bustle. another attraction of object-oriented programming is that methods give you some of the effect of first class functions. but this is old news to lisp programmers. when you have actual first class functions, you can just use them in whatever way is appropriate to the task at hand, instead of forcing everything into a mold of classes and methods. what this means for language design, i think, is that you shouldnt build object-oriented programming in too deeply. maybe the answer is to offer more general, underlying stuff, and let people design whatever object systems they want as libraries. having your language designed by a committee is a big pitfall, and not just for the reasons everyone knows about. everyone knows that committees tend to yield lumpy, inconsistent designs. but i think a greater danger is that they wont take risks. when one person is in charge he can take risks that a committee would never agree on. is it necessary to take risks to design a good language though? many people might suspect that language design is something where you should stick fairly close to the conventional wisdom. i bet this isnt true. in everything else people do, reward is proportionate to risk. why should language design be any different? this essay was originally published at paulgraham.com (this article was written as a kind of business plan for a new language . so it is missing (because it takes for granted) the most important feature of a good programming language: very powerful abstractions.) a friend of mine once told an eminent operating systems expert that he wanted to design a really good programming language. the expert told him that it would be a waste of time, that programming languages dont become popular or unpopular based on their merits, and so no matter how good his language was, no one would use it. at least, that was what had happened to the language he had designed. what does make a language popular? do popular languages deserve their popularity? is it worth trying to define a good programming language? how would you do it? i think the answers to these questions can be found by looking at hackers, and learning what they want. programming languages are for hackers, and a programming language is good as a programming language (rather than, say, an exercise in denotational semantics or compiler design) if and only if hackers like it. its true, certainly, that most people dont choose programming languages simply based on their merits. most programmers are told what language to use by someone else. and yet i think the effect of such external factors on the popularity of programming languages is not as great as its sometimes thought to be. i think a bigger problem is that a hackers idea of a good programming language is not the same as most language designers. between the two, the hackers opinion is the one that matters. programming languages are not theorems. theyre tools, designed for people, and they have to be designed to suit human strengths and weaknesses as much as shoes have to be designed for human feet. if a shoe pinches when you put it on, its a bad shoe, however elegant it may be as a piece of sculpture. it may be that the majority of programmers cant tell a good language from a bad one. but thats no different with any other tool. it doesnt mean that its a waste of time to try designing a good language. expert hackers can tell a good language when they see one, and theyll use it. expert hackers are a tiny minority, admittedly, but that tiny minority write all the good software, and their influence is such that the rest of the programmers will tend to use whatever language they use. often, indeed, it is not merely influence but command: often the expert hackers are the very people who, as their bosses or faculty advisors, tell the other programmers what language to use. the opinion of expert hackers is not the only force that determines the relative popularity of programming languages-- legacy software (cobol) and hype (ada, java) also play a role-- but i think it is the most powerful force over the long term. given an initial critical mass and enough time, a programming language probably becomes about as popular as it deserves to be. and popularity further separates good languages from bad ones, because feedback from real live users always leads to improvements. look at how much any popular language has changed during its life. perl and fortran are extreme cases, but even lisp has changed a lot. lisp 1.5 didnt have macros, for example; these evolved later, after hackers at mit had spent a couple years using lisp to write real programs.  so whether or not a language has to be good to be popular, i think a language has to be popular to be good. and it has to stay popular to stay good. the state of the art in programming languages doesnt stand still. and yet the lisps we have today are still pretty much what they had at mit in the mid-1980s, because thats the last time lisp had a sufficiently large and demanding user base. of course, hackers have to know about a language before they can use it. how are they to hear? from other hackers. but there has to be some initial group of hackers using the language for others even to hear about it. i wonder how large this group has to be; how many users make a critical mass? off the top of my head, id say twenty. if a language had twenty separate users, meaning twenty users who decided on their own to use it, id consider it to be real. getting there cant be easy. i would not be surprised if it is harder to get from zero to twenty than from twenty to a thousand. the best way to get those initial twenty users is probably to use a trojan horse: to give people an application they want, which happens to be written in the new language. lets start by acknowledging one external factor that does affect the popularity of a programming language. to become popular, a programming language has to be the scripting language of a popular system. fortran and cobol were the scripting languages of early ibm mainframes. c was the scripting language of unix, and so, later, was perl. tcl is the scripting language of tk. java and javascript are intended to be the scripting languages of web browsers. lisp is not a massively popular language because it is not the scripting language of a massively popular system. what popularity it retains dates back to the 1960s and 1970s, when it was the scripting language of mit. a lot of the great programmers of the day were associated with mit at some point. and in the early 1970s, before c, mits dialect of lisp, called maclisp, was one of the only programming languages a serious hacker would want to use. today lisp is the scripting language of two moderately popular systems, emacs and autocad, and for that reason i suspect that most of the lisp programming done today is done in emacs lisp or autolisp. programming languages dont exist in isolation. to hack is a transitive verb-- hackers are usually hacking something-- and in practice languages are judged relative to whatever theyre used to hack. so if you want to design a popular language, you either have to supply more than a language, or you have to design your language to replace the scripting language of some existing system. common lisp is unpopular partly because its an orphan. it did originally come with a system to hack: the lisp machine. but lisp machines (along with parallel computers) were steamrollered by the increasing power of general purpose processors in the 1980s. common lisp might have remained popular if it had been a good scripting language for unix. it is, alas, an atrociously bad one. one way to describe this situation is to say that a language isnt judged on its own merits. another view is that a programming language really isnt a programming language unless its also the scripting language of something. this only seems unfair if it comes as a surprise. i think its no more unfair than expecting a programming language to have, say, an implementation. its just part of what a programming language is. a programming language does need a good implementation, of course, and this must be free. companies will pay for software, but individual hackers wont, and its the hackers you need to attract. a language also needs to have a book about it. the book should be thin, well-written, and full of good examples. k&r; is the ideal here. at the moment id almost say that a language has to have a book published by oreilly. thats becoming the test of mattering to hackers. there should be online documentation as well. in fact, the book can start as online documentation. but i dont think that physical books are outmoded yet. their format is convenient, and the de facto censorship imposed by publishers is a useful if imperfect filter. bookstores are one of the most important places for learning about new languages. given that you can supply the three things any language needs-- a free implementation, a book, and something to hack-- how do you make a language that hackers will like? one thing hackers like is brevity. hackers are lazy, in the same way that mathematicians and modernist architects are lazy: they hate anything extraneous. it would not be far from the truth to say that a hacker about to write a program decides what language to use, at least subconsciously, based on the total number of characters hell have to type. if this isnt precisely how hackers think, a language designer would do well to act as if it were. it is a mistake to try to baby the user with long-winded expressions that are meant to resemble english. cobol is notorious for this flaw. a hacker would consider being asked to write instead of as something between an insult to his intelligence and a sin against god. it has sometimes been said that lisp should use first and rest instead of car and cdr, because it would make programs easier to read. maybe for the first couple hours. but a hacker can learn quickly enough that car means the first element of a list and cdr means the rest. using first and rest means 50% more typing. and they are also different lengths, meaning that the arguments wont line up when theyre called, as car and cdr often are, in successive lines. ive found that it matters a lot how code lines up on the page. i can barely read lisp code when it is set in a variable-width font, and friends say this is true for other languages too. brevity is one place where strongly typed languages lose. all other things being equal, no one wants to begin a program with a bunch of declarations. anything that can be implicit, should be. the individual tokens should be short as well. perl and common lisp occupy opposite poles on this question. perl programs can be almost cryptically dense, while the names of built-in common lisp operators are comically long. the designers of common lisp probably expected users to have text editors that would type these long names for them. but the cost of a long name is not just the cost of typing it. there is also the cost of reading it, and the cost of the space it takes up on your screen. there is one thing more important than brevity to a hacker: being able to do what you want. in the history of programming languages a surprising amount of effort has gone into preventing programmers from doing things considered to be improper. this is a dangerously presumptuous plan. how can the language designer know what the programmer is going to need to do? i think language designers would do better to consider their target user to be a genius who will need to do things they never anticipated, rather than a bumbler who needs to be protected from himself. the bumbler will shoot himself in the foot anyway. you may save him from referring to variables in another package, but you cant save him from writing a badly designed program to solve the wrong problem, and taking forever to do it. good programmers often want to do dangerous and unsavory things. by unsavory i mean things that go behind whatever semantic facade the language is trying to present: getting hold of the internal representation of some high-level abstraction, for example. hackers like to hack, and hacking means getting inside things and second guessing the original designer. let yourself be second guessed. when you make any tool, people use it in ways you didnt intend, and this is especially true of a highly articulated tool like a programming language. many a hacker will want to tweak your semantic model in a way that you never imagined. i say, let them; give the programmer access to as much internal stuff as you can without endangering runtime systems like the garbage collector. in common lisp i have often wanted to iterate through the fields of a struct-- to comb out references to a deleted object, for example, or find fields that are uninitialized. i know the structs are just vectors underneath. and yet i cant write a general purpose function that i can call on any struct. i can only access the fields by name, because thats what a struct is supposed to mean. a hacker may only want to subvert the intended model of things once or twice in a big program. but what a difference it makes to be able to. and it may be more than a question of just solving a problem. there is a kind of pleasure here too. hackers share the surgeons secret pleasure in poking about in gross innards, the teenagers secret pleasure in popping zits.  for boys, at least, certain kinds of horrors are fascinating. maxim magazine publishes an annual volume of photographs, containing a mix of pin-ups and grisly accidents. they know their audience. historically, lisp has been good at letting hackers have their way. the political correctness of common lisp is an aberration. early lisps let you get your hands on everything. a good deal of that spirit is, fortunately, preserved in macros. what a wonderful thing, to be able to make arbitrary transformations on the source code. classic macros are a real hackers tool-- simple, powerful, and dangerous. its so easy to understand what they do: you call a function on the macros arguments, and whatever it returns gets inserted in place of the macro call. hygienic macros embody the opposite principle. they try to protect you from understanding what theyre doing. i have never heard hygienic macros explained in one sentence. and they are a classic example of the dangers of deciding what programmers are allowed to want. hygienic macros are intended to protect me from variable capture, among other things, but variable capture is exactly what i want in some macros. a really good language should be both clean and dirty: cleanly designed, with a small core of well understood and highly orthogonal operators, but dirty in the sense that it lets hackers have their way with it. c is like this. so were the early lisps. a real hackers language will always have a slightly raffish character. a good programming language should have features that make the kind of people who use the phrase "software engineering" shake their heads disapprovingly. at the other end of the continuum are languages like ada and pascal, models of propriety that are good for teaching and not much else. to be attractive to hackers, a language must be good for writing the kinds of programs they want to write. and that means, perhaps surprisingly, that it has to be good for writing throwaway programs. a throwaway program is a program you write quickly for some limited task: a program to automate some system administration task, or generate test data for a simulation, or convert data from one format to another. the surprising thing about throwaway programs is that, like the "temporary" buildings built at so many american universities during world war ii, they often dont get thrown away. many evolve into real programs, with real features and real users. i have a hunch that the best big programs begin life this way, rather than being designed big from the start, like the hoover dam. its terrifying to build something big from scratch. when people take on a project thats too big, they become overwhelmed. the project either gets bogged down, or the result is sterile and wooden: a shopping mall rather than a real downtown, brasilia rather than rome, ada rather than c. another way to get a big program is to start with a throwaway program and keep improving it. this approach is less daunting, and the design of the program benefits from evolution. i think, if one looked, that this would turn out to be the way most big programs were developed. and those that did evolve this way are probably still written in whatever language they were first written in, because its rare for a program to be ported, except for political reasons. and so, paradoxically, if you want to make a language that is used for big systems, you have to make it good for writing throwaway programs, because thats where big systems come from. perl is a striking example of this idea. it was not only designed for writing throwaway programs, but was pretty much a throwaway program itself. perl began life as a collection of utilities for generating reports, and only evolved into a programming language as the throwaway programs people wrote in it grew larger. it was not until perl 5 (if then) that the language was suitable for writing serious programs, and yet it was already massively popular. what makes a language good for throwaway programs? to start with, it must be readily available. a throwaway program is something that you expect to write in an hour. so the language probably must already be installed on the computer youre using. it cant be something you have to install before you use it. it has to be there. c was there because it came with the operating system. perl was there because it was originally a tool for system administrators, and yours had already installed it. being available means more than being installed, though. an interactive language, with a command-line interface, is more available than one that you have to compile and run separately. a popular programming language should be interactive, and start up fast. another thing you want in a throwaway program is brevity. brevity is always attractive to hackers, and never more so than in a program they expect to turn out in an hour. of course the ultimate in brevity is to have the program already written for you, and merely to call it. and this brings us to what i think will be an increasingly important feature of programming languages: library functions. perl wins because it has large libraries for manipulating strings. this class of library functions are especially important for throwaway programs, which are often originally written for converting or extracting data. many perl programs probably begin as just a couple library calls stuck together. i think a lot of the advances that happen in programming languages in the next fifty years will have to do with library functions. i think future programming languages will have libraries that are as carefully designed as the core language. programming language design will not be about whether to make your language strongly or weakly typed, or object oriented, or functional, or whatever, but about how to design great libraries. the kind of language designers who like to think about how to design type systems may shudder at this. its almost like writing applications! too bad. languages are for programmers, and libraries are what programmers need. its hard to design good libraries. its not simply a matter of writing a lot of code. once the libraries get too big, it can sometimes take longer to find the function you need than to write the code yourself. libraries need to be designed using a small set of orthogonal operators, just like the core language. it ought to be possible for the programmer to guess what library call will do what he needs. libraries are one place common lisp falls short. there are only rudimentary libraries for manipulating strings, and almost none for talking to the operating system. for historical reasons, common lisp tries to pretend that the os doesnt exist. and because you cant talk to the os, youre unlikely to be able to write a serious program using only the built-in operators in common lisp. you have to use some implementation-specific hacks as well, and in practice these tend not to give you everything you want. hackers would think a lot more highly of lisp if common lisp had powerful string libraries and good os support. could a language with lisps syntax, or more precisely, lack of syntax, ever become popular? i dont know the answer to this question. i do think that syntax is not the main reason lisp isnt currently popular. common lisp has worse problems than unfamiliar syntax. i know several programmers who are comfortable with prefix syntax and yet use perl by default, because it has powerful string libraries and can talk to the os. there are two possible problems with prefix notation: that it is unfamiliar to programmers, and that it is not dense enough. the conventional wisdom in the lisp world is that the first problem is the real one. im not so sure. yes, prefix notation makes ordinary programmers panic. but i dont think ordinary programmers opinions matter. languages become popular or unpopular based on what expert hackers think of them, and i think expert hackers might be able to deal with prefix notation. perl syntax can be pretty incomprehensible, but that has not stood in the way of perls popularity. if anything it may have helped foster a perl cult. a more serious problem is the diffuseness of prefix notation. for expert hackers, that really is a problem. no one wants to write (aref a x y) when they could write a. in this particular case there is a way to finesse our way out of the problem. if we treat data structures as if they were functions on indexes, we could write (a x y) instead, which is even shorter than the perl form. similar tricks may shorten other types of expressions. we can get rid of (or make optional) a lot of parentheses by making indentation significant. thats how programmers read code anyway: when indentation says one thing and delimiters say another, we go by the indentation. treating indentation as significant would eliminate this common source of bugs as well as making programs shorter. sometimes infix syntax is easier to read. this is especially true for math expressions. ive used lisp my whole programming life and i still dont find prefix math expressions natural. and yet it is convenient, especially when youre generating code, to have operators that take any number of arguments. so if we do have infix syntax, it should probably be implemented as some kind of read-macro. i dont think we should be religiously opposed to introducing syntax into lisp, as long as it translates in a well-understood way into underlying s-expressions. there is already a good deal of syntax in lisp. its not necessarily bad to introduce more, as long as no one is forced to use it. in common lisp, some delimiters are reserved for the language, suggesting that at least some of the designers intended to have more syntax in the future. one of the most egregiously unlispy pieces of syntax in common lisp occurs in format strings; format is a language in its own right, and that language is not lisp. if there were a plan for introducing more syntax into lisp, format specifiers might be able to be included in it. it would be a good thing if macros could generate format specifiers the way they generate any other kind of code. an eminent lisp hacker told me that his copy of cltl falls open to the section format. mine too. this probably indicates room for improvement. it may also mean that programs do a lot of i/o. a good language, as everyone knows, should generate fast code. but in practice i dont think fast code comes primarily from things you do in the design of the language. as knuth pointed out long ago, speed only matters in certain critical bottlenecks. and as many programmers have observed since, one is very often mistaken about where these bottlenecks are. so, in practice, the way to get fast code is to have a very good profiler, rather than by, say, making the language strongly typed. you dont need to know the type of every argument in every call in the program. you do need to be able to declare the types of arguments in the bottlenecks. and even more, you need to be able to find out where the bottlenecks are. one complaint people have had with lisp is that its hard to tell whats expensive. this might be true. it might also be inevitable, if you want to have a very abstract language. and in any case i think good profiling would go a long way toward fixing the problem: youd soon learn what was expensive. part of the problem here is social. language designers like to write fast compilers. thats how they measure their skill. they think of the profiler as an add-on, at best. but in practice a good profiler may do more to improve the speed of actual programs written in the language than a compiler that generates fast code. here, again, language designers are somewhat out of touch with their users. they do a really good job of solving slightly the wrong problem. it might be a good idea to have an active profiler-- to push performance data to the programmer instead of waiting for him to come asking for it. for example, the editor could display bottlenecks in red when the programmer edits the source code. another approach would be to somehow represent whats happening in running programs. this would be an especially big win in server-based applications, where you have lots of running programs to look at. an active profiler could show graphically whats happening in memory as a programs running, or even make sounds that tell whats happening. sound is a good cue to problems. in one place i worked, we had a big board of dials showing what was happening to our web servers. the hands were moved by little servomotors that made a slight noise when they turned. i couldnt see the board from my desk, but i found that i could tell immediately, by the sound, when there was a problem with a server. it might even be possible to write a profiler that would automatically detect inefficient algorithms. i would not be surprised if certain patterns of memory access turned out to be sure signs of bad algorithms. if there were a little guy running around inside the computer executing our programs, he would probably have as long and plaintive a tale to tell about his job as a federal government employee. i often have a feeling that im sending the processor on a lot of wild goose chases, but ive never had a good way to look at what its doing. a number of lisps now compile into byte code, which is then executed by an interpreter. this is usually done to make the implementation easier to port, but it could be a useful language feature. it might be a good idea to make the byte code an official part of the language, and to allow programmers to use inline byte code in bottlenecks. then such optimizations would be portable too. the nature of speed, as perceived by the end-user, may be changing. with the rise of server-based applications, more and more programs may turn out to be i/o-bound. it will be worth making i/o fast. the language can help with straightforward measures like simple, fast, formatted output functions, and also with deep structural changes like caching and persistent objects. users are interested in response time. but another kind of efficiency will be increasingly important: the number of simultaneous users you can support per processor. many of the interesting applications written in the near future will be server-based, and the number of users per server is the critical question for anyone hosting such applications. in the capital cost of a business offering a server-based application, this is the divisor. for years, efficiency hasnt mattered much in most end-user applications. developers have been able to assume that each user would have an increasingly powerful processor sitting on their desk. and by parkinsons law, software has expanded to use the resources available. that will change with server-based applications. in that world, the hardware and software will be supplied together. for companies that offer server-based applications, it will make a very big difference to the bottom line how many users they can support per server. in some applications, the processor will be the limiting factor, and execution speed will be the most important thing to optimize. but often memory will be the limit; the number of simultaneous users will be determined by the amount of memory you need for each users data. the language can help here too. good support for threads will enable all the users to share a single heap. it may also help to have persistent objects and/or language level support for lazy loading. the last ingredient a popular language needs is time. no one wants to write programs in a language that might go away, as so many programming languages do. so most hackers will tend to wait until a language has been around for a couple years before even considering using it. inventors of wonderful new things are often surprised to discover this, but you need time to get any message through to people. a friend of mine rarely does anything the first time someone asks him. he knows that people sometimes ask for things that they turn out not to want. to avoid wasting his time, he waits till the third or fourth time hes asked to do something; by then, whoevers asking him may be fairly annoyed, but at least they probably really do want whatever theyre asking for. most people have learned to do a similar sort of filtering on new things they hear about. they dont even start paying attention until theyve heard about something ten times. theyre perfectly justified: the majority of hot new whatevers do turn out to be a waste of time, and eventually go away. by delaying learning vrml, i avoided having to learn it at all. so anyone who invents something new has to expect to keep repeating their message for years before people will start to get it. we wrote what was, as far as i know, the first web-server based application, and it took us years to get it through to people that it didnt have to be downloaded. it wasnt that they were stupid. they just had us tuned out. the good news is, simple repetition solves the problem. all you have to do is keep telling your story, and eventually people will start to hear. its not when people notice youre there that they pay attention; its when they notice youre still there. its just as well that it usually takes a while to gain momentum. most technologies evolve a good deal even after theyre first launched-- programming languages especially. nothing could be better, for a new techology, than a few years of being used only by a small number of early adopters. early adopters are sophisticated and demanding, and quickly flush out whatever flaws remain in your technology. when you only have a few users you can be in close contact with all of them. and early adopters are forgiving when you improve your system, even if this causes some breakage. there are two ways new technology gets introduced: the organic growth method, and the big bang method. the organic growth method is exemplified by the classic seat-of-the-pants underfunded garage startup. a couple guys, working in obscurity, develop some new technology. they launch it with no marketing and initially have only a few (fanatically devoted) users. they continue to improve the technology, and meanwhile their user base grows by word of mouth. before they know it, theyre big. the other approach, the big bang method, is exemplified by the vc-backed, heavily marketed startup. they rush to develop a product, launch it with great publicity, and immediately (they hope) have a large user base. generally, the garage guys envy the big bang guys. the big bang guys are smooth and confident and respected by the vcs. they can afford the best of everything, and the pr campaign surrounding the launch has the side effect of making them celebrities. the organic growth guys, sitting in their garage, feel poor and unloved. and yet i think they are often mistaken to feel sorry for themselves. organic growth seems to yield better technology and richer founders than the big bang method. if you look at the dominant technologies today, youll find that most of them grew organically. this pattern doesnt only apply to companies. you see it in sponsored research too. multics and common lisp were big-bang projects, and unix and maclisp were organic growth projects. "the best writing is rewriting," wrote e. b. white. every good writer knows this, and its true for software too. the most important part of design is redesign. programming languages, especially, dont get redesigned enough. to write good software you must simultaneously keep two opposing ideas in your head. you need the young hackers naive faith in his abilities, and at the same time the veterans skepticism. you have to be able to think how hard can it be? with one half of your brain while thinking it will never work with the other. the trick is to realize that theres no real contradiction here. you want to be optimistic and skeptical about two different things. you have to be optimistic about the possibility of solving the problem, but skeptical about the value of whatever solution youve got so far. people who do good work often think that whatever theyre working on is no good. others see what theyve done and are full of wonder, but the creator is full of worry. this pattern is no coincidence: it is the worry that made the work good. if you can keep hope and worry balanced, they will drive a project forward the same way your two legs drive a bicycle forward. in the first phase of the two-cycle innovation engine, you work furiously on some problem, inspired by your confidence that youll be able to solve it. in the second phase, you look at what youve done in the cold light of morning, and see all its flaws very clearly. but as long as your critical spirit doesnt outweigh your hope, youll be able to look at your admittedly incomplete system, and think, how hard can it be to get the rest of the way?, thereby continuing the cycle. its tricky to keep the two forces balanced. in young hackers, optimism predominates. they produce something, are convinced its great, and never improve it. in old hackers, skepticism predominates, and they wont even dare to take on ambitious projects. anything you can do to keep the redesign cycle going is good. prose can be rewritten over and over until youre happy with it. but software, as a rule, doesnt get redesigned enough. prose has readers, but software has users. if a writer rewrites an essay, people who read the old version are unlikely to complain that their thoughts have been broken by some newly introduced incompatibility. users are a double-edged sword. they can help you improve your language, but they can also deter you from improving it. so choose your users carefully, and be slow to grow their number. having users is like optimization: the wise course is to delay it. also, as a general rule, you can at any given time get away with changing more than you think. introducing change is like pulling off a bandage: the pain is a memory almost as soon as you feel it. everyone knows that its not a good idea to have a language designed by a committee. committees yield bad design. but i think the worst danger of committees is that they interfere with redesign. it is so much work to introduce changes that no one wants to bother. whatever a committee decides tends to stay that way, even if most of the members dont like it. even a committee of two gets in the way of redesign. this happens particularly in the interfaces between pieces of software written by two different people. to change the interface both have to agree to change it at once. and so interfaces tend not to change at all, which is a problem because they tend to be one of the most ad hoc parts of any system. one solution here might be to design systems so that interfaces are horizontal instead of vertical-- so that modules are always vertically stacked strata of abstraction. then the interface will tend to be owned by one of them. the lower of two levels will either be a language in which the upper is written, in which case the lower level will own the interface, or it will be a slave, in which case the interface can be dictated by the upper level. what all this implies is that there is hope for a new lisp. there is hope for any language that gives hackers what they want, including lisp. i think we may have made a mistake in thinking that hackers are turned off by lisps strangeness. this comforting illusion may have prevented us from seeing the real problem with lisp, or at least common lisp, which is that it sucks for doing what hackers want to do. a hackers language needs powerful libraries and something to hack. common lisp has neither. a hackers language is terse and hackable. common lisp is not. the good news is, its not lisp that sucks, but common lisp. if we can develop a new lisp that is a real hackers language, i think hackers will use it. they will use whatever language does the job. all we have to do is make sure this new lisp does some important job better than other languages. history offers some encouragement. over time, successive new programming languages have taken more and more features from lisp. there is no longer much left to copy before the language youve made is lisp. the latest hot language, python, is a watered-down lisp with infix syntax and no macros. a new lisp would be a natural step in this progression. i sometimes think that it would be a good marketing trick to call it an improved version of python. that sounds hipper than lisp. to many people, lisp is a slow ai language with a lot of parentheses. fritz kunzes official biography carefully avoids mentioning the l-word. but my guess is that we shouldnt be afraid to call the new lisp lisp. lisp still has a lot of latent respect among the very best hackers-- the ones who took 6.001 and understood it, for example. and those are the users you need to win. in "how to become a hacker," eric raymond describes lisp as something like latin or greek-- a language you should learn as an intellectual exercise, even though you wont actually use it: lisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use lisp itself a lot. if i didnt know lisp, reading this would set me asking questions. a language that would make me a better programmer, if it means anything at all, means a language that would be better for programming. and that is in fact the implication of what eric is saying. as long as that idea is still floating around, i think hackers will be receptive enough to a new lisp, even if it is called lisp. but this lisp must be a hackers language, like the classic lisps of the 1970s. it must be terse, simple, and hackable. and it must have powerful libraries for doing what hackers want to do now. in the matter of libraries i think there is room to beat languages like perl and python at their own game. a lot of the new applications that will need to be written in the coming years will be server-based applications . theres no reason a new lisp shouldnt have string libraries as good as perl, and if this new lisp also had powerful libraries for server-based applications, it could be very popular. real hackers wont turn up their noses at a new tool that will let them solve hard problems with a few library calls. remember, hackers are lazy. it could be an even bigger win to have core language support for server-based applications. for example, explicit support for programs with multiple users, or data ownership at the level of type tags. server-based applications also give us the answer to the question of what this new lisp will be used to hack. it would not hurt to make lisp better as a scripting language for unix. (it would be hard to make it worse.) but i think there are areas where existing languages would be easier to beat. i think it might be better to follow the model of tcl, and supply the lisp together with a complete system for supporting server-based applications. lisp is a natural fit for server-based applications. lexical closures provide a way to get the effect of subroutines when the ui is just a series of web pages. s-expressions map nicely onto html, and macros are good at generating it. there need to be better tools for writing server-based applications, and there needs to be a new lisp, and the two would work very well together. by way of summary, lets try describing the hackers dream language. the dream language is beautiful , clean, and terse. it has an interactive toplevel that starts up fast. you can write programs to solve common problems with very little code. nearly all the code in any program you write is code thats specific to your application. everything else has been done for you. the syntax of the language is brief to a fault. you never have to type an unnecessary character, or even to use the shift key much. using big abstractions you can write the first version of a program very quickly. later, when you want to optimize, theres a really good profiler that tells you where to focus your attention. you can make inner loops blindingly fast, even writing inline byte code if you need to. there are lots of good examples to learn from, and the language is intuitive enough that you can learn how to use it from examples in a couple minutes. you dont need to look in the manual much. the manual is thin, and has few warnings and qualifications. the language has a small core, and powerful, highly orthogonal libraries that are as carefully designed as the core language. the libraries all work well together; everything in the language fits together like the parts in a fine camera. nothing is deprecated, or retained for compatibility. the source code of all the libraries is readily available. its easy to talk to the operating system and to applications written in other languages. the language is built in layers. the higher-level abstractions are built in a very transparent way out of lower-level abstractions, which you can get hold of if you want. nothing is hidden from you that doesnt absolutely have to be. the language offers abstractions only as a way of saving you work, rather than as a way of telling you what to do. in fact, the language encourages you to be an equal participant in its design. you can change everything about it, including even its syntax, and anything you write has, as much as possible, the same status as what comes predefined.  macros very close to the modern idea were proposed by timothy hart in 1964, two years after lisp 1.5 was released. what was missing, initially, were ways to avoid variable capture and multiple evaluation; harts examples are subject to both.  in when the air hits your brain, neurosurgeon frank vertosick recounts a conversation in which his chief resident, gary, talks about the difference between surgeons and internists ("fleas"): gary and i ordered a large pizza and found an open booth. the chief lit a cigarette. "look at those goddamn fleas, jabbering about some disease theyll see once in their lifetimes. thats the trouble with fleas, they only like the bizarre stuff. they hate their bread and butter cases. thats the difference between us and the fucking fleas. see, we love big juicy lumbar disc herniations, but they hate hypertension...." its hard to think of a lumbar disc herniation as juicy (except literally). and yet i think i know what they mean. ive often had a juicy bug to track down. someone whos not a programmer would find it hard to imagine that there could be pleasure in a bug. surely its better if everything just works. in one way, it is. and yet there is undeniably a grim satisfaction in hunting down certain sorts of bugs. this essay was originally published at paulgraham.com this essay developed out of conversations ive had with several other programmers about why java smelled suspicious. its not a critique of java! it is a case study of hackers radar. over time, hackers develop a nose for good (and bad) technology. i thought it might be interesting to try and write down what made java seem suspect to me. some people whove read this think its an interesting attempt to write about something that hasnt been written about before. others say i will get in trouble for appearing to be writing about things i dont understand. so, just in case it does any good, let me clarify that im not writing here about java (which i have never used) but about hackers radar (which i have thought about a lot). the aphorism "you cant tell a book by its cover" originated in the times when books were sold in plain cardboard covers, to be bound by each purchaser according to his own taste. in those days, you couldnt tell a book by its cover. but publishing has advanced since then: present-day publishers work hard to make the cover something you can tell a book by. i spend a lot of time in bookshops and i feel as if i have by now learned to understand everything publishers mean to tell me about a book, and perhaps a bit more. the time i havent spent in bookshops ive spent mostly in front of computers, and i feel as if ive learned, to some degree, to judge technology by its cover as well. it may be just luck, but ive saved myself from a few technologies that turned out to be real stinkers. so far, java seems like a stinker to me. ive never written a java program, never more than glanced over reference books about it, but i have a hunch that it wont be a very successful language. i may turn out to be mistaken; making predictions about technology is a dangerous business. but for what its worth, as a sort of time capsule, heres why i dont like the look of java: 1. it has been so energetically hyped. real standards dont have to be promoted. no one had to promote c, or unix, or html. a real standard tends to be already established by the time most people hear about it. on the hacker radar screen, perl is as big as java, or bigger, just on the strength of its own merits. 2. its aimed low. in the original java white paper, gosling explicitly says java was designed not to be too difficult for programmers used to c. it was designed to be another c++: c plus a few ideas taken from more advanced languages. like the creators of sitcoms or junk food or package tours, javas designers were consciously designing a product for people not as smart as them. historically, languages designed for other people to use have been bad: cobol, pl/i, pascal, ada, c++. the good languages have been those that were designed for their own creators: c, perl, smalltalk, lisp. 3. it has ulterior motives. someone once said that the world would be a better place if people only wrote books because they had something to say, rather than because they wanted to write a book. likewise, the reason we hear about java all the time is not because it has something to say about programming languages. we hear about java as part of a plan by sun to undermine microsoft. 4. no one loves it. c, perl, python, smalltalk, and lisp programmers love their languages. ive never heard anyone say that they loved java. 5. people are forced to use it. a lot of the people i know using java are using it because they feel they have to. either its something they felt they had to do to get funded, or something they thought customers would want, or something they were told to do by management. these are smart people; if the technology was good, theyd have used it voluntarily. 6. it has too many cooks. the best programming languages have been developed by small groups. java seems to be run by a committee. if it turns out to be a good language, it will be the first time in history that a committee has designed a good language. 7. its bureaucratic. from what little i know about java, there seem to be a lot of protocols for doing things. really good languages arent like that. they let you do what you want and get out of the way. 8. its pseudo-hip. sun now pretends that java is a grassroots, open-source language effort like perl or python. this one just happens to be controlled by a giant company. so the language is likely to have the same drab clunkiness as anything else that comes out of a big company. 9. its designed for large organizations. large organizations have different aims from hackers. they want languages that are (believed to be) suitable for use by large teams of mediocre programmers-- languages with features that, like the speed limiters in u-haul trucks, prevent fools from doing too much damage. hackers dont like a language that talks down to them. hackers just want power. historically, languages designed for large organizations (pl/i, ada) have lost, while hacker languages (c, perl) have won. the reason: todays teenage hacker is tomorrows cto. 10. the wrong people like it. the programmers i admire most are not, on the whole, captivated by java. who does like java? suits, who dont know one language from another, but know that they keep hearing about java in the press; programmers at big companies, who are amazed to find that there is something even better than c++; and plug-and-chug undergrads, who are ready to like anything that might get them a job (will this be on the test?). these peoples opinions change with every wind. 11. its daddy is in a pinch. suns business model is being undermined on two fronts. cheap intel processors, of the same type used in desktop machines, are now more than fast enough for servers. and freebsd seems to be at least as good an os for servers as solaris. suns advertising implies that you need sun servers for industrial strength applications. if this were true, yahoo would be first in line to buy suns; but when i worked there, the servers were all intel boxes running freebsd. this bodes ill for suns future. if sun runs into trouble, they could drag java down with them. 12. the dod likes it. the defense department is encouraging developers to use java. this seems to me the most damning sign of all. the defense department does a fine (though expensive) job of defending the country, but they love plans and procedures and protocols. their culture is the opposite of hacker culture; on questions of software they will tend to bet wrong. the last time the dod really liked a programming language, it was ada. bear in mind, this is not a critique of java, but a critique of its cover. i dont know java well enough to like it or dislike it. this is just an explanation of why i dont find that im eager to learn it. it may seem cavalier to dismiss a language before youve even tried writing programs in it. but this is something all programmers have to do. there are too many technologies out there to learn them all. you have to learn to judge by outward signs which will be worth your time. i have likewise cavalierly dismissed cobol, ada, visual basic, the ibm as400, vrml, iso 9000, the set protocol, vms, novell netware, and corba, among others. they just smelled wrong. it could be that in javas case im mistaken. it could be that a language promoted by one big company to undermine another, designed by a committee for a "mainstream" audience, hyped to the skies, and beloved of the dod, happens nonetheless to be a clean, beautiful, powerful language that i would love programming in. it could be, but it seems very unlikely. this essay was originally published at paulgraham.com (this article is derived from a talk given at the 2001 franz developer symposium.) in the summer of 1995, my friend robert morris and i started a startup called viaweb . our plan was to write software that would let end users build online stores. what was novel about this software, at the time, was that it ran on our server, using ordinary web pages as the interface. a lot of people could have been having this idea at the same time, of course, but as far as i know, viaweb was the first web-based application. it seemed such a novel idea to us that we named the company after it: viaweb, because our software worked via the web, instead of running on your desktop computer. another unusual thing about this software was that it was written primarily in a programming language called lisp. it was one of the first big end-user applications to be written in lisp, which up till then had been used mostly in universities and research labs.  eric raymond has written an essay called "how to become a hacker," and in it, among other things, he tells would-be hackers what languages they should learn. he suggests starting with python and java, because they are easy to learn. the serious hacker will also want to learn c, in order to hack unix, and perl for system administration and cgi scripts. finally, the truly serious hacker should consider learning lisp: lisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use lisp itself a lot. this is the same argument you tend to hear for learning latin. it wont get you a job, except perhaps as a classics professor, but it will improve your mind, and make you a better writer in languages you do want to use, like english. but wait a minute. this metaphor doesnt stretch that far. the reason latin wont get you a job is that no one speaks it. if you write in latin, no one can understand you. but lisp is a computer language, and computers speak whatever language you, the programmer, tell them to. so if lisp makes you a better programmer, like he says, why wouldnt you want to use it? if a painter were offered a brush that would make him a better painter, it seems to me that he would want to use it in all his paintings, wouldnt he? im not trying to make fun of eric raymond here. on the whole, his advice is good. what he says about lisp is pretty much the conventional wisdom. but there is a contradiction in the conventional wisdom: lisp will make you a better programmer, and yet you wont use it. why not? programming languages are just tools, after all. if lisp really does yield better programs, you should use it. and if it doesnt, then who needs it? this is not just a theoretical question. software is a very competitive business, prone to natural monopolies. a company that gets software written faster and better will, all other things being equal, put its competitors out of business. and when youre starting a startup, you feel this very keenly. startups tend to be an all or nothing proposition. you either get rich, or you get nothing. in a startup, if you bet on the wrong technology, your competitors will crush you. robert and i both knew lisp well, and we couldnt see any reason not to trust our instincts and go with lisp. we knew that everyone else was writing their software in c++ or perl. but we also knew that that didnt mean anything. if you chose technology that way, youd be running windows. when you choose technology, you have to ignore what other people are doing, and consider only what will work the best. this is especially true in a startup. in a big company, you can do what all the other big companies are doing. but a startup cant do what all the other startups do. i dont think a lot of people realize this, even in startups. the average big company grows at about ten percent a year. so if youre running a big company and you do everything the way the average big company does it, you can expect to do as well as the average big company-- that is, to grow about ten percent a year. the same thing will happen if youre running a startup, of course. if you do everything the way the average startup does it, you should expect average performance. the problem here is, average performance means that youll go out of business. the survival rate for startups is way less than fifty percent. so if youre running a startup, you had better be doing something odd. if not, youre in trouble. back in 1995, we knew something that i dont think our competitors understood, and few understand even now: when youre writing software that only has to run on your own servers, you can use any language you want. when youre writing desktop software, theres a strong bias toward writing applications in the same language as the operating system. ten years ago, writing applications meant writing applications in c. but with web-based software, especially when you have the source code of both the language and the operating system, you can use whatever language you want. this new freedom is a double-edged sword, however. now that you can use any language, you have to think about which one to use. companies that try to pretend nothing has changed risk finding that their competitors do not. if you can use any language, which do you use? we chose lisp. for one thing, it was obvious that rapid development would be important in this market. we were all starting from scratch, so a company that could get new features done before its competitors would have a big advantage. we knew lisp was a really good language for writing software quickly, and server-based applications magnify the effect of rapid development, because you can release software the minute its done. if other companies didnt want to use lisp, so much the better. it might give us a technological edge, and we needed all the help we could get. when we started viaweb, we had no experience in business. we didnt know anything about marketing, or hiring people, or raising money, or getting customers. neither of us had ever even had what you would call a real job. the only thing we were good at was writing software. we hoped that would save us. any advantage we could get in the software department, we would take. so you could say that using lisp was an experiment. our hypothesis was that if we wrote our software in lisp, wed be able to get features done faster than our competitors, and also to do things in our software that they couldnt do. and because lisp was so high-level, we wouldnt need a big development team, so our costs would be lower. if this were so, we could offer a better product for less money, and still make a profit. we would end up getting all the users, and our competitors would get none, and eventually go out of business. that was what we hoped would happen, anyway. what were the results of this experiment? somewhat surprisingly, it worked. we eventually had many competitors, on the order of twenty to thirty of them, but none of their software could compete with ours. we had a wysiwyg online store builder that ran on the server and yet felt like a desktop application. our competitors had cgi scripts. and we were always far ahead of them in features. sometimes, in desperation, competitors would try to introduce features that we didnt have. but with lisp our development cycle was so fast that we could sometimes duplicate a new feature within a day or two of a competitor announcing it in a press release. by the time journalists covering the press release got round to calling us, we would have the new feature too. it must have seemed to our competitors that we had some kind of secret weapon-- that we were decoding their enigma traffic or something. in fact we did have a secret weapon, but it was simpler than they realized. no one was leaking news of their features to us. we were just able to develop software faster than anyone thought possible. when i was about nine i happened to get hold of a copy of the day of the jackal, by frederick forsyth. the main character is an assassin who is hired to kill the president of france. the assassin has to get past the police to get up to an apartment that overlooks the presidents route. he walks right by them, dressed up as an old man on crutches, and they never suspect him. our secret weapon was similar. we wrote our software in a weird ai language, with a bizarre syntax full of parentheses. for years it had annoyed me to hear lisp described that way. but now it worked to our advantage. in business, there is nothing more valuable than a technical advantage your competitors dont understand. in business, as in war, surprise is worth as much as force. and so, im a little embarrassed to say, i never said anything publicly about lisp while we were working on viaweb. we never mentioned it to the press, and if you searched for lisp on our web site, all youd find were the titles of two books in my bio. this was no accident. a startup should give its competitors as little information as possible. if they didnt know what language our software was written in, or didnt care, i wanted to keep it that way. the people who understood our technology best were the customers. they didnt care what language viaweb was written in either, but they noticed that it worked really well. it let them build great looking online stores literally in minutes. and so, by word of mouth mostly, we got more and more users. by the end of 1996 we had about 70 stores online. at the end of 1997 we had 500. six months later, when yahoo bought us, we had 1070 users. today, as yahoo store, this software continues to dominate its market. its one of the more profitable pieces of yahoo, and the stores built with it are the foundation of yahoo shopping. i left yahoo in 1999, so i dont know exactly how many users they have now, but the last i heard there were about 20,000. whats so great about lisp? and if lisp is so great, why doesnt everyone use it? these sound like rhetorical questions, but actually they have straightforward answers. lisp is so great not because of some magic quality visible only to devotees, but because it is simply the most powerful language available. and the reason everyone doesnt use it is that programming languages are not merely technologies, but habits of mind as well, and nothing changes slower. of course, both these answers need explaining. ill begin with a shockingly controversial statement: programming languages vary in power. few would dispute, at least, that high level languages are more powerful than machine language. most programmers today would agree that you do not, ordinarily, want to program in machine language. instead, you should program in a high-level language, and have a compiler translate it into machine language for you. this idea is even built into the hardware now: since the 1980s, instruction sets have been designed for compilers rather than human programmers. everyone knows its a mistake to write your whole program by hand in machine language. whats less often understood is that there is a more general principle here: that if you have a choice of several languages, it is, all other things being equal, a mistake to program in anything but the most powerful one.  there are many exceptions to this rule. if youre writing a program that has to work very closely with a program written in a certain language, it might be a good idea to write the new program in the same language. if youre writing a program that only has to do something very simple, like number crunching or bit manipulation, you may as well use a less abstract language, especially since it may be slightly faster. and if youre writing a short, throwaway program, you may be better off just using whatever language has the best library functions for the task. but in general, for application software, you want to be using the most powerful (reasonably efficient) language you can get, and using anything else is a mistake, of exactly the same kind, though possibly in a lesser degree, as programming in machine language. you can see that machine language is very low level. but, at least as a kind of social convention, high-level languages are often all treated as equivalent. theyre not. technically the term "high-level language" doesnt mean anything very definite. theres no dividing line with machine languages on one side and all the high-level languages on the other. languages fall along a continuum  of abstractness, from the most powerful all the way down to machine languages, which themselves vary in power. consider cobol. cobol is a high-level language, in the sense that it gets compiled into machine language. would anyone seriously argue that cobol is equivalent in power to, say, python? its probably closer to machine language than python. or how about perl 4? between perl 4 and perl 5, lexical closures got added to the language. most perl hackers would agree that perl 5 is more powerful than perl 4. but once youve admitted that, youve admitted that one high level language can be more powerful than another. and it follows inexorably that, except in special cases, you ought to use the most powerful you can get. this idea is rarely followed to its conclusion, though. after a certain age, programmers rarely switch languages voluntarily. whatever language people happen to be used to, they tend to consider just good enough. programmers get very attached to their favorite languages, and i dont want to hurt anyones feelings, so to explain this point im going to use a hypothetical language called blub. blub falls right in the middle of the abstractness continuum. it is not the most powerful language, but it is more powerful than cobol or machine language. and in fact, our hypothetical blub programmer wouldnt use either of them. of course he wouldnt program in machine language. thats what compilers are for. and as for cobol, he doesnt know how anyone can get anything done with it. it doesnt even have x (blub feature of your choice). as long as our hypothetical blub programmer is looking down the power continuum, he knows hes looking down. languages less powerful than blub are obviously less powerful, because theyre missing some feature hes used to. but when our hypothetical blub programmer looks in the other direction, up the power continuum, he doesnt realize hes looking up. what he sees are merely weird languages. he probably considers them about equivalent in power to blub, but with all this other hairy stuff thrown in as well. blub is good enough for him, because he thinks in blub. when we switch to the point of view of a programmer using any of the languages higher up the power continuum, however, we find that he in turn looks down upon blub. how can you get anything done in blub? it doesnt even have y. by induction, the only programmers in a position to see all the differences in power between the various languages are those who understand the most powerful one. (this is probably what eric raymond meant about lisp making you a better programmer.) you cant trust the opinions of the others, because of the blub paradox: theyre satisfied with whatever language they happen to use, because it dictates the way they think about programs. i know this from my own experience, as a high school kid writing programs in basic. that language didnt even support recursion. its hard to imagine writing programs without using recursion, but i didnt miss it at the time. i thought in basic. and i was a whiz at it. master of all i surveyed. the five languages that eric raymond recommends to hackers fall at various points on the power continuum. where they fall relative to one another is a sensitive topic. what i will say is that i think lisp is at the top. and to support this claim ill tell you about one of the things i find missing when i look at the other four languages. how can you get anything done in them, i think, without macros?  many languages have something called a macro. but lisp macros are unique. and believe it or not, what they do is related to the parentheses. the designers of lisp didnt put all those parentheses in the language just to be different. to the blub programmer, lisp code looks weird. but those parentheses are there for a reason. they are the outward evidence of a fundamental difference between lisp and other languages. lisp code is made out of lisp data objects. and not in the trivial sense that the source files contain characters, and strings are one of the data types supported by the language. lisp code, after its read by the parser, is made of data structures that you can traverse. if you understand how compilers work, whats really going on is not so much that lisp has a strange syntax as that lisp has no syntax. you write programs in the parse trees that get generated within the compiler when other languages are parsed. but these parse trees are fully accessible to your programs. you can write programs that manipulate them. in lisp, these programs are called macros. they are programs that write programs. programs that write programs? when would you ever want to do that? not very often, if you think in cobol. all the time, if you think in lisp. it would be convenient here if i could give an example of a powerful macro, and say there! how about that? but if i did, it would just look like gibberish to someone who didnt know lisp; there isnt room here to explain everything youd need to know to understand what it meant. in ansi common lisp i tried to move things along as fast as i could, and even so i didnt get to macros until page 160. but i think i can give a kind of argument that might be convincing. the source code of the viaweb editor was probably about 20-25% macros. macros are harder to write than ordinary lisp functions, and its considered to be bad style to use them when theyre not necessary. so every macro in that code is there because it has to be. what that means is that at least 20-25% of the code in this program is doing things that you cant easily do in any other language. however skeptical the blub programmer might be about my claims for the mysterious powers of lisp, this ought to make him curious. we werent writing this code for our own amusement. we were a tiny startup, programming as hard as we could in order to put technical barriers between us and our competitors. a suspicious person might begin to wonder if there was some correlation here. a big chunk of our code was doing things that are very hard to do in other languages. the resulting software did things our competitors software couldnt do. maybe there was some kind of connection. i encourage you to follow that thread. there may be more to that old man hobbling along on his crutches than meets the eye. but i dont expect to convince anyone ( over 25 ) to go out and learn lisp. the purpose of this article is not to change anyones mind, but to reassure people already interested in using lisp-- people who know that lisp is a powerful language, but worry because it isnt widely used. in a competitive situation, thats an advantage. lisps power is multiplied by the fact that your competitors dont get it. if you think of using lisp in a startup, you shouldnt worry that it isnt widely understood. you should hope that it stays that way. and its likely to. its the nature of programming languages to make most people satisfied with whatever they currently use. computer hardware changes so much faster than personal habits that programming practice is usually ten to twenty years behind the processor. at places like mit they were writing programs in high-level languages in the early 1960s, but many companies continued to write code in machine language well into the 1980s. i bet a lot of people continued to write machine language until the processor, like a bartender eager to close up and go home, finally kicked them out by switching to a risc instruction set. ordinarily technology changes fast. but programming languages are different: programming languages are not just technology, but what programmers think in. theyre half technology and half religion. and so the median language, meaning whatever language the median programmer uses, moves as slow as an iceberg. garbage collection, introduced by lisp in about 1960, is now widely considered to be a good thing. runtime typing, ditto, is growing in popularity. lexical closures, introduced by lisp in the early 1970s, are now, just barely, on the radar screen. macros, introduced by lisp in the mid 1960s, are still terra incognita. obviously, the median language has enormous momentum. im not proposing that you can fight this powerful force. what im proposing is exactly the opposite: that, like a practitioner of aikido, you can use it against your opponents. if you work for a big company, this may not be easy. you will have a hard time convincing the pointy-haired boss to let you build things in lisp, when he has just read in the paper that some other language is poised, like ada was twenty years ago, to take over the world. but if you work for a startup that doesnt have pointy-haired bosses yet, you can, like we did, turn the blub paradox to your advantage: you can use technology that your competitors, glued immovably to the median language, will never be able to match. if you ever do find yourself working for a startup, heres a handy tip for evaluating competitors. read their job listings. everything else on their site may be stock photos or the prose equivalent, but the job listings have to be specific about what they want, or theyll get the wrong candidates. during the years we worked on viaweb i read a lot of job descriptions. a new competitor seemed to emerge out of the woodwork every month or so. the first thing i would do, after checking to see if they had a live online demo, was look at their job listings. after a couple years of this i could tell which companies to worry about and which not to. the more of an it flavor the job descriptions had, the less dangerous the company was. the safest kind were the ones that wanted oracle experience. you never had to worry about those. you were also safe if they said they wanted c++ or java developers. if they wanted perl or python programmers, that would be a bit frightening-- thats starting to sound like a company where the technical side, at least, is run by real hackers. if i had ever seen a job posting looking for lisp hackers, i would have been really worried.  viaweb at first had two parts: the editor, written in lisp, which people used to build their sites, and the ordering system, written in c, which handled orders. the first version was mostly lisp, because the ordering system was small. later we added two more modules, an image generator written in c, and a back-office manager written mostly in perl. in january 2003, yahoo released a new version of the editor written in c++ and perl. its hard to say whether the program is no longer written in lisp, though, because to translate this program into c++ they literally had to write a lisp interpreter: the source files of all the page-generating templates are still, as far as i know, lisp code. (see greenspuns tenth rule .)  robert morris says that i didnt need to be secretive, because even if our competitors had known we were using lisp, they wouldnt have understood why: "if they were that smart theyd already be programming in lisp."  all languages are equally powerful in the sense of being turing equivalent, but thats not the sense of the word programmers care about. (no one wants to program a turing machine.) the kind of power programmers care about may not be formally definable, but one way to explain it would be to say that it refers to features you could only get in the less powerful language by writing an interpreter for the more powerful language in it. if language a has an operator for removing spaces from strings and language b doesnt, that probably doesnt make a more powerful, because you can probably write a subroutine to do it in b. but if a supports, say, recursion, and b doesnt, thats not likely to be something you can fix by writing library functions.  note to nerds: or possibly a lattice, narrowing toward the top; its not the shape that matters here but the idea that there is at least a partial order.  it is a bit misleading to treat macros as a separate feature. in practice their usefulness is greatly enhanced by other lisp features like lexical closures and rest parameters.  as a result, comparisons of programming languages either take the form of religious wars or undergraduate textbooks so determinedly neutral that theyre really works of anthropology. people who value their peace, or want tenure, avoid the topic. but the question is only half a religious one; there is something there worth studying, especially if you want to design new languages. this essay was originally published at paulgraham.com after a link to beating the averages was posted on slashdot, some readers wanted to hear in more detail about the specific technical advantages we got from using lisp in viaweb. for those who are interested, here are some excerpts from a talk i gave in april 2001 at bbn labs in cambridge, ma. this essay was originally published at paulgraham.com (this essay is from the introduction to on lisp . the text in bold explains the origins of arc s name.) its a long-standing principle of programming style that the functional elements of a program should not be too large. if some component of a program grows beyond the stage where its readily comprehensible, it becomes a mass of complexity which conceals errors as easily as a big city conceals fugitives. such software will be hard to read, hard to test, and hard to debug. in accordance with this principle, a large program must be divided into pieces, and the larger the program, the more it must be divided. how do you divide a program? the traditional approach is called top-down design: you say "the purpose of the program is to do these seven things, so i divide it into seven major subroutines. the first subroutine has to do these four things, so it in turn will have four of its own subroutines," and so on. this process continues until the whole program has the right level of granularity-- each part large enough to do something substantial, but small enough to be understood as a single unit. experienced lisp programmers divide up their programs differently. as well as top-down design, they follow a principle which could be called bottom-up design -- changing the language to suit the problem. in lisp, you dont just write your program down toward the language, you also build the language up toward your program. as youre writing a program you may think "i wish lisp had such-and-such an operator." so you go and write it. afterward you realize that using the new operator would simplify the design of another part of the program, and so on. language and program evolve together. like the border between two warring states, the boundary between language and program is drawn and redrawn, until eventually it comes to rest along the mountains and rivers, the natural frontiers of your problem. in the end your program will look as if the language had been designed for it. and when language and program fit one another well, you end up with code which is clear, small, and efficient. its worth emphasizing that bottom-up design doesnt mean just writing the same program in a different order. when you work bottom-up, you usually end up with a different program. instead of a single, monolithic program, you will get a larger language with more abstract operators, and a smaller program written in it. instead of a lintel, youll get an arch. in typical code, once you abstract out the parts which are merely bookkeeping, whats left is much shorter; the higher you build up the language, the less distance you will have to travel from the top down to it. this brings several advantages: bottom-up design is possible to a certain degree in languages other than lisp. whenever you see library functions, bottom-up design is happening. however, lisp gives you much broader powers in this department, and augmenting the language plays a proportionately larger role in lisp style-- so much so that lisp is not just a different language, but a whole different way of programming. its true that this style of development is better suited to programs which can be written by small groups. however, at the same time, it extends the limits of what can be done by a small group. in the mythical man-month , frederick brooks proposed that the productivity of a group of programmers does not grow linearly with its size. as the size of the group increases, the productivity of individual programmers goes down. the experience of lisp programming suggests a more cheerful way to phrase this law: as the size of the group decreases, the productivity of individual programmers goes up. a small group wins, relatively speaking, simply because its smaller. when a small group also takes advantage of the techniques that lisp makes possible, it can win outright . new: download on lisp for free .  "but no one can read the program without understanding all your new utilities." to see why such statements are usually mistaken, see section 4.8. this essay was originally published at paulgraham.com i was thinking recently how inconvenient it was not to have a general term for iphones, ipads, and the corresponding things running android. the closest to a general term seems to be "mobile devices," but that (a) applies to any mobile phone, and (b) doesnt really capture whats distinctive about the ipad. after a few seconds it struck me that what well end up calling these things is tablets. the only reason we even consider calling them "mobile devices" is that the iphone preceded the ipad. if the ipad had come first, we wouldnt think of the iphone as a phone; wed think of it as a tablet small enough to hold up to your ear. the iphone isnt so much a phone as a replacement for a phone. thats an important distinction, because its an early instance of what will become a common pattern. many if not most of the special-purpose objects around us are going to be replaced by apps running on tablets. this is already clear in cases like gpses, music players, and cameras. but i think it will surprise people how many things are going to get replaced. we funded one startup thats replacing keys . the fact that you can change font sizes easily means the ipad effectively replaces reading glasses. i wouldnt be surprised if by playing some clever tricks with the accelerometer you could even replace the bathroom scale. the advantages of doing things in software on a single device are so great that everything that can get turned into software will. so for the next couple years, a good recipe for startups will be to look around you for things that people havent realized yet can be made unnecessary by a tablet app. in 1938 buckminster fuller coined the term ephemeralization to describe the increasing tendency of physical machinery to be replaced by what we would now call software. the reason tablets are going to take over the world is not (just) that steve jobs and co are industrial design wizards, but because they have this force behind them. the iphone and the ipad have effectively drilled a hole that will allow ephemeralization to flow into a lot of new areas. no one who has studied the history of technology would want to underestimate the power of that force. i worry about the power apple could have with this force behind them. i dont want to see another era of client monoculture like the microsoft one in the 80s and 90s. but if ephemeralization is one of the main forces driving the spread of tablets, that suggests a way to compete with apple: be a better platform for it. it has turned out to be a great thing that apple tablets have accelerometers in them. developers have used the accelerometer in ways apple could never have imagined. thats the nature of platforms. the more versatile the tool, the less you can predict how people will use it. so tablet makers should be thinking: what else can we put in there? not merely hardware, but software too. what else can we give developers access to? give hackers an inch and theyll take you a mile. thanks to sam altman, paul buchheit, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com i wrote this for forbes, who asked me to write something about the qualities we look for in founders. in print they had to cut the last item because they didnt have room. this has turned out to be the most important quality in startup founders. we thought when we started y combinator that the most important quality would be intelligence. thats the myth in the valley. and certainly you dont want founders to be stupid. but as long as youre over a certain threshold of intelligence, what matters most is determination. youre going to hit a lot of obstacles. you cant be the sort of person who gets demoralized easily. bill clerico and rich aberman of wepay are a good example. theyre doing a finance startup, which means endless negotiations with big, bureaucratic companies. when youre starting a startup that depends on deals with big companies to exist, it often feels like theyre trying to ignore you out of existence. but when bill clerico starts calling you, you may as well do what he asks, because he is not going away. you do not however want the sort of determination implied by phrases like "dont give up on your dreams." the world of startups is so unpredictable that you need to be able to modify your dreams on the fly. the best metaphor ive found for the combination of determination and flexibility you need is a running back . hes determined to get downfield, but at any given moment he may need to go sideways or even backwards to get there. the current record holder for flexibility may be daniel gross of greplin . he applied to yc with some bad ecommerce idea. we told him wed fund him if he did something else. he thought for a second, and said ok. he then went through two more ideas before settling on greplin. hed only been working on it for a couple days when he presented to investors at demo day, but he got a lot of interest. he always seems to land on his feet. intelligence does matter a lot of course. it seems like the type that matters most is imagination. its not so important to be able to solve predefined problems quickly as to be able to come up with surprising new ideas. in the startup world, most good ideas seem bad initially. if they were obviously good, someone would already be doing them. so you need the kind of intelligence that produces ideas with just the right level of craziness. airbnb is that kind of idea. in fact, when we funded airbnb, we thought it was too crazy. we couldnt believe large numbers of people would want to stay in other peoples places. we funded them because we liked the founders so much. as soon as we heard theyd been supporting themselves by selling obama and mccain branded breakfast cereal, they were in. and it turned out the idea was on the right side of crazy after all. though the most successful founders are usually good people, they tend to have a piratical gleam in their eye. theyre not goody two-shoes type good. morally, they care about getting the big questions right, but not about observing proprieties. thats why id use the word naughty rather than evil. they delight in breaking rules , but not rules that matter. this quality may be redundant though; it may be implied by imagination. sam altman of loopt is one of the most successful alumni, so we asked him what question we could put on the y combinator application that would help us discover more people like him. he said to ask about a time when theyd hacked something to their advantagehacked in the sense of beating the system, not breaking into computers. it has become one of the questions we pay most attention to when judging applications. empirically it seems to be hard to start a startup with just one founder . most of the big successes have two or three. and the relationship between the founders has to be strong. they must genuinely like one another, and work well together. startups do to the relationship between the founders what a dog does to a sock: if it can be pulled apart, it will be. emmett shear and justin kan of justin.tv are a good example of close friends who work well together. theyve known each other since second grade. they can practically read one anothers minds. im sure they argue, like all founders, but i have never once sensed any unresolved tension between them. thanks to jessica livingston and chris steiner for reading drafts of this. this essay was originally published at paulgraham.com after barely changing at all for decades, the startup funding business is now in what could, at least by comparison, be called turmoil. at y combinator weve seen dramatic changes in the funding environment for startups. fortunately one of them is much higher valuations. the trends weve been seeing are probably not yc-specific. i wish i could say they were, but the main cause is probably just that we see trends firstpartly because the startups we fund are very plugged into the valley and are quick to take advantage of anything new, and partly because we fund so many that we have enough data points to see patterns clearly. what were seeing now, everyones probably going to be seeing in the next couple years. so im going to explain what were seeing, and what that will mean for you if you try to raise money. let me start by describing what the world of startup funding used to look like. there used to be two sharply differentiated types of investors: angels and venture capitalists. angels are individual rich people who invest small amounts of their own money, while vcs are employees of funds that invest large amounts of other peoples. for decades there were just those two types of investors, but now a third type has appeared halfway between them: the so-called super-angels.  and vcs have been provoked by their arrival into making a lot of angel-style investments themselves. so the previously sharp line between angels and vcs has become hopelessly blurred. there used to be a no mans land between angels and vcs. angels would invest $20k to $50k apiece, and vcs usually a million or more. so an angel round meant a collection of angel investments that combined to maybe $200k, and a vc round meant a series a round in which a single vc fund (or occasionally two) invested $1-5 million. the no mans land between angels and vcs was a very inconvenient one for startups, because it coincided with the amount many wanted to raise. most startups coming out of demo day wanted to raise around $400k. but it was a pain to stitch together that much out of angel investments, and most vcs werent interested in investments so small. thats the fundamental reason the super-angels have appeared. theyre responding to the market. the arrival of a new type of investor is big news for startups, because there used to be only two and they rarely competed with one another. super-angels compete with both angels and vcs. thats going to change the rules about how to raise money. i dont know yet what the new rules will be, but it looks like most of the changes will be for the better. a super-angel has some of the qualities of an angel, and some of the qualities of a vc. theyre usually individuals, like angels. in fact many of the current super-angels were initially angels of the classic type. but like vcs, they invest other peoples money. this allows them to invest larger amounts than angels: a typical super-angel investment is currently about $100k. they make investment decisions quickly, like angels. and they make a lot more investments per partner than vcsup to 10 times as many. the fact that super-angels invest other peoples money makes them doubly alarming to vcs. they dont just compete for startups; they also compete for investors. what super-angels really are is a new form of fast-moving, lightweight vc fund. and those of us in the technology world know what usually happens when something comes along that can be described in terms like that. usually its the replacement. will it be? as of now, few of the startups that take money from super-angels are ruling out taking vc money. theyre just postponing it. but thats still a problem for vcs. some of the startups that postpone raising vc money may do so well on the angel money they raise that they never bother to raise more. and those who do raise vc rounds will be able to get higher valuations when they do. if the best startups get 10x higher valuations when they raise series a rounds, that would cut vcs returns from winners at least tenfold.  so i think vc funds are seriously threatened by the super-angels. but one thing that may save them to some extent is the uneven distribution of startup outcomes: practically all the returns are concentrated in a few big successes. the expected value of a startup is the percentage chance its google. so to the extent that winning is a matter of absolute returns, the super-angels could win practically all the battles for individual startups and yet lose the war, if they merely failed to get those few big winners. and theres a chance that could happen, because the top vc funds have better brands, and can also do more for their portfolio companies.  because super-angels make more investments per partner, they have less partner per investment. they cant pay as much attention to you as a vc on your board could. how much is that extra attention worth? it will vary enormously from one partner to another. theres no consensus yet in the general case. so for now this is something startups are deciding individually. till now, vcs claims about how much value they added were sort of like the governments. maybe they made you feel better, but you had no choice in the matter, if you needed money on the scale only vcs could supply. now that vcs have competitors, thats going to put a market price on the help they offer. the interesting thing is, no one knows yet what it will be. do startups that want to get really big need the sort of advice and connections only the top vcs can supply? or would super-angel money do just as well? the vcs will say you need them, and the super-angels will say you dont. but the truth is, no one knows yet, not even the vcs and super-angels themselves. all the super-angels know is that their new model seems promising enough to be worth trying, and all the vcs know is that it seems promising enough to worry about. whatever the outcome, the conflict between vcs and super-angels is good news for founders. and not just for the obvious reason that more competition for deals means better terms. the whole shape of deals is changing. one of the biggest differences between angels and vcs is the amount of your company they want. vcs want a lot. in a series a round they want a third of your company, if they can get it. they dont care much how much they pay for it, but they want a lot because the number of series a investments they can do is so small. in a traditional series a investment, at least one partner from the vc fund takes a seat on your board.  since board seats last about 5 years and each partner cant handle more than about 10 at once, that means a vc fund can only do about 2 series a deals per partner per year. and that means they need to get as much of the company as they can in each one. youd have to be a very promising startup indeed to get a vc to use up one of his 10 board seats for only a few percent of you. since angels generally dont take board seats, they dont have this constraint. theyre happy to buy only a few percent of you. and although the super-angels are in most respects mini vc funds, theyve retained this critical property of angels. they dont take board seats, so they dont need a big percentage of your company. though that means youll get correspondingly less attention from them, its good news in other respects. founders never really liked giving up as much equity as vcs wanted. it was a lot of the company to give up in one shot. most founders doing series a deals would prefer to take half as much money for half as much stock, and then see what valuation they could get for the second half of the stock after using the first half of the money to increase its value. but vcs never offered that option. now startups have another alternative. now its easy to raise angel rounds about half the size of series a rounds. many of the startups we fund are taking this route, and i predict that will be true of startups in general. a typical big angel round might be $600k on a convertible note with a valuation cap of $4 million premoney. meaning that when the note converts into stock (in a later round, or upon acquisition), the investors in that round will get .6 / 4.6, or 13% of the company. thats a lot less than the 30 to 40% of the company you usually give up in a series a round if you do it so early.  but the advantage of these medium-sized rounds is not just that they cause less dilution. you also lose less control. after an angel round, the founders almost always still have control of the company, whereas after a series a round they often dont. the traditional board structure after a series a round is two founders, two vcs, and a (supposedly) neutral fifth person. plus series a terms usually give the investors a veto over various kinds of important decisions, including selling the company. founders usually have a lot of de facto control after a series a, as long as things are going well. but thats not the same as just being able to do what you want, like you could before. a third and quite significant advantage of angel rounds is that theyre less stressful to raise. raising a traditional series a round has in the past taken weeks, if not months. when a vc firm can only do 2 deals per partner per year, theyre careful about which they do. to get a traditional series a round you have to go through a series of meetings, culminating in a full partner meeting where the firm as a whole says yes or no. thats the really scary part for founders: not just that series a rounds take so long, but at the end of this long process the vcs might still say no. the chance of getting rejected after the full partner meeting averages about 25%. at some firms its over 50%. fortunately for founders, vcs have been getting a lot faster. nowadays valley vcs are more likely to take 2 weeks than 2 months. but theyre still not as fast as angels and super-angels, the most decisive of whom sometimes decide in hours. raising an angel round is not only quicker, but you get feedback as it progresses. an angel round is not an all or nothing thing like a series a. its composed of multiple investors with varying degrees of seriousness, ranging from the upstanding ones who commit unequivocally to the jerks who give you lines like "come back to me to fill out the round." you usually start collecting money from the most committed investors and work your way out toward the ambivalent ones, whose interest increases as the round fills up. but at each point you know how youre doing. if investors turn cold you may have to raise less, but when investors in an angel round turn cold the process at least degrades gracefully, instead of blowing up in your face and leaving you with nothing, as happens if you get rejected by a vc fund after a full partner meeting. whereas if investors seem hot, you can not only close the round faster, but now that convertible notes are becoming the norm, actually raise the price to reflect demand. however, the vcs have a weapon they can use against the super-angels, and they have started to use it. vcs have started making angel-sized investments too. the term "angel round" doesnt mean that all the investors in it are angels; it just describes the structure of the round. increasingly the participants include vcs making investments of a hundred thousand or two. and when vcs invest in angel rounds they can do things that super-angels dont like. vcs are quite valuation-insensitive in angel roundspartly because they are in general, and partly because they dont care that much about the returns on angel rounds, which they still view mostly as a way to recruit startups for series a rounds later. so vcs who invest in angel rounds can blow up the valuations for angels and super-angels who invest in them.  some super-angels seem to care about valuations. several turned down yc-funded startups after demo day because their valuations were too high. this was not a problem for the startups; by definition a high valuation means enough investors were willing to accept it. but it was mysterious to me that the super-angels would quibble about valuations. did they not understand that the big returns come from a few big successes, and that it therefore mattered far more which startups you picked than how much you paid for them? after thinking about it for a while and observing certain other signs, i have a theory that explains why the super-angels may be smarter than they seem. it would make sense for super-angels to want low valuations if theyre hoping to invest in startups that get bought early. if youre hoping to hit the next google, you shouldnt care if the valuation is 20 million. but if youre looking for companies that are going to get bought for 30 million, you care. if you invest at 20 and the company gets bought for 30, you only get 1.5x. you might as well buy apple. so if some of the super-angels were looking for companies that could get acquired quickly, that would explain why theyd care about valuations. but why would they be looking for those? because depending on the meaning of "quickly," it could actually be very profitable. a company that gets acquired for 30 million is a failure to a vc, but it could be a 10x return for an angel, and moreover, a quick 10x return. rate of return is what matters in investingnot the multiple you get, but the multiple per year. if a super-angel gets 10x in one year, thats a higher rate of return than a vc could ever hope to get from a company that took 6 years to go public. to get the same rate of return, the vc would have to get a multiple of 106one million x. even google didnt come close to that. so i think at least some super-angels are looking for companies that will get bought. thats the only rational explanation for focusing on getting the right valuations, instead of the right companies. and if so theyll be different to deal with than vcs. theyll be tougher on valuations, but more accomodating if you want to sell early. who will win, the super-angels or the vcs? i think the answer to that is, some of each. theyll each become more like one another. the super-angels will start to invest larger amounts, and the vcs will gradually figure out ways to make more, smaller investments faster. a decade from now the players will be hard to tell apart, and there will probably be survivors from each group. what does that mean for founders? one thing it means is that the high valuations startups are presently getting may not last forever. to the extent that valuations are being driven up by price-insensitive vcs, theyll fall again if vcs become more like super-angels and start to become more miserly about valuations. fortunately if this does happen it will take years. the short term forecast is more competition between investors, which is good news for you. the super-angels will try to undermine the vcs by acting faster, and the vcs will try to undermine the super-angels by driving up valuations. which for founders will result in the perfect combination: funding rounds that close fast, with high valuations. but remember that to get that combination, your startup will have to appeal to both super-angels and vcs. if you dont seem like you have the potential to go public, you wont be able to use vcs to drive up the valuation of an angel round. there is a danger of having vcs in an angel round: the so-called signalling risk. if vcs are only doing it in the hope of investing more later, what happens if they dont? thats a signal to everyone else that they think youre lame. how much should you worry about that? the seriousness of signalling risk depends on how far along you are. if by the next time you need to raise money, you have graphs showing rising revenue or traffic month after month, you dont have to worry about any signals your existing investors are sending. your results will speak for themselves. whereas if the next time you need to raise money you wont yet have concrete results, you may need to think more about the message your investors might send if they dont invest more. im not sure yet how much you have to worry, because this whole phenomenon of vcs doing angel investments is so new. but my instincts tell me you dont have to worry much. signalling risk smells like one of those things founders worry about thats not a real problem. as a rule, the only thing that can kill a good startup is the startup itself. startups hurt themselves way more often than competitors hurt them, for example. i suspect signalling risk is in this category too. one thing yc-funded startups have been doing to mitigate the risk of taking money from vcs in angel rounds is not to take too much from any one vc. maybe that will help, if you have the luxury of turning down money. fortunately, more and more startups will. after decades of competition that could best be described as intramural, the startup funding business is finally getting some real competition. that should last several years at least, and maybe a lot longer. unless theres some huge market crash, the next couple years are going to be a good time for startups to raise money. and thats exciting because it means lots more startups will happen.  ive also heard them called "mini-vcs" and "micro-vcs." i dont know which name will stick. there were a couple predecessors. ron conway had angel funds starting in the 1990s, and in some ways first round capital is closer to a super-angel than a vc fund.  it wouldnt cut their overall returns tenfold, because investing later would probably (a) cause them to lose less on investments that failed, and (b) not allow them to get as large a percentage of startups as they do now. so its hard to predict precisely what would happen to their returns.  the brand of an investor derives mostly from the success of their portfolio companies. the top vcs thus have a big brand advantage over the super-angels. they could make it self-perpetuating if they used it to get all the best new startups. but i dont think theyll be able to. to get all the best startups, you have to do more than make them want you. you also have to want them; you have to recognize them when you see them, and thats much harder. super-angels will snap up stars that vcs miss. and that will cause the brand gap between the top vcs and the super-angels gradually to erode.  though in a traditional series a round vcs put two partners on your board, there are signs now that vcs may begin to conserve board seats by switching to what used to be considered an angel-round board, consisting of two founders and one vc. which is also to the founders advantage if it means they still control the company.  in a series a round, you usually have to give up more than the actual amount of stock the vcs buy, because they insist you dilute yourselves to set aside an "option pool" as well. i predict this practice will gradually disappear though.  the best thing for founders, if they can get it, is a convertible note with no valuation cap at all. in that case the money invested in the angel round just converts into stock at the valuation of the next round, no matter how large. angels and super-angels tend not to like uncapped notes. they have no idea how much of the company theyre buying. if the company does well and the valuation of the next round is high, they may end up with only a sliver of it. so by agreeing to uncapped notes, vcs who dont care about valuations in angel rounds can make offers that super-angels hate to match.  obviously signalling risk is also not a problem if youll never need to raise more money. but startups are often mistaken about that. thanks to sam altman, john bautista, patrick collison, james lindenbaum, reid hoffman, jessica livingston and harj taggar for reading drafts of this. this essay was originally published at paulgraham.com silicon valley proper is mostly suburban sprawl. at first glance it doesnt seem theres anything to see. its not the sort of place that has conspicuous monuments. but if you look, there are subtle signs youre in a place thats different from other places. stanford is a strange place. structurally it is to an ordinary university what suburbia is to a city. its enormously spread out, and feels surprisingly empty much of the time. but notice the weather. its probably perfect. and notice the beautiful mountains to the west. and though you cant see it, cosmopolitan san francisco is 40 minutes to the north. that combination is much of the reason silicon valley grew up around this university and not some other one. a surprising amount of the work of the valley is done in the cafes on or just off university ave in palo alto. if you visit on a weekday between 10 and 5, youll often see founders pitching investors. in case you cant tell, the founders are the ones leaning forward eagerly, and the investors are the ones sitting back with slightly pained expressions. the office at 165 university ave was googles first. then it was paypals. (now its wepay s.) the interesting thing about it is the location. its a smart move to put a startup in a place with restaurants and people walking around instead of in an office park, because then the people who work there want to stay there, instead of fleeing as soon as conventional working hours end. they go out for dinner together, talk about ideas, and then come back and implement them. its important to realize that googles current location in an office park is not where they started; its just where they were forced to move when they needed more space. facebook was till recently across the street, till they too had to move because they needed more space. palo alto was not originally a suburb. for the first 100 years or so of its existence, it was a college town out in the countryside. then in the mid 1950s it was engulfed in a wave of suburbia that raced down the peninsula. but palo alto north of oregon expressway still feels noticeably different from the area around it. its one of the nicest places in the valley. the buildings are old (though increasingly they are being torn down and replaced with generic mcmansions) and the trees are tall. but houses are very expensivearound $1000 per square foot. this is post-exit silicon valley. its interesting to see the vcs offices on the north side of sand hill road precisely because theyre so boringly uniform. the buildings are all more or less the same, their exteriors express very little, and they are arranged in a confusing maze. (ive been visiting them for years and i still occasionally get lost.) its not a coincidence. these buildings are a pretty accurate reflection of the vc business. if you go on a weekday you may see groups of founders there to meet vcs. but mostly you wont see anyone; bustling is the last word youd use to describe the atmos. visiting sand hill road reminds you that the opposite of "down and dirty" would be "up and clean." its a tossup whether castro street or university ave should be considered the heart of the valley now. university ave would have been 10 years ago. but palo alto is getting expensive. increasingly startups are located in mountain view, and palo alto is a place they come to meet investors. palo alto has a lot of different cafes, but there is one that clearly dominates in mountain view: red rock . google spread out from its first building in mountain view to a lot of the surrounding ones. but because the buildings were built at different times by different people, the place doesnt have the sterile, walled-off feel that a typical large companys headquarters have. it definitely has a flavor of its own though. you sense there is something afoot. the general atmos is vaguely utopian; there are lots of priuses, and people who look like they drive them. you cant get into google unless you know someone there. its very much worth seeing inside if you can, though. ditto for facebook, at the end of california ave in palo alto, though there is nothing to see outside. skyline drive runs along the crest of the santa cruz mountains. on one side is the valley, and on the other is the seawhich because its cold and foggy and has few harbors, plays surprisingly little role in the lives of people in the valley, considering how close it is. along some parts of skyline the dominant trees are huge redwoods, and in others theyre live oaks. redwoods mean those are the parts where the fog off the coast comes in at night; redwoods condense rain out of fog. the mrosd manages a collection of great walking trails off skyline. silicon valley has two highways running the length of it: 101, which is pretty ugly, and 280, which is one of the more beautiful highways in the world. i always take 280 when i have a choice. notice the long narrow lake to the west? thats the san andreas fault. it runs along the base of the hills, then heads uphill through portola valley. one of the mrosd trails runs right along the fault . a string of rich neighborhoods runs along the foothills to the west of 280: woodside, portola valley, los altos hills, saratoga, los gatos. slac goes right under 280 a little bit south of sand hill road. and a couple miles south of that is the valleys equivalent of the "welcome to las vegas" sign: the dish . i skipped the computer history museum because this is a list of where to see the valley itself, not where to see artifacts from it. i also skipped san jose. san jose calls itself the capital of silicon valley, but when people in the valley use the phrase "the city," they mean san francisco. san jose is a dotted line on a map. thanks to sam altman, paul buchheit, patrick collison, and jessica livingston for reading drafts of this. this essay was originally published at paulgraham.com the reason startups have been using more convertible notes in angel rounds is that they make deals close faster. by making it easier for startups to give different prices to different investors, they help them break the sort of deadlock that happens when investors all wait to see who else is going to invest. by far the biggest influence on investors opinions of a startup is the opinion of other investors. there are very, very few who simply decide for themselves. any startup founder can tell you the most common question they hear from investors is not about the founders or the product, but "who else is investing?" that tends to produce deadlocks. raising an old-fashioned fixed-size equity round can take weeks, because all the angels sit around waiting for the others to commit, like competitors in a bicycle sprint who deliberately ride slowly at the start so they can follow whoever breaks first. convertible notes let startups beat such deadlocks by rewarding investors willing to move first with lower (effective) valuations. which they deserve because theyre taking more risk. its much safer to invest in a startup ron conway has already invested in; someone who comes after him should pay a higher price. the reason convertible notes allow more flexibility in price is that valuation caps arent actual valuations, and notes are cheap and easy to do. so you can do high-resolution fundraising: if you wanted you could have a separate note with a different cap for each investor. that cap need not simply rise monotonically. a startup could also give better deals to investors they expected to help them most. the point is simply that different investors, whether because of the help they offer or their willingness to commit, have different values for startups, and their terms should reflect that. different terms for different investors is clearly the way of the future. markets always evolve toward higher resolution. you may not need to use convertible notes to do it. with sufficiently lightweight standardized equity terms (and some changes in investors and lawyers expectations about equity rounds) you might be able to do the same thing with equity instead of debt. either would be fine with startups, so long as they can easily change their valuation. deadlocks werent the only problem with fixed-size equity rounds. another was that startups had to decide in advance how much to raise. i think its a mistake for a startup to fix upon a specific number. if investors are easily convinced, the startup should raise more now, and if investors are skeptical, the startup should take a smaller amount and use that to get the company to the point where its more convincing. its just not reasonable to expect startups to pick an optimal round size in advance, because that depends on the reactions of investors, and those are impossible to predict. fixed-size, multi-investor angel rounds are such a bad idea for startups that one wonders why things were ever done that way. one possibility is that this custom reflects the way investors like to collude when they can get away with it. but i think the actual explanation is less sinister. i think angels (and their lawyers) organized rounds this way in unthinking imitation of vc series a rounds. in a series a, a fixed-size equity round with a lead makes sense, because there is usually just one big investor, who is unequivocally the lead. fixed-size series a rounds already are high res. but the more investors you have in a round, the less sense it makes for everyone to get the same price. the most interesting question here may be what high res fundraising will do to the world of investors. bolder investors will now get rewarded with lower prices. but more important, in a hits-driven business, is that theyll be able to get into the deals they want. whereas the "who else is investing?" type of investors will not only pay higher prices, but may not be able to get into the best deals at all. thanks to immad akhund, sam altman, john bautista, pete koomen, jessica livingston, dan siroker, harj taggar, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com a startup is a company designed to grow fast. being newly founded does not in itself make a company a startup. nor is it necessary for a startup to work on technology, or take venture funding, or have some sort of "exit." the only essential thing is growth. everything else we associate with startups follows from growth. if you want to start one its important to understand that. startups are so hard that you cant be pointed off to the side and hope to succeed. you have to know that growth is what youre after. the good news is, if you get growth, everything else tends to fall into place. which means you can use growth like a compass to make almost every decision you face. lets start with a distinction that should be obvious but is often overlooked: not every newly founded company is a startup. millions of companies are started every year in the us. only a tiny fraction are startups. most are service businessesrestaurants, barbershops, plumbers, and so on. these are not startups, except in a few unusual cases. a barbershop isnt designed to grow fast. whereas a search engine, for example, is. when i say startups are designed to grow fast, i mean it in two senses. partly i mean designed in the sense of intended, because most startups fail. but i also mean startups are different by nature, in the same way a redwood seedling has a different destiny from a bean sprout. that difference is why theres a distinct word, "startup," for companies designed to grow fast. if all companies were essentially similar, but some through luck or the efforts of their founders ended up growing very fast, we wouldnt need a separate word. we could just talk about super-successful companies and less successful ones. but in fact startups do have a different sort of dna from other businesses. google is not just a barbershop whose founders were unusually lucky and hard-working. google was different from the beginning. to grow rapidly, you need to make something you can sell to a big market. thats the difference between google and a barbershop. a barbershop doesnt scale. for a company to grow really big, it must (a) make something lots of people want, and (b) reach and serve all those people. barbershops are doing fine in the (a) department. almost everyone needs their hair cut. the problem for a barbershop, as for any retail establishment, is (b). a barbershop serves customers in person, and few will travel far for a haircut. and even if they did the barbershop couldnt accomodate them. writing software is a great way to solve (b), but you can still end up constrained in (a). if you write software to teach tibetan to hungarian speakers, youll be able to reach most of the people who want it, but there wont be many of them. if you make software to teach english to chinese speakers, however, youre in startup territory. most businesses are tightly constrained in (a) or (b). the distinctive feature of successful startups is that theyre not. it might seem that it would always be better to start a startup than an ordinary business. if youre going to start a company, why not start the type with the most potential? the catch is that this is a (fairly) efficient market. if you write software to teach tibetan to hungarians, you wont have much competition. if you write software to teach english to chinese speakers, youll face ferocious competition, precisely because thats such a larger prize. the constraints that limit ordinary companies also protect them. thats the tradeoff. if you start a barbershop, you only have to compete with other local barbers. if you start a search engine you have to compete with the whole world. the most important thing that the constraints on a normal business protect it from is not competition, however, but the difficulty of coming up with new ideas. if you open a bar in a particular neighborhood, as well as limiting your potential and protecting you from competitors, that geographic constraint also helps define your company. bar + neighborhood is a sufficient idea for a small business. similarly for companies constrained in (a). your niche both protects and defines you. whereas if you want to start a startup, youre probably going to have to think of something fairly novel. a startup has to make something it can deliver to a large market, and ideas of that type are so valuable that all the obvious ones are already taken. that space of ideas has been so thoroughly picked over that a startup generally has to work on something everyone else has overlooked. i was going to write that one has to make a conscious effort to find ideas everyone else has overlooked. but thats not how most startups get started. usually successful startups happen because the founders are sufficiently different from other people that ideas few others can see seem obvious to them. perhaps later they step back and notice theyve found an idea in everyone elses blind spot, and from that point make a deliberate effort to stay there. but at the moment when successful startups get started, much of the innovation is unconscious. whats different about successful founders is that they can see different problems. its a particularly good combination both to be good at technology and to face problems that can be solved by it, because technology changes so rapidly that formerly bad ideas often become good without anyone noticing. steve wozniaks problem was that he wanted his own computer. that was an unusual problem to have in 1975. but technological change was about to make it a much more common one. because he not only wanted a computer but knew how to build them, wozniak was able to make himself one. and the problem he solved for himself became one that apple solved for millions of people in the coming years. but by the time it was obvious to ordinary people that this was a big market, apple was already established. google has similar origins. larry page and sergey brin wanted to search the web. but unlike most people they had the technical expertise both to notice that existing search engines were not as good as they could be, and to know how to improve them. over the next few years their problem became everyones problem, as the web grew to a size where you didnt have to be a picky search expert to notice the old algorithms werent good enough. but as happened with apple, by the time everyone else realized how important search was, google was entrenched. thats one connection between startup ideas and technology. rapid change in one area uncovers big, soluble problems in other areas. sometimes the changes are advances, and what they change is solubility. that was the kind of change that yielded apple; advances in chip technology finally let steve wozniak design a computer he could afford. but in googles case the most important change was the growth of the web. what changed there was not solubility but bigness. the other connection between startups and technology is that startups create new ways of doing things, and new ways of doing things are, in the broader sense of the word, new technology. when a startup both begins with an idea exposed by technological change and makes a product consisting of technology in the narrower sense (what used to be called "high technology"), its easy to conflate the two. but the two connections are distinct and in principle one could start a startup that was neither driven by technological change, nor whose product consisted of technology except in the broader sense. how fast does a company have to grow to be considered a startup? theres no precise answer to that. "startup" is a pole, not a threshold. starting one is at first no more than a declaration of ones ambitions. youre committing not just to starting a company, but to starting a fast growing one, and youre thus committing to search for one of the rare ideas of that type. but at first you have no more than commitment. starting a startup is like being an actor in that respect. "actor" too is a pole rather than a threshold. at the beginning of his career, an actor is a waiter who goes to auditions. getting work makes him a successful actor, but he doesnt only become an actor when hes successful. so the real question is not what growth rate makes a company a startup, but what growth rate successful startups tend to have. for founders thats more than a theoretical question, because its equivalent to asking if theyre on the right path. the growth of a successful startup usually has three phases: together these three phases produce an s-curve. the phase whose growth defines the startup is the second one, the ascent. its length and slope determine how big the company will be. the slope is the companys growth rate. if theres one number every founder should always know, its the companys growth rate. thats the measure of a startup. if you dont know that number, you dont even know if youre doing well or badly. when i first meet founders and ask what their growth rate is, sometimes they tell me "we get about a hundred new customers a month." thats not a rate. what matters is not the absolute number of new customers, but the ratio of new customers to existing ones. if youre really getting a constant number of new customers every month, youre in trouble, because that means your growth rate is decreasing. during y combinator we measure growth rate per week, partly because there is so little time before demo day, and partly because startups early on need frequent feedback from their users to tweak what theyre doing. a good growth rate during yc is 5-7% a week. if you can hit 10% a week youre doing exceptionally well. if you can only manage 1%, its a sign you havent yet figured out what youre doing. the best thing to measure the growth rate of is revenue. the next best, for startups that arent charging initially, is active users. thats a reasonable proxy for revenue growth because whenever the startup does start trying to make money, their revenues will probably be a constant multiple of active users. we usually advise startups to pick a growth rate they think they can hit, and then just try to hit it every week. the key word here is "just." if they decide to grow at 7% a week and they hit that number, theyre successful for that week. theres nothing more they need to do. but if they dont hit it, theyve failed in the only thing that mattered, and should be correspondingly alarmed. programmers will recognize what were doing here. were turning starting a startup into an optimization problem. and anyone who has tried optimizing code knows how wonderfully effective that sort of narrow focus can be. optimizing code means taking an existing program and changing it to use less of something, usually time or memory. you dont have to think about what the program should do, just make it faster. for most programmers this is very satisfying work. the narrow focus makes it a sort of puzzle, and youre generally surprised how fast you can solve it. focusing on hitting a growth rate reduces the otherwise bewilderingly multifarious problem of starting a startup to a single problem. you can use that target growth rate to make all your decisions for you; anything that gets you the growth you need is ipso facto right. should you spend two days at a conference? should you hire another programmer? should you focus more on marketing? should you spend time courting some big customer? should you add x feature? whatever gets you your target growth rate.  judging yourself by weekly growth doesnt mean you can look no more than a week ahead. once you experience the pain of missing your target one week (it was the only thing that mattered, and you failed at it), you become interested in anything that could spare you such pain in the future. so youll be willing for example to hire another programmer, who wont contribute to this weeks growth but perhaps in a month will have implemented some new feature that will get you more users. but only if (a) the distraction of hiring someone wont make you miss your numbers in the short term, and (b) youre sufficiently worried about whether you can keep hitting your numbers without hiring someone new. its not that you dont think about the future, just that you think about it no more than necessary. in theory this sort of hill-climbing could get a startup into trouble. they could end up on a local maximum. but in practice that never happens. having to hit a growth number every week forces founders to act, and acting versus not acting is the high bit of succeeding. nine times out of ten, sitting around strategizing is just a form of procrastination. whereas founders intuitions about which hill to climb are usually better than they realize. plus the maxima in the space of startup ideas are not spiky and isolated. most fairly good ideas are adjacent to even better ones. the fascinating thing about optimizing for growth is that it can actually discover startup ideas. you can use the need for growth as a form of evolutionary pressure. if you start out with some initial plan and modify it as necessary to keep hitting, say, 10% weekly growth, you may end up with a quite different company than you meant to start. but anything that grows consistently at 10% a week is almost certainly a better idea than you started with. theres a parallel here to small businesses. just as the constraint of being located in a particular neighborhood helps define a bar, the constraint of growing at a certain rate can help define a startup. youll generally do best to follow that constraint wherever it leads rather than being influenced by some initial vision, just as a scientist is better off following the truth wherever it leads rather than being influenced by what he wishes were the case. when richard feynman said that the imagination of nature was greater than the imagination of man, he meant that if you just keep following the truth youll discover cooler things than you could ever have made up. for startups, growth is a constraint much like truth. every successful startup is at least partly a product of the imagination of growth. its hard to find something that grows consistently at several percent a week, but if you do you may have found something surprisingly valuable. if we project forward we see why. a company that grows at 1% a week will grow 1.7x a year, whereas a company that grows at 5% a week will grow 12.6x. a company making $1000 a month (a typical number early in yc) and growing at 1% a week will 4 years later be making $7900 a month, which is less than a good programmer makes in salary in silicon valley. a startup that grows at 5% a week will in 4 years be making $25 million a month. 10  our ancestors must rarely have encountered cases of exponential growth, because our intutitions are no guide here. what happens to fast growing startups tends to surprise even the founders. small variations in growth rate produce qualitatively different outcomes. thats why theres a separate word for startups, and why startups do things that ordinary companies dont, like raising money and getting acquired. and, strangely enough, its also why they fail so frequently. considering how valuable a successful startup can become, anyone familiar with the concept of expected value would be surprised if the failure rate werent high. if a successful startup could make a founder $100 million, then even if the chance of succeeding were only 1%, the expected value of starting one would be $1 million. and the probability of a group of sufficiently smart and determined founders succeeding on that scale might be significantly over 1%. for the right peoplee.g. the young bill gatesthe probability might be 20% or even 50%. so its not surprising that so many want to take a shot at it. in an efficient market, the number of failed startups should be proportionate to the size of the successes. and since the latter is huge the former should be too. what this means is that at any given time, the great majority of startups will be working on something thats never going to go anywhere, and yet glorifying their doomed efforts with the grandiose title of "startup." this doesnt bother me. its the same with other high-beta vocations, like being an actor or a novelist. ive long since gotten used to it. but it seems to bother a lot of people, particularly those whove started ordinary businesses. many are annoyed that these so-called startups get all the attention, when hardly any of them will amount to anything. if they stepped back and looked at the whole picture they might be less indignant. the mistake theyre making is that by basing their opinions on anecdotal evidence theyre implicitly judging by the median rather than the average. if you judge by the median startup, the whole concept of a startup seems like a fraud. you have to invent a bubble to explain why founders want to start them or investors want to fund them. but its a mistake to use the median in a domain with so much variation. if you look at the average outcome rather than the median, you can understand why investors like them, and why, if they arent median people, its a rational choice for founders to start them. why do investors like startups so much? why are they so hot to invest in photo-sharing apps, rather than solid money-making businesses? not only for the obvious reason. the test of any investment is the ratio of return to risk. startups pass that test because although theyre appallingly risky, the returns when they do succeed are so high. but thats not the only reason investors like startups. an ordinary slower-growing business might have just as good a ratio of return to risk, if both were lower. so why are vcs interested only in high-growth companies? the reason is that they get paid by getting their capital back, ideally after the startup ipos, or failing that when its acquired. the other way to get returns from an investment is in the form of dividends. why isnt there a parallel vc industry that invests in ordinary companies in return for a percentage of their profits? because its too easy for people who control a private company to funnel its revenues to themselves (e.g. by buying overpriced components from a supplier they control) while making it look like the company is making little profit. anyone who invested in private companies in return for dividends would have to pay close attention to their books. the reason vcs like to invest in startups is not simply the returns, but also because such investments are so easy to oversee. the founders cant enrich themselves without also enriching the investors. why do founders want to take the vcs money? growth, again. the constraint between good ideas and growth operates in both directions. its not merely that you need a scalable idea to grow. if you have such an idea and dont grow fast enough, competitors will. growing too slowly is particularly dangerous in a business with network effects, which the best startups usually have to some degree. almost every company needs some amount of funding to get started. but startups often raise money even when they are or could be profitable. it might seem foolish to sell stock in a profitable company for less than you think it will later be worth, but its no more foolish than buying insurance. fundamentally thats how the most successful startups view fundraising. they could grow the company on its own revenues, but the extra money and help supplied by vcs will let them grow even faster. raising money lets you choose your growth rate. money to grow faster is always at the command of the most successful startups, because the vcs need them more than they need the vcs. a profitable startup could if it wanted just grow on its own revenues. growing slower might be slightly dangerous, but chances are it wouldnt kill them. whereas vcs need to invest in startups, and in particular the most successful startups, or theyll be out of business. which means that any sufficiently promising startup will be offered money on terms theyd be crazy to refuse. and yet because of the scale of the successes in the startup business, vcs can still make money from such investments. youd have to be crazy to believe your company was going to become as valuable as a high growth rate can make it, but some do. pretty much every successful startup will get acquisition offers too. why? what is it about startups that makes other companies want to buy them?  fundamentally the same thing that makes everyone else want the stock of successful startups: a rapidly growing company is valuable. its a good thing ebay bought paypal, for example, because paypal is now responsible for 43% of their sales and probably more of their growth. but acquirers have an additional reason to want startups. a rapidly growing company is not merely valuable, but dangerous. if it keeps expanding, it might expand into the acquirers own territory. most product acquisitions have some component of fear. even if an acquirer isnt threatened by the startup itself, they might be alarmed at the thought of what a competitor could do with it. and because startups are in this sense doubly valuable to acquirers, acquirers will often pay more than an ordinary investor would. the combination of founders, investors, and acquirers forms a natural ecosystem. it works so well that those who dont understand it are driven to invent conspiracy theories to explain how neatly things sometimes turn out. just as our ancestors did to explain the apparently too neat workings of the natural world. but there is no secret cabal making it all work. if you start from the mistaken assumption that instagram was worthless, you have to invent a secret boss to force mark zuckerberg to buy it. to anyone who knows mark zuckerberg that is the reductio ad absurdum of the initial assumption. the reason he bought instagram was that it was valuable and dangerous, and what made it so was growth. if you want to understand startups, understand growth. growth drives everything in this world. growth is why startups usually work on technologybecause ideas for fast growing companies are so rare that the best way to find new ones is to discover those recently made viable by change, and technology is the best source of rapid change. growth is why its a rational choice economically for so many founders to try starting a startup: growth makes the successful companies so valuable that the expected value is high even though the risk is too. growth is why vcs want to invest in startups: not just because the returns are high but also because generating returns from capital gains is easier to manage than generating returns from dividends. growth explains why the most successful startups take vc money even if they dont need to: it lets them choose their growth rate. and growth explains why successful startups almost invariably get acquisition offers. to acquirers a fast-growing company is not merely valuable but dangerous too. its not just that if you want to succeed in some domain, you have to understand the forces driving it. understanding growth is what starting a startup consists of. what youre really doing (and to the dismay of some observers, all youre really doing) when you start a startup is committing to solve a harder type of problem than ordinary businesses do. youre committing to search for one of the rare ideas that generates rapid growth. because these ideas are so valuable, finding one is hard. the startup is the embodiment of your discoveries so far. starting a startup is thus very much like deciding to be a research scientist: youre not committing to solve any specific problem; you dont know for sure which problems are soluble; but youre committing to try to discover something no one knew before. a startup founder is in effect an economic research scientist. most dont discover anything that remarkable, but some discover relativity.  strictly speaking its not lots of customers you need but a big market, meaning a high product of number of customers times how much theyll pay. but its dangerous to have too few customers even if they pay a lot, or the power that individual customers have over you could turn you into a de facto consulting firm. so whatever market youre in, youll usually do best to err on the side of making the broadest type of product for it.  one year at startup school david heinemeier hansson encouraged programmers who wanted to start businesses to use a restaurant as a model. what he meant, i believe, is that its fine to start software companies constrained in (a) in the same way a restaurant is constrained in (b). i agree. most people should not try to start startups.  that sort of stepping back is one of the things we focus on at y combinator. its common for founders to have discovered something intuitively without understanding all its implications. thats probably true of the biggest discoveries in any field.  i got it wrong in "how to make wealth" when i said that a startup was a small company that takes on a hard technical problem. that is the most common recipe but not the only one.  in principle companies arent limited by the size of the markets they serve, because they could just expand into new markets. but there seem to be limits on the ability of big companies to do that. which means the slowdown that comes from bumping up against the limits of ones markets is ultimately just another way in which internal limits are expressed. it may be that some of these limits could be overcome by changing the shape of the organizationspecifically by sharding it.  this is, obviously, only for startups that have already launched or can launch during yc. a startup building a new database will probably not do that. on the other hand, launching something small and then using growth rate as evolutionary pressure is such a valuable technique that any company that could start this way probably should.  if the startup is taking the facebook/twitter route and building something they hope will be very popular but from which they dont yet have a definite plan to make money, the growth rate has to be higher, even though its a proxy for revenue growth, because such companies need huge numbers of users to succeed at all. beware too of the edge case where something spreads rapidly but the churn is high as well, so that you have good net growth till you run through all the potential users, at which point it suddenly stops.  within yc when we say its ipso facto right to do whatever gets you growth, its implicit that this excludes trickery like buying users for more than their lifetime value, counting users as active when theyre really not, bleeding out invites at a regularly increasing rate to manufacture a perfect growth curve, etc. even if you were able to fool investors with such tricks, youd ultimately be hurting yourself, because youre throwing off your own compass.  which is why its such a dangerous mistake to believe that successful startups are simply the embodiment of some brilliant initial idea. what youre looking for initially is not so much a great idea as an idea that could evolve into a great one. the danger is that promising ideas are not merely blurry versions of great ones. theyre often different in kind, because the early adopters you evolve the idea upon have different needs from the rest of the market. for example, the idea that evolves into facebook isnt merely a subset of facebook; the idea that evolves into facebook is a site for harvard undergrads.  what if a company grew at 1.7x a year for a really long time? could it not grow just as big as any successful startup? in principle yes, of course. if our hypothetical company making $1000 a month grew at 1% a week for 19 years, it would grow as big as a company growing at 5% a week for 4 years. but while such trajectories may be common in, say, real estate development, you dont see them much in the technology business. in technology, companies that grow slowly tend not to grow as big.  any expected value calculation varies from person to person depending on their utility function for money. i.e. the first million is worth more to most people than subsequent millions. how much more depends on the person. for founders who are younger or more ambitious the utility function is flatter. which is probably part of the reason the founders of the most successful startups of all tend to be on the young side.  more precisely, this is the case in the biggest winners, which is where all the returns come from. a startup founder could pull the same trick of enriching himself at the companys expense by selling them overpriced components. but it wouldnt be worth it for the founders of google to do that. only founders of failing startups would even be tempted, but those are writeoffs from the vcs point of view anyway.  acquisitions fall into two categories: those where the acquirer wants the business, and those where the acquirer just wants the employees. the latter type is sometimes called an hr acquisition. though nominally acquisitions and sometimes on a scale that has a significant effect on the expected value calculation for potential founders, hr acquisitions are viewed by acquirers as more akin to hiring bonuses.  i once explained this to some founders who had recently arrived from russia. they found it novel that if you threatened a company theyd pay a premium for you. "in russia they just kill you," they said, and they were only partly joking. economically, the fact that established companies cant simply eliminate new competitors may be one of the most valuable aspects of the rule of law. and so to the extent we see incumbents suppressing competitors via regulations or patent suits, we should worry, not because its a departure from the rule of law per se but from what the rule of law is aiming at. thanks to sam altman, marc andreessen, paul buchheit, patrick collison, jessica livingston, geoff ralston, and harj taggar for reading drafts of this. this essay was originally published at paulgraham.com when i went to work for yahoo after they bought our startup in 1998, it felt like the center of the world. it was supposed to be the next big thing. it was supposed to be what google turned out to be. what went wrong? the problems that hosed yahoo go back a long time, practically to the beginning of the company. they were already very visible when i got there in 1998. yahoo had two problems google didnt: easy money, and ambivalence about being a technology company. the first time i met jerry yang, we thought we were meeting for different reasons. he thought we were meeting so he could check us out in person before buying us. i thought we were meeting so we could show him our new technology, revenue loop. it was a way of sorting shopping search results. merchants bid a percentage of sales for traffic, but the results were sorted not by the bid but by the bid times the average amount a user would buy. it was like the algorithm google uses now to sort ads, but this was in the spring of 1998, before google was founded. revenue loop was the optimal sort for shopping search, in the sense that it sorted in order of how much money yahoo would make from each link. but it wasnt just optimal in that sense. ranking search results by user behavior also makes search better. users train the search: you can start out finding matches based on mere textual similarity, and as users buy more stuff the search results get better and better. jerry didnt seem to care. i was confused. i was showing him technology that extracted the maximum value from search traffic, and he didnt care? i couldnt tell whether i was explaining it badly, or he was just very poker faced. i didnt realize the answer till later, after i went to work at yahoo. it was neither of my guesses. the reason yahoo didnt care about a technique that extracted the full value of traffic was that advertisers were already overpaying for it. if they merely extracted the actual value, theyd have made less. hard as it is to believe now, the big money then was in banner ads. advertisers were willing to pay ridiculous amounts for banner ads. so yahoos sales force had evolved to exploit this source of revenue. led by a large and terrifyingly formidable man called anil singh, yahoos sales guys would fly out to procter & gamble and come back with million dollar orders for banner ad impressions. the prices seemed cheap compared to print, which was what advertisers, for lack of any other reference, compared them to. but they were expensive compared to what they were worth. so these big, dumb companies were a dangerous source of revenue to depend on. but there was another source even more dangerous: other internet startups. by 1998, yahoo was the beneficiary of a de facto ponzi scheme. investors were excited about the internet. one reason they were excited was yahoos revenue growth. so they invested in new internet startups. the startups then used the money to buy ads on yahoo to get traffic. which caused yet more revenue growth for yahoo, and further convinced investors the internet was worth investing in. when i realized this one day, sitting in my cubicle, i jumped up like archimedes in his bathtub, except instead of "eureka!" i was shouting "sell!" both the internet startups and the procter & gambles were doing brand advertising. they didnt care about targeting. they just wanted lots of people to see their ads. so traffic became the thing to get at yahoo. it didnt matter what type.  it wasnt just yahoo. all the search engines were doing it. this was why they were trying to get people to start calling them "portals" instead of "search engines." despite the actual meaning of the word portal, what they meant by it was a site where users would find what they wanted on the site itself, instead of just passing through on their way to other destinations, as they did at a search engine. i remember telling david filo in late 1998 or early 1999 that yahoo should buy google, because i and most of the other programmers in the company were using it instead of yahoo for search. he told me that it wasnt worth worrying about. search was only 6% of our traffic, and we were growing at 10% a month. it wasnt worth doing better. i didnt say "but search traffic is worth more than other traffic!" i said "oh, ok." because i didnt realize either how much search traffic was worth. im not sure even larry and sergey did then. if they had, google presumably wouldnt have expended any effort on enterprise search. if circumstances had been different, the people running yahoo might have realized sooner how important search was. but they had the most opaque obstacle in the world between them and the truth: money. as long as customers were writing big checks for banner ads, it was hard to take search seriously. google didnt have that to distract them. but yahoo also had another problem that made it hard to change directions. theyd been thrown off balance from the start by their ambivalence about being a technology company. one of the weirdest things about yahoo when i went to work there was the way they insisted on calling themselves a "media company." if you walked around their offices, it seemed like a software company. the cubicles were full of programmers writing code, product managers thinking about feature lists and ship dates, support people (yes, there were actually support people) telling users to restart their browsers, and so on, just like a software company. so why did they call themselves a media company? one reason was the way they made money: by selling ads. in 1995 it was hard to imagine a technology company making money that way. technology companies made money by selling their software to users. media companies sold ads. so they must be a media company. another big factor was the fear of microsoft. if anyone at yahoo considered the idea that they should be a technology company, the next thought would have been that microsoft would crush them. its hard for anyone much younger than me to understand the fear microsoft still inspired in 1995. imagine a company with several times the power google has now, but way meaner. it was perfectly reasonable to be afraid of them. yahoo watched them crush the first hot internet company, netscape. it was reasonable to worry that if they tried to be the next netscape, theyd suffer the same fate. how were they to know that netscape would turn out to be microsofts last victim? it would have been a clever move to pretend to be a media company to throw microsoft off their scent. but unfortunately yahoo actually tried to be one, sort of. project managers at yahoo were called "producers," for example, and the different parts of the company were called "properties." but what yahoo really needed to be was a technology company, and by trying to be something else, they ended up being something that was neither here nor there. thats why yahoo as a company has never had a sharply defined identity. the worst consequence of trying to be a media company was that they didnt take programming seriously enough. microsoft (back in the day), google, and facebook have all had hacker-centric cultures. but yahoo treated programming as a commodity. at yahoo, user-facing software was controlled by product managers and designers. the job of programmers was just to take the work of the product managers and designers the final step, by translating it into code. one obvious result of this practice was that when yahoo built things, they often werent very good. but that wasnt the worst problem. the worst problem was that they hired bad programmers. microsoft (back in the day), google, and facebook have all been obsessed with hiring the best programmers. yahoo wasnt. they preferred good programmers to bad ones, but they didnt have the kind of single-minded, almost obnoxiously elitist focus on hiring the smartest people that the big winners have had. and when you consider how much competition there was for programmers when they were hiring, during the bubble, its not surprising that the quality of their programmers was uneven. in technology, once you have bad programmers, youre doomed. i cant think of an instance where a company has sunk into technical mediocrity and recovered. good programmers want to work with other good programmers. so once the quality of programmers at your company starts to drop, you enter a death spiral from which there is no recovery.  at yahoo this death spiral started early. if there was ever a time when yahoo was a google-style talent magnet, it was over by the time i got there in 1998. the company felt prematurely old. most technology companies eventually get taken over by suits and middle managers. at yahoo it felt as if theyd deliberately accelerated this process. they didnt want to be a bunch of hackers. they wanted to be suits. a media company should be run by suits. the first time i visited google, they had about 500 people, the same number yahoo had when i went to work there. but boy did things seem different. it was still very much a hacker-centric culture. i remember talking to some programmers in the cafeteria about the problem of gaming search results (now known as seo), and they asked "what should we do?" programmers at yahoo wouldnt have asked that. theirs was not to reason why; theirs was to build what product managers specd. i remember coming away from google thinking "wow, its still a startup." theres not much we can learn from yahoos first fatal flaw. its probably too much to hope any company could avoid being damaged by depending on a bogus source of revenue. but startups can learn an important lesson from the second one. in the software business, you cant afford not to have a hacker-centric culture. probably the most impressive commitment ive heard to having a hacker-centric culture came from mark zuckerberg, when he spoke at startup school in 2007. he said that in the early days facebook made a point of hiring programmers even for jobs that would not ordinarily consist of programming, like hr and marketing. so which companies need to have a hacker-centric culture? which companies are "in the software business" in this respect? as yahoo discovered, the area covered by this rule is bigger than most people realize. the answer is: any company that needs to have good software. why would great programmers want to work for a company that didnt have a hacker-centric culture, as long as there were others that did? i can imagine two reasons: if they were paid a huge amount, or if the domain was interesting and none of the companies in it were hacker-centric. otherwise you cant attract good programmers to work in a suit-centric culture. and without good programmers you wont get good software, no matter how many people you put on a task, or how many procedures you establish to ensure "quality." hacker culture often seems kind of irresponsible. thats why people proposing to destroy it use phrases like "adult supervision." that was the phrase they used at yahoo. but there are worse things than seeming irresponsible. losing, for example.  the closest we got to targeting when i was there was when we created pets.yahoo.com in order to provoke a bidding war between 3 pet supply startups for the spot as top sponsor.  in theory you could beat the death spiral by buying good programmers instead of hiring them. you can get programmers who would never have come to you as employees by buying their startups. but so far the only companies smart enough to do this are companies smart enough not to need to. thanks to trevor blackwell, jessica livingston, and geoff ralston for reading drafts of this. this essay was originally published at paulgraham.com two years ago i wrote about what i called " a huge, unexploited opportunity in startup funding :" the growing disconnect between vcs, whose current business model requires them to invest large amounts, and a large class of startups that need less than they used to. increasingly, startups want a couple hundred thousand dollars, not a couple million.  the opportunity is a lot less unexploited now. investors have poured into this territory from both directions. vcs are much more likely to make angel-sized investments than they were a year ago. and meanwhile the past year has seen a dramatic increase in a new type of investor: the super-angel, who operates like an angel, but using other peoples money, like a vc. though a lot of investors are entering this territory, there is still room for more. the distribution of investors should mirror the distribution of startups, which has the usual power law dropoff. so there should be a lot more people investing tens or hundreds of thousands than millions.  in fact, it may be good for angels that there are more people doing angel-sized deals, because if angel rounds become more legitimate, then startups may start to opt for angel rounds even when they could, if they wanted, raise series a rounds from vcs. one reason startups prefer series a rounds is that theyre more prestigious. but if angel investors become more active and better known, theyll increasingly be able to compete with vcs in brand. of course, prestige isnt the main reason to prefer a series a round. a startup will probably get more attention from investors in a series a round than an angel round. so if a startup is choosing between an angel round and an a round from a good vc fund, i usually advise them to take the a round.  but while series a rounds arent going away, i think vcs should be more worried about super-angels than vice versa. despite their name, the super-angels are really mini vc funds, and they clearly have existing vcs in their sights. they would seem to have history on their side. the pattern here seems the same one we see when startups and established companies enter a new market. online video becomes possible, and youtube plunges right in, while existing media companies embrace it only half-willingly, driven more by fear than hope, and aiming more to protect their turf than to do great things for users. ditto for paypal. this pattern is repeated over and over, and its usually the invaders who win. in this case the super-angels are the invaders. angel rounds are their whole business, as online video was for youtube. whereas vcs who make angel investments mostly do it as a way to generate deal flow for series a rounds.  on the other hand, startup investing is a very strange business. nearly all the returns are concentrated in a few big winners. if the super-angels merely fail to invest in (and to some extent produce) the big winners, theyll be out of business, even if they invest in all the others. why dont vcs start doing smaller series a rounds? the sticking point is board seats. in a traditional series a round, the partner whose deal it is takes a seat on the startups board. if we assume the average startup runs for 6 years and a partner can bear to be on 12 boards at once, then a vc fund can do 2 series a deals per partner per year. it has always seemed to me the solution is to take fewer board seats. you dont have to be on the board to help a startup. maybe vcs feel they need the power that comes with board membership to ensure their money isnt wasted. but have they tested that theory? unless theyve tried not taking board seats and found their returns are lower, theyre not bracketing the problem. im not saying vcs dont help startups. the good ones help them a lot. what im saying is that the kind of help that matters, you may not have to be a board member to give.  how will this all play out? some vcs will probably adapt, by doing more, smaller deals. i wouldnt be surprised if by streamlining their selection process and taking fewer board seats, vc funds could do 2 to 3 times as many series a rounds with no loss of quality. but other vcs will make no more than superficial changes. vcs are conservative, and the threat to them isnt mortal. the vc funds that dont adapt wont be violently displaced. theyll edge gradually into a different business without realizing it. theyll still do what they will call series a rounds, but these will increasingly be de facto series b rounds.  in such rounds they wont get the 25 to 40% of the company they do now. you dont give up as much of the company in later rounds unless something is seriously wrong. since the vcs who dont adapt will be investing later, their returns from winners may be smaller. but investing later should also mean they have fewer losers. so their ratio of risk to return may be the same or even better. theyll just have become a different, more conservative, type of investment. in the big angel rounds that increasingly compete with series a rounds, the investors wont take as much equity as vcs do now. and vcs who try to compete with angels by doing more, smaller deals will probably find they have to take less equity to do it. which is good news for founders: theyll get to keep more of the company. the deal terms of angel rounds will become less restrictive toonot just less restrictive than series a terms, but less restrictive than angel terms have traditionally been. in the future, angel rounds will less often be for specific amounts or have a lead investor. in the old days, the standard m.o. for startups was to find one angel to act as the lead investor. youd negotiate a round size and valuation with the lead, whod supply some but not all of the money. then the startup and the lead would cooperate to find the rest. the future of angel rounds looks more like this: instead of a fixed round size, startups will do a rolling close, where they take money from investors one at a time till they feel they have enough.  and though theres going to be one investor who gives them the first check, and his or her help in recruiting other investors will certainly be welcome, this initial investor will no longer be the lead in the old sense of managing the round. the startup will now do that themselves. there will continue to be lead investors in the sense of investors who take the lead in advising a startup. they may also make the biggest investment. but they wont always have to be the one terms are negotiated with, or be the first money in, as they have in the past. standardized paperwork will do away with the need to negotiate anything except the valuation, and that will get easier too. if multiple investors have to share a valuation, it will be whatever the startup can get from the first one to write a check, limited by their guess at whether this will make later investors balk. but there may not have to be just one valuation. startups are increasingly raising money on convertible notes, and convertible notes have not valuations but at most valuation caps : caps on what the effective valuation will be when the debt converts to equity (in a later round, or upon acquisition if that happens first). thats an important difference because it means a startup could do multiple notes at once with different caps. this is now starting to happen, and i predict it will become more common. the reason things are moving this way is that the old way sucked for startups. leads could (and did) use a fixed size round as a legitimate-seeming way of saying what all founders hate to hear: ill invest if other people will. most investors, unable to judge startups for themselves, rely instead on the opinions of other investors. if everyone wants in, they want in too; if not, not. founders hate this because its a recipe for deadlock, and delay is the thing a startup can least afford. most investors know this m.o. is lame, and few say openly that theyre doing it. but the craftier ones achieve the same result by offering to lead rounds of fixed size and supplying only part of the money. if the startup cant raise the rest, the lead is out too. how could they go ahead with the deal? the startup would be underfunded! in the future, investors will increasingly be unable to offer investment subject to contingencies like other people investing. or rather, investors who do that will get last place in line. startups will go to them only to fill up rounds that are mostly subscribed. and since hot startups tend to have rounds that are oversubscribed, being last in line means theyll probably miss the hot deals. hot deals and successful startups are not identical, but there is a significant correlation.  so investors who wont invest unilaterally will have lower returns. investors will probably find they do better when deprived of this crutch anyway. chasing hot deals doesnt make investors choose better; it just makes them feel better about their choices. ive seen feeding frenzies both form and fall apart many times, and as far as i can tell theyre mostly random.  if investors can no longer rely on their herd instincts, theyll have to think more about each startup before investing. they may be surprised how well this works. deadlock wasnt the only disadvantage of letting a lead investor manage an angel round. the investors would not infrequently collude to push down the valuation. and rounds took too long to close, because however motivated the lead was to get the round closed, he was not a tenth as motivated as the startup. increasingly, startups are taking charge of their own angel rounds. only a few do so far, but i think we can already declare the old way dead, because those few are the best startups. theyre the ones in a position to tell investors how the round is going to work. and if the startups you want to invest in do things a certain way, what difference does it make what the others do? in fact, it may be slightly misleading to say that angel rounds will increasingly take the place of series a rounds. whats really happening is that startup-controlled rounds are taking the place of investor-controlled rounds. this is an instance of a very important meta-trend, one that y combinator itself has been based on from the beginning: founders are becoming increasingly powerful relative to investors. so if you want to predict what the future of venture funding will be like, just ask: how would founders like it to be? one by one, all the things founders dislike about raising money are going to get eliminated.  using that heuristic, ill predict a couple more things. one is that investors will increasingly be unable to wait for startups to have "traction" before they put in significant money. its hard to predict in advance which startups will succeed. so most investors prefer, if they can, to wait till the startup is already succeeding, then jump in quickly with an offer. startups hate this as well, partly because it tends to create deadlock, and partly because it seems kind of slimy. if youre a promising startup but dont yet have significant growth, all the investors are your friends in words, but few are in actions. they all say they love you, but they all wait to invest. then when you start to see growth, they claim they were your friend all along, and are aghast at the thought youd be so disloyal as to leave them out of your round. if founders become more powerful, theyll be able to make investors give them more money upfront. (the worst variant of this behavior is the tranched deal, where the investor makes a small initial investment, with more to follow if the startup does well. in effect, this structure gives the investor a free option on the next round, which theyll only take if its worse for the startup than they could get in the open market. tranched deals are an abuse. theyre increasingly rare, and theyre going to get rarer.)  investors dont like trying to predict which startups will succeed, but increasingly theyll have to. though the way that happens wont necessarily be that the behavior of existing investors will change; it may instead be that theyll be replaced by other investors with different behaviorthat investors who understand startups well enough to take on the hard problem of predicting their trajectory will tend to displace suits whose skills lie more in raising money from lps. the other thing founders hate most about fundraising is how long it takes. so as founders become more powerful, rounds should start to close faster. fundraising is still terribly distracting for startups. if youre a founder in the middle of raising a round, the round is the top idea in your mind , which means working on the company isnt. if a round takes 2 months to close, which is reasonably fast by present standards, that means 2 months during which the company is basically treading water. thats the worst thing a startup could do. so if investors want to get the best deals, the way to do it will be to close faster. investors dont need weeks to make up their minds anyway. we decide based on about 10 minutes of reading an application plus 10 minutes of in person interview, and we only regret about 10% of our decisions. if we can decide in 20 minutes, surely the next round of investors can decide in a couple days.  there are a lot of institutionalized delays in startup funding: the multi-week mating dance with investors; the distinction between termsheets and deals; the fact that each series a has enormously elaborate, custom paperwork. both founders and investors tend to take these for granted. its the way things have always been. but ultimately the reason these delays exist is that theyre to the advantage of investors. more time gives investors more information about a startups trajectory, and it also tends to make startups more pliable in negotiations, since theyre usually short of money. these conventions werent designed to drag out the funding process, but thats why theyre allowed to persist. slowness is to the advantage of investors, who have in the past been the ones with the most power. but there is no need for rounds to take months or even weeks to close, and once founders realize that, its going to stop. not just in angel rounds, but in series a rounds too. the future is simple deals with standard terms, done quickly. one minor abuse that will get corrected in the process is option pools. in a traditional series a round, before the vcs invest they make the company set aside a block of stock for future hiresusually between 10 and 30% of the company. the point is to ensure this dilution is borne by the existing shareholders. the practice isnt dishonest; founders know whats going on. but it makes deals unnecessarily complicated. in effect the valuation is 2 numbers. theres no need to keep doing this.  the final thing founders want is to be able to sell some of their own stock in later rounds. this wont be a change, because the practice is now quite common. a lot of investors hated the idea, but the world hasnt exploded as a result, so it will happen more, and more openly. ive talked here about a bunch of changes that will be forced on investors as founders become more powerful. now the good news: investors may actually make more money as a result. a couple days ago an interviewer asked me if founders having more power would be better or worse for the world. i was surprised, because id never considered that question. better or worse, its happening. but after a seconds reflection, the answer seemed obvious. founders understand their companies better than investors, and it has to be better if the people with more knowledge have more power. one of the mistakes novice pilots make is overcontrolling the aircraft: applying corrections too vigorously, so the aircraft oscillates about the desired configuration instead of approaching it asymptotically. it seems probable that investors have till now on average been overcontrolling their portfolio companies. in a lot of startups, the biggest source of stress for the founders is not competitors but investors. certainly it was for us at viaweb. and this is not a new phenomenon: investors were james watts biggest problem too. if having less power prevents investors from overcontrolling startups, it should be better not just for founders but for investors too. investors may end up with less stock per startup, but startups will probably do better with founders more in control, and there will almost certainly be more of them. investors all compete with one another for deals, but they arent one anothers main competitor. our main competitor is employers. and so far that competitor is crushing us. only a tiny fraction of people who could start a startup do. nearly all customers choose the competing product, a job. why? well, lets look at the product were offering. an unbiased review would go something like this: starting a startup gives you more freedom and the opportunity to make a lot more money than a job, but its also hard work and at times very stressful. much of the stress comes from dealing with investors. if reforming the investment process removed that stress, wed make our product much more attractive. the kind of people who make good startup founders dont mind dealing with technical problemsthey enjoy technical problemsbut they hate the type of problems investors cause. investors have no idea that when they maltreat one startup, theyre preventing 10 others from happening, but they are. indirectly, but they are. so when investors stop trying to squeeze a little more out of their existing deals, theyll find theyre net ahead, because so many more new deals appear. one of our axioms at y combinator is not to think of deal flow as a zero-sum game. our main focus is to encourage more startups to happen, not to win a larger share of the existing stream. weve found this principle very useful, and we think as it spreads outward it will help later stage investors as well. "make something people want" applies to us too.  in this essay im talking mainly about software startups. these points dont apply to types of startups that are still expensive to start, e.g. in energy or biotech. even the cheap kinds of startups will generally raise large amounts at some point, when they want to hire a lot of people. what has changed is how much they can get done before that.  its not the distribution of good startups that has a power law dropoff, but the distribution of potentially good startups, which is to say, good deals. there are lots of potential winners, from which a few actual winners emerge with hyperlinear certainty.  as i was writing this, i asked some founders whod taken series a rounds from top vc funds whether it was worth it, and they unanimously said yes. the quality of investor is more important than the type of round, though. id take an angel round from good angels over a series a from a mediocre vc.  founders also worry that taking an angel investment from a vc means theyll look bad if the vc declines to participate in the next round. the trend of vc angel investing is so new that its hard to say how justified this worry is. another danger, pointed out by mitch kapor, is that if vcs are only doing angel deals to generate series a deal flow, then their incentives arent aligned with the founders. the founders want the valuation of the next round to be high, and the vcs want it to be low. again, hard to say yet how much of a problem this will be.  josh kopelman pointed out that another way to be on fewer boards at once is to take board seats for shorter periods.  google was in this respect as so many others the pattern for the future. it would be great for vcs if the similarity extended to returns. thats probably too much to hope for, but the returns may be somewhat higher, as i explain later.  doing a rolling close doesnt mean the company is always raising money. that would be a distraction. the point of a rolling close is to make fundraising take less time, not more. with a classic fixed sized round, you dont get any money till all the investors agree, and that often creates a situation where they all sit waiting for the others to act. a rolling close usually prevents this.  there are two (non-exclusive) causes of hot deals: the quality of the company, and domino effects among investors. the former is obviously a better predictor of success.  some of the randomness is concealed by the fact that investment is a self fulfilling prophecy.  the shift in power to founders is exaggerated now because its a sellers market. on the next downtick it will seem like i overstated the case. but on the next uptick after that, founders will seem more powerful than ever.  more generally, it will become less common for the same investor to invest in successive rounds, except when exercising an option to maintain their percentage. when the same investor invests in successive rounds, it often means the startup isnt getting market price. they may not care; they may prefer to work with an investor they already know; but as the investment market becomes more efficient, it will become increasingly easy to get market price if they want it. which in turn means the investment community will tend to become more stratified.  the two 10 minuteses have 3 weeks between them so founders can get cheap plane tickets, but except for that they could be adjacent.  im not saying option pools themselves will go away. theyre an administrative convenience. what will go away is investors requiring them. thanks to sam altman, john bautista, trevor blackwell, paul buchheit, jeff clavier, patrick collison, ron conway, matt cohler, chris dixon, mitch kapor, josh kopelman, pete koomen, carolynn levy, jessica livingston, ariel poler, geoff ralston, naval ravikant, dan siroker, harj taggar, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com what hard liquor, cigarettes, heroin, and crack have in common is that theyre all more concentrated forms of less addictive predecessors. most if not all the things we describe as addictive are. and the scary thing is, the process that created them is accelerating. we wouldnt want to stop it. its the same process that cures diseases: technological progress. technological progress means making things do more of what we want. when the thing we want is something we want to want, we consider technological progress good. if some new technique makes solar cells x% more efficient, that seems strictly better. when progress concentrates something we dont want to wantwhen it transforms opium into heroinit seems bad. but its the same process at work.  no one doubts this process is accelerating, which means increasing numbers of things we like will be transformed into things we like too much.  as far as i know theres no word for something we like too much. the closest is the colloquial sense of "addictive." that usage has become increasingly common during my lifetime. and its clear why: there are an increasing number of things we need it for. at the extreme end of the spectrum are crack and meth. food has been transformed by a combination of factory farming and innovations in food processing into something with way more immediate bang for the buck, and you can see the results in any town in america. checkers and solitaire have been replaced by world of warcraft and farmville. tv has become much more engaging, and even so it cant compete with facebook. the world is more addictive than it was 40 years ago. and unless the forms of technological progress that produced these things are subject to different laws than technological progress in general, the world will get more addictive in the next 40 years than it did in the last 40. the next 40 years will bring us some wonderful things. i dont mean to imply theyre all to be avoided. alcohol is a dangerous drug, but id rather live in a world with wine than one without. most people can coexist with alcohol; but you have to be careful. more things we like will mean more things we have to be careful about. most people wont, unfortunately. which means that as the world becomes more addictive, the two senses in which one can live a normal life will be driven ever further apart. one sense of "normal" is statistically normal: what everyone else does. the other is the sense we mean when we talk about the normal operating range of a piece of machinery: what works best. these two senses are already quite far apart. already someone trying to live well would seem eccentrically abstemious in most of the us. that phenomenon is only going to become more pronounced. you can probably take it as a rule of thumb from now on that if people dont think youre weird, youre living badly. societies eventually develop antibodies to addictive new things. ive seen that happen with cigarettes. when cigarettes first appeared, they spread the way an infectious disease spreads through a previously isolated population. smoking rapidly became a (statistically) normal thing. there were ashtrays everywhere. we had ashtrays in our house when i was a kid, even though neither of my parents smoked. you had to for guests. as knowledge spread about the dangers of smoking, customs changed. in the last 20 years, smoking has been transformed from something that seemed totally normal into a rather seedy habit: from something movie stars did in publicity shots to something small huddles of addicts do outside the doors of office buildings. a lot of the change was due to legislation, of course, but the legislation couldnt have happened if customs hadnt already changed. it took a while thoughon the order of 100 years. and unless the rate at which social antibodies evolve can increase to match the accelerating rate at which technological progress throws off new addictions, well be increasingly unable to rely on customs to protect us.  unless we want to be canaries in the coal mine of each new addictionthe people whose sad example becomes a lesson to future generationswell have to figure out for ourselves what to avoid and how. it will actually become a reasonable strategy (or a more reasonable strategy) to suspect everything new . in fact, even that wont be enough. well have to worry not just about new things, but also about existing things becoming more addictive. thats what bit me. ive avoided most addictions, but the internet got me because it became addictive while i was using it.  most people i know have problems with internet addiction. were all trying to figure out our own customs for getting free of it. thats why i dont have an iphone, for example; the last thing i want is for the internet to follow me out into the world.  my latest trick is taking long hikes. i used to think running was a better form of exercise than hiking because it took less time. now the slowness of hiking seems an advantage, because the longer i spend on the trail, the longer i have to think without interruption. sounds pretty eccentric, doesnt it? it always will when youre trying to solve problems where there are no customs yet to guide you. maybe i cant plead occams razor; maybe im simply eccentric. but if im right about the acceleration of addictiveness, then this kind of lonely squirming to avoid it will increasingly be the fate of anyone who wants to get things done. well increasingly be defined by what we say no to.  could you restrict technological progress to areas where you wanted it? only in a limited way, without becoming a police state. and even then your restrictions would have undesirable side effects. "good" and "bad" technological progress arent sharply differentiated, so youd find you couldnt slow the latter without also slowing the former. and in any case, as prohibition and the "war on drugs" show, bans often do more harm than good.  technology has always been accelerating. by paleolithic standards, technology evolved at a blistering pace in the neolithic period.  unless we mass produce social customs. i suspect the recent resurgence of evangelical christianity in the us is partly a reaction to drugs. in desperation people reach for the sledgehammer; if their kids wont listen to them, maybe theyll listen to god. but that solution has broader consequences than just getting kids to say no to drugs. you end up saying no to science as well. i worry we may be heading for a future in which only a few people plot their own itinerary through no-land, while everyone else books a package tour. or worse still, has one booked for them by the government.  people commonly use the word "procrastination" to describe what they do on the internet. it seems to me too mild to describe whats happening as merely not-doing-work. we dont call it procrastination when someone gets drunk instead of working.  several people have told me they like the ipad because it lets them bring the internet into situations where a laptop would be too conspicuous. in other words, its a hip flask. (this is true of the iphone too, of course, but this advantage isnt as obvious because it reads as a phone, and everyones used to those.) thanks to sam altman, patrick collison, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com i realized recently that what one thinks about in the shower in the morning is more important than id thought. i knew it was a good time to have ideas. now id go further: now id say its hard to do a really good job on anything you dont think about in the shower. everyone whos worked on difficult problems is probably familiar with the phenomenon of working hard to figure something out, failing, and then suddenly seeing the answer a bit later while doing something else. theres a kind of thinking you do without trying to. im increasingly convinced this type of thinking is not merely helpful in solving hard problems, but necessary. the tricky part is, you can only control it indirectly.  i think most people have one top idea in their mind at any given time. thats the idea their thoughts will drift toward when theyre allowed to drift freely. and this idea will thus tend to get all the benefit of that type of thinking, while others are starved of it. which means its a disaster to let the wrong idea become the top one in your mind. what made this clear to me was having an idea i didnt want as the top one in my mind for two long stretches. id noticed startups got way less done when they started raising money, but it was not till we ourselves raised money that i understood why. the problem is not the actual time it takes to meet with investors. the problem is that once you start raising money, raising money becomes the top idea in your mind. that becomes what you think about when you take a shower in the morning. and that means other questions arent. id hated raising money when i was running viaweb, but id forgotten why i hated it so much. when we raised money for y combinator, i remembered. money matters are particularly likely to become the top idea in your mind. the reason is that they have to be. its hard to get money. its not the sort of thing that happens by default. its not going to happen unless you let it become the thing you think about in the shower. and then youll make little progress on anything else youd rather be working on.  (i hear similar complaints from friends who are professors. professors nowadays seem to have become professional fundraisers who do a little research on the side. it may be time to fix that.) the reason this struck me so forcibly is that for most of the preceding 10 years id been able to think about what i wanted. so the contrast when i couldnt was sharp. but i dont think this problem is unique to me, because just about every startup ive seen grinds to a halt when they start raising moneyor talking to acquirers. you cant directly control where your thoughts drift. if youre controlling them, theyre not drifting. but you can control them indirectly, by controlling what situations you let yourself get into. that has been the lesson for me: be careful what you let become critical to you. try to get yourself into situations where the most urgent problems are ones you want to think about. you dont have complete control, of course. an emergency could push other thoughts out of your head. but barring emergencies you have a good deal of indirect control over what becomes the top idea in your mind. ive found there are two types of thoughts especially worth avoidingthoughts like the nile perch in the way they push out more interesting ideas. one ive already mentioned: thoughts about money. getting money is almost by definition an attention sink. the other is disputes. these too are engaging in the wrong way: they have the same velcro-like shape as genuinely interesting ideas, but without the substance. so avoid disputes if you want to get real work done.  even newton fell into this trap. after publishing his theory of colors in 1672 he found himself distracted by disputes for years, finally concluding that the only solution was to stop publishing: i see i have made myself a slave to philosophy, but if i get free of mr linuss business i will resolutely bid adew to it eternally, excepting what i do for my privat satisfaction or leave to come out after me. for i see a man must either resolve to put out nothing new or become a slave to defend it.  linus and his students at liege were among the more tenacious critics. newtons biographer westfall seems to feel he was overreacting: recall that at the time he wrote, newtons "slavery" consisted of five replies to liege, totalling fourteen printed pages, over the course of a year. im more sympathetic to newton. the problem was not the 14 pages, but the pain of having this stupid controversy constantly reintroduced as the top idea in a mind that wanted so eagerly to think about other things. turning the other cheek turns out to have selfish advantages. someone who does you an injury hurts you twice: first by the injury itself, and second by taking up your time afterward thinking about it. if you learn to ignore injuries you can at least avoid the second half. ive found i can to some extent avoid thinking about nasty things people have done to me by telling myself: this doesnt deserve space in my head. im always delighted to find ive forgotten the details of disputes, because that means i hadnt been thinking about them. my wife thinks im more forgiving than she is, but my motives are purely selfish. i suspect a lot of people arent sure whats the top idea in their mind at any given time. im often mistaken about it. i tend to think its the idea id want to be the top one, rather than the one that is. but its easy to figure this out: just take a shower. what topic do your thoughts keep returning to? if its not what you want to be thinking about, you may want to change something.  no doubt there are already names for this type of thinking, but i call it "ambient thought."  this was made particularly clear in our case, because neither of the funds we raised was difficult, and yet in both cases the process dragged on for months. moving large amounts of money around is never something people treat casually. the attention required increases with the amountmaybe not linearly, but definitely monotonically.  corollary: avoid becoming an administrator, or your job will consist of dealing with money and disputes.  letter to oldenburg, quoted in westfall, richard, life of isaac newton , p. 107. thanks to sam altman, patrick collison, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com when we sold our startup in 1998 i suddenly got a lot of money. i now had to think about something i hadnt had to think about before: how not to lose it. i knew it was possible to go from rich to poor, just as it was possible to go from poor to rich. but while id spent a lot of the past several years studying the paths from poor to rich , i knew practically nothing about the paths from rich to poor. now, in order to avoid them, i had to learn where they were. so i started to pay attention to how fortunes are lost. if youd asked me as a kid how rich people became poor, id have said by spending all their money. thats how it happens in books and movies, because thats the colorful way to do it. but in fact the way most fortunes are lost is not through excessive expenditure, but through bad investments. its hard to spend a fortune without noticing. someone with ordinary tastes would find it hard to blow through more than a few tens of thousands of dollars without thinking "wow, im spending a lot of money." whereas if you start trading derivatives, you can lose a million dollars (as much as you want, really) in the blink of an eye. in most peoples minds, spending money on luxuries sets off alarms that making investments doesnt. luxuries seem self-indulgent. and unless you got the money by inheriting it or winning a lottery, youve already been thoroughly trained that self-indulgence leads to trouble. investing bypasses those alarms. youre not spending the money; youre just moving it from one asset to another. which is why people trying to sell you expensive things say "its an investment." the solution is to develop new alarms. this can be a tricky business, because while the alarms that prevent you from overspending are so basic that they may even be in our dna, the ones that prevent you from making bad investments have to be learned, and are sometimes fairly counterintuitive. a few days ago i realized something surprising: the situation with time is much the same as with money. the most dangerous way to lose time is not to spend it having fun, but to spend it doing fake work. when you spend time having fun, you know youre being self-indulgent. alarms start to go off fairly quickly. if i woke up one morning and sat down on the sofa and watched tv all day, id feel like something was terribly wrong. just thinking about it makes me wince. id start to feel uncomfortable after sitting on a sofa watching tv for 2 hours, let alone a whole day. and yet ive definitely had days when i might as well have sat in front of a tv all daydays at the end of which, if i asked myself what i got done that day, the answer would have been: basically, nothing. i feel bad after these days too, but nothing like as bad as id feel if i spent the whole day on the sofa watching tv. if i spent a whole day watching tv id feel like i was descending into perdition. but the same alarms dont go off on the days when i get nothing done, because im doing stuff that seems, superficially, like real work. dealing with email, for example. you do it sitting at a desk. its not fun. so it must be work. with time, as with money, avoiding pleasure is no longer enough to protect you. it probably was enough to protect hunter-gatherers, and perhaps all pre-industrial societies. so nature and nurture combine to make us avoid self-indulgence. but the world has gotten more complicated: the most dangerous traps now are new behaviors that bypass our alarms about self-indulgence by mimicking more virtuous types. and the worst thing is, theyre not even fun. thanks to sam altman, trevor blackwell, patrick collison, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com the best way to come up with startup ideas is to ask yourself the question: what do you wish someone would make for you? there are two types of startup ideas: those that grow organically out of your own life, and those that you decide, from afar, are going to be necessary to some class of users other than you. apple was the first type. apple happened because steve wozniak wanted a computer. unlike most people who wanted computers, he could design one, so he did. and since lots of other people wanted the same thing, apple was able to sell enough of them to get the company rolling. they still rely on this principle today, incidentally. the iphone is the phone steve jobs wants. our own startup, viaweb, was of the second type. we made software for building online stores. we didnt need this software ourselves. we werent direct marketers. we didnt even know when we started that our users were called "direct marketers." but we were comparatively old when we started the company (i was 30 and robert morris was 29), so wed seen enough to know users would need this type of software.  there is no sharp line between the two types of ideas, but the most successful startups seem to be closer to the apple type than the viaweb type. when he was writing that first basic interpreter for the altair, bill gates was writing something he would use, as were larry and sergey when they wrote the first versions of google. organic ideas are generally preferable to the made up kind, but particularly so when the founders are young. it takes experience to predict what other people will want. the worst ideas we see at y combinator are from young founders making things they think other people will want. so if you want to start a startup and dont know yet what youre going to do, id encourage you to focus initially on organic ideas. whats missing or broken in your daily life? sometimes if you just ask that question youll get immediate answers. it must have seemed obviously broken to bill gates that you could only program the altair in machine language. you may need to stand outside yourself a bit to see brokenness, because you tend to get used to it and take it for granted. you can be sure its there, though. there are always great ideas sitting right under our noses. in 2004 it was ridiculous that harvard undergrads were still using a facebook printed on paper. surely that sort of thing should have been online. there are ideas that obvious lying around now. the reason youre overlooking them is the same reason youd have overlooked the idea of building facebook in 2004: organic startup ideas usually dont seem like startup ideas at first. we know now that facebook was very successful, but put yourself back in 2004. putting undergraduates profiles online wouldnt have seemed like much of a startup idea. and in fact, it wasnt initially a startup idea. when mark spoke at a yc dinner this winter he said he wasnt trying to start a company when he wrote the first version of facebook. it was just a project. so was the apple i when woz first started working on it. he didnt think he was starting a company. if these guys had thought they were starting companies, they might have been tempted to do something more "serious," and that would have been a mistake. so if you want to come up with organic startup ideas, id encourage you to focus more on the idea part and less on the startup part. just fix things that seem broken, regardless of whether it seems like the problem is important enough to build a company on. if you keep pursuing such threads it would be hard not to end up making something of value to a lot of people, and when you do, surprise, youve got a company. dont be discouraged if what you produce initially is something other people dismiss as a toy. in fact, thats a good sign. thats probably why everyone else has been overlooking the idea. the first microcomputers were dismissed as toys. and the first planes, and the first cars. at this point, when someone comes to us with something that users like but that we could envision forum trolls dismissing as a toy, it makes us especially likely to invest. while young founders are at a disadvantage when coming up with made-up ideas, theyre the best source of organic ones, because theyre at the forefront of technology. they use the latest stuff. they only just decided what to use, so why wouldnt they? and because they use the latest stuff, theyre in a position to discover valuable types of fixable brokenness first. theres nothing more valuable than an unmet need that is just becoming fixable. if you find something broken that you can fix for a lot of people, youve found a gold mine. as with an actual gold mine, you still have to work hard to get the gold out of it. but at least you know where the seam is, and thats the hard part.  this suggests a way to predict areas where apple will be weak: things steve jobs doesnt use. e.g. i doubt he is much into gaming.  in retrospect, we should have become direct marketers. if i were doing viaweb again, id open our own online store. if we had, wed have understood users a lot better. id encourage anyone starting a startup to become one of its users, however unnatural it seems.  possible exception: its hard to compete directly with open source software. you can build things for programmers, but there has to be some part you can charge for. thanks to sam altman, trevor blackwell, and jessica livingston for reading drafts of this. this essay was originally published at paulgraham.com i dont think apple realizes how badly the app store approval process is broken. or rather, i dont think they realize how much it matters that its broken. the way apple runs the app store has harmed their reputation with programmers more than anything else theyve ever done. their reputation with programmers used to be great. it used to be the most common complaint you heard about apple was that their fans admired them too uncritically. the app store has changed that. now a lot of programmers have started to see apple as evil. how much of the goodwill apple once had with programmers have they lost over the app store? a third? half? and thats just so far. the app store is an ongoing karma leak.    how did apple get into this mess? their fundamental problem is that they dont understand software. they treat iphone apps the way they treat the music they sell through itunes. apple is the channel; they own the user; if you want to reach users, you do it on their terms. the record labels agreed, reluctantly. but this model doesnt work for software. it doesnt work for an intermediary to own the user. the software business learned that in the early 1980s, when companies like visicorp showed that although the words "software" and "publisher" fit together, the underlying concepts dont. software isnt like music or books. its too complicated for a third party to act as an intermediary between developer and user. and yet thats what apple is trying to be with the app store: a software publisher. and a particularly overreaching one at that, with fussy tastes and a rigidly enforced house style. if software publishing didnt work in 1980, it works even less now that software development has evolved from a small number of big releases to a constant stream of small ones. but apple doesnt understand that either. their model of product development derives from hardware. they work on something till they think its finished, then they release it. you have to do that with hardware, but because software is so easy to change, its design can benefit from evolution. the standard way to develop applications now is to launch fast and iterate. which means its a disaster to have long, random delays each time you release a new version. apparently apples attitude is that developers should be more careful when they submit a new version to the app store. they would say that. but powerful as they are, theyre not powerful enough to turn back the evolution of technology. programmers dont use launch-fast-and-iterate out of laziness. they use it because it yields the best results. by obstructing that process, apple is making them do bad work, and programmers hate that as much as apple would. how would apple like it if when they discovered a serious bug in os x, instead of releasing a software update immediately, they had to submit their code to an intermediary who sat on it for a month and then rejected it because it contained an icon they didnt like? by breaking software development, apple gets the opposite of what they intended: the version of an app currently available in the app store tends to be an old and buggy one. one developer told me: as a result of their process, the app store is full of half-baked applications. i make a new version almost every day that i release to beta users. the version on the app store feels old and crappy. im sure that a lot of developers feel this way: one emotion is "im not really proud about whats in the app store", and its combined with the emotion "really, its apples fault." another wrote: i believe that they think their approval process helps users by ensuring quality. in reality, bugs like ours get through all the time and then it can take 4-8 weeks to get that bug fix approved, leaving users to think that iphone apps sometimes just dont work. worse for apple, these apps work just fine on other platforms that have immediate approval processes. actually i suppose apple has a third misconception: that all the complaints about app store approvals are not a serious problem. they must hear developers complaining. but partners and suppliers are always complaining. it would be a bad sign if they werent; it would mean you were being too easy on them. meanwhile the iphone is selling better than ever. so why do they need to fix anything? they get away with maltreating developers, in the short term, because they make such great hardware. i just bought a new 27" imac a couple days ago. its fabulous. the screens too shiny, and the disk is surprisingly loud, but its so beautiful that you cant make yourself care. so i bought it, but i bought it, for the first time, with misgivings. i felt the way id feel buying something made in a country with a bad human rights record. that was new. in the past when i bought things from apple it was an unalloyed pleasure. oh boy! they make such great stuff. this time it felt like a faustian bargain. they make such great stuff, but theyre such assholes. do i really want to support this company?    should apple care what people like me think? what difference does it make if they alienate a small minority of their users? there are a couple reasons they should care. one is that these users are the people they want as employees. if your company seems evil, the best programmers wont work for you. that hurt microsoft a lot starting in the 90s. programmers started to feel sheepish about working there. it seemed like selling out. when people from microsoft were talking to other programmers and they mentioned where they worked, there were a lot of self-deprecating jokes about having gone over to the dark side. but the real problem for microsoft wasnt the embarrassment of the people they hired. it was the people they never got. and you know who got them? google and apple. if microsoft was the empire, they were the rebel alliance. and its largely because they got more of the best people that google and apple are doing so much better than microsoft today. why are programmers so fussy about their employers morals? partly because they can afford to be. the best programmers can work wherever they want. they dont have to work for a company they have qualms about. but the other reason programmers are fussy, i think, is that evil begets stupidity. an organization that wins by exercising power starts to lose the ability to win by doing better work. and its not fun for a smart person to work in a place where the best ideas arent the ones that win. i think the reason google embraced "dont be evil" so eagerly was not so much to impress the outside world as to inoculate themselves against arrogance.  that has worked for google so far. theyve become more bureaucratic, but otherwise they seem to have held true to their original principles. with apple that seems less the case. when you look at the famous 1984 ad now, its easier to imagine apple as the dictator on the screen than the woman with the hammer.  in fact, if you read the dictators speech it sounds uncannily like a prophecy of the app store. we have triumphed over the unprincipled dissemination of facts. we have created, for the first time in all history, a garden of pure ideology, where each worker may bloom secure from the pests of contradictory and confusing truths. the other reason apple should care what programmers think of them is that when you sell a platform, developers make or break you. if anyone should know this, apple should. visicalc made the apple ii. and programmers build applications for the platforms they use. most applicationsmost startups, probablygrow out of personal projects. apple itself did. apple made microcomputers because thats what steve wozniak wanted for himself. he couldnt have afforded a minicomputer.  microsoft likewise started out making interpreters for little microcomputers because bill gates and paul allen were interested in using them. its a rare startup that doesnt build something the founders use. the main reason there are so many iphone apps is that so many programmers have iphones. they may know, because they read it in an article, that blackberry has such and such market share. but in practice its as if rim didnt exist. if theyre going to build something, they want to be able to use it themselves, and that means building an iphone app. so programmers continue to develop iphone apps, even though apple continues to maltreat them. theyre like someone stuck in an abusive relationship. theyre so attracted to the iphone that they cant leave. but theyre looking for a way out. one wrote: while i did enjoy developing for the iphone, the control they place on the app store does not give me the drive to develop applications as i would like. in fact i dont intend to make any more iphone applications unless absolutely necessary.  can anything break this cycle? no device ive seen so far could. palm and rim havent a hope. the only credible contender is android. but android is an orphan; google doesnt really care about it, not the way apple cares about the iphone. apple cares about the iphone the way google cares about search.    is the future of handheld devices one locked down by apple? its a worrying prospect. it would be a bummer to have another grim monoculture like we had in the 1990s. in 1995, writing software for end users was effectively identical with writing windows applications. our horror at that prospect was the single biggest thing that drove us to start building web apps . at least we know now what it would take to break apples lock. youd have to get iphones out of programmers hands. if programmers used some other device for mobile web access, theyd start to develop apps for that instead. how could you make a device programmers liked better than the iphone? its unlikely you could make something better designed. apple leaves no room there. so this alternative device probably couldnt win on general appeal. it would have to win by virtue of some appeal it had to programmers specifically. one way to appeal to programmers is with software. if you could think of an application programmers had to have, but that would be impossible in the circumscribed world of the iphone, you could presumably get them to switch. that would definitely happen if programmers started to use handhelds as development machinesif handhelds displaced laptops the way laptops displaced desktops. you need more control of a development machine than apple will let you have over an iphone. could anyone make a device that youd carry around in your pocket like a phone, and yet would also work as a development machine? its hard to imagine what it would look like. but ive learned never to say never about technology. a phone-sized device that would work as a development machine is no more miraculous by present standards than the iphone itself would have seemed by the standards of 1995. my current development machine is a macbook air, which i use with an external monitor and keyboard in my office, and by itself when traveling. if there was a version half the size id prefer it. that still wouldnt be small enough to carry around everywhere like a phone, but were within a factor of 4 or so. surely that gap is bridgeable. in fact, lets make it an rfs . wanted: woman with hammer.  when google adopted "dont be evil," they were still so small that no one would have expected them to be, yet.  the dictator in the 1984 ad isnt microsoft, incidentally; its ibm. ibm seemed a lot more frightening in those days, but they were friendlier to developers than apple is now.  he couldnt even afford a monitor . thats why the apple i used a tv as a monitor.  several people i talked to mentioned how much they liked the iphone sdk. the problem is not apples products but their policies. fortunately policies are software; apple can change them instantly if they want to. handy that, isnt it? thanks to sam altman, trevor blackwell, ross boucher, james bracy, gabor cselle, patrick collison, jason freedman, john gruber, joe hewitt, jessica livingston, robert morris, teng siong ong, nikhil pandit, savraj singh, and jared tame for reading drafts of this. this essay was originally published at paulgraham.com this essay is derived from a talk at the 2009 startup school. i wasnt sure what to talk about at startup school, so i decided to ask the founders of the startups wed funded. what hadnt i written about yet? im in the unusual position of being able to test the essays i write about startups. i hope the ones on other topics are right, but i have no way to test them. the ones on startups get tested by about 70 people every 6 months. so i sent all the founders an email asking what surprised them about starting a startup. this amounts to asking what i got wrong, because if id explained things well enough, nothing should have surprised them. im proud to report i got one response saying: what surprised me the most is that everything was actually fairly predictable! the bad news is that i got over 100 other responses listing the surprises they encountered. there were very clear patterns in the responses; it was remarkable how often several people had been surprised by exactly the same thing. these were the biggest: this was the surprise mentioned by the most founders. there were two types of responses: that you have to be careful who you pick as a cofounder, and that you have to work hard to maintain your relationship. what people wished theyd paid more attention to when choosing cofounders was character and commitment, not ability. this was particularly true with startups that failed. the lesson: dont pick cofounders who will flake. heres a typical reponse: you havent seen someones true colors unless youve worked with them on a startup. the reason character is so important is that its tested more severely than in most other situations. one founder said explicitly that the relationship between founders was more important than ability: i would rather cofound a startup with a friend than a stranger with higher output. startups are so hard and emotional that the bonds and emotional and social support that come with friendship outweigh the extra output lost. we learned this lesson a long time ago. if you look at the yc application, there are more questions about the commitment and relationship of the founders than their ability. founders of successful startups talked less about choosing cofounders and more about how hard they worked to maintain their relationship. one thing that surprised me is how the relationship of startup founders goes from a friendship to a marriage. my relationship with my cofounder went from just being friends to seeing each other all the time, fretting over the finances and cleaning up shit. and the startup was our baby. i summed it up once like this: "its like were married, but were not fucking." several people used that word "married." its a far more intense relationship than you usually see between coworkerspartly because the stresses are so much greater, and partly because at first the founders are the whole company. so this relationship has to be built of top quality materials and carefully maintained. its the basis of everything. just as the relationship between cofounders is more intense than it usually is between coworkers, so is the relationship between the founders and the company. running a startup is not like having a job or being a student, because it never stops. this is so foreign to most peoples experience that they dont get it till it happens.  i didnt realize i would spend almost every waking moment either working or thinking about our startup. you enter a whole different way of life when its your company vs. working for someone elses company. its exacerbated by the fast pace of startups, which makes it seem like time slows down: i think the thing thats been most surprising to me is how ones perspective on time shifts. working on our startup, i remember time seeming to stretch out, so that a month was a huge interval. in the best case, total immersion can be exciting: its surprising how much you become consumed by your startup, in that you think about it day and night, but never once does it feel like "work." though i have to say, that quote is from someone we funded this summer. in a couple years he may not sound so chipper. this was another one lots of people were surprised about. the ups and downs were more extreme than they were prepared for. in a startup, things seem great one moment and hopeless the next. and by next, i mean a couple hours later. the emotional ups and downs were the biggest surprise for me. one day, wed think of ourselves as the next google and dream of buying islands; the next, wed be pondering how to let our loved ones know of our utter failure; and on and on. the hard part, obviously, is the lows. for a lot of founders that was the big surprise: how hard it is to keep everyone motivated during rough days or weeks, i.e. how low the lows can be. after a while, if you dont have significant success to cheer you up, it wears you out: your most basic advice to founders is "just dont die," but the energy to keep a company going in lieu of unburdening success isnt free; it is siphoned from the founders themselves. theres a limit to how much you can take. if you get to the point where you cant keep working anymore, its not the end of the world. plenty of famous founders have had some failures along the way. the good news is, the highs are also very high. several founders said what surprised them most about doing a startup was how fun it was: i think youve left out just how fun it is to do a startup. i am more fulfilled in my work than pretty much any of my friends who did not start companies. what they like most is the freedom: im surprised by how much better it feels to be working on something that is challenging and creative, something i believe in, as opposed to the hired-gun stuff i was doing before. i knew it would feel better; whats surprising is how much better. frankly, though, if ive misled people here, im not eager to fix that. id rather have everyone think starting a startup is grim and hard than have founders go into it expecting it to be fun, and a few months later saying "this is supposed to be fun ? are you kidding?" the truth is, it wouldnt be fun for most people. a lot of what we try to do in the application process is to weed out the people who wouldnt like it, both for our sake and theirs. the best way to put it might be that starting a startup is fun the way a survivalist training course would be fun, if youre into that sort of thing. which is to say, not at all, if youre not. a lot of founders were surprised how important persistence was in startups. it was both a negative and a positive surprise: they were surprised both by the degree of persistence required everyone said how determined and resilient you must be, but going through it made me realize that the determination required was still understated. and also by the degree to which persistence alone was able to dissolve obstacles: if you are persistent, even problems that seem out of your control (i.e. immigration) seem to work themselves out. several founders mentioned specifically how much more important persistence was than intelligence. ive been surprised again and again by just how much more important persistence is than raw intelligence. this applies not just to intelligence but to ability in general, and thats why so many people said character was more important in choosing cofounders. you need persistence because everything takes longer than you expect. a lot of people were surprised by that. im continually surprised by how long everything can take. assuming your product doesnt experience the explosive growth that very few products do, everything from development to dealmaking (especially dealmaking) seems to take 2-3x longer than i always imagine. one reason founders are surprised is that because they work fast, they expect everyone else to. theres a shocking amount of shear stress at every point where a startup touches a more bureaucratic organization, like a big company or a vc fund. thats why fundraising and the enterprise market kill and maim so many startups.  but i think the reason most founders are surprised by how long it takes is that theyre overconfident. they think theyre going to be an instant success, like youtube or facebook. you tell them only 1 out of 100 successful startups has a trajectory like that, and they all think "were going to be that 1." maybe theyll listen to one of the more successful founders: the top thing i didnt understand before going into it is that persistence is the name of the game. for the vast majority of startups that become successful, its going to be a really long journey, at least 3 years and probably 5+. there is a positive side to thinking longer-term. its not just that you have to resign yourself to everything taking longer than it should. if you work patiently its less stressful, and you can do better work: because were relaxed, its so much easier to have fun doing what we do. gone is the awkward nervous energy fueled by the desperate need to not fail guiding our actions. we can concentrate on doing whats best for our company, product, employees and customers. thats why things get so much better when you hit ramen profitability. you can shift into a different mode of working. we often emphasize how rarely startups win simply because they hit on some magic idea. i think founders have now gotten that into their heads. but a lot were surprised to find this also applies within startups. you have to do lots of different things: its much more of a grind than glamorous. a timeslice selected at random would more likely find me tracking down a weird dll loading bug on swedish windows, or tracking down a bug in the financial model excel spreadsheet the night before a board meeting, rather than having brilliant flashes of strategic insight. most hacker-founders would like to spend all their time programming. you wont get to, unless you fail. which can be transformed into: if you spend all your time programming, you will fail. the principle extends even into programming. there is rarely a single brilliant hack that ensures success: i learnt never to bet on any one feature or deal or anything to bring you success. it is never a single thing. everything is just incremental and you just have to keep doing lots of those things until you strike something. even in the rare cases where a clever hack makes your fortune, you probably wont know till later: there is no such thing as a killer feature. or at least you wont know what it is. so the best strategy is to try lots of different things. the reason not to put all your eggs in one basket is not the usual one, which applies even when you know which basket is best. in a startup you dont even know that. lots of founders mentioned how important it was to launch with the simplest possible thing. by this point everyone knows you should release fast and iterate. its practically a mantra at yc. but even so a lot of people seem to have been burned by not doing it: build the absolute smallest thing that can be considered a complete application and ship it. why do people take too long on the first version? pride, mostly. they hate to release something that could be better. they worry what people will say about them. but you have to overcome this: doing something "simple" at first glance does not mean you arent doing something meaningful, defensible, or valuable. dont worry what people will say. if your first version is so impressive that trolls dont make fun of it, you waited too long to launch.  one founder said this should be your approach to all programming, not just startups, and i tend to agree. now, when coding, i try to think "how can i write this such that if people saw my code, theyd be amazed at how little there is and how little it does?" over-engineering is poison. its not like doing extra work for extra credit. its more like telling a lie that you then have to remember so you dont contradict it. product development is a conversation with the user that doesnt really start till you launch. before you launch, youre like a police artist before hes shown the first version of his sketch to the witness. its so important to launch fast that it may be better to think of your initial version not as a product, but as a trick for getting users to start talking to you. i learned to think about the initial stages of a startup as a giant experiment. all products should be considered experiments, and those that have a market show promising results extremely quickly. once you start talking to users, i guarantee youll be surprised by what they tell you. when you let customers tell you what theyre after, they will often reveal amazing details about what they find valuable as well what theyre willing to pay for. the surprise is generally positive as well as negative. they wont like what youve built, but there will be other things they would like that would be trivially easy to implement. its not till you start the conversation by launching the wrong thing that they can express (or perhaps even realize) what theyre looking for. to benefit from engaging with users you have to be willing to change your idea. weve always encouraged founders to see a startup idea as a hypothesis rather than a blueprint. and yet theyre still surprised how well it works to change the idea. normally if you complain about something being hard, the general advice is to work harder. with a startup, i think you should find a problem thats easy for you to solve. optimizing in solution-space is familiar and straightforward, but you can make enormous gains playing around in problem-space. whereas mere determination, without flexibility, is a greedy algorithm that may get you nothing more than a mediocre local maximum: when someone is determined, theres still a danger that theyll follow a long, hard path that ultimately leads nowhere. you want to push forward, but at the same time twist and turn to find the most promising path. one founder put it very succinctly: fast iteration is the key to success. one reason this advice is so hard to follow is that people dont realize how hard it is to judge startup ideas, particularly their own. experienced founders learn to keep an open mind: now i dont laugh at ideas anymore, because i realized how terrible i was at knowing if they were good or not. you can never tell what will work. you just have to do whatever seems best at each point. we do this with yc itself. we still dont know if it will work, but it seems like a decent hypothesis. when you think youve got a great idea, its sort of like having a guilty conscience about something. all someone has to do is look at you funny, and you think "oh my god, they know. " these alarms are almost always false: companies that seemed like competitors and threats at first glance usually never were when you really looked at it. even if they were operating in the same area, they had a different goal. one reason people overreact to competitors is that they overvalue ideas. if ideas really were the key, a competitor with the same idea would be a real threat. but its usually execution that matters: all the scares induced by seeing a new competitor pop up are forgotten weeks later. it always comes down to your own product and approach to the market. this is generally true even if competitors get lots of attention. competitors riding on lots of good blogger perception arent really the winners and can disappear from the map quickly. you need consumers after all. hype doesnt make satisfied users, at least not for something as complicated as technology. a lot of founders complained about how hard it was to get users, though. i had no idea how much time and effort needed to go into attaining users. this is a complicated topic. when you cant get users, its hard to say whether the problem is lack of exposure, or whether the products simply bad. even good products can be blocked by switching or integration costs: getting people to use a new service is incredibly difficult. this is especially true for a service that other companies can use, because it requires their developers to do work. if youre small, they dont think it is urgent.  the sharpest criticism of yc came from a founder who said we didnt focus enough on customer acquisition: yc preaches "make something people want" as an engineering task, a never ending stream of feature after feature until enough people are happy and the application takes off. theres very little focus on the cost of customer acquisition. this may be true; this may be something we need to fix, especially for applications like games. if you make something where the challenges are mostly technical, you can rely on word of mouth, like google did. one founder was surprised by how well that worked for him: there is an irrational fear that no one will buy your product. but if you work hard and incrementally make it better, there is no need to worry. but with other types of startups you may win less by features and more by deals and marketing. deals fall through. thats a constant of the startup world. startups are powerless, and good startup ideas generally seem wrong. so everyone is nervous about closing deals with you, and you have no way to make them. this is particularly true with investors: in retrospect, it would have been much better if we had operated under the assumption that we would never get any additional outside investment. that would have focused us on finding revenue streams early. my advice is generally pessimistic. assume you wont get money, and if someone does offer you any, assume youll never get any more. if someone offers you money, take it. you say it a lot, but i think it needs even more emphasizing. we had the opportunity to raise a lot more money than we did last year and i wish we had. why do founders ignore me? mostly because theyre optimistic by nature. the mistake is to be optimistic about things you cant control. by all means be optimistic about your ability to make something great. but youre asking for trouble if youre optimistic about big companies or investors. a lot of founders mentioned how surprised they were by the cluelessness of investors: they dont even know about the stuff theyve invested in. i met some investors that had invested in a hardware device and when i asked them to demo the device they had difficulty switching it on. angels are a bit better than vcs, because they usually have startup experience themselves: vc investors dont know half the time what they are talking about and are years behind in their thinking. a few were great, but 95% of the investors we dealt with were unprofessional, didnt seem to be very good at business or have any kind of creative vision. angels were generally much better to talk to. why are founders surprised that vcs are clueless? i think its because they seem so formidable. the reason vcs seem formidable is that its their profession to. you get to be a vc by convincing asset managers to trust you with hundreds of millions of dollars. how do you do that? you have to seem confident, and you have to seem like you understand technology.  because investors are so bad at judging you, you have to work harder than you should at selling yourself. one founder said the thing that surprised him most was the degree to which feigning certitude impressed investors. this is the thing that has surprised me most about yc founders experiences. this summer we invited some of the alumni to talk to the new startups about fundraising, and pretty much 100% of their advice was about investor psychology. i thought i was cynical about vcs, but the founders were much more cynical. a lot of what startup founders do is just posturing. it works. vcs themselves have no idea of the extent to which the startups they like are the ones that are best at selling themselves to vcs.  its exactly the same phenomenon we saw a step earlier. vcs get money by seeming confident to lps, and founders get money by seeming confident to vcs. with two such random linkages in the path between startups and money, it shouldnt be surprising that luck is a big factor in deals. and yet a lot of founders are surprised by it. i didnt realize how much of a role luck plays and how much is outside of our control. if you think about famous startups, its pretty clear how big a role luck plays. where would microsoft be if ibm insisted on an exclusive license for dos? why are founders fooled by this? business guys probably arent, but hackers are used to a world where skill is paramount, and you get what you deserve. when we started our startup, i had bought the hype of the startup founder dream: that this is a game of skill. it is, in some ways. having skill is valuable. so is being determined as all hell. but being lucky is the critical ingredient. actually the best model would be to say that the outcome is the product of skill, determination, and luck. no matter how much skill and determination you have, if you roll a zero for luck, the outcome is zero. these quotes about luck are not from founders whose startups failed. founders who fail quickly tend to blame themselves. founders who succeed quickly dont usually realize how lucky they were. its the ones in the middle who see how important luck is. a surprising number of founders said what surprised them most about starting a startup was the value of community. some meant the micro-community of yc founders: the immense value of the peer group of yc companies, and facing similar obstacles at similar times. which shouldnt be that surprising, because thats why its structured that way. others were surprised at the value of the startup community in the larger sense: how advantageous it is to live in silicon valley, where you cant help but hear all the cutting-edge tech and startup news, and run into useful people constantly. the specific thing that surprised them most was the general spirit of benevolence: one of the most surprising things i saw was the willingness of people to help us. even people who had nothing to gain went out of their way to help our startup succeed. and particularly how it extended all the way to the top: the surprise for me was how accessible important and interesting people are. its amazing how easily you can reach out to people and get immediate feedback. this is one of the reasons i like being part of this world. creating wealth is not a zero-sum game, so you dont have to stab people in the back to win. there was one surprise founders mentioned that id forgotten about: that outside the startup world, startup founders get no respect. in social settings, i found that i got a lot more respect when i said, "i worked on microsoft office" instead of "i work at a small startup youve never heard of called x." partly this is because the rest of the world just doesnt get startups, and partly its yet another consequence of the fact that most good startup ideas seem bad: if you pitch your idea to a random person, 95% of the time youll find the person instinctively thinks the idea will be a flop and youre wasting your time (although they probably wont say this directly). unfortunately this extends even to dating: it surprised me that being a startup founder does not get you more admiration from women. i did know about that, but id forgotten. the last big surprise founders mentioned is how much things changed as they grew. the biggest change was that you got to program even less: your job description as technical founder/ceo is completely rewritten every 6-12 months. less coding, more managing/planning/company building, hiring, cleaning up messes, and generally getting things in place for what needs to happen a few months from now. in particular, you now have to deal with employees, who often have different motivations: i knew the founder equation and had been focused on it since i knew i wanted to start a startup as a 19 year old. the employee equation is quite different so it took me a while to get it down. fortunately, it can become a lot less stressful once you reach cruising altitude: id say 75% of the stress is gone now from when we first started. running a business is so much more enjoyable now. were more confident. were more patient. we fight less. we sleep more. i wish i could say it was this way for every startup that succeeded, but 75% is probably on the high side. there were a few other patterns, but these were the biggest. ones first thought when looking at them all is to ask if theres a super-pattern, a pattern to the patterns. i saw it immediately, and so did a yc founder i read the list to. these are supposed to be the surprises, the things i didnt tell people. what do they all have in common? theyre all things i tell people. if i wrote a new essay with the same outline as this that wasnt summarizing the founders responses, everyone would say id run out of ideas and was just repeating myself. what is going on here? when i look at the responses, the common theme is that starting a startup was like i said, but way more so. people just dont seem to get how different it is till they do it. why? the key to that mystery is to ask, how different from what? once you phrase it that way, the answer is obvious: from a job. everyones model of work is a job. its completely pervasive. even if youve never had a job, your parents probably did, along with practically every other adult youve met. unconsciously, everyone expects a startup to be like a job, and that explains most of the surprises. it explains why people are surprised how carefully you have to choose cofounders and how hard you have to work to maintain your relationship. you dont have to do that with coworkers. it explains why the ups and downs are surprisingly extreme. in a job there is much more damping. but it also explains why the good times are surprisingly good: most people cant imagine such freedom. as you go down the list, almost all the surprises are surprising in how much a startup differs from a job. you probably cant overcome anything so pervasive as the model of work you grew up with. so the best solution is to be consciously aware of that. as you go into a startup, youll be thinking "everyone says its really extreme." your next thought will probably be "but i cant believe it will be that bad." if you want to avoid being surprised, the next thought after that should be: "and the reason i cant believe it will be that bad is that my model of work is a job."  graduate students might understand it. in grad school you always feel you should be working on your thesis. it doesnt end every semester like classes do.  the best way for a startup to engage with slow-moving organizations is to fork off separate processes to deal with them. its when theyre on the critical path that they kill youwhen you depend on closing a deal to move forward. its worth taking extreme measures to avoid that.  this is a variant of reid hoffmans principle that if you arent embarrassed by what you launch with, you waited too long to launch.  the question to ask about what youve built is not whether its good, but whether its good enough to supply the activation energy required.  some vcs seem to understand technology because they actually do, but thats overkill; the defining test is whether you can talk about it well enough to convince limited partners.  this is the same phenomenon you see with defense contractors or fashion brands. the dumber the customers, the more effort you expend on the process of selling things to them rather than making the things you sell. thanks: to jessica livingston for reading drafts of this, and to all the founders who responded to my email. this essay was originally published at paulgraham.com when meeting people you dont know very well, the convention is to seem extra friendly. you smile and say "pleased to meet you," whether you are or not. theres nothing dishonest about this. everyone knows that these little social lies arent meant to be taken literally, just as everyone knows that "can you pass the salt?" is only grammatically a question. im perfectly willing to smile and say "pleased to meet you" when meeting new people. but there is another set of customs for being ingratiating in print that are not so harmless. the reason theres a convention of being ingratiating in print is that most essays are written to persuade. and as any politician could tell you, the way to persuade people is not just to baldly state the facts. you have to add a spoonful of sugar to make the medicine go down. for example, a politician announcing the cancellation of a government program will not merely say "the program is canceled." that would seem offensively curt. instead hell spend most of his time talking about the noble effort made by the people who worked on it. the reason these conventions are more dangerous is that they interact with the ideas. saying "pleased to meet you" is just something you prepend to a conversation, but the sort of spin added by politicians is woven through it. were starting to move from social lies to real lies. heres an example of a paragraph from an essay i wrote about labor unions . as written, it tends to offend people who like unions. people who think the labor movement was the creation of heroic union organizers have a problem to explain: why are unions shrinking now? the best they can do is fall back on the default explanation of people living in fallen civilizations. our ancestors were giants. the workers of the early twentieth century must have had a moral courage thats lacking today. now heres the same paragraph rewritten to please instead of offending them: early union organizers made heroic sacrifices to improve conditions for workers. but though labor unions are shrinking now, its not because present union leaders are any less courageous. an employer couldnt get away with hiring thugs to beat up union leaders today, but if they did, i see no reason to believe todays union leaders would shrink from the challenge. so i think it would be a mistake to attribute the decline of unions to some kind of decline in the people who run them. early union leaders were heroic, certainly, but we should not suppose that if unions have declined, its because present union leaders are somehow inferior. the cause must be external.  it makes the same point: that it cant have been the personal qualities of early union organizers that made unions successful, but must have been some external factor, or otherwise present-day union leaders would have to be inferior people. but written this way it seems like a defense of present-day union organizers rather than an attack on early ones. that makes it more persuasive to people who like unions, because it seems sympathetic to their cause. i believe everything i wrote in the second version. early union leaders did make heroic sacrifices. and present union leaders probably would rise to the occasion if necessary. people tend to; im skeptical about the idea of "the greatest generation."  if i believe everything i said in the second version, why didnt i write it that way? why offend people needlessly? because id rather offend people than pander to them, and if you write about controversial topics you have to choose one or the other. the degree of courage of past or present union leaders is beside the point; all that matters for the argument is that theyre the same. but if you want to please people who are mistaken, you cant simply tell the truth. youre always going to have to add some sort of padding to protect their misconceptions from bumping against reality. most writers do. most writers write to persuade, if only out of habit or politeness. but i dont write to persuade; i write to figure out. i write to persuade a hypothetical perfectly unbiased reader. since the custom is to write to persuade the actual reader, someone who doesnt will seem arrogant. in fact, worse than arrogant: since readers are used to essays that try to please someone, an essay that displeases one side in a dispute reads as an attempt to pander to the other. to a lot of pro-union readers, the first paragraph sounds like the sort of thing a right-wing radio talk show host would say to stir up his followers. but its not. something that curtly contradicts ones beliefs can be hard to distinguish from a partisan attack on them, but though they can end up in the same place they come from different sources. would it be so bad to add a few extra words, to make people feel better? maybe not. maybe im excessively attached to conciseness. i write code the same way i write essays, making pass after pass looking for anything i can cut. but i have a legitimate reason for doing this. you dont know what the ideas are until you get them down to the fewest words.  the danger of the second paragraph is not merely that its longer. its that you start to lie to yourself. the ideas start to get mixed together with the spin youve added to get them past the readers misconceptions. i think the goal of an essay should be to discover surprising things. thats my goal, at least. and most surprising means most different from what people currently believe. so writing to persuade and writing to discover are diametrically opposed. the more your conclusions disagree with readers present beliefs, the more effort youll have to expend on selling your ideas rather than having them. as you accelerate, this drag increases, till eventually you reach a point where 100% of your energy is devoted to overcoming it and you cant go any faster. its hard enough to overcome ones own misconceptions without having to think about how to get the resulting ideas past other peoples. i worry that if i wrote to persuade, id start to shy away unconsciously from ideas i knew would be hard to sell. when i notice something surprising, its usually very faint at first. theres nothing more than a slight stirring of discomfort. i dont want anything to get in the way of noticing it consciously.  i had a strange feeling of being back in high school writing this. to get a good grade you had to both write the sort of pious crap you were expected to, but also seem to be writing with conviction. the solution was a kind of method acting. it was revoltingly familiar to slip back into it.  exercise for the reader: rephrase that thought to please the same people the first version would offend.  come to think of it, there is one way in which i deliberately pander to readers, because it doesnt change the number of words: i switch person. this flattering distinction seems so natural to the average reader that they probably dont notice even when i switch in mid-sentence, though you tend to notice when its done as conspicuously as this. thanks to jessica livingston and robert morris for reading drafts of this. an earlier version of this essay began by talking about why people dislike michael arrington. i now believe that was mistaken, and that most people dont dislike him for the same reason i did when i first met him, but simply because he writes about controversial things. this essay was originally published at paulgraham.com publishers of all types, from news to music, are unhappy that consumers wont pay for content anymore. at least, thats how they see it. in fact consumers never really were paying for content, and publishers werent really selling it either. if the content was what they were selling, why has the price of books or music or movies always depended mostly on the format? why didnt better content cost more?  a copy of time costs $5 for 58 pages, or 8.6 cents a page. the economist costs $7 for 86 pages, or 8.1 cents a page. better journalism is actually slightly cheaper. almost every form of publishing has been organized as if the medium was what they were selling, and the content was irrelevant. book publishers, for example, set prices based on the cost of producing and distributing books. they treat the words printed in the book the same way a textile manufacturer treats the patterns printed on its fabrics. economically, the print media are in the business of marking up paper. we can all imagine an old-style editor getting a scoop and saying "this will sell a lot of papers!" cross out that final s and youre describing their business model. the reason they make less money now is that people dont need as much paper. a few months ago i ran into a friend in a cafe. i had a copy of the new york times , which i still occasionally buy on weekends. as i was leaving i offered it to him, as ive done countless times before in the same situation. but this time something new happened. i felt that sheepish feeling you get when you offer someone something worthless. "do you, er, want a printout of yesterdays news?" i asked. (he didnt.) now that the medium is evaporating, publishers have nothing left to sell. some seem to think theyre going to sell contentthat they were always in the content business, really. but they werent, and its unclear whether anyone could be. there have always been people in the business of selling information, but that has historically been a distinct business from publishing. and the business of selling information to consumers has always been a marginal one. when i was a kid there were people who used to sell newsletters containing stock tips, printed on colored paper that made them hard for the copiers of the day to reproduce. that is a different world, both culturally and economically, from the one publishers currently inhabit. people will pay for information they think they can make money from. thats why they paid for those stock tip newsletters, and why companies pay now for bloomberg terminals and economist intelligence unit reports. but will people pay for information otherwise? history offers little encouragement. if audiences were willing to pay more for better content, why wasnt anyone already selling it to them? there was no reason you couldnt have done that in the era of physical media. so were the print media and the music labels simply overlooking this opportunity? or is it, rather, nonexistent? what about itunes? doesnt that show people will pay for content? well, not really. itunes is more of a tollbooth than a store. apple controls the default path onto the ipod. they offer a convenient list of songs, and whenever you choose one they ding your credit card for a small amount, just below the threshold of attention. basically, itunes makes money by taxing people, not selling them stuff. you can only do that if you own the channel, and even then you dont make much from it, because a toll has to be ignorable to work. once a toll becomes painful, people start to find ways around it, and thats pretty easy with digital content. the situation is much the same with digital books. whoever controls the device sets the terms. its in their interest for content to be as cheap as possible, and since they own the channel, theres a lot they can do to drive prices down. prices will fall even further once writers realize they dont need publishers. getting a book printed and distributed is a daunting prospect for a writer, but most can upload a file. is software a counterexample? people pay a lot for desktop software, and thats just information. true, but i dont think publishers can learn much from software. software companies can charge a lot because (a) many of the customers are businesses, who get in trouble if they use pirated versions, and (b) though in form merely information, software is treated by both maker and purchaser as a different type of thing from a song or an article. a photoshop user needs photoshop in a way that no one needs a particular song or article. thats why theres a separate word, "content," for information thats not software. software is a different business. software and content blur together in some of the most lightweight software, like casual games. but those are usually free. to make money the way software companies do, publishers would have to become software companies, and being publishers gives them no particular head start in that domain.  the most promising countertrend is the premium cable channel. people still pay for those. but broadcasting isnt publishing: youre not selling a copy of something. thats one reason the movie business hasnt seen their revenues decline the way the news and music businesses have. they only have one foot in publishing. to the extent the movie business can avoid becoming publishers, they may avoid publishings problems. but there are limits to how well theyll be able to do that. once publishinggiving people copiesbecomes the most natural way of distributing your content, it probably doesnt work to stick to old forms of distribution just because you make more that way. if free copies of your content are available online, then youre competing with publishings form of distribution, and thats just as bad as being a publisher. apparently some people in the music business hope to retroactively convert it away from publishing, by getting listeners to pay for subscriptions. it seems unlikely that will work if theyre just streaming the same files you can get as mp3s. what happens to publishing if you cant sell content? you have two choices: give it away and make money from it indirectly, or find ways to embody it in things people will pay for. the first is probably the future of most current media. give music away and make money from concerts and t-shirts. publish articles for free and make money from one of a dozen permutations of advertising. both publishers and investors are down on advertising at the moment, but it has more potential than they realize. im not claiming that potential will be realized by the existing players. the optimal ways to make money from the written word probably require different words written by different people. its harder to say what will happen to movies. they could evolve into ads. or they could return to their roots and make going to the theater a treat. if they made the experience good enough, audiences might start to prefer it to watching pirated movies at home.  or maybe the movie business will dry up, and the people working in it will go to work for game developers. i dont know how big embodying information in physical form will be. it may be surprisingly large; people overvalue physical stuff . there should remain some market for printed books, at least. i can see the evolution of book publishing in the books on my shelves. clearly at some point in the 1960s the big publishing houses started to ask: how cheaply can we make books before people refuse to buy them? the answer turned out to be one step short of phonebooks. as long as it isnt floppy, consumers still perceive it as a book. that worked as long as buying printed books was the only way to read them. if printed books are optional, publishers will have to work harder to entice people to buy them. there should be some market, but its hard to foresee how big, because its size will depend not on macro trends like the amount people read, but on the ingenuity of individual publishers.  some magazines may thrive by focusing on the magazine as a physical object. fashion magazines could be made lush in a way that would be hard to match digitally, at least for a while. but this is probably not an option for most magazines. i dont know exactly what the future will look like, but im not too worried about it. this sort of change tends to create as many good things as it kills. indeed, the really interesting question is not what will happen to existing forms, but what new forms will appear. the reason ive been writing about existing forms is that i dont know what new forms will appear. but though i cant predict specific winners, i can offer a recipe for recognizing them. when you see something thats taking advantage of new technology to give people something they want that they couldnt have before, youre probably looking at a winner. and when you see something thats merely reacting to new technology in an attempt to preserve some existing source of revenue, youre probably looking at a loser.  i dont like the word "content" and tried for a while to avoid using it, but i have to admit theres no other word that means the right thing. "information" is too general. ironically, the main reason i dont like "content" is the thesis of this essay. the word suggests an undifferentiated slurry, but economically thats how both publishers and audiences treat it. content is information you dont need.  some types of publishers would be at a disadvantage trying to enter the software business. record labels, for example, would probably find it more natural to expand into casinos than software, because the kind of people who run them would be more at home at the mafia end of the business spectrum than the dont-be-evil end.  i never watch movies in theaters anymore. the tipping point for me was the ads they show first.  unfortunately, making physically nice books will only be a niche within a niche. publishers are more likely to resort to expedients like selling autographed copies, or editions with the buyers picture on the cover. thanks to michael arrington, trevor blackwell, steven levy, robert morris, and geoff ralston for reading drafts of this. this essay was originally published at paulgraham.com ive done several types of work over the years but i dont know another as counterintuitive as startup investing. the two most important things to understand about startup investing, as a business, are (1) that effectively all the returns are concentrated in a few big winners, and (2) that the best ideas look initially like bad ideas. the first rule i knew intellectually, but didnt really grasp till it happened to us. the total value of the companies weve funded is around 10 billion, give or take a few. but just two companies, dropbox and airbnb, account for about three quarters of it. in startups, the big winners are big to a degree that violates our expectations about variation. i dont know whether these expectations are innate or learned, but whatever the cause, we are just not prepared for the 1000x variation in outcomes that one finds in startup investing. that yields all sorts of strange consequences. for example, in purely financial terms, there is probably at most one company in each yc batch that will have a significant effect on our returns, and the rest are just a cost of doing business. i havent really assimilated that fact, partly because its so counterintuitive, and partly because were not doing this just for financial reasons; yc would be a pretty lonely place if we only had one company per batch. and yet its true. to succeed in a domain that violates your intuitions, you need to be able to turn them off the way a pilot does when flying through clouds. you need to do what you know intellectually to be right, even though it feels wrong. its a constant battle for us. its hard to make ourselves take enough risks. when you interview a startup and think "they seem likely to succeed," its hard not to fund them. and yet, financially at least, there is only one kind of success: theyre either going to be one of the really big winners or not, and if not it doesnt matter whether you fund them, because even if they succeed the effect on your returns will be insignificant. in the same day of interviews you might meet some smart 19 year olds who arent even sure what they want to work on. their chances of succeeding seem small. but again, its not their chances of succeeding that matter but their chances of succeeding really big. the probability that any group will succeed really big is microscopically small, but the probability that those 19 year olds will might be higher than that of the other, safer group. the probability that a startup will make it big is not simply a constant fraction of the probability that they will succeed at all. if it were, you could fund everyone who seemed likely to succeed at all, and youd get that fraction of big hits. unfortunately picking winners is harder than that. you have to ignore the elephant in front of you, the likelihood theyll succeed, and focus instead on the separate and almost invisibly intangible question of whether theyll succeed really big. thats made harder by the fact that the best startup ideas seem at first like bad ideas. ive written about this before: if a good idea were obviously good, someone else would already have done it. so the most successful founders tend to work on ideas that few beside them realize are good. which is not that far from a description of insanity, till you reach the point where you see results. the first time peter thiel spoke at yc he drew a venn diagram that illustrates the situation perfectly. he drew two intersecting circles, one labelled "seems like a bad idea" and the other "is a good idea." the intersection is the sweet spot for startups. this concept is a simple one and yet seeing it as a venn diagram is illuminating. it reminds you that there is an intersectionthat there are good ideas that seem bad. it also reminds you that the vast majority of ideas that seem bad are bad. the fact that the best ideas seem like bad ideas makes it even harder to recognize the big winners. it means the probability of a startup making it really big is not merely not a constant fraction of the probability that it will succeed, but that the startups with a high probability of the former will seem to have a disproportionately low probability of the latter. history tends to get rewritten by big successes, so that in retrospect it seems obvious they were going to make it big. for that reason one of my most valuable memories is how lame facebook sounded to me when i first heard about it. a site for college students to waste time? it seemed the perfect bad idea: a site (1) for a niche market (2) with no money (3) to do something that didnt matter. one could have described microsoft and apple in exactly the same terms. wait, it gets worse. you not only have to solve this hard problem, but you have to do it with no indication of whether youre succeeding. when you pick a big winner, you wont know it for two years. meanwhile, the one thing you can measure is dangerously misleading. the one thing we can track precisely is how well the startups in each batch do at fundraising after demo day. but we know thats the wrong metric. theres no correlation between the percentage of startups that raise money and the metric that does matter financially, whether that batch of startups contains a big winner or not. except an inverse one. thats the scary thing: fundraising is not merely a useless metric, but positively misleading. were in a business where we need to pick unpromising-looking outliers, and the huge scale of the successes means we can afford to spread our net very widely. the big winners could generate 10,000x returns. that means for each big winner we could pick a thousand companies that returned nothing and still end up 10x ahead. if we ever got to the point where 100% of the startups we funded were able to raise money after demo day, it would almost certainly mean we were being too conservative. it takes a conscious effort not to do that too. after 15 cycles of preparing startups for investors and then watching how they do, i can now look at a group were interviewing through demo day investors eyes. but those are the wrong eyes to look through! we can afford to take at least 10x as much risk as demo day investors. and since risk is usually proportionate to reward, if you can afford to take more risk you should. what would it mean to take 10x more risk than demo day investors? wed have to be willing to fund 10x more startups than they would. which means that even if were generous to ourselves and assume that yc can on average triple a startups expected value, wed be taking the right amount of risk if only 30% of the startups were able to raise significant funding after demo day. i dont know what fraction of them currently raise more after demo day. i deliberately avoid calculating that number, because if you start measuring something you start optimizing it, and i know its the wrong thing to optimize. but the percentage is certainly way over 30%. and frankly the thought of a 30% success rate at fundraising makes my stomach clench. a demo day where only 30% of the startups were fundable would be a shambles. everyone would agree that yc had jumped the shark. we ourselves would feel that yc had jumped the shark. and yet wed all be wrong. for better or worse thats never going to be more than a thought experiment. we could never stand it. how about that for counterintuitive? i can lay out what i know to be the right thing to do, and still not do it. i can make up all sorts of plausible justifications. it would hurt ycs brand (at least among the innumerate) if we invested in huge numbers of risky startups that flamed out. it might dilute the value of the alumni network. perhaps most convincingly, it would be demoralizing for us to be up to our chins in failure all the time. but i know the real reason were so conservative is that we just havent assimilated the fact of 1000x variation in returns. well probably never be able to bring ourselves to take risks proportionate to the returns in this business. the best we can hope for is that when we interview a group and find ourselves thinking "they seem like good founders, but what are investors going to think of this crazy idea?" well continue to be able to say "who cares what investors think?" thats what we thought about airbnb, and if we want to fund more airbnbs we have to stay good at thinking it.  im not saying that the big winners are all that matters, just that theyre all that matters financially for investors. since were not doing yc mainly for financial reasons, the big winners arent all that matters to us. were delighted to have funded reddit, for example. even though we made comparatively little from it, reddit has had a big effect on the world, and it introduced us to steve huffman and alexis ohanian, both of whom have become good friends. nor do we push founders to try to become one of the big winners if they dont want to. we didnt "swing for the fences" in our own startup (viaweb, which was acquired for $50 million), and it would feel pretty bogus to press founders to do something we didnt do. our rule is that its up to the founders. some want to take over the world, and some just want that first few million. but we invest in so many companies that we dont have to sweat any one outcome. in fact, we dont have to sweat whether startups have exits at all. the biggest exits are the only ones that matter financially, and those are guaranteed in the sense that if a company becomes big enough, a market for its shares will inevitably arise. since the remaining outcomes dont have a significant effect on returns, its cool with us if the founders want to sell early for a small amount, or grow slowly and never sell (i.e. become a so-called lifestyle business), or even shut the company down. were sometimes disappointed when a startup we had high hopes for doesnt do well, but this disappointment is mostly the ordinary variety that anyone feels when that happens.  without visual cues (e.g. the horizon) you cant distinguish between gravity and acceleration. which means if youre flying through clouds you cant tell what the attitude of the aircraft is. you could feel like youre flying straight and level while in fact youre descending in a spiral. the solution is to ignore what your body is telling you and listen only to your instruments. but it turns out to be very hard to ignore what your body is telling you. every pilot knows about this problem and yet it is still a leading cause of accidents.  not all big hits follow this pattern though. the reason google seemed a bad idea was that there were already lots of search engines and there didnt seem to be room for another.  a startups success at fundraising is a function of two things: what theyre selling and how good they are at selling it. and while we can teach startups a lot about how to appeal to investors, even the most convincing pitch cant sell an idea that investors dont like. i was genuinely worried that airbnb, for example, would not be able to raise money after demo day. i couldnt convince fred wilson to fund them. they might not have raised money at all but for the coincidence that greg mcadoo, our contact at sequoia, was one of a handful of vcs who understood the vacation rental business, having spent much of the previous two years investigating it.  i calculated it once for the last batch before a consortium of investors started offering investment automatically to every startup we funded, summer 2010. at the time it was 94% (33 of 35 companies that tried to raise money succeeded, and one didnt try because they were already profitable). presumably its lower now because of that investment; in the old days it was raise after demo day or die. thanks to sam altman, paul buchheit, patrick collison, jessica livingston, geoff ralston, and harj taggar for reading drafts of this. this essay was originally published at paulgraham.com i bet you the current issue of cosmopolitan has an article whose title begins with a number. "7 things he wont tell you about sex," or something like that. some popular magazines feature articles of this type on the cover of every issue. that cant be happening by accident. editors must know they attract readers. why do readers like the list of n things so much? mainly because its easier to read than a regular article.  structurally, the list of n things is a degenerate case of essay. an essay can go anywhere the writer wants. in a list of n things the writer agrees to constrain himself to a collection of points of roughly equal importance, and he tells the reader explicitly what they are. some of the work of reading an article is understanding its structurefiguring out what in high school wed have called its "outline." not explicitly, of course, but someone who really understands an article probably has something in his brain afterward that corresponds to such an outline. in a list of n things, this work is done for you. its structure is an exoskeleton. as well as being explicit, the structure is guaranteed to be of the simplest possible type: a few main points with few to no subordinate ones, and no particular connection between them. because the main points are unconnected, the list of n things is random access. theres no thread of reasoning you have to follow. you could read the list in any order. and because the points are independent of one another, they work like watertight compartments in an unsinkable ship. if you get bored with, or cant understand, or dont agree with one point, you dont have to give up on the article. you can just abandon that one and skip to the next. a list of n things is parallel and therefore fault tolerant. there are times when this format is what a writer wants. one, obviously, is when what you have to say actually is a list of n things. i once wrote an essay about the mistakes that kill startups , and a few people made fun of me for writing something whose title began with a number. but in that case i really was trying to make a complete catalog of a number of independent things. in fact, one of the questions i was trying to answer was how many there were. there are other less legitimate reasons for using this format. for example, i use it when i get close to a deadline. if i have to give a talk and i havent started it a few days beforehand, ill sometimes play it safe and make the talk a list of n things. the list of n things is easier for writers as well as readers. when youre writing a real essay, theres always a chance youll hit a dead end. a real essay is a train of thought, and some trains of thought just peter out. thats an alarming possibility when you have to give a talk in a few days. what if you run out of ideas? the compartmentalized structure of the list of n things protects the writer from his own stupidity in much the same way it protects the reader. if you run out of ideas on one point, no problem: it wont kill the essay. you can take out the whole point if you need to, and the essay will still survive. writing a list of n things is so relaxing. you think of n/2 of them in the first 5 minutes. so bang, theres the structure, and you just have to fill it in. as you think of more points, you just add them to the end. maybe you take out or rearrange or combine a few, but at every stage you have a valid (though initially low-res) list of n things. its like the sort of programming where you write a version 1 very quickly and then gradually modify it, but at every point have working codeor the style of painting where you begin with a complete but very blurry sketch done in an hour, then spend a week cranking up the resolution. because the list of n things is easier for writers too, its not always a damning sign when readers prefer it. its not necessarily evidence readers are lazy; it could also mean they dont have much confidence in the writer. the list of n things is in that respect the cheeseburger of essay forms. if youre eating at a restaurant you suspect is bad, your best bet is to order the cheeseburger. even a bad cook can make a decent cheeseburger. and there are pretty strict conventions about what a cheeseburger should look like. you can assume the cook isnt going to try something weird and artistic. the list of n things similarly limits the damage that can be done by a bad writer. you know its going to be about whatever the title says, and the format prevents the writer from indulging in any flights of fancy. because the list of n things is the easiest essay form, it should be a good one for beginning writers. and in fact it is what most beginning writers are taught. the classic 5 paragraph essay is really a list of n things for n  3. but the students writing them dont realize theyre using the same structure as the articles they read in cosmopolitan . theyre not allowed to include the numbers, and theyre expected to spackle over the gaps with gratuitous transitions ("furthermore...") and cap the thing at either end with introductory and concluding paragraphs so it will look superficially like a real essay.  it seems a fine plan to start students off with the list of n things. its the easiest form. but if were going to do that, why not do it openly? let them write lists of n things like the pros, with numbers and no transitions or "conclusion." there is one case where the list of n things is a dishonest format: when you use it to attract attention by falsely claiming the list is an exhaustive one. i.e. if you write an article that purports to be about the 7 secrets of success. that kind of title is the same sort of reflexive challenge as a whodunit. you have to at least look at the article to check whether theyre the same 7 youd list. are you overlooking one of the secrets of success? better check. its fine to put "the" before the number if you really believe youve made an exhaustive list. but evidence suggests most things with titles like this are linkbait. the greatest weakness of the list of n things is that theres so little room for new thought. the main point of essay writing, when done right, is the new ideas you have while doing it. a real essay, as the name implies, is dynamic : you dont know what youre going to write when you start. it will be about whatever you discover in the course of writing it. this can only happen in a very limited way in a list of n things. you make the title first, and thats what its going to be about. you cant have more new ideas in the writing than will fit in the watertight compartments you set up initially. and your brain seems to know this: because you dont have room for new ideas, you dont have them. another advantage of admitting to beginning writers that the 5 paragraph essay is really a list of n things is that we can warn them about this. it only lets you experience the defining characteristic of essay writing on a small scale: in thoughts of a sentence or two. and its particularly dangerous that the 5 paragraph essay buries the list of n things within something that looks like a more sophisticated type of essay. if you dont know youre using this form, you dont know you need to escape it.  articles of this type are also startlingly popular on delicious, but i think thats because delicious/popular is driven by bookmarking, not because delicious users are stupid. delicious users are collectors, and a list of n things seems particularly collectible because its a collection itself.  most "word problems" in school math textbooks are similarly misleading. they look superficially like the application of math to real problems, but theyre not. so if anything they reinforce the impression that math is merely a complicated but pointless collection of stuff to be memorized. this essay was originally published at paulgraham.com like all investors, we spend a lot of time trying to learn how to predict which startups will succeed. we probably spend more time thinking about it than most, because we invest the earliest. prediction is usually all we have to rely on. we learned quickly that the most important predictor of success is determination. at first we thought it might be intelligence. everyone likes to believe thats what makes startups succeed. it makes a better story that a company won because its founders were so smart. the pr people and reporters who spread such stories probably believe them themselves. but while it certainly helps to be smart, its not the deciding factor. there are plenty of people as smart as bill gates who achieve nothing. in most domains, talent is overrated compared to determinationpartly because it makes a better story, partly because it gives onlookers an excuse for being lazy, and partly because after a while determination starts to look like talent. i cant think of any field in which determination is overrated, but the relative importance of determination and talent probably do vary somewhat. talent probably matters more in types of work that are purer, in the sense that one is solving mostly a single type of problem instead of many different types. i suspect determination would not take you as far in math as it would in, say, organized crime. i dont mean to suggest by this comparison that types of work that depend more on talent are always more admirable. most people would agree its more admirable to be good at math than memorizing long strings of digits, even though the latter depends more on natural ability. perhaps one reason people believe startup founders win by being smarter is that intelligence does matter more in technology startups than it used to in earlier types of companies. you probably do need to be a bit smarter to dominate internet search than you had to be to dominate railroads or hotels or newspapers. and thats probably an ongoing trend. but even in the highest of high tech industries, success still depends more on determination than brains. if determination is so important, can we isolate its components? are some more important than others? are there some you can cultivate? the simplest form of determination is sheer willfulness. when you want something, you must have it, no matter what. a good deal of willfulness must be inborn, because its common to see families where one sibling has much more of it than another. circumstances can alter it, but at the high end of the scale, nature seems to be more important than nurture. bad circumstances can break the spirit of a strong-willed person, but i dont think theres much you can do to make a weak-willed person stronger-willed. being strong-willed is not enough, however. you also have to be hard on yourself. someone who was strong-willed but self-indulgent would not be called determined. determination implies your willfulness is balanced by discipline. that word balance is a significant one. the more willful you are, the more disciplined you have to be. the stronger your will, the less anyone will be able to argue with you except yourself. and someone has to argue with you, because everyone has base impulses, and if you have more will than discipline youll just give into them and end up on a local maximum like drug addiction. we can imagine will and discipline as two fingers squeezing a slippery melon seed. the harder they squeeze, the further the seed flies, but they must both squeeze equally or the seed spins off sideways. if this is true it has interesting implications, because discipline can be cultivated, and in fact does tend to vary quite a lot in the course of an individuals life. if determination is effectively the product of will and discipline, then you can become more determined by being more disciplined.  another consequence of the melon seed model is that the more willful you are, the more dangerous it is to be undisciplined. there seem to be plenty of examples to confirm that. in some very energetic peoples lives you see something like wing flutter, where they alternate between doing great work and doing absolutely nothing. externally this would look a lot like bipolar disorder. the melon seed model is inaccurate in at least one respect, however: its static. in fact the dangers of indiscipline increase with temptation. which means, interestingly, that determination tends to erode itself. if youre sufficiently determined to achieve great things, this will probably increase the number of temptations around you. unless you become proportionally more disciplined, willfulness will then get the upper hand, and your achievement will revert to the mean. thats why julius caesar thought thin men so dangerous. they werent tempted by the minor perquisites of power. the melon seed model implies its possible to be too disciplined. is it? i think there probably are people whose willfulness is crushed down by excessive discipline, and who would achieve more if they werent so hard on themselves. one reason the young sometimes succeed where the old fail is that they dont realize how incompetent they are. this lets them do a kind of deficit spending. when they first start working on something, they overrate their achievements. but that gives them confidence to keep working, and their performance improves. whereas someone clearer-eyed would see their initial incompetence for what it was, and perhaps be discouraged from continuing. theres one other major component of determination: ambition. if willfulness and discipline are what get you to your destination, ambition is how you choose it. i dont know if its exactly right to say that ambition is a component of determination, but theyre not entirely orthogonal. it would seem a misnomer if someone said they were very determined to do something trivially easy. and fortunately ambition seems to be quite malleable; theres a lot you can do to increase it. most people dont know how ambitious to be, especially when theyre young. they dont know whats hard, or what theyre capable of. and this problem is exacerbated by having few peers. ambitious people are rare, so if everyone is mixed together randomly, as they tend to be early in peoples lives, then the ambitious ones wont have many ambitious peers. when you take people like this and put them together with other ambitious people, they bloom like dying plants given water. probably most ambitious people are starved for the sort of encouragement theyd get from ambitious peers, whatever their age.  achievements also tend to increase your ambition. with each step you gain confidence to stretch further next time. so here in sum is how determination seems to work: it consists of willfulness balanced with discipline, aimed by ambition. and fortunately at least two of these three qualities can be cultivated. you may be able to increase your strength of will somewhat; you can definitely learn self-discipline; and almost everyone is practically malnourished when it comes to ambition. i feel like i understand determination a bit better now. but only a bit: willfulness, discipline, and ambition are all concepts almost as complicated as determination.  note too that determination and talent are not the whole story. theres a third factor in achievement: how much you like the work. if you really love working on something, you dont need determination to drive you; its what youd do anyway. but most types of work have aspects one doesnt like, because most types of work consist of doing things for other people, and its very unlikely that the tasks imposed by their needs will happen to align exactly with what you want to do. indeed, if you want to create the most wealth , the way to do it is to focus more on their needs than your interests, and make up the difference with determination.  loosely speaking. what im claiming with the melon seed model is more like determination is proportionate to wdm - k|w - d|n, where w is will and d discipline.  which means one of the best ways to help a society generally is to create events and institutions that bring ambitious people together. its like pulling the control rods out of a reactor: the energy they emit encourages other ambitious people, instead of being absorbed by the normal people theyre usually surrounded with. conversely, its probably a mistake to do as some european countries have done and try to ensure none of your universities is significantly better than the others.  for example, willfulness clearly has two subcomponents, stubbornness and energy. the first alone yields someone whos stubbornly inert. the second alone yields someone flighty. as willful people get older or otherwise lose their energy, they tend to become merely stubborn. thanks to sam altman, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com kate courteau is the architect who designed y combinators office. recently we managed to recruit her to help us run yc when shes not busy with architectural projects. though shed heard a lot about yc since the beginning, the last 9 months have been a total immersion. ive been around the startup world for so long that it seems normal to me, so i was curious to hear what had surprised her most about it. this was her list: kate knew in principle that startups were very risky, but she was surprised to see how constant the threat of failure wasnot just for the minnows, but even for the famous startups whose founders came to speak at yc dinners. as usual, by demo day about half the startups were doing something significantly different than they started with. we encourage that. starting a startup is like science in that you have to follow the truth wherever it leads. in the rest of the world, people dont start things till theyre sure what they want to do, and once started they tend continue on their initial path even if its mistaken. in kates world, everything is still physical and expensive. you can barely renovate a bathroom for the cost of starting a startup. that was her actual word. i agree with her, but till she mentioned this it never occurred to me how little this quality is appreciated in most of the rest of the world. it wouldnt be a compliment in most organizations to call someone scrappy. what does it mean, exactly? its basically the diminutive form of belligerent. someone whos scrappy manages to be both threatening and undignified at the same time. which seems to me exactly what one would want to be, in any kind of work. if youre not threatening, youre probably not doing anything new, and dignity is merely a sort of plaque. "it seems like everybody here is in the industry." that isnt literally true, but there is a qualitative difference between silicon valley and other places. you tend to keep your voice down, because theres a good chance the person at the next table would know some of the people youre talking about. i never felt that in boston. the good news is, theres also a good chance the person at the next table could help you in some way. actually, ive noticed this too. i always worry the speakers will put us in an embarrassing position by contradicting what we tell the startups, but it happens surprisingly rarely. when i asked her what specific things she remembered speakers always saying, she mentioned: that the way to succeed was to launch something fast, listen to users, and then iterate; that startups required resilience because they were always an emotional rollercoaster; and that most vcs were sheep. ive been impressed by how consistently the speakers advocate launching fast and iterating. that was contrarian advice 10 years ago, but its clearly now the established practice. 7. how casual successful startup founders are. most of the famous founders in silicon valley are people youd overlook on the street. its not merely that they dont dress up. they dont project any kind of aura of power either. "theyre not trying to impress anyone." interestingly, while kate said that she could never pick out successful founders, she could recognize vcs, both by the way they dressed and the way they carried themselves. (i swear i didnt prompt this one.) without advice "theyd just be sort of lost." fortunately, there are a lot of people to help them. theres a strong tradition within yc of helping other yc-funded startups. but we didnt invent that idea: its just a slightly more concentrated form of existing valley culture. architects are constantly interacting face to face with other people, whereas doing a technology startup, at least, tends to require long stretches of uninterrupted time to work. "you could do it in a box." by inverting this list, we can get a portrait of the "normal" world. its populated by people who talk a lot with one another as they work slowly but harmoniously on conservative, expensive projects whose destinations are decided in advance, and who carefully adjust their manner to reflect their position in the hierarchy. thats also a fairly accurate description of the past. so startup culture may not merely be different in the way youd expect any subculture to be, but a leading indicator. this essay was originally published at paulgraham.com the segway hasnt delivered on its initial promise, to put it mildly. there are several reasons why, but one is that people dont want to be seen riding them. someone riding a segway looks like a dork. my friend trevor blackwell built his own segway , which we called the segwell. he also built a one-wheeled version, the eunicycle , which looks exactly like a regular unicycle till you realize the rider isnt pedaling. he has ridden them both to downtown mountain view to get coffee. when he rides the eunicycle, people smile at him. but when he rides the segwell, they shout abuse from their cars: "too lazy to walk, ya fuckin homo?" why do segways provoke this reaction? the reason you look like a dork riding a segway is that you look smug . you dont seem to be working hard enough. someone riding a motorcycle isnt working any harder. but because hes sitting astride it, he seems to be making an effort. when youre riding a segway youre just standing there. and someone whos being whisked along while seeming to do no worksomeone in a sedan chair, for examplecant help but look smug. try this thought experiment and it becomes clear: imagine something that worked like the segway, but that you rode with one foot in front of the other, like a skateboard. that wouldnt seem nearly as uncool. so there may be a way to capture more of the market segway hoped to reach: make a version that doesnt look so easy for the rider. it would also be helpful if the styling was in the tradition of skateboards or bicycles rather than medical devices. curiously enough, what got segway into this problem was that the company was itself a kind of segway. it was too easy for them; they were too successful raising money. if theyd had to grow the company gradually, by iterating through several versions they sold to real users, theyd have learned pretty quickly that people looked stupid riding them. instead they had enough to work in secret. they had focus groups aplenty, im sure, but they didnt have the people yelling insults out of cars. so they never realized they were zooming confidently down a blind alley. this essay was originally published at paulgraham.com now that the term "ramen profitable" has become widespread, i ought to explain precisely what the idea entails. ramen profitable means a startup makes just enough to pay the founders living expenses. this is a different form of profitability than startups have traditionally aimed for. traditional profitability means a big bet is finally paying off, whereas the main importance of ramen profitability is that it buys you time.  in the past, a startup would usually become profitable only after raising and spending quite a lot of money. a company making computer hardware might not become profitable for 5 years, during which they spent $50 million. but when they did they might have revenues of $50 million a year. this kind of profitability means the startup has succeeded. ramen profitability is the other extreme: a startup that becomes profitable after 2 months, even though its revenues are only $3000 a month, because the only employees are a couple 25 year old founders who can live on practically nothing. revenues of $3000 a month do not mean the company has succeeded. but it does share something with the one thats profitable in the traditional way: they dont need to raise money to survive. ramen profitability is an unfamiliar idea to most people because it only recently became feasible. its still not feasible for a lot of startups; it would not be for most biotech startups, for example; but it is for many software startups because theyre now so cheap. for many, the only real cost is the founders living expenses. the main significance of this type of profitability is that youre no longer at the mercy of investors. if youre still losing money, then eventually youll either have to raise more or shut down. once youre ramen profitable this painful choice goes away. you can still raise money, but you dont have to do it now.    the most obvious advantage of not needing money is that you can get better terms. if investors know you need money, theyll sometimes take advantage of you. some may even deliberately stall, because they know that as you run out of money youll become increasingly pliable. but there are also three less obvious advantages of ramen profitability. one is that it makes you more attractive to investors. if youre already profitable, on however small a scale, it shows that (a) you can get at least someone to pay you, (b) youre serious about building things people want, and (c) youre disciplined enough to keep expenses low. this is reassuring to investors, because youve addressed three of their biggest worries. its common for them to fund companies that have smart founders and a big market, and yet still fail. when these companies fail, its usually because (a) people wouldnt pay for what they made, e.g. because it was too hard to sell to them, or the market wasnt ready yet, (b) the founders solved the wrong problem, instead of paying attention to what users needed, or (c) the company spent too much and burned through their funding before they started to make money. if youre ramen profitable, youre already avoiding these mistakes. another advantage of ramen profitability is that its good for morale. a company tends to feel rather theoretical when you first start it. its legally a company, but you feel like youre lying when you call it one. when people start to pay you significant amounts, the company starts to feel real. and your own living expenses are the milestone you feel most, because at that point the future flips state. now survival is the default, instead of dying. a morale boost on that scale is very valuable in a startup, because the moral weight of running a startup is what makes it hard. startups are still very rare. why dont more people do it? the financial risk? plenty of 25 year olds save nothing anyway. the long hours? plenty of people work just as long hours in regular jobs. what keeps people from starting startups is the fear of having so much responsibility. and this is not an irrational fear: it really is hard to bear. anything that takes some of that weight off you will greatly increase your chances of surviving. a startup that reaches ramen profitability may be more likely to succeed than not. which is pretty exciting, considering the bimodal distribution of outcomes in startups: you either fail or make a lot of money. the fourth advantage of ramen profitability is the least obvious but may be the most important. if you dont need to raise money, you dont have to interrupt working on the company to do it. raising money is terribly distracting. youre lucky if your productivity is a third of what it was before. and it can last for months. i didnt understand (or rather, remember) precisely why raising money was so distracting till earlier this year. id noticed that startups we funded would usually grind to a halt when they switched to raising money, but i didnt remember exactly why till yc raised money itself. we had a comparatively easy time of it; the first people i asked said yes; but it took months to work out the details, and during that time i got hardly any real work done. why? because i thought about it all the time. at any given time there tends to be one problem thats the most urgent for a startup. this is what you think about as you fall asleep at night and when you take a shower in the morning. and when you start raising money, that becomes the problem you think about. you only take one shower in the morning, and if youre thinking about investors during it, then youre not thinking about the product. whereas if you can choose when you raise money, you can pick a time when youre not in the middle of something else, and you can probably also insist that the round close fast. you may even be able to avoid having the round occupy your thoughts, if you dont care whether it closes.    ramen profitable means no more than the definition implies. it does not, for example, imply that youre "bootstrapping" the startupthat youre never going to take money from investors. empirically that doesnt seem to work very well. few startups succeed without taking investment. maybe as startups get cheaper it will become more common. on the other hand, the money is there, waiting to be invested. if startups need it less, theyll be able to get it on better terms, which will make them more inclined to take it. that will tend to produce an equilibrium.  another thing ramen profitability doesnt imply is joe krauss idea that you should put your business model in beta when you put your product in beta. he believes you should get people to pay you from the beginning. i think thats too constraining. facebook didnt, and theyve done better than most startups. making money right away was not only unnecessary for them, but probably would have been harmful. i do think joes rule could be useful for many startups, though. when founders seem unfocused, i sometimes suggest they try to get customers to pay them for something, in the hope that this constraint will prod them into action. the difference between joes idea and ramen profitability is that a ramen profitable company doesnt have to be making money the way it ultimately will. it just has to be making money. the most famous example is google, which initially made money by licensing search to sites like yahoo. is there a downside to ramen profitability? probably the biggest danger is that it might turn you into a consulting firm. startups have to be product companies, in the sense of making a single thing that everyone uses. the defining quality of startups is that they grow fast, and consulting just cant scale the way a product can.  but its pretty easy to make $3000 a month consulting; in fact, that would be a low rate for contract programming. so there could be a temptation to slide into consulting, and telling yourselves youre a ramen profitable startup, when in fact youre not a startup at all. its ok to do a little consulting-type work at first. startups usually have to do something weird at first. but remember that ramen profitability is not the destination. a startups destination is to grow really big; ramen profitability is a trick for not dying en route.  the "ramen" in "ramen profitable" refers to instant ramen, which is just about the cheapest food available. please do not take the term literally. living on instant ramen would be very unhealthy. rice and beans are a better source of food. start by investing in a rice cooker, if you dont have one. rice and beans for 2n put rice in rice cooker. add water as specified on rice package. (default: 2 cups water per cup of rice.) turn on rice cooker and forget about it. chop onions and other vegetables and fry in oil, over fairly low heat, till onions are glassy. put in chopped garlic, pepper, cumin, and a little more fat, and stir. keep heat low. cook another 2 or 3 minutes, then add beans (dont drain the beans), and stir. throw in the bouillon cube(s), cover, and cook on lowish heat for at least 10 minutes more. stir vigilantly to avoid sticking. if you want to save money, buy beans in giant cans from discount stores. spices are also much cheaper when bought in bulk. if theres an indian grocery store near you, theyll have big bags of cumin for the same price as the little jars in supermarkets.  theres a good chance that a shift in power from investors to founders would actually increase the size of the venture business. i think investors currently err too far on the side of being harsh to founders. if they were forced to stop, the whole venture business would work better, and you might see something like the increase in trade you always see when restrictive laws are removed. investors are one of the biggest sources of pain for founders; if they stopped causing so much pain, it would be better to be a founder; and if it were better to be a founder, more people would do it.  its conceivable that a startup could grow big by transforming consulting into a form that would scale. but if they did that theyd really be a product company. thanks to jessica livingston for reading drafts of this. this essay was originally published at paulgraham.com one reason programmers dislike meetings so much is that theyre on a different type of schedule from other people. meetings cost them more. there are two types of schedule, which ill call the managers schedule and the makers schedule. the managers schedule is for bosses. its embodied in the traditional appointment book, with each day cut into one hour intervals. you can block off several hours for a single task if you need to, but by default you change what youre doing every hour. when you use time that way, its merely a practical problem to meet with someone. find an open slot in your schedule, book them, and youre done. most powerful people are on the managers schedule. its the schedule of command. but theres another way of using time thats common among people who make things, like programmers and writers. they generally prefer to use time in units of half a day at least. you cant write or program well in units of an hour. thats barely enough time to get started. when youre operating on the makers schedule, meetings are a disaster. a single meeting can blow a whole afternoon, by breaking it into two pieces each too small to do anything hard in. plus you have to remember to go to the meeting. thats no problem for someone on the managers schedule. theres always something coming on the next hour; the only question is what. but when someone on the makers schedule has a meeting, they have to think about it. for someone on the makers schedule, having a meeting is like throwing an exception. it doesnt merely cause you to switch from one task to another; it changes the mode in which you work. i find one meeting can sometimes affect a whole day. a meeting commonly blows at least half a day, by breaking up a morning or afternoon. but in addition theres sometimes a cascading effect. if i know the afternoon is going to be broken up, im slightly less likely to start something ambitious in the morning. i know this may sound oversensitive, but if youre a maker, think of your own case. dont your spirits rise at the thought of having an entire day free to work, with no appointments at all? well, that means your spirits are correspondingly depressed when you dont. and ambitious projects are by definition close to the limits of your capacity. a small decrease in morale is enough to kill them off. each type of schedule works fine by itself. problems arise when they meet. since most powerful people operate on the managers schedule, theyre in a position to make everyone resonate at their frequency if they want to. but the smarter ones restrain themselves, if they know that some of the people working for them need long chunks of time to work in. our case is an unusual one. nearly all investors, including all vcs i know, operate on the managers schedule. but y combinator runs on the makers schedule. rtm and trevor and i do because we always have, and jessica does too, mostly, because shes gotten into sync with us. i wouldnt be surprised if there start to be more companies like us. i suspect founders may increasingly be able to resist, or at least postpone, turning into managers, just as a few decades ago they started to be able to resist switching from jeans to suits. how do we manage to advise so many startups on the makers schedule? by using the classic device for simulating the managers schedule within the makers: office hours. several times a week i set aside a chunk of time to meet founders weve funded. these chunks of time are at the end of my working day, and i wrote a signup program that ensures all the appointments within a given set of office hours are clustered at the end. because they come at the end of my day these meetings are never an interruption. (unless their working day ends at the same time as mine, the meeting presumably interrupts theirs, but since they made the appointment it must be worth it to them.) during busy periods, office hours sometimes get long enough that they compress the day, but they never interrupt it. when we were working on our own startup, back in the 90s, i evolved another trick for partitioning the day. i used to program from dinner till about 3 am every day, because at night no one could interrupt me. then id sleep till about 11 am, and come in and work until dinner on what i called "business stuff." i never thought of it in these terms, but in effect i had two workdays each day, one on the managers schedule and one on the makers. when youre operating on the managers schedule you can do something youd never want to do on the makers: you can have speculative meetings. you can meet someone just to get to know one another. if you have an empty slot in your schedule, why not? maybe it will turn out you can help one another in some way. business people in silicon valley (and the whole world, for that matter) have speculative meetings all the time. theyre effectively free if youre on the managers schedule. theyre so common that theres distinctive language for proposing them: saying that you want to "grab coffee," for example. speculative meetings are terribly costly if youre on the makers schedule, though. which puts us in something of a bind. everyone assumes that, like other investors, we run on the managers schedule. so they introduce us to someone they think we ought to meet, or send us an email proposing we grab coffee. at this point we have two options, neither of them good: we can meet with them, and lose half a days work; or we can try to avoid meeting them, and probably offend them. till recently we werent clear in our own minds about the source of the problem. we just took it for granted that we had to either blow our schedules or offend people. but now that ive realized whats going on, perhaps theres a third option: to write something explaining the two types of schedule. maybe eventually, if the conflict between the managers schedule and the makers schedule starts to be more widely understood, it will become less of a problem. those of us on the makers schedule are willing to compromise. we know we have to have some number of meetings. all we ask from those on the managers schedule is that they understand the cost. thanks to sam altman, trevor blackwell, paul buchheit, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com recently i realized id been holding two ideas in my head that would explode if combined. the first is that startups may represent a new economic phase , on the scale of the industrial revolution. im not sure of this, but there seems a decent chance its true. people are dramatically more productive as founders or early employees of startups-imagine how much less larry and sergey would have achieved if theyd gone to work for a big company-and that scale of improvement can change social customs. the second idea is that startups are a type of business that flourishes in certain places that specialize in it-that silicon valley specializes in startups in the same way los angeles specializes in movies, or new york in finance.  what if both are true? what if startups are both a new economic phase and also a type of business that only flourishes in certain centers? if so, this revolution is going to be particularly revolutionary. all previous revolutions have spread. agriculture, cities, and industrialization all spread widely. if startups end up being like the movie business, with just a handful of centers and one dominant one, thats going to have novel consequences. there are already signs that startups may not spread particularly well. the spread of startups seems to be proceeding slower than the spread of the industrial revolution, despite the fact that communication is so much faster now. within a few decades of the founding of boulton & watt there were steam engines scattered over northern europe and north america. industrialization didnt spread much beyond those regions for a while. it only spread to places where there was a strong middle class-countries where a private citizen could make a fortune without having it confiscated. otherwise it wasnt worth investing in factories. but in a country with a strong middle class it was easy for industrial techniques to take root. an individual mine or factory owner could decide to install a steam engine, and within a few years he could probably find someone local to make him one. so steam engines spread fast. and they spread widely, because the locations of mines and factories were determined by features like rivers, harbors, and sources of raw materials.  startups dont seem to spread so well, partly because theyre more a social than a technical phenomenon, and partly because theyre not tied to geography. an individual european manufacturer could import industrial techniques and theyd work fine. this doesnt seem to work so well with startups: you need a community of expertise, as you do in the movie business.  plus there arent the same forces driving startups to spread. once railroads or electric power grids were invented, every region had to have them. an area without railroads or power was a rich potential market. but this isnt true with startups. theres no need for a microsoft of france or google of germany. governments may decide they want to encourage startups locally, but government policy cant call them into being the way a genuine need could. how will this all play out? if i had to predict now, id say that startups will spread, but very slowly, because their spread will be driven not by government policies (which wont work) or by market need (which doesnt exist) but, to the extent that it happens at all, by the same random factors that have caused startup culture to spread thus far. and such random factors will increasingly be outweighed by the pull of existing startup hubs. silicon valley is where it is because william shockley wanted to move back to palo alto, where he grew up, and the experts he lured west to work with him liked it so much they stayed. seattle owes much of its position as a tech center to the same cause: gates and allen wanted to move home. otherwise albuquerque might have seattles place in the rankings. boston is a tech center because its the intellectual capital of the us and probably the world. and if battery ventures hadnt turned down facebook, boston would be significantly bigger now on the startup radar screen. but of course its not a coincidence that facebook got funded in the valley and not boston. there are more and bolder investors in silicon valley than in boston, and even undergrads know it. bostons case illustrates the difficulty youd have establishing a new startup hub this late in the game. if you wanted to create a startup hub by reproducing the way existing ones happened, the way to do it would be to establish a first-rate research university in a place so nice that rich people wanted to live there. then the town would be hospitable to both groups you need: both founders and investors. thats the combination that yielded silicon valley. but silicon valley didnt have silicon valley to compete with. if you tried now to create a startup hub by planting a great university in a nice place, it would have a harder time getting started, because many of the best startups it produced would be sucked away to existing startup hubs. recently i suggested a potential shortcut: pay startups to move . once you had enough good startups in one place, it would create a self-sustaining chain reaction. founders would start to move there without being paid, because that was where their peers were, and investors would appear too, because that was where the deals were. in practice i doubt any government would have the balls to try this, or the brains to do it right. i didnt mean it as a practical suggestion, but more as an exploration of the lower bound of what it would take to create a startup hub deliberately. the most likely scenario is (1) that no government will successfully establish a startup hub, and (2) that the spread of startup culture will thus be driven by the random factors that have driven it so far, but (3) that these factors will be increasingly outweighed by the pull of existing startup hubs. result: this revolution, if it is one, will be unusually localized.  there are two very different types of startup: one kind that evolves naturally, and one kind thats called into being to "commercialize" a scientific discovery. most computer/software startups are now the first type, and most pharmaceutical startups the second. when i talk about startups in this essay, i mean type i startups. there is no difficulty making type ii startups spread: all you have to do is fund medical research labs; commercializing whatever new discoveries the boffins throw off is as straightforward as building a new airport. type ii startups neither require nor produce startup culture. but that means having type ii startups wont get you type i startups. philadelphia is a case in point: lots of type ii startups, but hardly any type i. incidentally, google may appear to be an instance of a type ii startup, but it wasnt. google is not pagerank commercialized. they could have used another algorithm and everything would have turned out the same. what made google google is that they cared about doing search well at a critical point in the evolution of the web.  watt didnt invent the steam engine. his critical invention was a refinement that made steam engines dramatically more efficient: the separate condenser. but that oversimplifies his role. he had such a different attitude to the problem and approached it with such energy that he transformed the field. perhaps the most accurate way to put it would be to say that watt reinvented the steam engine.  the biggest counterexample here is skype. if youre doing something that would get shut down in the us, it becomes an advantage to be located elsewhere. thats why kazaa took the place of napster. and the expertise and connections the founders gained from running kazaa helped ensure the success of skype. thanks to patrick collison, jessica livingston, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com i usually avoid politics, but since we now seem to have an administration thats open to suggestions, im going to risk making one. the single biggest thing the government could do to increase the number of startups in this country is a policy that would cost nothing: establish a new class of visa for startup founders. the biggest constraint on the number of new startups that get created in the us is not tax policy or employment law or even sarbanes-oxley. its that we wont let the people who want to start them into the country. letting just 10,000 startup founders into the country each year could have a visible effect on the economy. if we assume 4 people per startup, which is probably an overestimate, thats 2500 new companies. each year. they wouldnt all grow as big as google, but out of 2500 some would come close. by definition these 10,000 founders wouldnt be taking jobs from americans: it could be part of the terms of the visa that they couldnt work for existing companies, only new ones theyd founded. in fact theyd cause there to be more jobs for americans, because the companies they started would hire more employees as they grew. the tricky part might seem to be how one defined a startup. but that could be solved quite easily: let the market decide. startup investors work hard to find the best startups. the government could not do better than to piggyback on their expertise, and use investment by recognized startup investors as the test of whether a company was a real startup. how would the government decide whos a startup investor? the same way they decide what counts as a university for student visas. well establish our own accreditation procedure. we know who one another are. 10,000 people is a drop in the bucket by immigration standards, but would represent a huge increase in the pool of startup founders. i think this would have such a visible effect on the economy that it would make the legislator who introduced the bill famous. the only way to know for sure would be to try it, and that would cost practically nothing. thanks to trevor blackwell, paul buchheit, jeff clavier, david hornik, jessica livingston, greg mcadoo, aydin senkut, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com inc recently asked me who i thought were the 5 most interesting startup founders of the last 30 years. how do you decide whos the most interesting? the best test seemed to be influence: who are the 5 whove influenced me most? who do i use as examples when im talking to companies we fund? who do i find myself quoting? id guess steve is the most influential founder not just for me but for most people you could ask. a lot of startup culture is apple culture. he was the original young founder. and while the concept of "insanely great" already existed in the arts, it was a novel idea to introduce into a company in the 1980s. more remarkable still, hes stayed interesting for 30 years. people await new apple products the way theyd await new books by a popular novelist. steve may not literally design them, but they wouldnt happen if he werent ceo. steve is clever and driven, but so are a lot of people in the valley. what makes him unique is his sense of design . before him, most companies treated design as a frivolous extra. apples competitors now know better. tj rodgers isnt as famous as steve jobs, but he may be the best writer among silicon valley ceos. ive probably learned more from him about the startup way of thinking than from anyone else. not so much from specific things hes written as by reconstructing the mind that produced them: brutally candid; aggressively garbage-collecting outdated ideas; and yet driven by pragmatism rather than ideology. the first essay of his that i read was so electrifying that i remember exactly where i was at the time. it was high technology innovation: free markets or government subsidies? and i was downstairs in the harvard square t station. it felt as if someone had flipped on a light switch inside my head. im sorry to treat larry and sergey as one person. ive always thought that was unfair to them. but it does seem as if google was a collaboration. before google, companies in silicon valley already knew it was important to have the best hackers. so they claimed, at least. but google pushed this idea further than anyone had before. their hypothesis seems to have been that, in the initial stages at least, all you need is good hackers: if you hire all the smartest people and put them to work on a problem where their success can be measured, you win. all the other stuffwhich includes all the stuff that business schools think business consists ofyou can figure out along the way. the results wont be perfect, but theyll be optimal. if this was their hypothesis, its now been verified experimentally. few know this, but one person, paul buchheit, is responsible for three of the best things google has done. he was the original author of gmail, which is the most impressive thing google has after search. he also wrote the first prototype of adsense, and was the author of googles mantra "dont be evil." pb made a point in a talk once that i now mention to every startup we fund: that its better, initially, to make a small number of users really love you than a large number kind of like you. if i could tell startups only ten sentences , this would be one of them. now hes cofounder of a startup called friendfeed. its only a year old, but already everyone in the valley is watching them. someone responsible for three of the biggest ideas at google is going to come up with more. i was told i shouldnt mention founders of yc-funded companies in this list. but sam altman cant be stopped by such flimsy rules. if he wants to be on this list, hes going to be. honestly, sam is, along with steve jobs, the founder i refer to most when im advising startups. on questions of design, i ask "what would steve do?" but on questions of strategy or ambition i ask "what would sama do?" what i learned from meeting sama is that the doctrine of the elect applies to startups. it applies way less than most people think: startup investing does not consist of trying to pick winners the way you might in a horse race. but there are a few people with such force of will that theyre going to get whatever they want. this essay was originally published at paulgraham.com a couple days ago i finally got being a good startup founder down to two words: relentlessly resourceful. till then the best id managed was to get the opposite quality down to one: hapless. most dictionaries say hapless means unlucky. but the dictionaries are not doing a very good job. a team that outplays its opponents but loses because of a bad decision by the referee could be called unlucky, but not hapless. hapless implies passivity. to be hapless is to be battered by circumstancesto let the world have its way with you, instead of having your way with the world.  unfortunately theres no antonym of hapless, which makes it difficult to tell founders what to aim for. "dont be hapless" is not much of rallying cry. its not hard to express the quality were looking for in metaphors. the best is probably a running back. a good running back is not merely determined, but flexible as well. they want to get downfield, but they adapt their plans on the fly. unfortunately this is just a metaphor, and not a useful one to most people outside the us. "be like a running back" is no better than "dont be hapless." but finally ive figured out how to express this quality directly. i was writing a talk for investors , and i had to explain what to look for in founders. what would someone who was the opposite of hapless be like? theyd be relentlessly resourceful. not merely relentless. thats not enough to make things go your way except in a few mostly uninteresting domains. in any interesting domain, the difficulties will be novel. which means you cant simply plow through them, because you dont know initially how hard they are; you dont know whether youre about to plow through a block of foam or granite. so you have to be resourceful. you have to keep trying new things. be relentlessly resourceful. that sounds right, but is it simply a description of how to be successful in general? i dont think so. this isnt the recipe for success in writing or painting, for example. in that kind of work the recipe is more to be actively curious. resourceful implies the obstacles are external, which they generally are in startups. but in writing and painting theyre mostly internal; the obstacle is your own obtuseness.  there probably are other fields where "relentlessly resourceful" is the recipe for success. but though other fields may share it, i think this is the best short description well find of what makes a good startup founder. i doubt it could be made more precise. now that we know what were looking for, that leads to other questions. for example, can this quality be taught? after four years of trying to teach it to people, id say that yes, surprisingly often it can. not to everyone, but to many people.  some people are just constitutionally passive, but others have a latent ability to be relentlessly resourceful that only needs to be brought out. this is particularly true of young people who have till now always been under the thumb of some kind of authority. being relentlessly resourceful is definitely not the recipe for success in big companies, or in most schools. i dont even want to think what the recipe is in big companies, but it is certainly longer and messier, involving some combination of resourcefulness, obedience, and building alliances. identifying this quality also brings us closer to answering a question people often wonder about: how many startups there could be. there is not, as some people seem to think, any economic upper bound on this number. theres no reason to believe there is any limit on the amount of newly created wealth consumers can absorb, any more than there is a limit on the number of theorems that can be proven. so probably the limiting factor on the number of startups is the pool of potential founders. some people would make good founders, and others wouldnt. and now that we can say what makes a good founder, we know how to put an upper bound on the size of the pool. this test is also useful to individuals. if you want to know whether youre the right sort of person to start a startup, ask yourself whether youre relentlessly resourceful. and if you want to know whether to recruit someone as a cofounder, ask if they are. you can even use it tactically. if i were running a startup, this would be the phrase id tape to the mirror. "make something people want" is the destination, but "be relentlessly resourceful" is how you get there.  i think the reason the dictionaries are wrong is that the meaning of the word has shifted. no one writing a dictionary from scratch today would say that hapless meant unlucky. but a couple hundred years ago they might have. people were more at the mercy of circumstances in the past, and as a result a lot of the words we use for good and bad outcomes have origins in words about luck. when i was living in italy, i was once trying to tell someone that i hadnt had much success in doing something, but i couldnt think of the italian word for success. i spent some time trying to describe the word i meant. finally she said "ah! fortuna!"  there are aspects of startups where the recipe is to be actively curious. there can be times when what youre doing is almost pure discovery. unfortunately these times are a small proportion of the whole. on the other hand, they are in research too.  id almost say to most people, but i realize (a) i have no idea what most people are like, and (b) im pathologically optimistic about peoples ability to change. thanks to trevor blackwell and jessica livingston for reading drafts of this. this essay was originally published at paulgraham.com a palliative care nurse called bronnie ware made a list of the biggest regrets of the dying . her list seems plausible. i could see myself making at least 4 of these 5 mistakes. if you had to compress them into a single piece of advice, it might be: dont be a cog. the 5 regrets paint a portrait of post-industrial man, who shrinks himself into a shape that fits his circumstances, then turns dutifully till he stops. the alarming thing is, the mistakes that produce these regrets are all errors of omission. you forget your dreams, ignore your family, suppress your feelings, neglect your friends, and forget to be happy. errors of omission are a particularly dangerous type of mistake, because you make them by default. i would like to avoid making these mistakes. but how do you avoid mistakes you make by default? ideally you transform your life so it has other defaults. but it may not be possible to do that completely. as long as these mistakes happen by default, you probably have to be reminded not to make them. so i inverted the 5 regrets, yielding a list of 5 commands dont ignore your dreams; dont work too much; say what you think; cultivate friendships; be happy. which i then put at the top of the file i use as a todo list. this essay was originally published at paulgraham.com this essay is derived from a talk at angelconf . when we sold our startup in 1998 i thought one day id do some angel investing. seven years later i still hadnt started. i put it off because it seemed mysterious and complicated. it turns out to be easier than i expected, and also more interesting. the part i thought was hard, the mechanics of investing, really isnt. you give a startup money and they give you stock. youll probably get either preferred stock, which means stock with extra rights like getting your money back first in a sale, or convertible debt, which means (on paper) youre lending the company money, and the debt converts to stock at the next sufficiently big funding round.  there are sometimes minor tactical advantages to using one or the other. the paperwork for convertible debt is simpler. but really it doesnt matter much which you use. dont spend much time worrying about the details of deal terms, especially when you first start angel investing. thats not how you win at this game. when you hear people talking about a successful angel investor, theyre not saying "he got a 4x liquidation preference." theyre saying "he invested in google." thats how you win: by investing in the right startups. that is so much more important than anything else that i worry im misleading you by even talking about other things. angel investors often syndicate deals, which means they join together to invest on the same terms. in a syndicate there is usually a "lead" investor who negotiates the terms with the startup. but not always: sometimes the startup cobbles together a syndicate of investors who approach them independently, and the startups lawyer supplies the paperwork. the easiest way to get started in angel investing is to find a friend who already does it, and try to get included in his syndicates. then all you have to do is write checks. dont feel like you have to join a syndicate, though. its not that hard to do it yourself. you can just use the standard series aa documents wilson sonsini and y combinator published online. you should of course have your lawyer review everything. both you and the startup should have lawyers. but the lawyers dont have to create the agreement from scratch.  when you negotiate terms with a startup, there are two numbers you care about: how much money youre putting in, and the valuation of the company. the valuation determines how much stock you get. if you put $50,000 into a company at a pre-money valuation of $1 million, then the post-money valuation is $1.05 million, and you get .05/1.05, or 4.76% of the companys stock. if the company raises more money later, the new investor will take a chunk of the company away from all the existing shareholders just as you did. if in the next round they sell 10% of the company to a new investor, your 4.76% will be reduced to 4.28%. thats ok. dilution is normal. what saves you from being mistreated in future rounds, usually, is that youre in the same boat as the founders. they cant dilute you without diluting themselves just as much. and they wont dilute themselves unless they end up net ahead . so in theory, each further round of investment leaves you with a smaller share of an even more valuable company, till after several more rounds you end up with .5% of the company at the point where it ipos, and you are very happy because your $50,000 has become $5 million.  the agreement by which you invest should have provisions that let you contribute to future rounds to maintain your percentage. so its your choice whether you get diluted.  if the company does really well, you eventually will, because eventually the valuations will get so high its not worth it for you. how much does an angel invest? that varies enormously, from $10,000 to hundreds of thousands or in rare cases even millions. the upper bound is obviously the total amount the founders want to raise. the lower bound is 5-10% of the total or $10,000, whichever is greater. a typical angel round these days might be $150,000 raised from 5 people. valuations dont vary as much. for angel rounds its rare to see a valuation lower than half a million or higher than 4 or 5 million. 4 million is starting to be vc territory. how do you decide what valuation to offer? if youre part of a round led by someone else, that problem is solved for you. but what if youre investing by yourself? theres no real answer. there is no rational way to value an early stage startup. the valuation reflects nothing more than the strength of the companys bargaining position. if they really want you, either because they desperately need money, or youre someone who can help them a lot, theyll let you invest at a low valuation. if they dont need you, it will be higher. so guess. the startup may not have any more idea what the number should be than you do.  ultimately it doesnt matter much. when angels make a lot of money from a deal, its not because they invested at a valuation of $1.5 million instead of $3 million. its because the company was really successful. i cant emphasize that too much. dont get hung up on mechanics or deal terms. what you should spend your time thinking about is whether the company is good. (similarly, founders also should not get hung up on deal terms, but should spend their time thinking about how to make the company good.) theres a second less obvious component of an angel investment: how much youre expected to help the startup. like the amount you invest, this can vary a lot. you dont have to do anything if you dont want to; you could simply be a source of money. or you can become a de facto employee of the company. just make sure that you and the startup agree in advance about roughly how much youll do for them. really hot companies sometimes have high standards for angels. the ones everyone wants to invest in practically audition investors, and only take money from people who are famous and/or will work hard for them. but dont feel like you have to put in a lot of time or you wont get to invest in any good startups. there is a surprising lack of correlation between how hot a deal a startup is and how well it ends up doing. lots of hot startups will end up failing, and lots of startups no one likes will end up succeeding. and the latter are so desperate for money that theyll take it from anyone at a low valuation.  it would be nice to be able to pick those out, wouldnt it? the part of angel investing that has most effect on your returns, picking the right companies, is also the hardest. so you should practically ignore (or more precisely, archive, in the gmail sense) everything ive told you so far. you may need to refer to it at some point, but it is not the central issue. the central issue is picking the right startups. what "make something people want" is for startups, "pick the right startups" is for investors. combined they yield "pick the startups that will make something people want." how do you do that? its not as simple as picking startups that are already making something wildly popular. by then its too late for angels. vcs will already be onto them. as an angel, you have to pick startups before theyve got a hiteither because theyve made something great but users dont realize it yet, like google early on, or because theyre still an iteration or two away from the big hit, like paypal when they were making software for transferring money between pdas. to be a good angel investor, you have to be a good judge of potential. thats what it comes down to. vcs can be fast followers. most of them dont try to predict what will win. they just try to notice quickly when something already is winning. but angels have to be able to predict.  one interesting consequence of this fact is that there are a lot of people out there who have never even made an angel investment and yet are already better angel investors than they realize. someone who doesnt know the first thing about the mechanics of venture funding but knows what a successful startup founder looks like is actually far ahead of someone who knows termsheets inside out, but thinks "hacker" means someone who breaks into computers. if you can recognize good startup founders by empathizing with themif you both resonate at the same frequencythen you may already be a better startup picker than the median professional vc.  paul buchheit, for example, started angel investing about a year after me, and he was pretty much immediately as good as me at picking startups. my extra year of experience was rounding error compared to our ability to empathize with founders. what makes a good founder? if there were a word that meant the opposite of hapless, that would be the one. bad founders seem hapless. they may be smart, or not, but somehow events overwhelm them and they get discouraged and give up. good founders make things happen the way they want. which is not to say they force things to happen in a predefined way. good founders have a healthy respect for reality. but they are relentlessly resourceful. thats the closest i can get to the opposite of hapless. you want to fund people who are relentlessly resourceful. notice we started out talking about things, and now were talking about people. there is an ongoing debate between investors which is more important, the people, or the ideaor more precisely, the market. some, like ron conway, say its the peoplethat the idea will change, but the people are the foundation of the company. whereas marc andreessen says hed back ok founders in a hot market over great founders in a bad one.  these two positions are not so far apart as they seem, because good people find good markets. bill gates would probably have ended up pretty rich even if ibm hadnt happened to drop the pc standard in his lap. ive thought a lot about the disagreement between the investors who prefer to bet on people and those who prefer to bet on markets. its kind of surprising that it even exists. youd expect opinions to have converged more. but i think ive figured out whats going on. the three most prominent people i know who favor markets are marc, jawed karim, and joe kraus. and all three of them, in their own startups, basically flew into a thermal: they hit a market growing so fast that it was all they could do to keep up with it. that kind of experience is hard to ignore. plus i think they underestimate themselves: they think back to how easy it felt to ride that huge thermal upward, and they think "anyone could have done it." but that isnt true; they are not ordinary people. so as an angel investor i think you want to go with ron conway and bet on people. thermals happen, yes, but no one can predict themnot even the founders, and certainly not you as an investor. and only good people can ride the thermals if they hit them anyway. of course the question of how to choose startups presumes you have startups to choose between. how do you find them? this is yet another problem that gets solved for you by syndicates. if you tag along on a friends investments, you dont have to find startups. the problem is not finding startups, exactly, but finding a stream of reasonably high quality ones. the traditional way to do this is through contacts. if youre friends with a lot of investors and founders, theyll send deals your way. the valley basically runs on referrals. and once you start to become known as reliable, useful investor, people will refer lots of deals to you. i certainly will. theres also a newer way to find startups, which is to come to events like y combinators demo day, where a batch of newly created startups presents to investors all at once. we have two demo days a year, one in march and one in august. these are basically mass referrals. but events like demo day only account for a fraction of matches between startups and investors. the personal referral is still the most common route. so if you want to hear about new startups, the best way to do it is to get lots of referrals. the best way to get lots of referrals is to invest in startups. no matter how smart and nice you seem, insiders will be reluctant to send you referrals until youve proven yourself by doing a couple investments. some smart, nice guys turn out to be flaky, high-maintenance investors. but once you prove yourself as a good investor, the deal flow, as they call it, will increase rapidly in both quality and quantity. at the extreme, for someone like ron conway, it is basically identical with the deal flow of the whole valley. so if you want to invest seriously, the way to get started is to bootstrap yourself off your existing connections, be a good investor in the startups you meet that way, and eventually youll start a chain reaction. good investors are rare, even in silicon valley. there probably arent more than a couple hundred serious angels in the whole valley, and yet theyre probably the single most important ingredient in making the valley what it is. angels are the limiting reagent in startup formation. if there are only a couple hundred serious angels in the valley, then by deciding to become one you could single-handedly make the pipeline for startups in silicon valley significantly wider. that is kind of mind-blowing. how do you be a good angel investor? the first thing you need is to be decisive. when we talk to founders about good and bad investors, one of the ways we describe the good ones is to say "he writes checks." that doesnt mean the investor says yes to everyone. far from it. it means he makes up his mind quickly, and follows through. you may be thinking, how hard could that be? youll see when you try it. it follows from the nature of angel investing that the decisions are hard. you have to guess early, at the stage when the most promising ideas still seem counterintuitive, because if they were obviously good, vcs would already have funded them. suppose its 1998. you come across a startup founded by a couple grad students. they say theyre going to work on internet search. there are already a bunch of big public companies doing search. how can these grad students possibly compete with them? and does search even matter anyway? all the search engines are trying to get people to start calling them "portals" instead. why would you want to invest in a startup run by a couple of nobodies who are trying to compete with large, aggressive companies in an area they themselves have declared passe? and yet the grad students seem pretty smart. what do you do? theres a hack for being decisive when youre inexperienced: ratchet down the size of your investment till its an amount you wouldnt care too much about losing. for every rich person (you probably shouldnt try angel investing unless you think of yourself as rich) theres some amount that would be painless, though annoying, to lose. till you feel comfortable investing, dont invest more than that per startup. for example, if you have $5 million in investable assets, it would probably be painless (though annoying) to lose $15,000. thats less than .3% of your net worth. so start by making 3 or 4 $15,000 investments. nothing will teach you about angel investing like experience. treat the first few as an educational expense. $60,000 is less than a lot of graduate programs. plus you get equity. whats really uncool is to be strategically indecisive: to string founders along while trying to gather more information about the startups trajectory.  theres always a temptation to do that, because you just have so little to go on, but you have to consciously resist it. in the long term its to your advantage to be good. the other component of being a good angel investor is simply to be a good person. angel investing is not a business where you make money by screwing people over. startups create wealth, and creating wealth is not a zero sum game. no one has to lose for you to win. in fact, if you mistreat the founders you invest in, theyll just get demoralized and the company will do worse. plus your referrals will dry up. so i recommend being good. the most successful angel investors i know are all basically good people. once they invest in a company, all they want to do is help it. and theyll help people they havent invested in too. when they do favors they dont seem to keep track of them. its too much overhead. they just try to help everyone, and assume good things will flow back to them somehow. empirically that seems to work.  convertible debt can be either capped at a particular valuation, or can be done at a discount to whatever the valuation turns out to be when it converts. e.g. convertible debt at a discount of 30% means when it converts you get stock as if youd invested at a 30% lower valuation. that can be useful in cases where you cant or dont want to figure out what the valuation should be. you leave it to the next investor. on the other hand, a lot of investors want to know exactly what theyre getting, so they will only do convertible debt with a cap.  the expensive part of creating an agreement from scratch is not writing the agreement, but bickering at several hundred dollars an hour over the details. thats why the series aa paperwork aims at a middle ground. you can just start from the compromise youd have reached after lots of back and forth. when you fund a startup, both your lawyers should be specialists in startups. do not use ordinary corporate lawyers for this. their inexperience makes them overbuild: theyll create huge, overcomplicated agreements, and spend hours arguing over irrelevant things. in the valley, the top startup law firms are wilson sonsini, orrick, fenwick & west, gunderson dettmer, and cooley godward. in boston the best are goodwin procter, wilmer hale, and foley hoag.  your mileage may vary.  these anti-dilution provisions also protect you against tricks like a later investor trying to steal the company by doing another round that values the company at $1. if you have a competent startup lawyer handle the deal for you, you should be protected against such tricks initially. but it could become a problem later. if a big vc firm wants to invest in the startup after you, they may try to make you take out your anti-dilution protections. and if they do the startup will be pressuring you to agree. theyll tell you that if you dont, youre going to kill their deal with the vc. i recommend you solve this problem by having a gentlemens agreement with the founders: agree with them in advance that youre not going to give up your anti-dilution protections. then its up to them to tell vcs early on. the reason you dont want to give them up is the following scenario. the vcs recapitalize the company, meaning they give it additional funding at a pre-money valuation of zero. this wipes out the existing shareholders, including both you and the founders. they then grant the founders lots of options, because they need them to stay around, but you get nothing. obviously this is not a nice thing to do. it doesnt happen often. brand-name vcs wouldnt recapitalize a company just to steal a few percent from an angel. but theres a continuum here. a less upstanding, lower-tier vc might be tempted to do it to steal a big chunk of stock. im not saying you should always absolutely refuse to give up your anti-dilution protections. everything is a negotiation. if youre part of a powerful syndicate, you might be able to give up legal protections and rely on social ones. if you invest in a deal led by a big angel like ron conway, for example, youre pretty well protected against being mistreated, because any vc would think twice before crossing him. this kind of protection is one of the reasons angels like to invest in syndicates.  dont invest so much, or at such a low valuation, that you end up with an excessively large share of a startup, unless youre sure your money will be the last they ever need. later stage investors wont invest in a company if the founders dont have enough equity left to motivate them. i talked to a vc recently who said hed met with a company he really liked, but he turned them down because investors already owned more than half of it. those investors probably thought theyd been pretty clever by getting such a large chunk of this desirable company, but in fact they were shooting themselves in the foot.  at any given time i know of at least 3 or 4 yc alumni who i believe will be big successes but who are running on vapor, financially, because investors dont yet get what theyre doing. (and no, unfortunately, i cant tell you who they are. i cant refer a startup to an investor i dont know.)  there are some vcs who can predict instead of reacting. not surprisingly, these are the most successful ones.  its somewhat sneaky of me to put it this way, because the median vc loses money. thats one of the most surprising things ive learned about vc while working on y combinator. only a fraction of vcs even have positive returns. the rest exist to satisfy demand among fund managers for venture capital as an asset class. learning this explained a lot about some of the vcs i encountered when we were working on viaweb.  vcs also generally say they prefer great markets to great people. but what theyre really saying is they want both. theyre so selective that they only even consider great people. so when they say they care above all about big markets, they mean thats how they choose between great people.  founders rightly dislike the sort of investor who says hes interested in investing but doesnt want to lead. there are circumstances where this is an acceptable excuse, but more often than not what it means is "no, but if you turn out to be a hot deal, i want to be able to claim retroactively i said yes." if you like a startup enough to invest in it, then invest in it. just use the standard series aa terms and write them a check. thanks to sam altman, paul buchheit, jessica livingston, robert morris, and fred wilson for reading drafts of this. comment on this essay. this essay was originally published at paulgraham.com about twenty years ago people noticed computers and tv were on a collision course and started to speculate about what theyd produce when they converged. we now know the answer: computers. its clear now that even by using the word "convergence" we were giving tv too much credit. this wont be convergence so much as replacement. people may still watch things they call "tv shows," but theyll watch them mostly on computers. what decided the contest for computers? four forces, three of which one could have predicted, and one that would have been harder to. one predictable cause of victory is that the internet is an open platform. anyone can build whatever they want on it, and the market picks the winners. so innovation happens at hacker speeds instead of big company speeds. the second is moores law, which has worked its usual magic on internet bandwidth.  the third reason computers won is piracy. users prefer it not just because its free, but because its more convenient. bittorrent and youtube have already trained a new generation of viewers that the place to watch shows is on a computer screen.  the somewhat more surprising force was one specific type of innovation: social applications. the average teenage kid has a pretty much infinite capacity for talking to their friends. but they cant physically be with them all the time. when i was in high school the solution was the telephone. now its social networks, multiplayer games, and various messaging applications. the way you reach them all is through a computer.  which means every teenage kid (a) wants a computer with an internet connection, (b) has an incentive to figure out how to use it, and (c) spends countless hours in front of it. this was the most powerful force of all. this was what made everyone want computers. nerds got computers because they liked them. then gamers got them to play games on. but it was connecting to other people that got everyone else: thats what made even grandmas and 14 year old girls want computers. after decades of running an iv drip right into their audience, people in the entertainment business had understandably come to think of them as rather passive. they thought theyd be able to dictate the way shows reached audiences. but they underestimated the force of their desire to connect with one another. facebook killed tv. that is wildly oversimplified, of course, but probably as close to the truth as you can get in three words. ___ the tv networks already seem, grudgingly, to see where things are going, and have responded by putting their stuff, grudgingly, online. but theyre still dragging their heels. they still seem to wish people would watch shows on tv instead, just as newspapers that put their stories online still seem to wish people would wait till the next morning and read them printed on paper. they should both just face the fact that the internet is the primary medium. theyd be in a better position if theyd done that earlier. when a new medium arises thats powerful enough to make incumbents nervous, then its probably powerful enough to win, and the best thing they can do is jump in immediately. whether they like it or not, big changes are coming, because the internet dissolves the two cornerstones of broadcast media: synchronicity and locality. on the internet, you dont have to send everyone the same signal, and you dont have to send it to them from a local source. people will watch what they want when they want it, and group themselves according to whatever shared interest they feel most strongly. maybe their strongest shared interest will be their physical location, but im guessing not. which means local tv is probably dead. it was an artifact of limitations imposed by old technology. if someone were creating an internet-based tv company from scratch now, they might have some plan for shows aimed at specific regions, but it wouldnt be a top priority. synchronicity and locality are tied together. tv network affiliates care whats on at 10 because that delivers viewers for local news at 11. this connection adds more brittleness than strength, however: people dont watch whats on at 10 because they want to watch the news afterward. tv networks will fight these trends, because they dont have sufficient flexibility to adapt to them. theyre hemmed in by local affiliates in much the same way car companies are hemmed in by dealers and unions. inevitably, the people running the networks will take the easy route and try to keep the old model running for a couple more years, just as the record labels have done. a recent article in the wall street journal described how tv networks were trying to add more live shows, partly as a way to make viewers watch tv synchronously instead of watching recorded shows when it suited them. instead of delivering what viewers want, theyre trying to force them to change their habits to suit the networks obsolete business model. that never works unless you have a monopoly or cartel to enforce it, and even then it only works temporarily. the other reason networks like live shows is that theyre cheaper to produce. there they have the right idea, but they havent followed it to its conclusion. live content can be way cheaper than networks realize, and the way to take advantage of dramatic decreases in cost is to increase volume . the networks are prevented from seeing this whole line of reasoning because they still think of themselves as being in the broadcast businessas sending one signal to everyone.  ___ now would be a good time to start any company that competes with tv networks. thats what a lot of internet startups are, though they may not have had this as an explicit goal. people only have so many leisure hours a day, and tv is premised on such long sessions (unlike google, which prides itself on sending users on their way quickly) that anything that takes up their time is competing with it. but in addition to such indirect competitors, i think tv companies will increasingly face direct ones. even in cable tv, the long tail was lopped off prematurely by the threshold you had to get over to start a new channel. it will be longer on the internet, and there will be more mobility within it. in this new world, the existing players will only have the advantages any big company has in its market. that will change the balance of power between the networks and the people who produce shows. the networks used to be gatekeepers. they distributed your work, and sold advertising on it. now the people who produce a show can distribute it themselves. the main value networks supply now is ad sales. which will tend to put them in the position of service providers rather than publishers. shows will change even more. on the internet theres no reason to keep their current format, or even the fact that they have a single format. indeed, the more interesting sort of convergence thats coming is between shows and games. but on the question of what sort of entertainment gets distributed on the internet in 20 years, i wouldnt dare to make any predictions, except that things will change a lot. well get whatever the most imaginative people can cook up. thats why the internet won.  thanks to trevor blackwell for this point. he adds: "i remember the eyes of phone companies gleaming in the early 90s when they talked about convergence. they thought most programming would be on demand, and they would implement it and make a lot of money. it didnt work out. they assumed that their local network infrastructure would be critical to do video on-demand, because you couldnt possibly stream it from a few data centers over the internet. at the time (1992) the entire cross-country internet bandwidth wasnt enough for one video stream. but wide-area bandwidth increased more than they expected and they were beaten by itunes and hulu."  copyright owners tend to focus on the aspect they see of piracy, which is the lost revenue. they therefore think what drives users to do it is the desire to get something for free. but itunes shows that people will pay for stuff online, if you make it easy. a significant component of piracy is simply that it offers a better user experience.  or a phone that is actually a computer. im not making any predictions about the size of the device that will replace tv, just that it will have a browser and get data via the internet.  emmett shear writes: "id argue the long tail for sports may be even larger than the long tail for other kinds of content. anyone can broadcast a high school football game that will be interesting to 10,000 people or so, even if the quality of production is not so good." thanks to sam altman, trevor blackwell, nancy cook, michael seibel. emmett shear, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com a lot of cities look at silicon valley and ask "how could we make something like that happen here?" the organic way to do it is to establish a first-rate university in a place where rich people want to live. thats how silicon valley happened. but could you shortcut the process by funding startups? possibly. lets consider what it would take. the first thing to understand is that encouraging startups is a different problem from encouraging startups in a particular city. the latter is much more expensive. people sometimes think they could improve the startup scene in their town by starting something like y combinator there, but in fact it will have near zero effect. i know because y combinator itself had near zero effect on boston when we were based there half the year. the people we funded came from all over the country (indeed, the world) and afterward they went wherever they could get more fundingwhich generally meant silicon valley. the seed funding business is not a regional business, because at that stage startups are mobile. theyre just a couple founders with laptops.  if you want to encourage startups in a particular city, you have to fund startups that wont leave. there are two ways to do that: have rules preventing them from leaving, or fund them at the point in their life when they naturally take root. the first approach is a mistake, because it becomes a filter for selecting bad startups. if your terms force startups to do things they dont want to, only the desperate ones will take your money. good startups will move to another city as a condition of funding. what they wont do is agree not to move the next time they need funding. so the only way to get them to stay is to give them enough that they never need to leave. ___ how much would that take? if you want to keep startups from leaving your town, you have to give them enough that theyre not tempted by an offer from silicon valley vcs that requires them to move. a startup would be able to refuse such an offer if they had grown to the point where they were (a) rooted in your town and/or (b) so successful that vcs would fund them even if they didnt move. how much would it cost to grow a startup to that point? a minimum of several hundred thousand dollars. wufoo seem to have rooted themselves in tampa on $118k, but theyre an extreme case. on average it would take at least half a million. so if it seems too good to be true to think you could grow a local silicon valley by giving startups $15-20k each like y combinator, thats because it is. to make them stick around youd have to give them at least 20 times that much. however, even that is an interesting prospect. suppose to be on the safe side it would cost a million dollars per startup. if you could get startups to stick to your town for a million apiece, then for a billion dollars you could bring in a thousand startups. that probably wouldnt push you past silicon valley itself, but it might get you second place. for the price of a football stadium, any town that was decent to live in could make itself one of the biggest startup hubs in the world. whats more, it wouldnt take very long. you could probably do it in five years. during the term of one mayor. and it would get easier over time, because the more startups you had in town, the less it would take to get new ones to move there. by the time you had a thousand startups in town, the vcs wouldnt be trying so hard to get them to move to silicon valley; instead theyd be opening local offices. then youd really be in good shape. youd have started a self-sustaining chain reaction like the one that drives the valley. ___ but now comes the hard part. you have to pick the startups. how do you do that? picking startups is a rare and valuable skill, and the handful of people who have it are not readily hireable. and this skill is so hard to measure that if a government did try to hire people with it, theyd almost certainly get the wrong ones. for example, a city could give money to a vc fund to establish a local branch, and let them make the choices. but only a bad vc fund would take that deal. they wouldnt seem bad to the city officials. theyd seem very impressive. but theyd be bad at picking startups. thats the characteristic failure mode of vcs. all vcs look impressive to limited partners. the difference between the good ones and the bad ones only becomes visible in the other half of their jobs: choosing and advising startups.  what you really want is a pool of local angel investorspeople investing money they made from their own startups. but unfortunately you run into a chicken and egg problem here. if your city isnt already a startup hub, there wont be people there who got rich from startups. and there is no way i can think of that a city could attract angels from outside. by definition theyre rich. theres no incentive that would make them move.  however, a city could select startups by piggybacking on the expertise of investors who werent local. it would be pretty straightforward to make a list of the most eminent silicon valley angels and from that to generate a list of all the startups theyd invested in. if a city offered these companies a million dollars each to move, a lot of the earlier stage ones would probably take it. preposterous as this plan sounds, its probably the most efficient way a city could select good startups. it would hurt the startups somewhat to be separated from their original investors. on the other hand, the extra million dollars would give them a lot more runway. ___ would the transplanted startups survive? quite possibly. the only way to find out would be to try it. it would be a pretty cheap experiment, as civil expenditures go. pick 30 startups that eminent angels have recently invested in, give them each a million dollars if theyll relocate to your city, and see what happens after a year. if they seem to be thriving, you can try importing startups on a larger scale. dont be too legalistic about the conditions under which theyre allowed to leave. just have a gentlemens agreement. dont try to do it on the cheap and pick only 10 for the initial experiment. if you do this on too small a scale youll just guarantee failure. startups need to be around other startups. 30 would be enough to feel like a community. dont try to make them all work in some renovated warehouse youve made into an "incubator." real startups prefer to work in their own spaces. in fact, dont impose any restrictions on the startups at all. startup founders are mostly hackers , and hackers are much more constrained by gentlemens agreements than regulations. if they shake your hand on a promise, theyll keep it. but show them a lock and their first thought is how to pick it. interestingly, the 30-startup experiment could be done by any sufficiently rich private citizen. and what pressure it would put on the city if it worked.  ___ should the city take stock in return for the money? in principle theyre entitled to, but how would they choose valuations for the startups? you couldnt just give them all the same valuation: that would be too low for some (whod turn you down) and too high for others (because it might make their next round a "down round"). and since were assuming were doing this without being able to pick startups, we also have to assume we cant value them, since thats practically the same thing. another reason not to take stock in the startups is that startups are often involved in disreputable things. so are established companies, but they dont get blamed for it. if someone gets murdered by someone they met on facebook, the press will treat the story as if it were about facebook. if someone gets murdered by someone they met at a supermarket, the press will just treat it as a story about a murder. so understand that if you invest in startups, they might build things that get used for pornography, or file-sharing, or the expression of unfashionable opinions. you should probably sponsor this project jointly with your political opponents, so they cant use whatever the startups do as a club to beat you with. it would be too much of a political liability just to give the startups the money, though. so the best plan would be to make it convertible debt, but which didnt convert except in a really big round, like $20 million. ___ how well this scheme worked would depend on the city . there are some towns, like portland, that would be easy to turn into startup hubs, and others, like detroit, where it would really be an uphill battle. so be honest with yourself about the sort of town you have before you try this. it will be easier in proportion to how much your town resembles san francisco. do you have good weather? do people live downtown, or have they abandoned the center for the suburbs? would the city be described as "hip" and "tolerant," or as reflecting "traditional values?" are there good universities nearby? are there walkable neighborhoods? would nerds feel at home? if you answered yes to all these questions, you might be able not only to pull off this scheme, but to do it for less than a million per startup. i realize the chance of any city having the political will to carry out this plan is microscopically small. i just wanted to explore what it would take if one did. how hard would it be to jumpstart a silicon valley? its fascinating to think this prize might be within the reach of so many cities. so even though theyll all still spend the money on the stadium, at least now someone can ask them: why did you choose to do that instead of becoming a serious rival to silicon valley?  what people who start these supposedly local seed firms always find is that (a) their applicants come from all over, not just the local area, and (b) the local startups also apply to the other seed firms. so what ends up happening is that the applicant pool gets partitioned by quality rather than geography.  interestingly, the bad vcs fail by choosing startups run by people like thempeople who are good presenters, but have no real substance. its a case of the fake leading the fake. and since everyone involved is so plausible, the lps who invest in these funds have no idea whats happening till they measure their returns.  not even being a tax haven, i suspect. that makes some rich people move, but not the type who would make good angel investors in startups.  thanks to michael keenan for pointing this out. thanks to trevor blackwell, jessica livingston, robert morris, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com hacker news was two years old last week. initially it was supposed to be a side projectan application to sharpen arc on, and a place for current and future y combinator founders to exchange news. its grown bigger and taken up more time than i expected, but i dont regret that because ive learned so much from working on it. when we launched in february 2007, weekday traffic was around 1600 daily uniques. its since grown to around 22,000. this growth rate is a bit higher than id like. id like the site to grow, since a site that isnt growing at least slowly is probably dead. but i wouldnt want it to grow as large as digg or redditmainly because that would dilute the character of the site, but also because i dont want to spend all my time dealing with scaling. i already have problems enough with that. remember, the original motivation for hn was to test a new programming language, and moreover one thats focused on experimenting with language design, not performance. every time the site gets slow, i fortify myself by recalling mcilroy and bentleys famous quote the key to performance is elegance, not battalions of special cases. and look for the bottleneck i can remove with least code. so far ive been able to keep up, in the sense that performance has remained consistently mediocre despite 14x growth. i dont know what ill do next, but ill probably think of something. this is my attitude to the site generally. hacker news is an experiment, and an experiment in a very young field. sites of this type are only a few years old. internet conversation generally is only a few decades old. so weve probably only discovered a fraction of what we eventually will. thats why im so optimistic about hn. when a technology is this young, the existing solutions are usually terrible; which means it must be possible to do much better; which means many problems that seem insoluble arent. including, i hope, the problem that has afflicted so many previous communities: being ruined by growth. users have worried about that since the site was a few months old. so far these alarms have been false, but they may not always be. dilution is a hard problem. but probably soluble; it doesnt mean much that open conversations have "always" been destroyed by growth when "always" equals 20 instances. but its important to remember were trying to solve a new problem, because that means were going to have to try new things, most of which probably wont work. a couple weeks ago i tried displaying the names of users with the highest average comment scores in orange.  that was a mistake. suddenly a culture that had been more or less united was divided into haves and have-nots. i didnt realize how united the culture had been till i saw it divided. it was painful to watch.  so orange usernames wont be back. (sorry about that.) but there will be other equally broken-seeming ideas in the future, and the ones that turn out to work will probably seem just as broken as those that dont. probably the most important thing ive learned about dilution is that its measured more in behavior than users. its bad behavior you want to keep out more than bad people. user behavior turns out to be surprisingly malleable. if people are expected to behave well, they tend to; and vice versa. though of course forbidding bad behavior does tend to keep away bad people, because they feel uncomfortably constrained in a place where they have to behave well. but this way of keeping them out is gentler and probably also more effective than overt barriers. its pretty clear now that the broken windows theory applies to community sites as well. the theory is that minor forms of bad behavior encourage worse ones: that a neighborhood with lots of graffiti and broken windows becomes one where robberies occur. i was living in new york when giuliani introduced the reforms that made the broken windows theory famous, and the transformation was miraculous. and i was a reddit user when the opposite happened there, and the transformation was equally dramatic. im not criticizing steve and alexis. what happened to reddit didnt happen out of neglect. from the start they had a policy of censoring nothing except spam. plus reddit had different goals from hacker news. reddit was a startup, not a side project; its goal was to grow as fast as possible. combine rapid growth and zero censorship, and the result is a free for all. but i dont think theyd do much differently if they were doing it again. measured by traffic, reddit is much more successful than hacker news. but what happened to reddit wont inevitably happen to hn. there are several local maxima. there can be places that are free for alls and places that are more thoughtful, just as there are in the real world; and people will behave differently depending on which theyre in, just as they do in the real world. ive observed this in the wild. ive seen people cross-posting on reddit and hacker news who actually took the trouble to write two versions, a flame for reddit and a more subdued version for hn. there are two major types of problems a site like hacker news needs to avoid: bad stories and bad comments. so far the danger of bad stories seems smaller. the stories on the frontpage now are still roughly the ones that would have been there when hn started. i once thought id have to weight votes to keep crap off the frontpage, but i havent had to yet. i wouldnt have predicted the frontpage would hold up so well, and im not sure why it has. perhaps only the more thoughtful users care enough to submit and upvote links, so the marginal cost of one random new user approaches zero. or perhaps the frontpage protects itself, by advertising what type of submission is expected. the most dangerous thing for the frontpage is stuff thats too easy to upvote. if someone proves a new theorem, it takes some work by the reader to decide whether or not to upvote it. an amusing cartoon takes less. a rant with a rallying cry as the title takes zero, because people vote it up without even reading it. hence what i call the fluff principle: on a user-voted news site, the links that are easiest to judge will take over unless you take specific measures to prevent it. hacker news has two kinds of protections against fluff. the most common types of fluff links are banned as off-topic. pictures of kittens, political diatribes, and so on are explicitly banned. this keeps out most fluff, but not all of it. some links are both fluff, in the sense of being very short, and also on topic. theres no single solution to that. if a link is just an empty rant, editors will sometimes kill it even if its on topic in the sense of being about hacking, because its not on topic by the real standard, which is to engage ones intellectual curiosity. if the posts on a site are characteristically of this type i sometimes ban it, which means new stuff at that url is auto-killed. if a post has a linkbait title, editors sometimes rephrase it to be more matter-of-fact. this is especially necessary with links whose titles are rallying cries, because otherwise they become implicit "vote up if you believe such-and-such" posts, which are the most extreme form of fluff. the techniques for dealing with links have to evolve, because the links do. the existence of aggregators has already affected what they aggregate. writers now deliberately write things to draw traffic from aggregatorssometimes even specific ones. (no, the irony of this statement is not lost on me.) then there are the more sinister mutations, like linkjackingposting a paraphrase of someone elses article and submitting that instead of the original. these can get a lot of upvotes, because a lot of whats good in an article often survives; indeed, the closer the paraphrase is to plagiarism, the more survives.  i think its important that a site that kills submissions provide a way for users to see what got killed if they want to. that keeps editors honest, and just as importantly, makes users confident theyd know if the editors stopped being honest. hn users can do this by flipping a switch called showdead in their profile.  bad comments seem to be a harder problem than bad submissions. while the quality of links on the frontpage of hn hasnt changed much, the quality of the median comment may have decreased somewhat. there are two main kinds of badness in comments: meanness and stupidity. there is a lot of overlap between the twomean comments are disproportionately likely also to be dumbbut the strategies for dealing with them are different. meanness is easier to control. you can have rules saying one shouldnt be mean, and if you enforce them it seems possible to keep a lid on meanness. keeping a lid on stupidity is harder, perhaps because stupidity is not so easily distinguishable. mean people are more likely to know theyre being mean than stupid people are to know theyre being stupid. the most dangerous form of stupid comment is not the long but mistaken argument, but the dumb joke. long but mistaken arguments are actually quite rare. there is a strong correlation between comment quality and length; if you wanted to compare the quality of comments on community sites, average length would be a good predictor. probably the cause is human nature rather than anything specific to comment threads. probably its simply that stupidity more often takes the form of having few ideas than wrong ones. whatever the cause, stupid comments tend to be short. and since its hard to write a short comment thats distinguished for the amount of information it conveys, people try to distinguish them instead by being funny. the most tempting format for stupid comments is the supposedly witty put-down, probably because put-downs are the easiest form of humor.  so one advantage of forbidding meanness is that it also cuts down on these. bad comments are like kudzu: they take over rapidly. comments have much more effect on new comments than submissions have on new submissions. if someone submits a lame article, the other submissions dont all become lame. but if someone posts a stupid comment on a thread, that sets the tone for the region around it. people reply to dumb jokes with dumb jokes. maybe the solution is to add a delay before people can respond to a comment, and make the length of the delay inversely proportional to some prediction of its quality. then dumb threads would grow slower.  i notice most of the techniques ive described are conservative: theyre aimed at preserving the character of the site rather than enhancing it. i dont think thats a bias of mine. its due to the shape of the problem. hacker news had the good fortune to start out good, so in this case its literally a matter of preservation. but i think this principle would also apply to sites with different origins. the good things in a community site come from people more than technology; its mainly in the prevention of bad things that technology comes into play. technology certainly can enhance discussion. nested comments do, for example. but id rather use a site with primitive features and smart, nice users than a more advanced one whose users were idiots or trolls . so the most important thing a community site can do is attract the kind of people it wants. a site trying to be as big as possible wants to attract everyone. but a site aiming at a particular subset of users has to attract just thoseand just as importantly, repel everyone else. ive made a conscious effort to do this on hn. the graphic design is as plain as possible, and the site rules discourage dramatic link titles. the goal is that the only thing to interest someone arriving at hn for the first time should be the ideas expressed there. the downside of tuning a site to attract certain people is that, to those people, it can be too attractive. im all too aware how addictive hacker news can be. for me, as for many users, its a kind of virtual town square. when i want to take a break from working, i walk into the square, just as i might into harvard square or university ave in the physical world.  but an online square is more dangerous than a physical one. if i spent half the day loitering on university ave, id notice. i have to walk a mile to get there, and sitting in a cafe feels different from working. but visiting an online forum takes just a click, and feels superficially very much like working. you may be wasting your time, but youre not idle. someone is wrong on the internet, and youre fixing the problem. hacker news is definitely useful. ive learned a lot from things ive read on hn. ive written several essays that began as comments there. so i wouldnt want the site to go away. but i would like to be sure its not a net drag on productivity. what a disaster that would be, to attract thousands of smart people to a site that caused them to waste lots of time. i wish i could be 100% sure thats not a description of hn. i feel like the addictiveness of games and social applications is still a mostly unsolved problem. the situation now is like it was with crack in the 1980s: weve invented terribly addictive new things, and we havent yet evolved ways to protect ourselves from them. we will eventually, and thats one of the problems i hope to focus on next.  i tried ranking users by both average and median comment score, and average (with the high score thrown out) seemed the more accurate predictor of high quality. median may be the more accurate predictor of low quality though.  another thing i learned from this experiment is that if youre going to distinguish between people, you better be sure you do it right. this is one problem where rapid prototyping doesnt work. indeed, thats the intellectually honest argument for not discriminating between various types of people. the reason not to do it is not that everyones the same, but that its bad to do wrong and hard to do right.  when i catch egregiously linkjacked posts i replace the url with that of whatever they copied. sites that habitually linkjack get banned.  digg is notorious for its lack of transparency. the root of the problem is not that the guys running digg are especially sneaky, but that they use the wrong algorithm for generating their frontpage. instead of bubbling up from the bottom as they get more votes, as on reddit, stories start at the top and get pushed down by new arrivals. the reason for the difference is that digg is derived from slashdot, while reddit is derived from delicious/popular. digg is slashdot with voting instead of editors, and reddit is delicious/popular with voting instead of bookmarking. (you can still see fossils of their origins in their graphic design.) diggs algorithm is very vulnerable to gaming, because any story that makes it onto the frontpage is the new top story. which in turn forces digg to respond with extreme countermeasures. a lot of startups have some kind of secret about the subterfuges they had to resort to in the early days, and i suspect diggs is the extent to which the top stories were de facto chosen by human editors.  the dialog on beavis and butthead was composed largely of these, and when i read comments on really bad sites i can hear them in their voices.  i suspect most of the techniques for discouraging stupid comments have yet to be discovered. xkcd implemented a particularly clever one in its irc channel: dont allow the same thing twice. once someone has said "fail," no one can ever say it again. this would penalize short comments especially, because they have less room to avoid collisions in. another promising idea is the stupid filter , which is just like a probabilistic spam filter, but trained on corpora of stupid and non-stupid comments instead. you may not have to kill bad comments to solve the problem. comments at the bottom of a long thread are rarely seen, so it may be enough to incorporate a prediction of quality in the comment sorting algorithm.  what makes most suburbs so demoralizing is that theres no center to walk to. thanks to justin kan, jessica livingston, robert morris, alexis ohanian, emmet shear, and fred wilson for reading drafts of this. comment on this essay. this essay was originally published at paulgraham.com one of the things i always tell startups is a principle i learned from paul buchheit: its better to make a few people really happy than to make a lot of people semi-happy. i was saying recently to a reporter that if i could only tell startups 10 things, this would be one of them. then i thought: what would the other 9 be? when i made the list there turned out to be 13: cofounders are for a startup what location is for real estate. you can change anything about a house except where it is. in a startup you can change your idea easily, but changing your cofounders is hard.  and the success of a startup is almost always a function of its founders. the reason to launch fast is not so much that its critical to get your product to market early, but that you havent really started working on it till youve launched. launching teaches you what you should have been building. till you know that youre wasting your time. so the main value of whatever you launch with is as a pretext for engaging users. this is the second half of launching fast. launch fast and iterate. its a big mistake to treat a startup as if it were merely a matter of implementing some brilliant initial idea. as in an essay, most of the ideas appear in the implementing. you can envision the wealth created by a startup as a rectangle, where one side is the number of users and the other is how much you improve their lives.  the second dimension is the one you have most control over. and indeed, the growth in the first will be driven by how well you do in the second. as in science, the hard part is not answering questions but asking them: the hard part is seeing something new that users lack. the better you understand them the better the odds of doing that. thats why so many successful startups make something the founders needed. ideally you want to make large numbers of users love you, but you cant expect to hit that right away. initially you have to choose between satisfying all the needs of a subset of potential users, or satisfying a subset of the needs of all potential users. take the first. its easier to expand userwise than satisfactionwise. and perhaps more importantly, its harder to lie to yourself. if you think youre 85% of the way to a great product, how do you know its not 70%? or 10%? whereas its easy to know how many users you have. customers are used to being maltreated. most of the companies they deal with are quasi-monopolies that get away with atrocious customer service. your own ideas about whats possible have been unconsciously lowered by such experiences. try making your customer service not merely good, but surprisingly good . go out of your way to make people happy. theyll be overwhelmed; youll see. in the earliest stages of a startup, it pays to offer customer service on a level that wouldnt scale, because its a way of learning about your users. i learned this one from joe kraus.  merely measuring something has an uncanny tendency to improve it. if you want to make your user numbers go up, put a big piece of paper on your wall and every day plot the number of users. youll be delighted when it goes up and disappointed when it goes down. pretty soon youll start noticing what makes the number go up, and youll start to do more of that. corollary: be careful what you measure. i cant emphasize enough how important it is for a startup to be cheap. most startups fail before they make something people want, and the most common form of failure is running out of money. so being cheap is (almost) interchangeable with iterating rapidly.  but its more than that. a culture of cheapness keeps companies young in something like the way exercise keeps people young. "ramen profitable" means a startup makes just enough to pay the founders living expenses. its not rapid prototyping for business models (though it can be), but more a way of hacking the investment process. once you cross over into ramen profitable, it completely changes your relationship with investors. its also great for morale. nothing kills startups like distractions. the worst type are those that pay money: day jobs, consulting, profitable side-projects. the startup may have more long-term potential, but youll always interrupt working on it to answer calls from people paying you now. paradoxically, fundraising is this type of distraction, so try to minimize that too. though the immediate cause of death in a startup tends to be running out of money, the underlying cause is usually lack of focus. either the company is run by stupid people (which cant be fixed with advice) or the people are smart but got demoralized. starting a startup is a huge moral weight. understand this and make a conscious effort not to be ground down by it, just as youd be careful to bend at the knees when picking up a heavy box. even if you get demoralized, dont give up . you can get surprisingly far by just not giving up. this isnt true in all fields. there are a lot of people who couldnt become good mathematicians no matter how long they persisted. but startups arent like that. sheer effort is usually enough, so long as you keep morphing your idea. one of the most useful skills we learned from viaweb was not getting our hopes up. we probably had 20 deals of various types fall through. after the first 10 or so we learned to treat deals as background processes that we should ignore till they terminated. its very dangerous to morale to start to depend on deals closing, not just because they so often dont, but because it makes them less likely to. having gotten it down to 13 sentences, i asked myself which id choose if i could only keep one. understand your users. thats the key. the essential task in a startup is to create wealth; the dimension of wealth you have most control over is how much you improve users lives; and the hardest part of that is knowing what to make for them. once you know what to make, its mere effort to make it, and most decent hackers are capable of that. understanding your users is part of half the principles in this list. thats the reason to launch early, to understand your users. evolving your idea is the embodiment of understanding your users. understanding your users well will tend to push you toward making something that makes a few people deeply happy. the most important reason for having surprisingly good customer service is that it helps you understand your users. and understanding your users will even ensure your morale, because when everything else is collapsing around you, having just ten users who love you will keep you going.  strictly speaking its impossible without a time machine.  in practice its more like a ragged comb.  joe thinks one of the founders of hewlett packard said it first, but he doesnt remember which.  theyd be interchangeable if markets stood still. since they dont, working twice as fast is better than having twice as much time. this essay was originally published at paulgraham.com i finally realized today why politics and religion yield such uniquely useless discussions. as a rule, any mention of religion on an online forum degenerates into a religious argument. why? why does this happen with religion and not with javascript or baking or other topics people talk about on forums? whats different about religion is that people dont feel they need to have any particular expertise to have opinions about it. all they need is strongly held beliefs, and anyone can have those. no thread about javascript will grow as fast as one about religion, because people feel they have to be over some threshold of expertise to post comments about that. but on religion everyones an expert. then it struck me: this is the problem with politics too. politics, like religion, is a topic where theres no threshold of expertise for expressing an opinion. all you need is strong convictions. do religion and politics have something in common that explains this similarity? one possible explanation is that they deal with questions that have no definite answers, so theres no back pressure on peoples opinions. since no one can be proven wrong, every opinion is equally valid, and sensing this, everyone lets fly with theirs. but this isnt true. there are certainly some political questions that have definite answers, like how much a new government policy will cost. but the more precise political questions suffer the same fate as the vaguer ones. i think what religion and politics have in common is that they become part of peoples identity, and people can never have a fruitful argument about something thats part of their identity. by definition theyre partisan. which topics engage peoples identity depends on the people, not the topic. for example, a discussion about a battle that included citizens of one or more of the countries involved would probably degenerate into a political argument. but a discussion today about a battle that took place in the bronze age probably wouldnt. no one would know what side to be on. so its not politics thats the source of the trouble, but identity. when people say a discussion has degenerated into a religious war, what they really mean is that it has started to be driven mostly by peoples identities.  because the point at which this happens depends on the people rather than the topic, its a mistake to conclude that because a question tends to provoke religious wars, it must have no answer. for example, the question of the relative merits of programming languages often degenerates into a religious war, because so many programmers identify as x programmers or y programmers. this sometimes leads people to conclude the question must be unanswerablethat all languages are equally good. obviously thats false: anything else people make can be well or badly designed; why should this be uniquely impossible for programming languages? and indeed, you can have a fruitful discussion about the relative merits of programming languages, so long as you exclude people who respond from identity. more generally, you can have a fruitful discussion about a topic only if it doesnt engage the identities of any of the participants. what makes politics and religion such minefields is that they engage so many peoples identities. but you could in principle have a useful conversation about them with some people. and there are other topics that might seem harmless, like the relative merits of ford and chevy pickup trucks, that you couldnt safely talk about with others . the most intriguing thing about this theory, if its right, is that it explains not merely which kinds of discussions to avoid, but how to have better ideas. if people cant think clearly about anything that has become part of their identity, then all other things being equal, the best plan is to let as few things into your identity as possible.  most people reading this will already be fairly tolerant. but there is a step beyond thinking of yourself as x but tolerating y: not even to consider yourself an x. the more labels you have for yourself, the dumber they make you.  when that happens, it tends to happen fast, like a core going critical. the threshold for participating goes down to zero, which brings in more people. and they tend to say incendiary things, which draw more and angrier counterarguments.  there may be some things its a net win to include in your identity. for example, being a scientist. but arguably that is more of a placeholder than an actual labellike putting nmi on a form that asks for your middle initialbecause it doesnt commit you to believing anything in particular. a scientist isnt committed to believing in natural selection in the same way a bibilical literalist is committed to rejecting it. all hes committed to is following the evidence wherever it leads. considering yourself a scientist is equivalent to putting a sign in a cupboard saying "this cupboard must be kept empty." yes, strictly speaking, youre putting something in the cupboard, but not in the ordinary sense. thanks to sam altman, trevor blackwell, paul buchheit, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com a few months ago i read a new york times article on south korean cram schools that said admission to the right university can make or break an ambitious young south korean. a parent added: "in our country, college entrance exams determine 70 to 80 percent of a persons future." it was striking how old fashioned this sounded. and yet when i was in high school it wouldnt have seemed too far off as a description of the us. which means things must have been changing here. the course of peoples lives in the us now seems to be determined less by credentials and more by performance than it was 25 years ago. where you go to college still matters, but not like it used to. what happened? _____ judging people by their academic credentials was in its time an advance. the practice seems to have begun in china, where starting in 587 candidates for the imperial civil service had to take an exam on classical literature.  it was also a test of wealth, because the knowledge it tested was so specialized that passing required years of expensive training. but though wealth was a necessary condition for passing, it was not a sufficient one. by the standards of the rest of the world in 587, the chinese system was very enlightened. europeans didnt introduce formal civil service exams till the nineteenth century, and even then they seem to have been influenced by the chinese example. before credentials, government positions were obtained mainly by family influence, if not outright bribery. it was a great step forward to judge people by their performance on a test. but by no means a perfect solution. when you judge people that way, you tend to get cram schoolswhich they did in ming china and nineteenth century england just as much as in present day south korea. what cram schools are, in effect, is leaks in a seal. the use of credentials was an attempt to seal off the direct transmission of power between generations, and cram schools represent that power finding holes in the seal. cram schools turn wealth in one generation into credentials in the next. its hard to beat this phenomenon, because the schools adjust to suit whatever the tests measure. when the tests are narrow and predictable, you get cram schools on the classic model, like those that prepared candidates for sandhurst (the british west point) or the classes american students take now to improve their sat scores. but as the tests get broader, the schools do too. preparing a candidate for the chinese imperial civil service exams took years, as prep school does today. but the raison detre of all these institutions has been the same: to beat the system.  _____ history suggests that, all other things being equal, a society prospers in proportion to its ability to prevent parents from influencing their childrens success directly. its a fine thing for parents to help their children indirectlyfor example, by helping them to become smarter or more disciplined, which then makes them more successful. the problem comes when parents use direct methods: when they are able to use their own wealth or power as a substitute for their childrens qualities. parents will tend to do this when they can. parents will die for their kids, so its not surprising to find theyll also push their scruples to the limits for them. especially if other parents are doing it. sealing off this force has a double advantage. not only does a society get "the best man for the job," but parents ambitions are diverted from direct methods to indirect onesto actually trying to raise their kids well. but we should expect it to be very hard to contain parents efforts to obtain an unfair advantage for their kids. were dealing with one of the most powerful forces in human nature. we shouldnt expect naive solutions to work, any more than wed expect naive solutions for keeping heroin out of a prison to work. _____ the obvious way to solve the problem is to make credentials better. if the tests a society uses are currently hackable, we can study the way people beat them and try to plug the holes. you can use the cram schools to show you where most of the holes are. they also tell you when youre succeeding in fixing them: when cram schools become less popular. a more general solution would be to push for increased transparency, especially at critical social bottlenecks like college admissions. in the us this process still shows many outward signs of corruption. for example, legacy admissions. the official story is that legacy status doesnt carry much weight, because all it does is break ties: applicants are bucketed by ability, and legacy status is only used to decide between the applicants in the bucket that straddles the cutoff. but what this means is that a university can make legacy status have as much or as little weight as they want, by adjusting the size of the bucket that straddles the cutoff. by gradually chipping away at the abuse of credentials, you could probably make them more airtight. but what a long fight it would be. especially when the institutions administering the tests dont really want them to be airtight. _____ fortunately theres a better way to prevent the direct transmission of power between generations. instead of trying to make credentials harder to hack, we can also make them matter less. lets think about what credentials are for. what they are, functionally, is a way of predicting performance. if you could measure actual performance, you wouldnt need them. so why did they even evolve? why havent we just been measuring actual performance? think about where credentialism first appeared: in selecting candidates for large organizations. individual performance is hard to measure in large organizations, and the harder performance is to measure, the more important it is to predict it. if an organization could immediately and cheaply measure the performance of recruits, they wouldnt need to examine their credentials. they could take everyone and keep just the good ones. large organizations cant do this. but a bunch of small organizations in a market can come close. a market takes every organization and keeps just the good ones. as organizations get smaller, this approaches taking every person and keeping just the good ones. so all other things being equal, a society consisting of more, smaller organizations will care less about credentials. _____ thats whats been happening in the us. thats why those quotes from korea sound so old fashioned. theyre talking about an economy like americas a few decades ago, dominated by a few big companies. the route for the ambitious in that sort of environment is to join one and climb to the top. credentials matter a lot then. in the culture of a large organization, an elite pedigree becomes a self-fulfilling prophecy. this doesnt work in small companies. even if your colleagues were impressed by your credentials, theyd soon be parted from you if your performance didnt match, because the company would go out of business and the people would be dispersed. in a world of small companies, performance is all anyone cares about. people hiring for a startup dont care whether youve even graduated from college, let alone which one. all they care about is what you can do. which is in fact all that should matter, even in a large organization. the reason credentials have such prestige is that for so long the large organizations in a society tended to be the most powerful. but in the us at least they dont have the monopoly on power they once did, precisely because they cant measure (and thus reward) individual performance. why spend twenty years climbing the corporate ladder when you can get rewarded directly by the market? i realize i see a more exaggerated version of the change than most other people. as a partner at an early stage venture funding firm, im like a jumpmaster shoving people out of the old world of credentials and into the new one of performance. im an agent of the change im seeing. but i dont think im imagining it. it was not so easy 25 years ago for an ambitious person to choose to be judged directly by the market. you had to go through bosses, and they were influenced by where youd been to college. _____ what made it possible for small organizations to succeed in america? im still not entirely sure. startups are certainly a large part of it. small organizations can develop new ideas faster than large ones, and new ideas are increasingly valuable. but i dont think startups account for all the shift from credentials to measurement. my friend julian weber told me that when he went to work for a new york law firm in the 1950s they paid associates far less than firms do today. law firms then made no pretense of paying people according to the value of the work theyd done. pay was based on seniority. the younger employees were paying their dues. theyd be rewarded later. the same principle prevailed at industrial companies. when my father was working at westinghouse in the 1970s, he had people working for him who made more than he did, because theyd been there longer. now companies increasingly have to pay employees market price for the work they do. one reason is that employees no longer trust companies to deliver deferred rewards : why work to accumulate deferred rewards at a company that might go bankrupt, or be taken over and have all its implicit obligations wiped out? the other is that some companies broke ranks and started to pay young employees large amounts. this was particularly true in consulting, law, and finance, where it led to the phenomenon of yuppies. the word is rarely used today because its no longer surprising to see a 25 year old with money, but in 1985 the sight of a 25 year old professional able to afford a new bmw was so novel that it called forth a new word. the classic yuppie worked for a small organization. he didnt work for general widget, but for the law firm that handled general widgets acquisitions or the investment bank that floated their bond issues. startups and yuppies entered the american conceptual vocabulary roughly simultaneously in the late 1970s and early 1980s. i dont think there was a causal connection. startups happened because technology started to change so fast that big companies could no longer keep a lid on the smaller ones. i dont think the rise of yuppies was inspired by it; it seems more as if there was a change in the social conventions (and perhaps the laws) governing the way big companies worked. but the two phenomena rapidly fused to produce a principle that now seems obvious: paying energetic young people market rates, and getting correspondingly high performance from them. at about the same time the us economy rocketed out of the doldrums that had afflicted it for most of the 1970s. was there a connection? i dont know enough to say, but it felt like it at the time. there was a lot of energy released. _____ countries worried about their competitiveness are right to be concerned about the number of startups started within them. but they would do even better to examine the underlying principle. do they let energetic young people get paid market rate for the work they do? the young are the test, because when people arent rewarded according to performance, theyre invariably rewarded according to seniority instead. all it takes is a few beachheads in your economy that pay for performance. measurement spreads like heat. if one part of a society is better at measurement than others, it tends to push the others to do better. if people who are young but smart and driven can make more by starting their own companies than by working for existing ones, the existing companies are forced to pay more to keep them. so market rates gradually permeate every organization, even the government.  the measurement of performance will tend to push even the organizations issuing credentials into line. when we were kids i used to annoy my sister by ordering her to do things i knew she was about to do anyway. as credentials are superseded by performance, a similar role is the best former gatekeepers can hope for. once credential granting institutions are no longer in the self-fullfilling prophecy business, theyll have to work harder to predict the future. _____ credentials are a step beyond bribery and influence. but theyre not the final step. theres an even better way to block the transmission of power between generations: to encourage the trend toward an economy made of more, smaller units. then you can measure what credentials merely predict. no one likes the transmission of power between generationsnot the left or the right. but the market forces favored by the right turn out to be a better way of preventing it than the credentials the left are forced to fall back on. the era of credentials began to end when the power of large organizations peaked in the late twentieth century. now we seem to be entering a new era based on measurement. the reason the new model has advanced so rapidly is that it works so much better. it shows no sign of slowing.  miyazaki, ichisada (conrad schirokauer trans.), chinas examination hell: the civil service examinations of imperial china, yale university press, 1981. scribes in ancient egypt took exams, but they were more the type of proficiency test any apprentice might have to pass.  when i say the raison detre of prep schools is to get kids into better colleges, i mean this in the narrowest sense. im not saying thats all prep schools do, just that if they had zero effect on college admissions there would be far less demand for them.  progressive tax rates will tend to damp this effect, however, by decreasing the difference between good and bad measurers. thanks to trevor blackwell, sarah harlin, jessica livingston, and david sloo for reading drafts of this. this essay was originally published at paulgraham.com (i originally wrote this at the request of a company producing a report about entrepreneurship. unfortunately after reading it they decided it was too controversial to include.) vc funding will probably dry up somewhat during the present recession, like it usually does in bad times. but this time the result may be different. this time the number of new startups may not decrease. and that could be dangerous for vcs. when vc funding dried up after the internet bubble, startups dried up too. there were not a lot of new startups being founded in 2003. but startups arent tied to vc the way they were 10 years ago. its now possible for vcs and startups to diverge. and if they do, they may not reconverge once the economy gets better. the reason startups no longer depend so much on vcs is one that everyone in the startup business knows by now: it has gotten much cheaper to start a startup. there are four main reasons: moores law has made hardware cheap; open source has made software free; the web has made marketing and distribution free; and more powerful programming languages mean development teams can be smaller. these changes have pushed the cost of starting a startup down into the noise. in a lot of startupsprobaby most startups funded by y combinatorthe biggest expense is simply the founders living expenses. weve had startups that were profitable on revenues of $3000 a month. $3000 is insignificant as revenues go. why should anyone care about a startup making $3000 a month? because, although insignificant as revenue , this amount of money can change a startups funding situation completely. someone running a startup is always calculating in the back of their mind how much "runway" they havehow long they have till the money in the bank runs out and they either have to be profitable, raise more money, or go out of business. once you cross the threshold of profitability, however low, your runway becomes infinite. its a qualitative change, like the stars turning into lines and disappearing when the enterprise accelerates to warp speed. once youre profitable you dont need investors money. and because internet startups have become so cheap to run, the threshold of profitability can be trivially low. which means many internet startups dont need vc-scale investments anymore. for many startups, vc funding has, in the language of vcs, gone from a must-have to a nice-to-have. this change happened while no one was looking, and its effects have been largely masked so far. it was during the trough after the internet bubble that it became trivially cheap to start a startup, but few realized it because startups were so out of fashion. when startups came back into fashion, around 2005, investors were starting to write checks again. and while founders may not have needed vc money the way they used to, they were willing to take it if offeredpartly because there was a tradition of startups taking vc money, and partly because startups, like dogs, tend to eat when given the opportunity. as long as vcs were writing checks, founders were never forced to explore the limits of how little they needed them. there were a few startups who hit these limits accidentally because of their unusual circumstancesmost famously 37signals, which hit the limit because they crossed into startup land from the other direction: they started as a consulting firm, so they had revenue before they had a product. vcs and founders are like two components that used to be bolted together. around 2000 the bolt was removed. because the components have so far been subjected to the same forces, they still seem to be joined together, but really one is just resting on the other. a sharp impact would make them fly apart. and the present recession could be that impact. because of y combinators position at the extreme end of the spectrum, wed be the first to see signs of a separation between founders and investors, and we are in fact seeing it. for example, though the stock market crash does seem to have made investors more cautious, it doesnt seem to have had any effect on the number of people who want to start startups. we take applications for funding every 6 months. applications for the current funding cycle closed on october 17, well after the markets tanked, and even so we got a record number, up 40% from the same cycle a year before. maybe things will be different a year from now, if the economy continues to get worse, but so far there is zero slackening of interest among potential founders. thats different from the way things felt in 2001. then there was a widespread feeling among potential founders that startups were over, and that one should just go to grad school. that isnt happening this time, and part of the reason is that even in a bad economy its not that hard to build something that makes $3000 a month. if investors stop writing checks, who cares? we also see signs of a divergence between founders and investors in the attitudes of existing startups weve funded. i was talking to one recently that had a round fall through at the last minute over the sort of trifle that breaks deals when investors feel they have the upper handover an uncertainty about whether the founders had correctly filed their 83(b) forms, if you can believe that. and yet this startup is obviously going to succeed: their traffic and revenue graphs look like a jet taking off. so i asked them if they wanted me to introduce them to more investors. to my surprise, they said nothat theyd just spent four months dealing with investors, and they were actually a lot happier now that they didnt have to. there was a friend they wanted to hire with the investor money, and now theyd have to postpone that. but otherwise they felt they had enough in the bank to make it to profitability. to make sure, they were moving to a cheaper apartment. and in this economy i bet they got a good deal on it. ive detected this "investors arent worth the trouble" vibe from several yc founders ive talked to recently. at least one startup from the most recent (summer) cycle may not even raise angel money, let alone vc. ticketstumbler made it to profitability on y combinators $15,000 investment and they hope not to need more. this surprised even us. although yc is based on the idea of it being cheap to start a startup, we never anticipated that founders would grow successful startups on nothing more than yc funding. if founders decide vcs arent worth the trouble, that could be bad for vcs. when the economy bounces back in a few years and theyre ready to write checks again, they may find that founders have moved on. there is a founder community just as theres a vc community. they all know one another, and techniques spread rapidly between them. if one tries a new programming language or a new hosting provider and gets good results, 6 months later half of them are using it. and the same is true for funding. the current generation of founders want to raise money from vcs, and sequoia specifically, because larry and sergey took money from vcs, and sequoia specifically. imagine what it would do to the vc business if the next hot company didnt take vc at all. vcs think theyre playing a zero sum game. in fact, its not even that. if you lose a deal to benchmark, you lose that deal, but vc as an industry still wins. if you lose a deal to none, all vcs lose. this recession may be different from the one after the internet bubble. this time founders may keep starting startups. and if they do, vcs will have to keep writing checks, or they could become irrelevant. thanks to sam altman, trevor blackwell, david hornik, jessica livingston, robert morris, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com for nearly all of history the success of a society was proportionate to its ability to assemble large and disciplined organizations. those who bet on economies of scale generally won, which meant the largest organizations were the most successful ones. things have already changed so much that this is hard for us to believe, but till just a few decades ago the largest organizations tended to be the most progressive. an ambitious kid graduating from college in 1960 wanted to work in the huge, gleaming offices of ford, or general electric, or nasa. small meant small-time. small in 1960 didnt mean a cool little startup. it meant uncle sids shoe store. when i grew up in the 1970s, the idea of the "corporate ladder" was still very much alive. the standard plan was to try to get into a good college, from which one would be drafted into some organization and then rise to positions of gradually increasing responsibility. the more ambitious merely hoped to climb the same ladder faster.  but in the late twentieth century something changed. it turned out that economies of scale were not the only force at work. particularly in technology, the increase in speed one could get from smaller groups started to trump the advantages of size. the future turned out to be different from the one we were expecting in 1970. the domed cities and flying cars we expected have failed to materialize. but fortunately so have the jumpsuits with badges indicating our specialty and rank. instead of being dominated by a few, giant tree-structured organizations, its now looking like the economy of the future will be a fluid network of smaller, independent units. its not so much that large organizations stopped working. theres no evidence that famously successful organizations like the roman army or the british east india company were any less afflicted by protocol and politics than organizations of the same size today. but they were competing against opponents who couldnt change the rules on the fly by discovering new technology. now it turns out the rule "large and disciplined organizations win" needs to have a qualification appended: "at games that change slowly." no one knew till change reached a sufficient speed. large organizations will start to do worse now, though, because for the first time in history theyre no longer getting the best people. an ambitious kid graduating from college now doesnt want to work for a big company. they want to work for the hot startup thats rapidly growing into one. if theyre really ambitious, they want to start it.  this doesnt mean big companies will disappear. to say that startups will succeed implies that big companies will exist, because startups that succeed either become big companies or are acquired by them.  but large organizations will probably never again play the leading role they did up till the last quarter of the twentieth century. its kind of surprising that a trend that lasted so long would ever run out. how often does it happen that a rule works for thousands of years, then switches polarity? the millennia-long run of bigger-is-better left us with a lot of traditions that are now obsolete, but extremely deeply rooted. which means the ambitious can now do arbitrage on them. it will be very valuable to understand precisely which ideas to keep and which can now be discarded. the place to look is where the spread of smallness began: in the world of startups. there have always been occasional cases, particularly in the us, of ambitious people who grew the ladder under them instead of climbing it. but till recently this was an anomalous route that tended to be followed only by outsiders. it was no coincidence that the great industrialists of the nineteenth century had so little formal education. as huge as their companies eventually became, they were all essentially mechanics and shopkeepers at first. that was a social step no one with a college education would take if they could avoid it. till the rise of technology startups, and in particular, internet startups, it was very unusual for educated people to start their own businesses. the eight men who left shockley semiconductor to found fairchild semiconductor, the original silicon valley startup, werent even trying to start a company at first. they were just looking for a company willing to hire them as a group. then one of their parents introduced them to a small investment bank that offered to find funding for them to start their own, so they did. but starting a company was an alien idea to them; it was something they backed into.  now i would guess that practically every stanford or berkeley undergrad who knows how to program has at least considered the idea of starting a startup. east coast universities are not far behind, and british universities only a little behind them. this pattern suggests that attitudes at stanford and berkeley are not an anomaly, but a leading indicator. this is the way the world is going. of course, internet startups are still only a fraction of the worlds economy. could a trend based on them be that powerful? i think so. theres no reason to suppose theres any limit to the amount of work that could be done in this area. like science, wealth seems to expand fractally. steam power was a sliver of the british economy when watt started working on it. but his work led to more work till that sliver had expanded into something bigger than the whole economy of which it had initially been a part. the same thing could happen with the internet. if internet startups offer the best opportunity for ambitious people, then a lot of ambitious people will start them, and this bit of the economy will balloon in the usual fractal way. even if internet-related applications only become a tenth of the worlds economy, this component will set the tone for the rest. the most dynamic part of the economy always does, in everything from salaries to standards of dress. not just because of its prestige, but because the principles underlying the most dynamic part of the economy tend to be ones that work. for the future, the trend to bet on seems to be networks of small, autonomous groups whose performance is measured individually. and the societies that win will be the ones with the least impedance. as with the original industrial revolution, some societies are going to be better at this than others. within a generation of its birth in england, the industrial revolution had spread to continental europe and north america. but it didnt spread everywhere. this new way of doing things could only take root in places that were prepared for it. it could only spread to places that already had a vigorous middle class. there is a similar social component to the transformation that began in silicon valley in the 1960s. two new kinds of techniques were developed there: techniques for building integrated circuits, and techniques for building a new type of company designed to grow fast by creating new technology. the techniques for building integrated circuits spread rapidly to other countries. but the techniques for building startups didnt. fifty years later, startups are ubiquitous in silicon valley and common in a handful of other us cities, but theyre still an anomaly in most of the world. part of the reasonpossibly the main reasonthat startups have not spread as broadly as the industrial revolution did is their social disruptiveness. though it brought many social changes, the industrial revolution was not fighting the principle that bigger is better. quite the opposite: the two dovetailed beautifully. the new industrial companies adapted the customs of existing large organizations like the military and the civil service, and the resulting hybrid worked well. "captains of industry" issued orders to "armies of workers," and everyone knew what they were supposed to do. startups seem to go more against the grain, socially. its hard for them to flourish in societies that value hierarchy and stability, just as it was hard for industrialization to flourish in societies ruled by people who stole at will from the merchant class. but there were already a handful of countries past that stage when the industrial revolution happened. there do not seem to be that many ready this time.  one of the bizarre consequences of this model was that the usual way to make more money was to become a manager. this is one of the things startups fix.  there are a lot of reasons american car companies have been doing so much worse than japanese car companies, but at least one of them is a cause for optimism: american graduates have more options.  its possible that companies will one day be able to grow big in revenues without growing big in people, but we are not very far along that trend yet.  lecuyer, christophe, making silicon valley , mit press, 2006. thanks to trevor blackwell, paul buchheit, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com one of the differences between big companies and startups is that big companies tend to have developed procedures to protect themselves against mistakes. a startup walks like a toddler, bashing into things and falling over all the time. a big company is more deliberate. the gradual accumulation of checks in an organization is a kind of learning, based on disasters that have happened to it or others like it. after giving a contract to a supplier who goes bankrupt and fails to deliver, for example, a company might require all suppliers to prove theyre solvent before submitting bids. as companies grow they invariably get more such checks, either in response to disasters theyve suffered, or (probably more often) by hiring people from bigger companies who bring with them customs for protecting against new types of disasters. its natural for organizations to learn from mistakes. the problem is, people who propose new checks almost never consider that the check itself has a cost. every check has a cost. for example, consider the case of making suppliers verify their solvency. surely thats mere prudence? but in fact it could have substantial costs. theres obviously the direct cost in time of the people on both sides who supply and check proofs of the suppliers solvency. but the real costs are the ones you never hear about: the company that would be the best supplier, but doesnt bid because they cant spare the effort to get verified. or the company that would be the best supplier, but falls just short of the threshold for solvencywhich will of course have been set on the high side, since there is no apparent cost of increasing it. whenever someone in an organization proposes to add a new check, they should have to explain not just the benefit but the cost. no matter how bad a job they did of analyzing it, this meta-check would at least remind everyone there had to be a cost, and send them looking for it. if companies started doing that, theyd find some surprises. joel spolsky recently spoke at y combinator about selling software to corporate customers. he said that in most companies software costing up to about $1000 could be bought by individual managers without any additional approvals. above that threshold, software purchases generally had to be approved by a committee. but babysitting this process was so expensive for software vendors that it didnt make sense to charge less than $50,000. which means if youre making something you might otherwise have charged $5000 for, you have to sell it for $50,000 instead. the purpose of the committee is presumably to ensure that the company doesnt waste money. and yet the result is that the company pays 10 times as much. checks on purchases will always be expensive, because the harder it is to sell something to you, the more it has to cost. and not merely linearly, either. if youre hard enough to sell to, the people who are best at making things dont want to bother. the only people who will sell to you are companies that specialize in selling to you. then youve sunk to a whole new level of inefficiency. market mechanisms no longer protect you, because the good suppliers are no longer in the market. such things happen constantly to the biggest organizations of all, governments. but checks instituted by governments can cause much worse problems than merely overpaying. checks instituted by governments can cripple a countrys whole economy. up till about 1400, china was richer and more technologically advanced than europe. one reason europe pulled ahead was that the chinese government restricted long trading voyages. so it was left to the europeans to explore and eventually to dominate the rest of the world, including china. in more recent times, sarbanes-oxley has practically destroyed the us ipo market. that wasnt the intention of the legislators who wrote it. they just wanted to add a few more checks on public companies. but they forgot to consider the cost. they forgot that companies about to go public are usually rather stretched, and that the weight of a few extra checks that might be easy for general electric to bear are enough to prevent younger companies from being public at all. once you start to think about the cost of checks, you can start to ask other interesting questions. is the cost increasing or decreasing? is it higher in some areas than others? where does it increase discontinuously? if large organizations started to ask questions like that, theyd learn some frightening things. i think the cost of checks may actually be increasing. the reason is that software plays an increasingly important role in companies, and the people who write software are particularly harmed by checks. programmers are unlike many types of workers in that the best ones actually prefer to work hard. this doesnt seem to be the case in most types of work. when i worked in fast food, we didnt prefer the busy times. and when i used to mow lawns, i definitely didnt prefer it when the grass was long after a week of rain. programmers, though, like it better when they write more code. or more precisely, when they release more code. programmers like to make a difference. good ones, anyway. for good programmers, one of the best things about working for a startup is that there are few checks on releases. in true startups, there are no external checks at all. if you have an idea for a new feature in the morning, you can write it and push it to the production servers before lunch. and when you can do that, you have more ideas. at big companies, software has to go through various approvals before it can be launched. and the cost of doing this can be enormousin fact, discontinuous. i was talking recently to a group of three programmers whose startup had been acquired a few years before by a big company. when theyd been independent, they could release changes instantly. now, they said, the absolute fastest they could get code released on the production servers was two weeks. this didnt merely make them less productive. it made them hate working for the acquirer. heres a sign of how much programmers like to be able to work hard: these guys would have paid to be able to release code immediately, the way they used to. i asked them if theyd trade 10% of the acquisition price for the ability to release code immediately, and all three instantly said yes. then i asked what was the maximum percentage of the acquisition price theyd trade for it. they said they didnt want to think about it, because they didnt want to know how high theyd go, but i got the impression it might be as much as half. theyd have sacrificed hundreds of thousands of dollars, perhaps millions, just to be able to deliver more software to users. and you know what? it would have been perfectly safe to let them. in fact, the acquirer would have been better off; not only wouldnt these guys have broken anything, theyd have gotten a lot more done. so the acquirer is in fact getting worse performance at greater cost. just like the committee approving software purchases. and just as the greatest danger of being hard to sell to is not that you overpay but that the best suppliers wont even sell to you, the greatest danger of applying too many checks to your programmers is not that youll make them unproductive, but that good programmers wont even want to work for you. steve jobss famous maxim "artists ship" works both ways. artists arent merely capable of shipping. they insist on it. so if you dont let people ship, you wont have any artists. this essay was originally published at paulgraham.com im not a very good speaker. i say "um" a lot. sometimes i have to pause when i lose my train of thought. i wish i were a better speaker. but i dont wish i were a better speaker like i wish i were a better writer. what i really want is to have good ideas, and thats a much bigger part of being a good writer than being a good speaker. having good ideas is most of writing well. if you know what youre talking about, you can say it in the plainest words and youll be perceived as having a good style. with speaking its the opposite: having good ideas is an alarmingly small component of being a good speaker. i first noticed this at a conference several years ago. there was another speaker who was much better than me. he had all of us roaring with laughter. i seemed awkward and halting by comparison. afterward i put my talk online like i usually do. as i was doing it i tried to imagine what a transcript of the other guys talk would be like, and it was only then i realized he hadnt said very much. maybe this would have been obvious to someone who knew more about speaking, but it was a revelation to me how much less ideas mattered in speaking than writing. a few years later i heard a talk by someone who was not merely a better speaker than me, but a famous speaker. boy was he good. so i decided id pay close attention to what he said, to learn how he did it. after about ten sentences i found myself thinking "i dont want to be a good speaker." being a really good speaker is not merely orthogonal to having good ideas, but in many ways pushes you in the opposite direction. for example, when i give a talk i usually write it out beforehand. i know thats a mistake; i know delivering a prewritten talk makes it harder to engage with an audience. the way to get the attention of an audience is to give them your full attention, and when youre delivering a prewritten talk your attention is always divided between the audience and the talk-even if youve memorized it. if you want to engage an audience its better to start with no more than an outline of what you want to say and ad lib the individual sentences. but if you do that you could spend no more time thinking about each sentence than it takes to say it. occasionally the stimulation of talking to a live audience makes you think of new things, but in general this is not going to generate ideas as well as writing does, where you can spend as long on each sentence as you want. if you rehearse a prewritten speech enough, you can get asymptotically close to the sort of engagement you get when speaking ad lib. actors do. but here again theres a tradeoff between smoothness and ideas. all the time you spend practicing a talk, you could instead spend making it better. actors dont face that temptation except in the rare cases where theyve written the script, but any speaker does. before i give a talk i can usually be found sitting in a corner somewhere with a copy printed out on paper, trying to rehearse it in my head. but i always end up spending most of the time rewriting it instead. every talk i give ends up being given from a manuscript full of things crossed out and rewritten. which of course makes me um even more, because i havent had any time at all to practice the new bits. depending on your audience, there are even worse tradeoffs than these. audiences like to be flattered; they like jokes; they like to be swept off their feet by a vigorous stream of words. as you decrease the intelligence of the audience, being a good speaker is increasingly a matter of being a good bullshitter. thats true in writing too of course, but the descent is steeper with talks. any given person is dumber as a member of an audience than as a reader. just as a speaker ad libbing can only spend as long thinking about each sentence as it takes to say it, a person hearing a talk can only spend as long thinking about each sentence as it takes to hear it. plus people in an audience are always affected by the reactions of those around them, and the reactions that spread from person to person in an audience are disproportionately the more brutish sort, just as low notes travel through walls better than high ones. every audience is an incipient mob, and a good speaker uses that. part of the reason i laughed so much at the talk by the good speaker at that conference was that everyone else did. so are talks useless? theyre certainly inferior to the written word as a source of ideas. but thats not all talks are good for. when i go to a talk, its usually because im interested in the speaker. listening to a talk is the closest most of us can get to having a conversation with someone like the president, who doesnt have time to meet individually with all the people who want to meet him. talks are also good at motivating me to do things. its probably no coincidence that so many famous speakers are described as motivational speakers. that may be what public speaking is really for. its probably what it was originally for. the emotional reactions you can elicit with a talk can be a powerful force. i wish i could say that force was more often used for good than ill, but im not sure.  im not talking here about academic talks, which are a different type of thing. while the audience at an academic talk might appreciate a joke, they will (or at least should) make a conscious effort to see what new ideas youre presenting.  thats the lower bound. in practice you can often do better, because talks are usually about things youve written or talked about before, and when you ad lib you end up reproducing some of those sentences. like early medieval architecture, impromptu talks are made of spolia. which feels a bit dishonest, incidentally, because you have to deliver these sentences as if youd just thought of them.  robert morris points out that there is a way in which practicing talks makes them better: reading a talk out loud can expose awkward parts. i agree and in fact i read most things i write out loud at least once for that reason.  for sufficiently small audiences, it may not be true that being part of an audience makes people dumber. the real decline seems to set in when the audience gets too big for the talk to feel like a conversation-maybe around 10 people. thanks to sam altman and robert morris for reading drafts of this. this essay was originally published at paulgraham.com the economic situation is apparently so grim that some experts fear we may be in for a stretch as bad as the mid seventies. when microsoft and apple were founded. as those examples suggest, a recession may not be such a bad time to start a startup. im not claiming its a particularly good time either. the truth is more boring: the state of the economy doesnt matter much either way. if weve learned one thing from funding so many startups, its that they succeed or fail based on the qualities of the founders. the economy has some effect, certainly, but as a predictor of success its rounding error compared to the founders. which means that what matters is who you are, not when you do it. if youre the right sort of person, youll win even in a bad economy. and if youre not, a good economy wont save you. someone who thinks "i better not start a startup now, because the economy is so bad" is making the same mistake as the people who thought during the bubble "all i have to do is start a startup, and ill be rich." so if you want to improve your chances, you should think far more about who you can recruit as a cofounder than the state of the economy. and if youre worried about threats to the survival of your company, dont look for them in the news. look in the mirror. but for any given team of founders, would it not pay to wait till the economy is better before taking the leap? if youre starting a restaurant, maybe, but not if youre working on technology. technology progresses more or less independently of the stock market. so for any given idea, the payoff for acting fast in a bad economy will be higher than for waiting. microsofts first product was a basic interpreter for the altair. that was exactly what the world needed in 1975, but if gates and allen had decided to wait a few years, it would have been too late. of course, the idea you have now wont be the last you have. there are always new ideas. but if you have a specific idea you want to act on, act now. that doesnt mean you can ignore the economy. both customers and investors will be feeling pinched. its not necessarily a problem if customers feel pinched: you may even be able to benefit from it, by making things that save money . startups often make things cheaper, so in that respect theyre better positioned to prosper in a recession than big companies. investors are more of a problem. startups generally need to raise some amount of external funding, and investors tend to be less willing to invest in bad times. they shouldnt be. everyone knows youre supposed to buy when times are bad and sell when times are good. but of course what makes investing so counterintuitive is that in equity markets, good times are defined as everyone thinking its time to buy. you have to be a contrarian to be correct, and by definition only a minority of investors can be. so just as investors in 1999 were tripping over one another trying to buy into lousy startups, investors in 2009 will presumably be reluctant to invest even in good ones. youll have to adapt to this. but thats nothing new: startups always have to adapt to the whims of investors. ask any founder in any economy if theyd describe investors as fickle, and watch the face they make. last year you had to be prepared to explain how your startup was viral. next year youll have to explain how its recession-proof. (those are both good things to be. the mistake investors make is not the criteria they use but that they always tend to focus on one to the exclusion of the rest.) fortunately the way to make a startup recession-proof is to do exactly what you should do anyway: run it as cheaply as possible. for years ive been telling founders that the surest route to success is to be the cockroaches of the corporate world. the immediate cause of death in a startup is always running out of money. so the cheaper your company is to operate, the harder it is to kill. and fortunately it has gotten very cheap to run a startup. a recession will if anything make it cheaper still. if nuclear winter really is here, it may be safer to be a cockroach even than to keep your job. customers may drop off individually if they can no longer afford you, but youre not going to lose them all at once; markets dont "reduce headcount." what if you quit your job to start a startup that fails, and you cant find another? that could be a problem if you work in sales or marketing. in those fields it can take months to find a new job in a bad economy. but hackers seem to be more liquid. good hackers can always get some kind of job. it might not be your dream job, but youre not going to starve. another advantage of bad times is that theres less competition. technology trains leave the station at regular intervals. if everyone else is cowering in a corner, you may have a whole car to yourself. youre an investor too. as a founder, youre buying stock with work: the reason larry and sergey are so rich is not so much that theyve done work worth tens of billions of dollars, but that they were the first investors in google. and like any investor you should buy when times are bad. were you nodding in agreement, thinking "stupid investors" a few paragraphs ago when i was talking about how investors are reluctant to put money into startups in bad markets, even though thats the time they should rationally be most willing to buy? well, founders arent much better. when times get bad, hackers go to grad school. and no doubt that will happen this time too. in fact, what makes the preceding paragraph true is that most readers wont believe itat least to the extent of acting on it. so maybe a recession is a good time to start a startup. its hard to say whether advantages like lack of competition outweigh disadvantages like reluctant investors. but it doesnt matter much either way. its the people that matter. and for a given set of people working on a given technology, the time to act is always now. this essay was originally published at paulgraham.com raising money is the second hardest part of starting a startup. the hardest part is making something people want: most startups that die, die because they didnt do that. but the second biggest cause of death is probably the difficulty of raising money. fundraising is brutal. one reason its so brutal is simply the brutality of markets. people whove spent most of their lives in schools or big companies may not have been exposed to that. professors and bosses usually feel some sense of responsibility toward you; if you make a valiant effort and fail, theyll cut you a break. markets are less forgiving. customers dont care how hard you worked, only whether you solved their problems. investors evaluate startups the way customers evaluate products, not the way bosses evaluate employees. if youre making a valiant effort and failing, maybe theyll invest in your next startup, but not this one. but raising money from investors is harder than selling to customers, because there are so few of them. theres nothing like an efficient market. youre unlikely to have more than 10 who are interested; its difficult to talk to more. so the randomness of any one investors behavior can really affect you. problem number 3: investors are very random. all investors, including us, are by ordinary standards incompetent. we constantly have to make decisions about things we dont understand, and more often than not were wrong. and yet a lot is at stake. the amounts invested by different types of investors vary from five thousand dollars to fifty million, but the amount usually seems large for whatever type of investor it is. investment decisions are big decisions. that combinationmaking big decisions about things they dont understandtends to make investors very skittish. vcs are notorious for leading founders on. some of the more unscrupulous do it deliberately. but even the most well-intentioned investors can behave in a way that would seem crazy in everyday life. one day theyre full of enthusiasm and seem ready to write you a check on the spot; the next they wont return your phone calls. theyre not playing games with you. they just cant make up their minds.  if that werent bad enough, these wildly fluctuating nodes are all linked together. startup investors all know one another, and (though they hate to admit it) the biggest factor in their opinion of you is the opinion of other investors.  talk about a recipe for an unstable system. you get the opposite of the damping that the fear/greed balance usually produces in markets. no one is interested in a startup thats a "bargain" because everyone else hates it. so the inefficient market you get because there are so few players is exacerbated by the fact that they act less than independently. the result is a system like some kind of primitive, multi-celled sea creature, where you irritate one extremity and the whole thing contracts violently. y combinator is working to fix this. were trying to increase the number of investors just as were increasing the number of startups. we hope that as the number of both increases well get something more like an efficient market. as t approaches infinity, demo day approaches an auction. unfortunately, t is still very far from infinity. what does a startup do now, in the imperfect world we currently inhabit? the most important thing is not to let fundraising get you down. startups live or die on morale. if you let the difficulty of raising money destroy your morale, it will become a self-fulfilling prophecy. some would-be founders may by now be thinking, why deal with investors at all? if raising money is so painful, why do it? one answer to that is obvious: because you need money to live on. its a fine idea in principle to finance your startup with its own revenues, but you cant create instant customers. whatever you make, you have to sell a certain amount to break even. it will take time to grow your sales to that point, and its hard to predict, till you try, how long it will take. we could not have bootstrapped viaweb, for example. we charged quite a lot for our softwareabout $140 per user per monthbut it was at least a year before our revenues would have covered even our paltry costs. we didnt have enough saved to live on for a year. if you factor out the "bootstrapped" companies that were actually funded by their founders through savings or a day job, the remainder either (a) got really lucky, which is hard to do on demand, or (b) began life as consulting companies and gradually transformed themselves into product companies. consulting is the only option you can count on. but consulting is far from free money. its not as painful as raising money from investors, perhaps, but the pain is spread over a longer period. years, probably. and for many types of startup, that delay could be fatal. if youre working on something so unusual that no one else is likely to think of it, you can take your time. joshua schachter gradually built delicious on the side while working on wall street. he got away with it because no one else realized it was a good idea. but if you were building something as obviously necessary as online store software at about the same time as viaweb, and you were working on it on the side while spending most of your time on client work, you were not in a good position. bootstrapping sounds great in principle, but this apparently verdant territory is one from which few startups emerge alive. the mere fact that bootstrapped startups tend to be famous on that account should set off alarm bells. if it worked so well, it would be the norm.  bootstrapping may get easier, because starting a company is getting cheaper. but i dont think well ever reach the point where most startups can do without outside funding. technology tends to get dramatically cheaper, but living expenses dont. the upshot is, you can choose your pain: either the short, sharp pain of raising money, or the chronic ache of consulting. for a given total amount of pain, raising money is the better choice, because new technology is usually more valuable now than later. but although for most startups raising money will be the lesser evil, its still a pretty big evilso big that it can easily kill you. not merely in the obvious sense that if you fail to raise money you might have to shut the company down, but because the process of raising money itself can kill you. to survive it you need a set of techniques mostly orthogonal to the ones used in convincing investors, just as mountain climbers need to know survival techniques that are mostly orthogonal to those used in physically getting up and down mountains. the reason raising money destroys so many startups morale is not simply that its hard, but that its so much harder than they expected. what kills you is the disappointment. and the lower your expectations, the harder it is to be disappointed. startup founders tend to be optimistic. this can work well in technology, at least some of the time, but its the wrong way to approach raising money. better to assume investors will always let you down. acquirers too, while were at it. at yc one of our secondary mantras is "deals fall through." no matter what deal you have going on, assume it will fall through. the predictive power of this simple rule is amazing. there will be a tendency, as a deal progresses, to start to believe it will happen, and then to depend on it happening. you must resist this. tie yourself to the mast. this is what kills you. deals do not have a trajectory like most other human interactions, where shared plans solidify linearly over time. deals often fall through at the last moment. often the other party doesnt really think about what they want till the last moment. so you cant use your everyday intuitions about shared plans as a guide. when it comes to deals, you have to consciously turn them off and become pathologically cynical. this is harder to do than it sounds. its very flattering when eminent investors seem interested in funding you. its easy to start to believe that raising money will be quick and straightforward. but it hardly ever is. it sounds obvious to say that you should keep working on your startup while raising money. actually this is hard to do. most startups dont manage to. raising money has a mysterious capacity to suck up all your attention. even if you only have one meeting a day with investors, somehow that one meeting will burn up your whole day. it costs not just the time of the actual meeting, but the time getting there and back, and the time preparing for it beforehand and thinking about it afterward. the best way to survive the distraction of meeting with investors is probably to partition the company: to pick one founder to deal with investors while the others keep the company going. this works better when a startup has 3 founders than 2, and better when the leader of the company is not also the lead developer. in the best case, the company keeps moving forward at about half speed. thats the best case, though. more often than not the company comes to a standstill while raising money. and that is dangerous for so many reasons. raising money always takes longer than you expect. what seems like its going to be a 2 week interruption turns into a 4 month interruption. that can be very demoralizing. and worse still, it can make you less attractive to investors. they want to invest in companies that are dynamic. a company that hasnt done anything new in 4 months doesnt seem dynamic, so they start to lose interest. investors rarely grasp this, but much of what theyre responding to when they lose interest in a startup is the damage done by their own indecision. the solution: put the startup first. fit meetings with investors into the spare moments in your development schedule, rather than doing development in the spare moments between meetings with investors. if you keep the company moving forwardreleasing new features, increasing traffic, doing deals, getting written aboutthose investor meetings are more likely to be productive. not just because your startup will seem more alive, but also because it will be better for your own morale, which is one of the main ways investors judge you. as conditions get worse, the optimal strategy becomes more conservative. when things go well you can take risks; when things are bad you want to play it safe. i advise approaching fundraising as if it were always going badly. the reason is that between your ability to delude yourself and the wildly unstable nature of the system youre dealing with, things probably either already are or could easily become much worse than they seem. what i tell most startups we fund is that if someone reputable offers you funding on reasonable terms, take it. there have been startups that ignored this advice and got away with itstartups that ignored a good offer in the hope of getting a better one, and actually did. but in the same position id give the same advice again. who knows how many bullets were in the gun they were playing russian roulette with? corollary: if an investor seems interested, dont just let them sit. you cant assume someone interested in investing will stay interested. in fact, you cant even tell ( they cant even tell) if theyre really interested till you try to convert that interest into money. so if you have hot prospect, either close them now or write them off. and unless you already have enough funding, that reduces to: close them now. startups dont win by getting great funding rounds, but by making great products. so finish raising money and get back to work. there are two questions vcs ask that you shouldnt answer: "who else are you talking to?" and "how much are you trying to raise?" vcs dont expect you to answer the first question. they ask it just in case.  they do seem to expect an answer to the second. but i dont think you should just tell them a number. not as a way to play games with them, but because you shouldnt have a fixed amount you need to raise. the custom of a startup needing a fixed amount of funding is an obsolete one left over from the days when startups were more expensive. a company that needed to build a factory or hire 50 people obviously needed to raise a certain minimum amount. but few technology startups are in that position today. we advise startups to tell investors there are several different routes they could take depending on how much they raised. as little as $50k could pay for food and rent for the founders for a year. a couple hundred thousand would let them get office space and hire some smart people they know from school. a couple million would let them really blow this thing out. the message (and not just the message, but the fact) should be: were going to succeed no matter what. raising more money just lets us do it faster. if youre raising an angel round, the size of the round can even change on the fly. in fact, its just as well to make the round small initially, then expand as needed, rather than trying to raise a large round and risk losing the investors you already have if you cant raise the full amount. you may even want to do a "rolling close," where the round has no predetermined size, but instead you sell stock to investors one at a time as they say yes. that helps break deadlocks, because you can start as soon as the first one is ready to buy.  a startup with a couple founders in their early twenties can have expenses so low that they could be profitable on as little as $2000 per month. thats negligible as corporate revenues go, but the effect on your morale and your bargaining position is anything but. at yc we use the phrase "ramen profitable" to describe the situation where youre making just enough to pay your living expenses. once you cross into ramen profitable, everything changes. you may still need investment to make it big, but you dont need it this month. you cant plan when you start a startup how long it will take to become profitable. but if you find yourself in a position where a little more effort expended on sales would carry you over the threshold of ramen profitable, do it. investors like it when youre ramen profitable. it shows youve thought about making money, instead of just working on amusing technical problems; it shows you have the discipline to keep your expenses low; but above all, it means you dont need them. there is nothing investors like more than a startup that seems like its going to succeed even without them. investors like it when they can help a startup, but they dont like startups that would die without that help. at yc we spend a lot of time trying to predict how the startups weve funded will do, because were trying to learn how to pick winners. weve now watched the trajectories of so many startups that were getting better at predicting them. and when were talking about startups we think are likely to succeed, what we find ourselves saying is things like "oh, those guys can take care of themselves. theyll be fine." not "those guys are really smart" or "those guys are working on a great idea."  when we predict good outcomes for startups, the qualities that come up in the supporting arguments are toughness, adaptability, determination. which means to the extent were correct, those are the qualities you need to win. investors know this, at least unconsciously. the reason they like it when you dont need them is not simply that they like what they cant have, but because that quality is what makes founders succeed. sam altman has it. you could parachute him into an island full of cannibals and come back in 5 years and hed be the king. if youre sam altman, you dont have to be profitable to convey to investors that youll succeed with or without them. (he wasnt, and he did.) not everyone has sams deal-making ability. i myself dont. but if you dont, you can let the numbers speak for you. getting rejected by investors can make you start to doubt yourself. after all, theyre more experienced than you. if they think your startup is lame, arent they probably right? maybe, maybe not. the way to handle rejection is with precision. you shouldnt simply ignore rejection. it might mean something. but you shouldnt automatically get demoralized either. to understand what rejection means, you have to understand first of all how common it is. statistically, the average vc is a rejection machine. david hornik, a partner at august, told me: the numbers for me ended up being something like 500 to 800 plans received and read, somewhere between 50 and 100 initial 1 hour meetings held, about 20 companies that i got interested in, about 5 that i got serious about and did a bunch of work, 1 to 2 deals done in a year. so the odds are against you. you may be a great entrepreneur, working on interesting stuff, etc. but it is still incredibly unlikely that you get funded. this is less true with angels, but vcs reject practically everyone. the structure of their business means a partner does at most 2 new investments a year, no matter how many good startups approach him. in addition to the odds being terrible, the average investor is, as i mentioned, a pretty bad judge of startups. its harder to judge startups than most other things, because great startup ideas tend to seem wrong. a good startup idea has to be not just good but novel. and to be both good and novel, an idea probably has to seem bad to most people, or someone would already be doing it and it wouldnt be novel. that makes judging startups harder than most other things one judges. you have to be an intellectual contrarian to be a good startup investor. thats a problem for vcs, most of whom are not particularly imaginative. vcs are mostly money guys, not people who make things.  angels are better at appreciating novel ideas, because most were founders themselves. so when you get a rejection, use the data thats in it, and not whats not. if an investor gives you specific reasons for not investing, look at your startup and ask if theyre right. if theyre real problems, fix them. but dont just take their word for it. youre supposed to be the domain expert; you have to decide. though a rejection doesnt necessarily tell you anything about your startup, it does suggest your pitch could be improved. figure out whats not working and change it. dont just think "investors are stupid." often they are, but figure out precisely where you lose them. dont let rejections pile up as a depressing, undifferentiated heap. sort them and analyze them, and then instead of thinking "no one likes us," youll know precisely how big a problem you have, and what to do about it. consulting, as i mentioned, is a dangerous way to finance a startup. but its better than dying. its a bit like anaerobic respiration: not the optimum solution for the long term, but it can save you from an immediate threat. if youre having trouble raising money from investors at all, it could save you to be able to shift toward consulting. this works better for some startups than others. it wouldnt have been a natural fit for, say, google, but if your company was making software for building web sites, you could degrade fairly gracefully into consulting by building sites for clients with it. so long as you were careful not to get sucked permanently into consulting, this could even have advantages. youd understand your users well if you were using the software for them. plus as a consulting company you might be able to get big-name users using your software that you wouldnt have gotten as a product company. at viaweb we were forced to operate like a consulting company initially, because we were so desperate for users that wed offer to build merchants sites for them if theyd sign up. but we never charged for such work, because we didnt want them to start treating us like actual consultants, and calling us every time they wanted something changed on their site. we knew we had to stay a product company, because only that scales. though novice investors seem unthreatening they can be the most dangerous sort, because theyre so nervous. especially in proportion to the amount they invest. raising $20,000 from a first-time angel investor can be as much work as raising $2 million from a vc fund. their lawyers are generally inexperienced too. but while the investors can admit they dont know what theyre doing, their lawyers cant. one yc startup negotiated terms for a tiny round with an angel, only to receive a 70-page agreement from his lawyer. and since the lawyer could never admit, in front of his client, that hed screwed up, he instead had to insist on retaining all the draconian terms in it, so the deal fell through. of course, someone has to take money from novice investors, or there would never be any experienced ones. but if you do, either (a) drive the process yourself, including supplying the paperwork , or (b) use them only to fill up a larger round led by someone else. the most dangerous thing about investors is their indecisiveness. the worst case scenario is the long no, the no that comes after months of meetings. rejections from investors are like design flaws: inevitable, but much less costly if you discover them early. so while youre talking to investors, constantly look for signs of where you stand. how likely are they to offer you a term sheet? what do they have to be convinced of first? you shouldnt necessarily always be asking these questions outrightthat could get annoyingbut you should always be collecting data about them. investors tend to resist committing except to the extent you push them to. its in their interest to collect the maximum amount of information while making the minimum number of decisions. the best way to force them to act is, of course, competing investors. but you can also apply some force by focusing the discussion: by asking what specific questions they need answered to make up their minds, and then answering them. if you get through several obstacles and they keep raising new ones, assume that ultimately theyre going to flake. you have to be disciplined when collecting data about investors intentions. otherwise their desire to lead you on will combine with your own desire to be led on to produce completely inaccurate impressions. use the data to weight your strategy. youll probably be talking to several investors. focus on the ones that are most likely to say yes. the value of a potential investor is a combination of how good it would be if they said yes, and how likely they are to say it. put the most weight on the second factor. partly because the most important quality in an investor is simply investing. but also because, as i mentioned, the biggest factor in investors opinion of you is other investors opinion of you. if youre talking to several investors and you manage to get one over the threshold of saying yes, it will make the others much more interested. so youre not sacrificing the lukewarm investors if you focus on the hot ones; convincing the hot investors is the best way to convince the lukewarm ones. im hopeful things wont always be so awkward. i hope that as startups get cheaper and the number of investors increases, raising money will become, if not easy, at least straightforward. in the meantime, the brokenness of the funding process offers a big opportunity. most investors have no idea how dangerous they are. theyd be surprised to hear that raising money from them is something that has to be treated as a threat to a companys survival. they just think they need a little more information to make up their minds. they dont get that there are 10 other investors who also want a little more information, and that the process of talking to them all can bring a startup to a standstill for months. because investors dont understand the cost of dealing with them, they dont realize how much room there is for a potential competitor to undercut them. i know from my own experience how much faster investors could decide, because weve brought our own time down to 20 minutes (5 minutes of reading an application plus a 10 minute interview plus 5 minutes of discussion). if you were investing more money youd want to take longer, of course. but if we can decide in 20 minutes, should it take anyone longer than a couple days? opportunities like this dont sit unexploited forever, even in an industry as conservative as venture capital. so either existing investors will start to make up their minds faster, or new investors will emerge who do. in the meantime founders have to treat raising money as a dangerous process. fortunately, i can fix the biggest danger right here. the biggest danger is surprise. its that startups will underestimate the difficulty of raising moneythat theyll cruise through all the initial steps, but when they turn to raising money theyll find it surprisingly hard, get demoralized, and give up. so im telling you in advance: raising money is hard.  when investors cant make up their minds, they sometimes describe it as if it were a property of the startup. "youre too early for us," they sometimes say. but which of them, if they were taken back in a time machine to the hour google was founded, wouldnt offer to invest at any valuation the founders chose? an hour old is not too early if its the right startup. what "youre too early" really means is "we cant figure out yet whether youll succeed."  investors influence one another both directly and indirectly. they influence one another directly through the "buzz" that surrounds a hot startup. but they also influence one another indirectly through the founders. when a lot of investors are interested in you, it increases your confidence in a way that makes you much more attractive to investors. no vc will admit theyre influenced by buzz. some genuinely arent. but there are few who can say theyre not influenced by confidence.  one vc who read this essay wrote: "we try to avoid companies that got bootstrapped with consulting. it creates very bad behaviors/instincts that are hard to erase from a companys culture."  the optimal way to answer the first question is to say that it would be improper to name names, while simultaneously implying that youre talking to a bunch of other vcs who are all about to give you term sheets. if youre the sort of person who understands how to do that, go ahead. if not, dont even try. nothing annoys vcs more than clumsy efforts to manipulate them.  the disadvantage of expanding a round on the fly is that the valuation is fixed at the start, so if you get a sudden rush of interest, you may have to decide between turning some investors away and selling more of the company than you meant to. thats a good problem to have, however.  i wouldnt say that intelligence doesnt matter in startups. were only comparing yc startups, whove already made it over a certain threshold.  but not all are. though most vcs are suits at heart, the most successful ones tend not to be. oddly enough, the best vcs tend to be the least vc-like. thanks to trevor blackwell, david hornik, jessica livingston, robert morris, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com at this years startup school, david heinemeier hansson gave a talk in which he suggested that startup founders should do things the old fashioned way. instead of hoping to get rich by building a valuable company and then selling stock in a "liquidity event," founders should start companies that make money and live off the revenues. sounds like a good plan. lets think about the optimal way to do this. one disadvantage of living off the revenues of your company is that you have to keep running it. and as anyone who runs their own business can tell you, that requires your complete attention. you cant just start a business and check out once things are going well, or they stop going well surprisingly fast. the main economic motives of startup founders seem to be freedom and security. they want enough money that (a) they dont have to worry about running out of money and (b) they can spend their time how they want. running your own business offers neither. you certainly dont have freedom: no boss is so demanding. nor do you have security, because if you stop paying attention to the company, its revenues go away, and with them your income. the best case, for most people, would be if you could hire someone to manage the company for you once youd grown it to a certain size. suppose you could find a really good manager. then you would have both freedom and security. you could pay as little attention to the business as you wanted, knowing that your manager would keep things running smoothly. and that being so, revenues would continue to flow in, so youd have security as well. there will of course be some founders who wouldnt like that idea: the ones who like running their company so much that theres nothing else theyd rather do. but this group must be small. the way you succeed in most businesses is to be fanatically attentive to customers needs. what are the odds that your own desires would coincide exactly with the demands of this powerful, external force? sure, running your own company can be fairly interesting. viaweb was more interesting than any job id had before. and since i made much more money from it, it offered the highest ratio of income to boringness of anything id done, by orders of magnitude. but was it the most interesting work i could imagine doing? no. whether the number of founders in the same position is asymptotic or merely large, there are certainly a lot of them. for them the right approach would be to hand the company over to a professional manager eventually, if they could find one who was good enough. _____ so far so good. but what if your manager was hit by a bus? what you really want is a management company to run your company for you. then you dont depend on any one person. if you own rental property, there are companies you can hire to manage it for you. some will do everything, from finding tenants to fixing leaks. of course, running companies is a lot more complicated than managing rental property, but lets suppose there were management companies that could do it for you. theyd charge a lot, but wouldnt it be worth it? id sacrifice a large percentage of the income for the extra peace of mind. i realize what im describing already sounds too good to be true, but i can think of a way to make it even more attractive. if company management companies existed, there would be an additional service they could offer clients: they could let them insure their returns by pooling their risk. after all, even a perfect manager cant save a company when, as sometimes happens, its whole market dies, just as property managers cant save you from the building burning down. but a company that managed a large enough number of companies could say to all its clients: well combine the revenues from all your companies, and pay you your proportionate share. if such management companies existed, theyd offer the maximum of freedom and security. someone would run your company for you, and youd be protected even if it happened to die. lets think about how such a management company might be organized. the simplest way would be to have a new kind of stock representing the total pool of companies they were managing. when you signed up, youd trade your companys stock for shares of this pool, in proportion to an estimate of your companys value that youd both agreed upon. then youd automatically get your share of the returns of the whole pool. the catch is that because this kind of trade would be hard to undo, you couldnt switch management companies. but theres a way they could fix that: suppose all the company management companies got together and agreed to allow their clients to exchange shares in all their pools. then you could, in effect, simultaneously choose all the management companies to run yours for you, in whatever proportion you wanted, and change your mind later as often as you wanted. if such pooled-risk company management companies existed, signing up with one would seem the ideal plan for most people following the route david advocated. good news: they do exist. what ive just described is an acquisition by a public company. _____ unfortunately, though public acquirers are structurally identical to pooled-risk company management companies, they dont think of themselves that way. with a property management company, you can just walk in whenever you want and say "manage my rental property for me" and theyll do it. whereas acquirers are, as of this writing, extremely fickle. sometimes theyre in a buying mood and theyll overpay enormously; other times theyre not interested. theyre like property management companies run by madmen. or more precisely, by benjamin grahams mr. market. so while on average public acquirers behave like pooled-risk company managers, you need a window of several years to get average case performance. if you wait long enough (five years, say) youre likely to hit an up cycle where some acquirer is hot to buy you. but you cant choose when it happens. you cant assume investors will carry you for as long as you might have to wait. your company has to make money. opinions are divided about how early to focus on that. joe kraus says you should try charging customers right away. and yet some of the most successful startups, including google, ignored revenue at first and concentrated exclusively on development. the answer probably depends on the type of company youre starting. i can imagine some where trying to make sales would be a good heuristic for product design, and others where it would just be a distraction. the test is probably whether it helps you to understand your users. you can choose whichever revenue strategy you think is best for the type of company youre starting, so long as youre profitable. being profitable ensures youll get at least the average of the acquisition marketin which public companies do behave as pooled-risk company management companies. david isnt mistaken in saying you should start a company to live off its revenues. the mistake is thinking this is somehow opposed to starting a company and selling it. in fact, for most people the latter is merely the optimal case of the former. thanks to trevor blackwell, jessica livingston, michael mandel, robert morris, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com great cities attract ambitious people. you can sense it when you walk around one. in a hundred subtle ways, the city sends you a message: you could do more; you should try harder. the surprising thing is how different these messages can be. new york tells you, above all: you should make more money. there are other messages too, of course. you should be hipper. you should be better looking. but the clearest message is that you should be richer. what i like about boston (or rather cambridge) is that the message there is: you should be smarter. you really should get around to reading all those books youve been meaning to. when you ask what message a city sends, you sometimes get surprising answers. as much as they respect brains in silicon valley, the message the valley sends is: you should be more powerful. thats not quite the same message new york sends. power matters in new york too of course, but new york is pretty impressed by a billion dollars even if you merely inherited it. in silicon valley no one would care except a few real estate agents. what matters in silicon valley is how much effect you have on the world. the reason people there care about larry and sergey is not their wealth but the fact that they control google, which affects practically everyone. _____ how much does it matter what message a city sends? empirically, the answer seems to be: a lot. you might think that if you had enough strength of mind to do great things, youd be able to transcend your environment. where you live should make at most a couple percent difference. but if you look at the historical evidence, it seems to matter more than that. most people who did great things were clumped together in a few places where that sort of thing was done at the time. you can see how powerful cities are from something i wrote about earlier : the case of the milanese leonardo. practically every fifteenth century italian painter youve heard of was from florence, even though milan was just as big. people in florence werent genetically different, so you have to assume there was someone born in milan with as much natural ability as leonardo. what happened to him? if even someone with the same natural ability as leonardo couldnt beat the force of environment, do you suppose you can? i dont. im fairly stubborn, but i wouldnt try to fight this force. id rather use it. so ive thought a lot about where to live. id always imagined berkeley would be the ideal placethat it would basically be cambridge with good weather. but when i finally tried living there a couple years ago, it turned out not to be. the message berkeley sends is: you should live better. life in berkeley is very civilized. its probably the place in america where someone from northern europe would feel most at home. but its not humming with ambition. in retrospect it shouldnt have been surprising that a place so pleasant would attract people interested above all in quality of life. cambridge with good weather, it turns out, is not cambridge. the people you find in cambridge are not there by accident. you have to make sacrifices to live there. its expensive and somewhat grubby, and the weathers often bad. so the kind of people you find in cambridge are the kind of people who want to live where the smartest people are, even if that means living in an expensive, grubby place with bad weather. as of this writing, cambridge seems to be the intellectual capital of the world. i realize that seems a preposterous claim. what makes it true is that its more preposterous to claim about anywhere else. american universities currently seem to be the best, judging from the flow of ambitious students. and what us city has a stronger claim? new york? a fair number of smart people, but diluted by a much larger number of neanderthals in suits. the bay area has a lot of smart people too, but again, diluted; there are two great universities, but theyre far apart. harvard and mit are practically adjacent by west coast standards, and theyre surrounded by about 20 other colleges and universities.  cambridge as a result feels like a town whose main industry is ideas, while new yorks is finance and silicon valleys is startups. _____ when you talk about cities in the sense we are, what youre really talking about is collections of people. for a long time cities were the only large collections of people, so you could use the two ideas interchangeably. but we can see how much things are changing from the examples ive mentioned. new york is a classic great city. but cambridge is just part of a city, and silicon valley is not even that. (san jose is not, as it sometimes claims, the capital of silicon valley. its just 178 square miles at one end of it.) maybe the internet will change things further. maybe one day the most important community you belong to will be a virtual one, and it wont matter where you live physically. but i wouldnt bet on it. the physical world is very high bandwidth, and some of the ways cities send you messages are quite subtle. one of the exhilarating things about coming back to cambridge every spring is walking through the streets at dusk, when you can see into the houses. when you walk through palo alto in the evening, you see nothing but the blue glow of tvs. in cambridge you see shelves full of promising-looking books. palo alto was probably much like cambridge in 1960, but youd never guess now that there was a university nearby. now its just one of the richer neighborhoods in silicon valley.  a city speaks to you mostly by accidentin things you see through windows, in conversations you overhear. its not something you have to seek out, but something you cant turn off. one of the occupational hazards of living in cambridge is overhearing the conversations of people who use interrogative intonation in declarative sentences. but on average ill take cambridge conversations over new york or silicon valley ones. a friend who moved to silicon valley in the late 90s said the worst thing about living there was the low quality of the eavesdropping. at the time i thought she was being deliberately eccentric. sure, it can be interesting to eavesdrop on people, but is good quality eavesdropping so important that it would affect where you chose to live? now i understand what she meant. the conversations you overhear tell you what sort of people youre among. _____ no matter how determined you are, its hard not to be influenced by the people around you. its not so much that you do whatever a city expects of you, but that you get discouraged when no one around you cares about the same things you do. theres an imbalance between encouragement and discouragement like that between gaining and losing money. most people overvalue negative amounts of money: theyll work much harder to avoid losing a dollar than to gain one. similarly, though there are plenty of people strong enough to resist doing something just because thats what one is supposed to do where they happen to be, there are few strong enough to keep working on something no one around them cares about. because ambitions are to some extent incompatible and admiration is a zero-sum game, each city tends to focus on one type of ambition. the reason cambridge is the intellectual capital is not just that theres a concentration of smart people there, but that theres nothing else people there care about more. professors in new york and the bay area are second class citizenstill they start hedge funds or startups respectively. this suggests an answer to a question people in new york have wondered about since the bubble: whether new york could grow into a startup hub to rival silicon valley. one reason thats unlikely is that someone starting a startup in new york would feel like a second class citizen.  theres already something else people in new york admire more. in the long term, that could be a bad thing for new york. the power of an important new technology does eventually convert to money. so by caring more about money and less about power than silicon valley, new york is recognizing the same thing, but slower.  and in fact it has been losing to silicon valley at its own game: the ratio of new york to california residents in the forbes 400 has decreased from 1.45 (81:56) when the list was first published in 1982 to .83 (73:88) in 2007. _____ not all cities send a message. only those that are centers for some type of ambition do. and it can be hard to tell exactly what message a city sends without living there. i understand the messages of new york, cambridge, and silicon valley because ive lived for several years in each of them. dc and la seem to send messages too, but i havent spent long enough in either to say for sure what they are. the big thing in la seems to be fame. theres an a list of people who are most in demand right now, and whats most admired is to be on it, or friends with those who are. beneath that the message is much like new yorks, though perhaps with more emphasis on physical attractiveness. in dc the message seems to be that the most important thing is who you know. you want to be an insider. in practice this seems to work much as in la. theres an a list and you want to be on it or close to those who are. the only difference is how the a list is selected. and even that is not that different. at the moment, san franciscos message seems to be the same as berkeleys: you should live better. but this will change if enough startups choose sf over the valley. during the bubble that was a predictor of failurea self-indulgent choice, like buying expensive office furniture. even now im suspicious when startups choose sf. but if enough good ones do, it stops being a self-indulgent choice, because the center of gravity of silicon valley will shift there. i havent found anything like cambridge for intellectual ambition. oxford and cambridge (england) feel like ithaca or hanover: the message is there, but not as strong. paris was once a great intellectual center. if you went there in 1300, it might have sent the message cambridge does now. but i tried living there for a bit last year, and the ambitions of the inhabitants are not intellectual ones. the message paris sends now is: do things with style. i liked that, actually. paris is the only city ive lived in where people genuinely cared about art. in america only a few rich people buy original art, and even the more sophisticated ones rarely get past judging it by the brand name of the artist. but looking through windows at dusk in paris you can see that people there actually care what paintings look like. visually, paris has the best eavesdropping i know.  theres one more message ive heard from cities: in london you can still (barely) hear the message that one should be more aristocratic. if you listen for it you can also hear it in paris, new york, and boston. but this message is everywhere very faint. it would have been strong 100 years ago, but now i probably wouldnt have picked it up at all if i hadnt deliberately tuned in to that wavelength to see if there was any signal left. _____ so far the complete list of messages ive picked up from cities is: wealth, style, hipness, physical attractiveness, fame, political power, economic power, intelligence, social class, and quality of life. my immediate reaction to this list is that it makes me slightly queasy. id always considered ambition a good thing, but i realize now that was because id always implicitly understood it to mean ambition in the areas i cared about. when you list everything ambitious people are ambitious about, its not so pretty. on closer examination i see a couple things on the list that are surprising in the light of history. for example, physical attractiveness wouldnt have been there 100 years ago (though it might have been 2400 years ago). it has always mattered for women, but in the late twentieth century it seems to have started to matter for men as well. im not sure whyprobably some combination of the increasing power of women, the increasing influence of actors as models, and the fact that so many people work in offices now: you cant show off by wearing clothes too fancy to wear in a factory, so you have to show off with your body instead. hipness is another thing you wouldnt have seen on the list 100 years ago. or wouldnt you? what it means is to know whats what. so maybe it has simply replaced the component of social class that consisted of being "au fait." that could explain why hipness seems particularly admired in london: its version 2 of the traditional english delight in obscure codes that only insiders understand. economic power would have been on the list 100 years ago, but what we mean by it is changing. it used to mean the control of vast human and material resources. but increasingly it means the ability to direct the course of technology, and some of the people in a position to do that are not even richleaders of important open source projects, for example. the captains of industry of times past had laboratories full of clever people cooking up new technologies for them. the new breed are themselves those people. as this force gets more attention, another is dropping off the list: social class. i think the two changes are related. economic power, wealth, and social class are just names for the same thing at different stages in its life: economic power converts to wealth, and wealth to social class. so the focus of admiration is simply shifting upstream. _____ does anyone who wants to do great work have to live in a great city? no; all great cities inspire some sort of ambition, but they arent the only places that do. for some kinds of work, all you need is a handful of talented colleagues. what cities provide is an audience, and a funnel for peers. these arent so critical in something like math or physics, where no audience matters except your peers, and judging ability is sufficiently straightforward that hiring and admissions committees can do it reliably. in a field like math or physics all you need is a department with the right colleagues in it. it could be anywherein los alamos, new mexico, for example. its in fields like the arts or writing or technology that the larger environment matters. in these the best practitioners arent conveniently collected in a few top university departments and research labspartly because talent is harder to judge, and partly because people pay for these things, so one doesnt need to rely on teaching or research funding to support oneself. its in these more chaotic fields that it helps most to be in a great city: you need the encouragement of feeling that people around you care about the kind of work you do, and since you have to find peers for yourself, you need the much larger intake mechanism of a great city. you dont have to live in a great city your whole life to benefit from it. the critical years seem to be the early and middle ones of your career. clearly you dont have to grow up in a great city. nor does it seem to matter if you go to college in one. to most college students a world of a few thousand people seems big enough. plus in college you dont yet have to face the hardest kind of workdiscovering new problems to solve. its when you move on to the next and much harder step that it helps most to be in a place where you can find peers and encouragement. you seem to be able to leave, if you want, once youve found both. the impressionists show the typical pattern: they were born all over france (pissarro was born in the carribbean) and died all over france, but what defined them were the years they spent together in paris. _____ unless youre sure what you want to do and where the leading center for it is, your best bet is probably to try living in several places when youre young. you can never tell what message a city sends till you live there, or even whether it still sends one. often your information will be wrong: i tried living in florence when i was 25, thinking it would be an art center, but it turned out i was 450 years too late. even when a city is still a live center of ambition, you wont know for sure whether its message will resonate with you till you hear it. when i moved to new york, i was very excited at first. its an exciting place. so it took me quite a while to realize i just wasnt like the people there. i kept searching for the cambridge of new york. it turned out it was way, way uptown: an hour uptown by air. some people know at 16 what sort of work theyre going to do, but in most ambitious kids, ambition seems to precede anything specific to be ambitious about. they know they want to do something great. they just havent decided yet whether theyre going to be a rock star or a brain surgeon. theres nothing wrong with that. but it means if you have this most common type of ambition, youll probably have to figure out where to live by trial and error. youll probably have to find the city where you feel at home to know what sort of ambition you have.  this is one of the advantages of not having the universities in your country controlled by the government. when governments decide how to allocate resources, political deal-making causes things to be spread out geographically. no central goverment would put its two best universities in the same town, unless it was the capital (which would cause other problems). but scholars seem to like to cluster together as much as people in any other field, and when given the freedom to they derive the same advantages from it.  there are still a few old professors in palo alto, but one by one they die and their houses are transformed by developers into mcmansions and sold to vps of bus dev.  how many times have you read about startup founders who continued to live inexpensively as their companies took off? who continued to dress in jeans and t-shirts, to drive the old car they had in grad school, and so on? if you did that in new york, people would treat you like shit. if you walk into a fancy restaurant in san francisco wearing a jeans and a t-shirt, theyre nice to you; who knows who you might be? not in new york. one sign of a citys potential as a technology center is the number of restaurants that still require jackets for men. according to zagats there are none in san francisco, la, boston, or seattle, 4 in dc, 6 in chicago, 8 in london, 13 in new york, and 20 in paris. (zagats lists the ritz carlton dining room in sf as requiring jackets but i couldnt believe it, so i called to check and in fact they dont. apparently theres only one restaurant left on the entire west coast that still requires jackets: the french laundry in napa valley.)  ideas are one step upstream from economic power, so its conceivable that intellectual centers like cambridge will one day have an edge over silicon valley like the one the valley has over new york. this seems unlikely at the moment; if anything boston is falling further and further behind. the only reason i even mention the possibility is that the path from ideas to startups has recently been getting smoother. its a lot easier now for a couple of hackers with no business experience to start a startup than it was 10 years ago. if you extrapolate another 20 years, maybe the balance of power will start to shift back. i wouldnt bet on it, but i wouldnt bet against it either.  if paris is where people care most about art, why is new york the center of gravity of the art business? because in the twentieth century, art as brand split apart from art as stuff. new york is where the richest buyers are, but all they demand from art is brand, and since you can base brand on anything with a sufficiently identifiable style, you may as well use the local stuff. thanks to trevor blackwell, sarah harlin, jessica livingston, jackie mcdonough, robert morris, and david sloo for reading drafts of this. this essay was originally published at paulgraham.com note: the strategy described at the end of this essay didnt work. it would work for a while, and then id gradually find myself using the internet on my work computer. im trying other strategies now, but i think this time ill wait till im sure they work before writing about them. procrastination feeds on distractions. most people find it uncomfortable just to sit and do nothing; you avoid work by doing something else. so one way to beat procrastination is to starve it of distractions. but thats not as straightforward as it sounds, because there are people working hard to distract you. distraction is not a static obstacle that you avoid like you might avoid a rock in the road. distraction seeks you out. chesterfield described dirt as matter out of place. distracting is, similarly, desirable at the wrong time. and technology is continually being refined to produce more and more desirable things. which means that as we learn to avoid one class of distractions, new ones constantly appear, like drug-resistant bacteria. television, for example, has after 50 years of refinement reached the point where its like visual crack. i realized when i was 13 that tv was addictive, so i stopped watching it. but i read recently that the average american watches 4 hours of tv a day. a quarter of their life. tv is in decline now, but only because people have found even more addictive ways of wasting time. and whats especially dangerous is that many happen at your computer. this is no accident. an ever larger percentage of office workers sit in front of computers connected to the internet, and distractions always evolve toward the procrastinators. i remember when computers were, for me at least, exclusively for work. i might occasionally dial up a server to get mail or ftp files, but most of the time i was offline. all i could do was write and program. now i feel as if someone snuck a television onto my desk. terribly addictive things are just a click away. run into an obstacle in what youre working on? hmm, i wonder whats new online. better check. after years of carefully avoiding classic time sinks like tv, games, and usenet, i still managed to fall prey to distraction, because i didnt realize that it evolves. something that used to be safe, using the internet, gradually became more and more dangerous. some days id wake up, get a cup of tea and check the news, then check email, then check the news again, then answer a few emails, then suddenly notice it was almost lunchtime and i hadnt gotten any real work done. and this started to happen more and more often. it took me surprisingly long to realize how distracting the internet had become, because the problem was intermittent. i ignored it the way you let yourself ignore a bug that only appears intermittently. when i was in the middle of a project, distractions werent really a problem. it was when id finished one project and was deciding what to do next that they always bit me. another reason it was hard to notice the danger of this new type of distraction was that social customs hadnt yet caught up with it. if id spent a whole morning sitting on a sofa watching tv, id have noticed very quickly. thats a known danger sign, like drinking alone. but using the internet still looked and felt a lot like work. eventually, though, it became clear that the internet had become so much more distracting that i had to start treating it differently. basically, i had to add a new application to my list of known time sinks: firefox.    the problem is a hard one to solve because most people still need the internet for some things. if you drink too much, you can solve that problem by stopping entirely. but you cant solve the problem of overeating by stopping eating. i couldnt simply avoid the internet entirely, as id done with previous time sinks. at first i tried rules. for example, id tell myself i was only going to use the internet twice a day. but these schemes never worked for long. eventually something would come up that required me to use it more than that. and then id gradually slip back into my old ways. addictive things have to be treated as if they were sentient adversariesas if there were a little man in your head always cooking up the most plausible arguments for doing whatever youre trying to stop doing. if you leave a path to it, hell find it. the key seems to be visibility. the biggest ingredient in most bad habits is denial. so you have to make it so that you cant merely slip into doing the thing youre trying to avoid. it has to set off alarms. maybe in the long term the right answer for dealing with internet distractions will be software that watches and controls them. but in the meantime ive found a more drastic solution that definitely works: to set up a separate computer for using the internet. i now leave wifi turned off on my main computer except when i need to transfer a file or edit a web page, and i have a separate laptop on the other side of the room that i use to check mail or browse the web. (irony of ironies, its the computer steve huffman wrote reddit on. when steve and alexis auctioned off their old laptops for charity, i bought them for the y combinator museum.) my rule is that i can spend as much time online as i want, as long as i do it on that computer. and this turns out to be enough. when i have to sit on the other side of the room to check email or browse the web, i become much more aware of it. sufficiently aware, in my case at least, that its hard to spend more than about an hour a day online. and my main computer is now freed for work. if you try this trick, youll probably be struck by how different it feels when your computer is disconnected from the internet. it was alarming to me how foreign it felt to sit in front of a computer that could only be used for work, because that showed how much time i must have been wasting. wow. all i can do at this computer is work. ok, i better work then. thats the good part. your old bad habits now help you to work. youre used to sitting in front of that computer for hours at a time. but you cant browse the web or check email now. what are you going to do? you cant just sit there. so you start working. this essay was originally published at paulgraham.com adults lie constantly to kids. im not saying we should stop, but i think we should at least examine which lies we tell and why. there may also be a benefit to us. we were all lied to as kids, and some of the lies we were told still affect us. so by studying the ways adults lie to kids, we may be able to clear our heads of lies we were told. im using the word "lie" in a very general sense: not just overt falsehoods, but also all the more subtle ways we mislead kids. though "lie" has negative connotations, i dont mean to suggest we should never do thisjust that we should pay attention when we do.  one of the most remarkable things about the way we lie to kids is how broad the conspiracy is. all adults know what their culture lies to kids about: theyre the questions you answer "ask your parents." if a kid asked who won the world series in 1982 or what the atomic weight of carbon was, you could just tell him. but if a kid asks you "is there a god?" or "whats a prostitute?" youll probably say "ask your parents." since we all agree, kids see few cracks in the view of the world presented to them. the biggest disagreements are between parents and schools, but even those are small. schools are careful what they say about controversial topics, and if they do contradict what parents want their kids to believe, parents either pressure the school into keeping quiet or move their kids to a new school. the conspiracy is so thorough that most kids who discover it do so only by discovering internal contradictions in what theyre told. it can be traumatic for the ones who wake up during the operation. heres what happened to einstein: through the reading of popular scientific books i soon reached the conviction that much in the stories of the bible could not be true. the consequence was a positively fanatic freethinking coupled with the impression that youth is intentionally being deceived by the state through lies: it was a crushing impression.  i remember that feeling. by 15 i was convinced the world was corrupt from end to end. thats why movies like the matrix have such resonance. every kid grows up in a fake world. in a way it would be easier if the forces behind it were as clearly differentiated as a bunch of evil machines, and one could make a clean break just by taking a pill. if you ask adults why they lie to kids, the most common reason they give is to protect them. and kids do need protecting. the environment you want to create for a newborn child will be quite unlike the streets of a big city. that seems so obvious it seems wrong to call it a lie. its certainly not a bad lie to tell, to give a baby the impression the world is quiet and warm and safe. but this harmless type of lie can turn sour if left unexamined. imagine if you tried to keep someone in as protected an environment as a newborn till age 18. to mislead someone so grossly about the world would seem not protection but abuse. thats an extreme example, of course; when parents do that sort of thing it becomes national news. but you see the same problem on a smaller scale in the malaise teenagers feel in suburbia. the main purpose of suburbia is to provide a protected environment for children to grow up in. and it seems great for 10 year olds. i liked living in suburbia when i was 10. i didnt notice how sterile it was. my whole world was no bigger than a few friends houses i bicycled to and some woods i ran around in. on a log scale i was midway between crib and globe. a suburban street was just the right size. but as i grew older, suburbia started to feel suffocatingly fake. life can be pretty good at 10 or 20, but its often frustrating at 15. this is too big a problem to solve here, but certainly one reason life sucks at 15 is that kids are trapped in a world designed for 10 year olds. what do parents hope to protect their children from by raising them in suburbia? a friend who moved out of manhattan said merely that her 3 year old daughter "saw too much." off the top of my head, that might include: people who are high or drunk, poverty, madness, gruesome medical conditions, sexual behavior of various degrees of oddness, and violent anger. i think its the anger that would worry me most if i had a 3 year old. i was 29 when i moved to new york and i was surprised even then. i wouldnt want a 3 year old to see some of the disputes i saw. it would be too frightening. a lot of the things adults conceal from smaller children, they conceal because theyd be frightening, not because they want to conceal the existence of such things. misleading the child is just a byproduct. this seems one of the most justifiable types of lying adults do to kids. but because the lies are indirect we dont keep a very strict accounting of them. parents know theyve concealed the facts about sex, and many at some point sit their kids down and explain more. but few tell their kids about the differences between the real world and the cocoon they grew up in. combine this with the confidence parents try to instill in their kids, and every year you get a new crop of 18 year olds who think they know how to run the world. dont all 18 year olds think they know how to run the world? actually this seems to be a recent innovation, no more than about 100 years old. in preindustrial times teenage kids were junior members of the adult world and comparatively well aware of their shortcomings. they could see they werent as strong or skillful as the village smith. in past times people lied to kids about some things more than we do now, but the lies implicit in an artificial, protected environment are a recent invention. like a lot of new inventions, the rich got this first. children of kings and great magnates were the first to grow up out of touch with the world. suburbia means half the population can live like kings in that respect. id have different worries about raising teenage kids in new york. id worry less about what theyd see, and more about what theyd do. i went to college with a lot of kids who grew up in manhattan, and as a rule they seemed pretty jaded. they seemed to have lost their virginity at an average of about 14 and by college had tried more drugs than id even heard of. the reasons parents dont want their teenage kids having sex are complex. there are some obvious dangers: pregnancy and sexually transmitted diseases. but those arent the only reasons parents dont want their kids having sex. the average parents of a 14 year old girl would hate the idea of her having sex even if there were zero risk of pregnancy or sexually transmitted diseases. kids can probably sense they arent being told the whole story. after all, pregnancy and sexually transmitted diseases are just as much a problem for adults, and they have sex. what really bothers parents about their teenage kids having sex? their dislike of the idea is so visceral its probably inborn. but if its inborn it should be universal, and there are plenty of societies where parents dont mind if their teenage kids have sexindeed, where its normal for 14 year olds to become mothers. so whats going on? there does seem to be a universal taboo against sex with prepubescent children. one can imagine evolutionary reasons for that. and i think this is the main reason parents in industrialized societies dislike teenage kids having sex. they still think of them as children, even though biologically theyre not, so the taboo against child sex still has force. one thing adults conceal about sex they also conceal about drugs: that it can cause great pleasure. thats what makes sex and drugs so dangerous. the desire for them can cloud ones judgementwhich is especially frightening when the judgement being clouded is the already wretched judgement of a teenage kid. here parents desires conflict. older societies told kids they had bad judgement, but modern parents want their children to be confident. this may well be a better plan than the old one of putting them in their place, but it has the side effect that after having implicitly lied to kids about how good their judgement is, we then have to lie again about all the things they might get into trouble with if they believed us. if parents told their kids the truth about sex and drugs, it would be: the reason you should avoid these things is that you have lousy judgement. people with twice your experience still get burned by them. but this may be one of those cases where the truth wouldnt be convincing, because one of the symptoms of bad judgement is believing you have good judgement. when youre too weak to lift something, you can tell, but when youre making a decision impetuously, youre all the more sure of it. another reason parents dont want their kids having sex is that they want to keep them innocent. adults have a certain model of how kids are supposed to behave, and its different from what they expect of other adults. one of the most obvious differences is the words kids are allowed to use. most parents use words when talking to other adults that they wouldnt want their kids using. they try to hide even the existence of these words for as long as they can. and this is another of those conspiracies everyone participates in: everyone knows youre not supposed to swear in front of kids. ive never heard more different explanations for anything parents tell kids than why they shouldnt swear. every parent i know forbids their children to swear, and yet no two of them have the same justification. its clear most start with not wanting kids to swear, then make up the reason afterward. so my theory about whats going on is that the function of swearwords is to mark the speaker as an adult. theres no difference in the meaning of "shit" and "poopoo." so why should one be ok for kids to say and one forbidden? the only explanation is: by definition.  why does it bother adults so much when kids do things reserved for adults? the idea of a foul-mouthed, cynical 10 year old leaning against a lamppost with a cigarette hanging out of the corner of his mouth is very disconcerting. but why? one reason we want kids to be innocent is that were programmed to like certain kinds of helplessness. ive several times heard mothers say they deliberately refrained from correcting their young childrens mispronunciations because they were so cute. and if you think about it, cuteness is helplessness. toys and cartoon characters meant to be cute always have clueless expressions and stubby, ineffectual limbs. its not surprising wed have an inborn desire to love and protect helpless creatures, considering human offspring are so helpless for so long. without the helplessness that makes kids cute, theyd be very annoying. theyd merely seem like incompetent adults. but theres more to it than that. the reason our hypothetical jaded 10 year old bothers me so much is not just that hed be annoying, but that hed have cut off his prospects for growth so early. to be jaded you have to think you know how the world works, and any theory a 10 year old had about that would probably be a pretty narrow one. innocence is also open-mindedness. we want kids to be innocent so they can continue to learn. paradoxical as it sounds, there are some kinds of knowledge that get in the way of other kinds of knowledge. if youre going to learn that the world is a brutal place full of people trying to take advantage of one another, youre better off learning it last. otherwise you wont bother learning much more. very smart adults often seem unusually innocent, and i dont think this is a coincidence. i think theyve deliberately avoided learning about certain things. certainly i do. i used to think i wanted to know everything. now i know i dont. after sex, death is the topic adults lie most conspicuously about to kids. sex i believe they conceal because of deep taboos. but why do we conceal death from kids? probably because small children are particularly horrified by it. they want to feel safe, and death is the ultimate threat. one of the most spectacular lies our parents told us was about the death of our first cat. over the years, as we asked for more details, they were compelled to invent more, so the story grew quite elaborate. the cat had died at the vets office. of what? of the anaesthesia itself. why was the cat at the vets office? to be fixed. and why had such a routine operation killed it? it wasnt the vets fault; the cat had a congenitally weak heart; the anaesthesia was too much for it; but there was no way anyone could have known this in advance. it was not till we were in our twenties that the truth came out: my sister, then about three, had accidentally stepped on the cat and broken its back. they didnt feel the need to tell us the cat was now happily in cat heaven. my parents never claimed that people or animals who died had "gone to a better place," or that wed meet them again. it didnt seem to harm us. my grandmother told us an edited version of the death of my grandfather. she said theyd been sitting reading one day, and when she said something to him, he didnt answer. he seemed to be asleep, but when she tried to rouse him, she couldnt. "he was gone." having a heart attack sounded like falling asleep. later i learned it hadnt been so neat, and the heart attack had taken most of a day to kill him. along with such outright lies, there must have been a lot of changing the subject when death came up. i cant remember that, of course, but i can infer it from the fact that i didnt really grasp i was going to die till i was about 19. how could i have missed something so obvious for so long? now that ive seen parents managing the subject, i can see how: questions about death are gently but firmly turned aside. on this topic, especially, theyre met half-way by kids. kids often want to be lied to. they want to believe theyre living in a comfortable, safe world as much as their parents want them to believe it.  some parents feel a strong adherence to an ethnic or religious group and want their kids to feel it too. this usually requires two different kinds of lying: the first is to tell the child that he or she is an x, and the second is whatever specific lies xes differentiate themselves by believing.  telling a child they have a particular ethnic or religious identity is one of the stickiest things you can tell them. almost anything else you tell a kid, they can change their mind about later when they start to think for themselves. but if you tell a kid theyre a member of a certain group, that seems nearly impossible to shake. this despite the fact that it can be one of the most premeditated lies parents tell. when parents are of different religions, theyll often agree between themselves that their children will be "raised as xes." and it works. the kids obligingly grow up considering themselves as xes, despite the fact that if their parents had chosen the other way, theyd have grown up considering themselves as ys. one reason this works so well is the second kind of lie involved. the truth is common property. you cant distinguish your group by doing things that are rational, and believing things that are true. if you want to set yourself apart from other people, you have to do things that are arbitrary, and believe things that are false. and after having spent their whole lives doing things that are arbitrary and believing things that are false, and being regarded as odd by "outsiders" on that account, the cognitive dissonance pushing children to regard themselves as xes must be enormous. if they arent an x, why are they attached to all these arbitrary beliefs and customs? if they arent an x, why do all the non-xes call them one? this form of lie is not without its uses. you can use it to carry a payload of beneficial beliefs, and they will also become part of the childs identity. you can tell the child that in addition to never wearing the color yellow, believing the world was created by a giant rabbit, and always snapping their fingers before eating fish, xes are also particularly honest and industrious. then x children will grow up feeling its part of their identity to be honest and industrious. this probably accounts for a lot of the spread of modern religions, and explains why their doctrines are a combination of the useful and the bizarre. the bizarre half is what makes the religion stick, and the useful half is the payload.  one of the least excusable reasons adults lie to kids is to maintain power over them. sometimes these lies are truly sinister, like a child molester telling his victims theyll get in trouble if they tell anyone what happened to them. others seem more innocent; it depends how badly adults lie to maintain their power, and what they use it for. most adults make some effort to conceal their flaws from children. usually their motives are mixed. for example, a father who has an affair generally conceals it from his children. his motive is partly that it would worry them, partly that this would introduce the topic of sex, and partly (a larger part than he would admit) that he doesnt want to tarnish himself in their eyes. if you want to learn what lies are told to kids, read almost any book written to teach them about "issues."  peter mayle wrote one called why are we getting a divorce? it begins with the three most important things to remember about divorce, one of which is: you shouldnt put the blame on one parent, because divorce is never only one persons fault.  really? when a man runs off with his secretary, is it always partly his wifes fault? but i can see why mayle might have said this. maybe its more important for kids to respect their parents than to know the truth about them. but because adults conceal their flaws, and at the same time insist on high standards of behavior for kids, a lot of kids grow up feeling they fall hopelessly short. they walk around feeling horribly evil for having used a swearword, while in fact most of the adults around them are doing much worse things. this happens in intellectual as well as moral questions. the more confident people are, the more willing they seem to be to answer a question "i dont know." less confident people feel they have to have an answer or theyll look bad. my parents were pretty good about admitting when they didnt know things, but i must have been told a lot of lies of this type by teachers, because i rarely heard a teacher say "i dont know" till i got to college. i remember because it was so surprising to hear someone say that in front of a class. the first hint i had that teachers werent omniscient came in sixth grade, after my father contradicted something id learned in school. when i protested that the teacher had said the opposite, my father replied that the guy had no idea what he was talking aboutthat he was just an elementary school teacher, after all. just a teacher? the phrase seemed almost grammatically ill-formed. didnt teachers know everything about the subjects they taught? and if not, why were they the ones teaching us? the sad fact is, us public school teachers dont generally understand the stuff theyre teaching very well. there are some sterling exceptions, but as a rule people planning to go into teaching rank academically near the bottom of the college population. so the fact that i still thought at age 11 that teachers were infallible shows what a job the system must have done on my brain. what kids get taught in school is a complex mix of lies. the most excusable are those told to simplify ideas to make them easy to learn. the problem is, a lot of propaganda gets slipped into the curriculum in the name of simplification. public school textbooks represent a compromise between what various powerful groups want kids to be told. the lies are rarely overt. usually they consist either of omissions or of over-emphasizing certain topics at the expense of others. the view of history we got in elementary school was a crude hagiography, with at least one representative of each powerful group. the famous scientists i remember were einstein, marie curie, and george washington carver. einstein was a big deal because his work led to the atom bomb. marie curie was involved with x-rays. but i was mystified about carver. he seemed to have done stuff with peanuts. its obvious now that he was on the list because he was black (and for that matter that marie curie was on it because she was a woman), but as a kid i was confused for years about him. i wonder if it wouldnt have been better just to tell us the truth: that there werent any famous black scientists. ranking george washington carver with einstein misled us not only about science, but about the obstacles blacks faced in his time. as subjects got softer, the lies got more frequent. by the time you got to politics and recent history, what we were taught was pretty much pure propaganda. for example, we were taught to regard political leaders as saintsespecially the recently martyred kennedy and king. it was astonishing to learn later that theyd both been serial womanizers, and that kennedy was a speed freak to boot. (by the time kings plagiarism emerged, id lost the ability to be surprised by the misdeeds of famous people.) i doubt you could teach kids recent history without teaching them lies, because practically everyone who has anything to say about it has some kind of spin to put on it. much recent history consists of spin. it would probably be better just to teach them metafacts like that. probably the biggest lie told in schools, though, is that the way to succeed is through following "the rules." in fact most such rules are just hacks to manage large groups efficiently. of all the reasons we lie to kids, the most powerful is probably the same mundane reason they lie to us. often when we lie to people its not part of any conscious strategy, but because theyd react violently to the truth. kids, almost by definition, lack self-control. they react violently to thingsand so they get lied to a lot.  a few thanksgivings ago, a friend of mine found himself in a situation that perfectly illustrates the complex motives we have when we lie to kids. as the roast turkey appeared on the table, his alarmingly perceptive 5 year old son suddenly asked if the turkey had wanted to die. foreseeing disaster, my friend and his wife rapidly improvised: yes, the turkey had wanted to die, and in fact had lived its whole life with the aim of being their thanksgiving dinner. and that (phew) was the end of that. whenever we lie to kids to protect them, were usually also lying to keep the peace. one consequence of this sort of calming lie is that we grow up thinking horrible things are normal. its hard for us to feel a sense of urgency as adults over something weve literally been trained not to worry about. when i was about 10 i saw a documentary on pollution that put me into a panic. it seemed the planet was being irretrievably ruined. i went to my mother afterward to ask if this was so. i dont remember what she said, but she made me feel better, so i stopped worrying about it. that was probably the best way to handle a frightened 10 year old. but we should understand the price. this sort of lie is one of the main reasons bad things persist: were all trained to ignore them. a sprinter in a race almost immediately enters a state called "oxygen debt." his body switches to an emergency source of energy thats faster than regular aerobic respiration. but this process builds up waste products that ultimately require extra oxygen to break down, so at the end of the race he has to stop and pant for a while to recover. we arrive at adulthood with a kind of truth debt. we were told a lot of lies to get us (and our parents) through our childhood. some may have been necessary. some probably werent. but we all arrive at adulthood with heads full of lies. theres never a point where the adults sit you down and explain all the lies they told you. theyve forgotten most of them. so if youre going to clear these lies out of your head, youre going to have to do it yourself. few do. most people go through life with bits of packing material adhering to their minds and never know it. you probably never can completely undo the effects of lies you were told as a kid, but its worth trying. ive found that whenever ive been able to undo a lie i was told, a lot of other things fell into place. fortunately, once you arrive at adulthood you get a valuable new resource you can use to figure out what lies you were told. youre now one of the liars. you get to watch behind the scenes as adults spin the world for the next generation of kids. the first step in clearing your head is to realize how far you are from a neutral observer. when i left high school i was, i thought, a complete skeptic. id realized high school was crap. i thought i was ready to question everything i knew. but among the many other things i was ignorant of was how much debris there already was in my head. its not enough to consider your mind a blank slate. you have to consciously erase it.  one reason i stuck with such a brutally simple word is that the lies we tell kids are probably not quite as harmless as we think. if you look at what adults told children in the past, its shocking how much they lied to them. like us, they did it with the best intentions. so if we think were as open as one could reasonably be with children, were probably fooling ourselves. odds are people in 100 years will be as shocked at some of the lies we tell as we are at some of the lies people told 100 years ago. i cant predict which these will be, and i dont want to write an essay that will seem dumb in 100 years. so instead of using special euphemisms for lies that seem excusable according to present fashions, im just going to call all our lies lies. (i have omitted one type: lies told to play games with kids credulity. these range from "make-believe," which is not really a lie because its told with a wink, to the frightening lies told by older siblings. theres not much to say about these: i wouldnt want the first type to go away, and wouldnt expect the second type to.)  calaprice, alice (ed.), the quotable einstein , princeton university press, 1996.  if you ask parents why kids shouldnt swear, the less educated ones usually reply with some question-begging answer like "its inappropriate," while the more educated ones come up with elaborate rationalizations. in fact the less educated parents seem closer to the truth.  as a friend with small children pointed out, its easy for small children to consider themselves immortal, because time seems to pass so slowly for them. to a 3 year old, a day feels like a month might to an adult. so 80 years sounds to him like 2400 years would to us.  i realize im going to get endless grief for classifying religion as a type of lie. usually people skirt that issue with some equivocation implying that lies believed for a sufficiently long time by sufficiently large numbers of people are immune to the usual standards for truth. but because i cant predict which lies future generations will consider inexcusable, i cant safely omit any type we tell. yes, it seems unlikely that religion will be out of fashion in 100 years, but no more unlikely than it would have seemed to someone in 1880 that schoolchildren in 1980 would be taught that masturbation was perfectly normal and not to feel guilty about it.  unfortunately the payload can consist of bad customs as well as good ones. for example, there are certain qualities that some groups in america consider "acting white." in fact most of them could as accurately be called "acting japanese." theres nothing specifically white about such customs. theyre common to all cultures with long traditions of living in cities. so it is probably a losing bet for a group to consider behaving the opposite way as part of its identity.  in this context, "issues" basically means "things were going to lie to them about." thats why theres a special name for these topics.  mayle, peter, why are we getting a divorce? , harmony, 1988.  the ironic thing is, this is also the main reason kids lie to adults. if you freak out when people tell you alarming things, they wont tell you them. teenagers dont tell their parents what happened that night they were supposed to be staying at a friends house for the same reason parents dont tell 5 year olds the truth about the thanksgiving turkey. theyd freak if they knew. thanks to sam altman, marc andreessen, trevor blackwell, patrick collison, jessica livingston, jackie mcdonough, robert morris, and david sloo for reading drafts of this. and since there are some controversial ideas here, i should add that none of them agreed with everything in it. this essay was originally published at paulgraham.com (this essay is derived from a talk at the 2008 startup school.) about a month after we started y combinator we came up with the phrase that became our motto: make something people want. weve learned a lot since then, but if i were choosing now thats still the one id pick. another thing we tell founders is not to worry too much about the business model, at least at first. not because making money is unimportant, but because its so much easier than building something great. a couple weeks ago i realized that if you put those two ideas together, you get something surprising. make something people want. dont worry too much about making money. what youve got is a description of a charity. when you get an unexpected result like this, it could either be a bug or a new discovery. either businesses arent supposed to be like charities, and weve proven by reductio ad absurdum that one or both of the principles we began with is false. or we have a new idea. i suspect its the latter, because as soon as this thought occurred to me, a whole bunch of other things fell into place. for example, craigslist. its not a charity, but they run it like one. and theyre astoundingly successful. when you scan down the list of most popular web sites, the number of employees at craigslist looks like a misprint. their revenues arent as high as they could be, but most startups would be happy to trade places with them. in patrick obrians novels, his captains always try to get upwind of their opponents. if youre upwind, you decide when and if to engage the other ship. craigslist is effectively upwind of enormous revenues. theyd face some challenges if they wanted to make more, but not the sort you face when youre tacking upwind, trying to force a crappy product on ambivalent users by spending ten times as much on sales as on development.  im not saying startups should aim to end up like craigslist. theyre a product of unusual circumstances. but theyre a good model for the early phases. google looked a lot like a charity in the beginning. they didnt have ads for over a year. at year 1, google was indistinguishable from a nonprofit. if a nonprofit or government organization had started a project to index the web, google at year 1 is the limit of what theyd have produced. back when i was working on spam filters i thought it would be a good idea to have a web-based email service with good spam filtering. i wasnt thinking of it as a company. i just wanted to keep people from getting spammed. but as i thought more about this project, i realized it would probably have to be a company. it would cost something to run, and it would be a pain to fund with grants and donations. that was a surprising realization. companies often claim to be benevolent, but it was surprising to realize there were purely benevolent projects that had to be embodied as companies to work. i didnt want to start another company, so i didnt do it. but if someone had, theyd probably be quite rich now. there was a window of about two years when spam was increasing rapidly but all the big email services had terrible filters. if someone had launched a new, spam-free mail service, users would have flocked to it. notice the pattern here? from either direction we get to the same spot. if you start from successful startups, you find they often behaved like nonprofits. and if you start from ideas for nonprofits, you find theyd often make good startups. how wide is this territory? would all good nonprofits be good companies? possibly not. what makes google so valuable is that their users have money. if you make people with money love you, you can probably get some of it. but could you also base a successful startup on behaving like a nonprofit to people who dont have money? could you, for example, grow a successful startup out of curing an unfashionable but deadly disease like malaria? im not sure, but i suspect that if you pushed this idea, youd be surprised how far it would go. for example, people who apply to y combinator dont generally have much money, and yet we can profit by helping them, because with our help they could make money. maybe the situation is similar with malaria. maybe an organization that helped lift its weight off a country could benefit from the resulting growth. im not proposing this is a serious idea. i dont know anything about malaria. but ive been kicking ideas around long enough to know when i come across a powerful one. one way to guess how far an idea extends is to ask yourself at what point youd bet against it. the thought of betting against benevolence is alarming in the same way as saying that something is technically impossible. youre just asking to be made a fool of, because these are such powerful forces.  for example, initially i thought maybe this principle only applied to internet startups. obviously it worked for google, but what about microsoft? surely microsoft isnt benevolent? but when i think back to the beginning, they were. compared to ibm they were like robin hood. when ibm introduced the pc, they thought they were going to make money selling hardware at high prices. but by gaining control of the pc standard, microsoft opened up the market to any manufacturer. hardware prices plummeted, and lots of people got to have computers who couldnt otherwise have afforded them. its the sort of thing youd expect google to do. microsoft isnt so benevolent now. now when one thinks of what microsoft does to users, all the verbs that come to mind begin with f.  and yet it doesnt seem to pay. their stock price has been flat for years. back when they were robin hood, their stock price rose like googles. could there be a connection? you can see how there would be. when youre small, you cant bully customers, so you have to charm them. whereas when youre big you can maltreat them at will, and you tend to, because its easier than satisfying them. you grow big by being nice, but you can stay big by being mean. you get away with it till the underlying conditions change, and then all your victims escape. so "dont be evil" may be the most valuable thing paul buchheit made for google, because it may turn out to be an elixir of corporate youth. im sure they find it constraining, but think how valuable it will be if it saves them from lapsing into the fatal laziness that afflicted microsoft and ibm. the curious thing is, this elixir is freely available to any other company. anyone can adopt "dont be evil." the catch is that people will hold you to it. so i dont think youre going to see record labels or tobacco companies using this discovery. theres a lot of external evidence that benevolence works. but how does it work? one advantage of investing in a large number of startups is that you get a lot of data about how they work. from what weve seen, being good seems to help startups in three ways: it improves their morale, it makes other people want to help them, and above all, it helps them be decisive. morale is tremendously important to a startupso important that morale alone is almost enough to determine success. startups are often described as emotional roller-coasters. one minute youre going to take over the world, and the next youre doomed. the problem with feeling youre doomed is not just that it makes you unhappy, but that it makes you stop working . so the downhills of the roller-coaster are more of a self fulfilling prophecy than the uphills. if feeling youre going to succeed makes you work harder, that probably improves your chances of succeeding, but if feeling youre going to fail makes you stop working, that practically guarantees youll fail. heres where benevolence comes in. if you feel youre really helping people, youll keep working even when it seems like your startup is doomed. most of us have some amount of natural benevolence. the mere fact that someone needs you makes you want to help them. so if you start the kind of startup where users come back each day, youve basically built yourself a giant tamagotchi. youve made something you need to take care of. blogger is a famous example of a startup that went through really low lows and survived. at one point they ran out of money and everyone left. evan williams came in to work the next day, and there was no one but him. what kept him going? partly that users needed him. he was hosting thousands of peoples blogs. he couldnt just let the site die. there are many advantages of launching quickly, but the most important may be that once you have users, the tamagotchi effect kicks in. once you have users to take care of, youre forced to figure out what will make them happy, and thats actually very valuable information. the added confidence that comes from trying to help people can also help you with investors. one of the founders of chatterous told me recently that he and his cofounder had decided that this service was something the world needed, so they were going to keep working on it no matter what, even if they had to move back to canada and live in their parents basements. once they realized this, they stopped caring so much what investors thought about them. they still met with them, but they werent going to die if they didnt get their money. and you know what? the investors got a lot more interested. they could sense that the chatterouses were going to do this startup with or without them. if youre really committed and your startup is cheap to run, you become very hard to kill. and practically all startups, even the most successful, come close to death at some point. so if doing good for people gives you a sense of mission that makes you harder to kill, that alone more than compensates for whatever you lose by not choosing a more selfish project. another advantage of being good is that it makes other people want to help you. this too seems to be an inborn trait in humans. one of the startups weve funded, octopart , is currently locked in a classic battle of good versus evil. theyre a search site for industrial components. a lot of people need to search for components, and before octopart there was no good way to do it. that, it turned out, was no coincidence. octopart built the right way to search for components. users like it and theyve been growing rapidly. and yet for most of octoparts life, the biggest distributor, digi-key, has been trying to force them take their prices off the site. octopart is sending them customers for free, and yet digi-key is trying to make that traffic stop. why? because their current business model depends on overcharging people who have incomplete information about prices. they dont want search to work. the octoparts are the nicest guys in the world. they dropped out of the phd program in physics at berkeley to do this. they just wanted to fix a problem they encountered in their research. imagine how much time you could save the worlds engineers if they could do searches online. so when i hear that a big, evil company is trying to stop them in order to keep search broken, it makes me really want to help them. it makes me spend more time on the octoparts than i do with most of the other startups weve funded. it just made me spend several minutes telling you how great they are. why? because theyre good guys and theyre trying to help the world. if youre benevolent, people will rally around you: investors, customers, other companies, and potential employees. in the long term the most important may be the potential employees. i think everyone knows now that good hackers are much better than mediocre ones. if you can attract the best hackers to work for you, as google has, you have a big advantage. and the very best hackers tend to be idealistic. theyre not desperate for a job. they can work wherever they want. so most want to work on things that will make the world better. but the most important advantage of being good is that it acts as a compass. one of the hardest parts of doing a startup is that you have so many choices. there are just two or three of you, and a thousand things you could do. how do you decide? heres the answer: do whatevers best for your users. you can hold onto this like a rope in a hurricane, and it will save you if anything can. follow it and it will take you through everything you need to do. its even the answer to questions that seem unrelated, like how to convince investors to give you money. if youre a good salesman, you could try to just talk them into it. but the more reliable route is to convince them through your users: if you make something users love enough to tell their friends, you grow exponentially, and that will convince any investor. being good is a particularly useful strategy for making decisions in complex situations because its stateless. its like telling the truth. the trouble with lying is that you have to remember everything youve said in the past to make sure you dont contradict yourself. if you tell the truth you dont have to remember anything, and thats a really useful property in domains where things happen fast. for example, y combinator has now invested in 80 startups, 57 of which are still alive. (the rest have died or merged or been acquired.) when youre trying to advise 57 startups, it turns out you have to have a stateless algorithm. you cant have ulterior motives when you have 57 things going on at once, because you cant remember them. so our rule is just to do whatevers best for the founders. not because were particularly benevolent, but because its the only algorithm that works on that scale. when you write something telling people to be good, you seem to be claiming to be good yourself. so i want to say explicitly that i am not a particularly good person. when i was a kid i was firmly in the camp of bad. the way adults used the word good, it seemed to be synonymous with quiet, so i grew up very suspicious of it. you know how there are some people whose names come up in conversation and everyone says "hes such a great guy?" people never say that about me. the best i get is "he means well." i am not claiming to be good. at best i speak good as a second language. so im not suggesting you be good in the usual sanctimonious way. im suggesting it because it works. it will work not just as a statement of "values," but as a guide to strategy, and even a design spec for software. dont just not be evil. be good.  fifty years ago it would have seemed shocking for a public company not to pay dividends. now many tech companies dont. the markets seem to have figured out how to value potential dividends. maybe that isnt the last step in this evolution. maybe markets will eventually get comfortable with potential earnings. (vcs already are, and at least some of them consistently make money.) i realize this sounds like the stuff one used to hear about the "new economy" during the bubble. believe me, i was not drinking that kool-aid at the time. but im convinced there were some good ideas buried in bubble thinking. for example, its ok to focus on growth instead of profitsbut only if the growth is genuine. you cant be buying users; thats a pyramid scheme. but a company with rapid, genuine growth is valuable, and eventually markets learn how to value valuable things.  the idea of starting a company with benevolent aims is currently undervalued, because the kind of people who currently make that their explicit goal dont usually do a very good job. its one of the standard career paths of trustafarians to start some vaguely benevolent business. the problem with most of them is that they either have a bogus political agenda or are feebly executed. the trustafarians ancestors didnt get rich by preserving their traditional culture; maybe people in bolivia dont want to either. and starting an organic farm, though its at least straightforwardly benevolent, doesnt help people on the scale that google does. most explicitly benevolent projects dont hold themselves sufficiently accountable. they act as if having good intentions were enough to guarantee good effects.  users dislike their new operating system so much that theyre starting petitions to save the old one. and the old one was nothing special. the hackers within microsoft must know in their hearts that if the company really cared about users theyd just advise them to switch to osx. thanks to trevor blackwell, paul buchheit, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com umair haque wrote recently that the reason there arent more googles is that most startups get bought before they can change the world. google, despite serious interest from microsoft and yahoowhat must have seemed like lucrative interest at the timedidnt sell out. google might simply have been nothing but yahoos or msns search box. why isnt it? because google had a deeply felt sense of purpose: a conviction to change the world for the better. this has a nice sound to it, but it isnt true. googles founders were willing to sell early on. they just wanted more than acquirers were willing to pay. it was the same with facebook. they would have sold, but yahoo blew it by offering too little. tip for acquirers: when a startup turns you down, consider raising your offer, because theres a good chance the outrageous price they want will later seem a bargain.  from the evidence ive seen so far, startups that turn down acquisition offers usually end up doing better. not always, but usually theres a bigger offer coming, or perhaps even an ipo. of course, the reason startups do better when they turn down acquisition offers is not necessarily that all such offers undervalue startups. more likely the reason is that the kind of founders who have the balls to turn down a big offer also tend to be very successful. that spirit is exactly what you want in a startup. while im sure larry and sergey do want to change the world, at least now, the reason google survived to become a big, independent company is the same reason facebook has so far remained independent: acquirers underestimated them. corporate m&a; is a strange business in that respect. they consistently lose the best deals, because turning down reasonable offers is the most reliable test you could invent for whether a startup will make it big. so whats the real reason there arent more googles? curiously enough, its the same reason google and facebook have remained independent: money guys undervalue the most innovative startups. the reason there arent more googles is not that investors encourage innovative startups to sell out, but that they wont even fund them. ive learned a lot about vcs during the 3 years weve been doing y combinator, because we often have to work quite closely with them. the most surprising thing ive learned is how conservative they are. vc firms present an image of boldly encouraging innovation. only a handful actually do, and even they are more conservative in reality than youd guess from reading their sites. i used to think of vcs as piratical: bold but unscrupulous. on closer acquaintance they turn out to be more like bureaucrats. theyre more upstanding than i used to think (the good ones, at least), but less bold. maybe the vc industry has changed. maybe they used to be bolder. but i suspect its the startup world that has changed, not them. the low cost of starting a startup means the average good bet is a riskier one, but most existing vc firms still operate as if they were investing in hardware startups in 1985. howard aiken said "dont worry about people stealing your ideas. if your ideas are any good, youll have to ram them down peoples throats." i have a similar feeling when im trying to convince vcs to invest in startups y combinator has funded. theyre terrified of really novel ideas, unless the founders are good enough salesmen to compensate. but its the bold ideas that generate the biggest returns. any really good new idea will seem bad to most people; otherwise someone would already be doing it. and yet most vcs are driven by consensus, not just within their firms, but within the vc community. the biggest factor determining how a vc will feel about your startup is how other vcs feel about it. i doubt they realize it, but this algorithm guarantees theyll miss all the very best ideas. the more people who have to like a new idea, the more outliers you lose. whoever the next google is, theyre probably being told right now by vcs to come back when they have more "traction." why are vcs so conservative? its probably a combination of factors. the large size of their investments makes them conservative. plus theyre investing other peoples money, which makes them worry theyll get in trouble if they do something risky and it fails. plus most of them are money guys rather than technical guys, so they dont understand what the startups theyre investing in do. whats next the exciting thing about market economies is that stupidity equals opportunity. and so it is in this case. there is a huge, unexploited opportunity in startup investing. y combinator funds startups at the very beginning. vcs will fund them once theyre already starting to succeed. but between the two there is a substantial gap. there are companies that will give $20k to a startup that has nothing more than the founders, and there are companies that will give $2 million to a startup thats already taking off, but there arent enough investors who will give $200k to a startup that seems very promising but still has some things to figure out. this territory is occupied mostly by individual angel investorspeople like andy bechtolsheim, who gave google $100k when they seemed promising but still had some things to figure out. i like angels, but there just arent enough of them, and investing is for most of them a part time job. and yet as it gets cheaper to start startups, this sparsely occupied territory is becoming more and more valuable. nowadays a lot of startups dont want to raise multi-million dollar series a rounds. they dont need that much money, and they dont want the hassles that come with it. the median startup coming out of y combinator wants to raise $250-500k. when they go to vc firms they have to ask for more because they know vcs arent interested in such small deals. vcs are money managers. theyre looking for ways to put large sums to work. but the startup world is evolving away from their current model. startups have gotten cheaper. that means they want less money, but also that there are more of them. so you can still get large returns on large amounts of money; you just have to spread it more broadly. ive tried to explain this to vc firms. instead of making one $2 million investment, make five $400k investments. would that mean sitting on too many boards? dont sit on their boards. would that mean too much due diligence? do less. if youre investing at a tenth the valuation, you only have to be a tenth as sure. it seems obvious. but ive proposed to several vc firms that they set aside some money and designate one partner to make more, smaller bets, and they react as if id proposed the partners all get nose rings. its remarkable how wedded they are to their standard m.o. but there is a big opportunity here, and one way or the other its going to get filled. either vcs will evolve down into this gap or, more likely, new investors will appear to fill it. that will be a good thing when it happens, because these new investors will be compelled by the structure of the investments they make to be ten times bolder than present day vcs. and that will get us a lot more googles. at least, as long as acquirers remain stupid.  another tip: if you want to get all that value, dont destroy the startup after you buy it. give the founders enough autonomy that they can grow the acquisition into what it would have become. thanks to sam altman, paul buchheit, david hornik, jessica livingston, robert morris, and fred wilson for reading drafts of this. this essay was originally published at paulgraham.com there are some topics i save up because theyll be so much fun to write about. this is one of them: a list of my heroes. im not claiming this is a list of the n most admirable people. who could make such a list, even if they wanted to? einstein isnt on the list, for example, even though he probably deserves to be on any shortlist of admirable people. i once asked a physicist friend if einstein was really as smart as his fame implies, and she said that yes, he was. so why isnt he on the list? because i had to ask. this is a list of people whove influenced me, not people who would have if i understood their work. my test was to think of someone and ask "is this person my hero?" it often returned surprising answers. for example, it returned false for montaigne, who was arguably the inventor of the essay. why? when i thought about what it meant to call someone a hero, it meant id decide what to do by asking what theyd do in the same situation. thats a stricter standard than admiration. after i made the list, i looked to see if there was a pattern, and there was, a very clear one. everyone on the list had two qualities: they cared almost excessively about their work, and they were absolutely honest. by honest i dont mean trustworthy so much as that they never pander: they never say or do something because thats what the audience wants. they are all fundamentally subversive for this reason, though they conceal it to varying degrees. i grew up in pittsburgh in the 1970s. unless you were there its hard to imagine how that town felt about the steelers. locally, all the news was bad. the steel industry was dying. but the steelers were the best team in footballand moreover, in a way that seemed to reflect the personality of the city. they didnt do anything fancy. they just got the job done. other players were more famous: terry bradshaw, franco harris, lynn swann. but they played offense, and you always get more attention for that. it seemed to me as a twelve year old football expert that the best of them all was jack lambert . and what made him so good was that he was utterly relentless. he didnt just care about playing well; he cared almost too much. he seemed to regard it as a personal insult when someone from the other team had possession of the ball on his side of the line of scrimmage. the suburbs of pittsburgh in the 1970s were a pretty dull place. school was boring. all the adults around were bored with their jobs working for big companies. everything that came to us through the mass media was (a) blandly uniform and (b) produced elsewhere. jack lambert was the exception. he was like nothing else id seen. kenneth clark is the best nonfiction writer i know of, on any subject. most people who write about art history dont really like art; you can tell from a thousand little signs. but clark did, and not just intellectually, but the way one anticipates a delicious dinner. what really makes him stand out, though, is the quality of his ideas. his style is deceptively casual, but there is more in his books than in a library of art monographs. reading the nude is like a ride in a ferrari. just as youre getting settled, youre slammed back in your seat by the acceleration. before you can adjust, youre thrown sideways as the car screeches into the first turn. his brain throws off ideas almost too fast to grasp them. finally at the end of the chapter you come to a halt, with your eyes wide and a big smile on your face. kenneth clark was a star in his day, thanks to the documentary series civilisation . and if you read only one book about art history, civilisation is the one id recommend. its much better than the drab sears catalogs of art that undergraduates are forced to buy for art history 101. a lot of people have a great teacher at some point in their childhood. larry mihalko was mine. when i look back its like theres a line drawn between third and fourth grade. after mr. mihalko, everything was different. why? first of all, he was intellectually curious. i had a few other teachers who were smart, but i wouldnt describe them as intellectually curious. in retrospect, he was out of place as an elementary school teacher, and i think he knew it. that must have been hard for him, but it was wonderful for us, his students. his class was a constant adventure. i used to like going to school every day. the other thing that made him different was that he liked us. kids are good at telling that. the other teachers were at best benevolently indifferent. but mr. mihalko seemed like he actually wanted to be our friend. on the last day of fourth grade, he got out one of the heavy school record players and played james taylors "youve got a friend" to us. just call out my name, and you know wherever i am, ill come running. he died at 59 of lung cancer. ive never cried like i cried at his funeral. one of the things ive learned about making things that i didnt realize when i was a kid is that much of the best stuff isnt made for audiences, but for oneself. you see paintings and drawings in museums and imagine they were made for you to look at. actually a lot of the best ones were made as a way of exploring the world, not as a way to please other people. the best of these explorations are sometimes more pleasing than stuff made explicitly to please. leonardo did a lot of things. one of his most admirable qualities was that he did so many different things that were admirable. what people know of him now is his paintings and his more flamboyant inventions, like flying machines. that makes him seem like some kind of dreamer who sketched artists conceptions of rocket ships on the side. in fact he made a large number of far more practical technical discoveries. he was as good an engineer as a painter. his most impressive work, to me, is his drawings . theyre clearly made more as a way of studying the world than producing something beautiful. and yet they can hold their own with any work of art ever made. no one else, before or since, was that good when no one was looking. robert morris has a very unusual quality: hes never wrong. it might seem this would require you to be omniscient, but actually its surprisingly easy. dont say anything unless youre fairly sure of it. if youre not omniscient, you just dont end up saying much. more precisely, the trick is to pay careful attention to how you qualify what you say. by using this trick, robert has, as far as i know, managed to be mistaken only once, and that was when he was an undergrad. when the mac came out, he said that little desktop computers would never be suitable for real hacking. its wrong to call it a trick in his case, though. if it were a conscious trick, he would have slipped in a moment of excitement. with robert this quality is wired-in. he has an almost superhuman integrity. hes not just generally correct, but also correct about how correct he is. youd think it would be such a great thing never to be wrong that everyone would do this. it doesnt seem like that much extra work to pay as much attention to the error on an idea as to the idea itself. and yet practically no one does. i know how hard it is, because since meeting robert ive tried to do in software what he seems to do in hardware. people are finally starting to admit that wodehouse was a great writer. if you want to be thought a great novelist in your own time, you have to sound intellectual. if what you write is popular, or entertaining, or funny, youre ipso facto suspect. that makes wodehouse doubly impressive, because it meant that to write as he wanted to, he had to commit to being despised in his own lifetime. evelyn waugh called him a great writer, but to most people at the time that would have read as a chivalrous or deliberately perverse gesture. at the time any random autobiographical novel by a recent college grad could count on more respectful treatment from the literary establishment. wodehouse may have begun with simple atoms, but the way he composed them into molecules was near faultless. his rhythm in particular. it makes me self-conscious to write about it. i can think of only two other writers who came near him for style: evelyn waugh and nancy mitford. those three used the english language like they owned it. but wodehouse has something neither of them did. hes at ease. evelyn waugh and nancy mitford cared what other people thought of them: he wanted to seem aristocratic; she was afraid she wasnt smart enough. but wodehouse didnt give a damn what anyone thought of him. he wrote exactly what he wanted. calders on this list because he makes me happy. can his work stand up to leonardos? probably not. there might not be anything from the 20th century that can. but what was good about modernism, calder had, and had in a way that he made seem effortless. what was good about modernism was its freshness. art became stuffy in the nineteenth century. the paintings that were popular at the time were mostly the art equivalent of mcmansionsbig, pretentious, and fake. modernism meant starting over, making things with the same earnest motives that children might. the artists who benefited most from this were the ones who had preserved a childs confidence, like klee and calder. klee was impressive because he could work in so many different styles. but between the two i like calder better, because his work seemed happier. ultimately the point of art is to engage the viewer. its hard to predict what will; often something that seems interesting at first will bore you after a month. calders sculptures never get boring. they just sit there quietly radiating optimism, like a battery that never runs out. as far as i can tell from books and photographs, the happiness of calders work is his own happiness showing through. everyone admires jane austen. add my name to the list. to me she seems the best novelist of all time. im interested in how things work. when i read most novels, i pay as much attention to the authors choices as to the story. but in her novels i cant see the gears at work. though id really like to know how she does what she does, i cant figure it out, because shes so good that her stories dont seem made up. i feel like im reading a description of something that actually happened. i used to read a lot of novels when i was younger. i cant read most anymore, because they dont have enough information in them. novels seem so impoverished compared to history and biography. but reading austen is like reading nonfiction. she writes so well you dont even notice her. john mccarthy invented lisp, the field of (or at least the term) artificial intelligence, and was an early member of both of the top two computer science departments, mit and stanford. no one would dispute that hes one of the greats, but hes an especial hero to me because of lisp . its hard for us now to understand what a conceptual leap that was at the time. paradoxically, one of the reasons his achievement is hard to appreciate is that it was so successful. practically every programming language invented in the last 20 years includes ideas from lisp, and each year the median language gets more lisplike. in 1958 these ideas were anything but obvious. in 1958 there seem to have been two ways of thinking about programming. some people thought of it as math, and proved things about turing machines. others thought of it as a way to get things done, and designed languages all too influenced by the technology of the day. mccarthy alone bridged the gap. he designed a language that was math. but designed is not really the word; discovered is more like it. as i was making this list i found myself thinking of people like douglas bader and r.j. mitchell and jeffrey quill and i realized that though all of them had done many things in their lives, there was one factor above all that connected them: the spitfire. this is supposed to be a list of heroes. how can a machine be on it? because that machine was not just a machine. it was a lens of heroes. extraordinary devotion went into it, and extraordinary courage came out. its a cliche to call world war ii a contest between good and evil, but between fighter designs, it really was. the spitfires original nemesis, the me 109, was a brutally practical plane. it was a killing machine. the spitfire was optimism embodied. and not just in its beautiful lines: it was at the edge of what could be manufactured. but taking the high road worked. in the air, beauty had the edge, just. people alive when kennedy was killed usually remember exactly where they were when they heard about it. i remember exactly where i was when a friend asked if id heard steve jobs had cancer. it was like the floor dropped out. a few seconds later she told me that it was a rare operable type, and that hed be ok. but those seconds seemed long. i wasnt sure whether to include jobs on this list. a lot of people at apple seem to be afraid of him, which is a bad sign. but he compels admiration. theres no name for what steve jobs is, because there hasnt been anyone quite like him before. he doesnt design apples products himself. historically the closest analogy to what he does are the great renaissance patrons of the arts. as the ceo of a company, that makes him unique. most ceos delegate taste to a subordinate. the design paradox means theyre choosing more or less at random. but steve jobs actually has taste himselfsuch good taste that hes shown the world how much more important taste is than they realized. newton has a strange role in my pantheon of heroes: hes the one i reproach myself with. he worked on big things, at least for part of his life. its so easy to get distracted working on small stuff. the questions youre answering are pleasantly familiar. you get immediate rewardsin fact, you get bigger rewards in your time if you work on matters of passing importance. but im uncomfortably aware that this is the route to well-deserved obscurity. to do really great things, you have to seek out questions people didnt even realize were questions. there have probably been other people who did this as well as newton, for their time, but newton is my model of this kind of thought. i can just begin to understand what it must have felt like for him. you only get one life. why not do something huge? the phrase "paradigm shift" is overused now, but kuhn was onto something. and you know more are out there, separated from us by what will later seem a surprisingly thin wall of laziness and stupidity. if we work like newton. thanks to trevor blackwell, jessica livingston, and jackie mcdonough for reading drafts of this. this essay was originally published at paulgraham.com the web is turning writing into a conversation. twenty years ago, writers wrote and readers read. the web lets readers respond, and increasingly they doin comment threads, on forums, and in their own blog posts. many who respond to something disagree with it. thats to be expected. agreeing tends to motivate people less than disagreeing. and when you agree theres less to say. you could expand on something the author said, but he has probably already explored the most interesting implications. when you disagree youre entering territory he may not have explored. the result is theres a lot more disagreeing going on, especially measured by the word. that doesnt mean people are getting angrier. the structural change in the way we communicate is enough to account for it. but though its not anger thats driving the increase in disagreement, theres a danger that the increase in disagreement will make people angrier. particularly online, where its easy to say things youd never say face to face. if were all going to be disagreeing more, we should be careful to do it well. what does it mean to disagree well? most readers can tell the difference between mere name-calling and a carefully reasoned refutation, but i think it would help to put names on the intermediate stages. so heres an attempt at a disagreement hierarchy: this is the lowest form of disagreement, and probably also the most common. weve all seen comments like this: u r a fag!!!!!!!!!! but its important to realize that more articulate name-calling has just as little weight. a comment like the author is a self-important dilettante. is really nothing more than a pretentious version of "u r a fag." an ad hominem attack is not quite as weak as mere name-calling. it might actually carry some weight. for example, if a senator wrote an article saying senators salaries should be increased, one could respond: of course he would say that. hes a senator. this wouldnt refute the authors argument, but it may at least be relevant to the case. its still a very weak form of disagreement, though. if theres something wrong with the senators argument, you should say what it is; and if there isnt, what difference does it make that hes a senator? saying that an author lacks the authority to write about a topic is a variant of ad hominemand a particularly useless sort, because good ideas often come from outsiders. the question is whether the author is correct or not. if his lack of authority caused him to make mistakes, point those out. and if it didnt, its not a problem. the next level up we start to see responses to the writing, rather than the writer. the lowest form of these is to disagree with the authors tone. e.g. i cant believe the author dismisses intelligent design in such a cavalier fashion. though better than attacking the author, this is still a weak form of disagreement. it matters much more whether the author is wrong or right than what his tone is. especially since tone is so hard to judge. someone who has a chip on their shoulder about some topic might be offended by a tone that to other readers seemed neutral. so if the worst thing you can say about something is to criticize its tone, youre not saying much. is the author flippant, but correct? better that than grave and wrong. and if the author is incorrect somewhere, say where. in this stage we finally get responses to what was said, rather than how or by whom. the lowest form of response to an argument is simply to state the opposing case, with little or no supporting evidence. this is often combined with dh2 statements, as in: i cant believe the author dismisses intelligent design in such a cavalier fashion. intelligent design is a legitimate scientific theory. contradiction can sometimes have some weight. sometimes merely seeing the opposing case stated explicitly is enough to see that its right. but usually evidence will help. at level 4 we reach the first form of convincing disagreement: counterargument. forms up to this point can usually be ignored as proving nothing. counterargument might prove something. the problem is, its hard to say exactly what. counterargument is contradiction plus reasoning and/or evidence. when aimed squarely at the original argument, it can be convincing. but unfortunately its common for counterarguments to be aimed at something slightly different. more often than not, two people arguing passionately about something are actually arguing about two different things. sometimes they even agree with one another, but are so caught up in their squabble they dont realize it. there could be a legitimate reason for arguing against something slightly different from what the original author said: when you feel they missed the heart of the matter. but when you do that, you should say explicitly youre doing it. the most convincing form of disagreement is refutation. its also the rarest, because its the most work. indeed, the disagreement hierarchy forms a kind of pyramid, in the sense that the higher you go the fewer instances you find. to refute someone you probably have to quote them. you have to find a "smoking gun," a passage in whatever you disagree with that you feel is mistaken, and then explain why its mistaken. if you cant find an actual quote to disagree with, you may be arguing with a straw man. while refutation generally entails quoting, quoting doesnt necessarily imply refutation. some writers quote parts of things they disagree with to give the appearance of legitimate refutation, then follow with a response as low as dh3 or even dh0. the force of a refutation depends on what you refute. the most powerful form of disagreement is to refute someones central point. even as high as dh5 we still sometimes see deliberate dishonesty, as when someone picks out minor points of an argument and refutes those. sometimes the spirit in which this is done makes it more of a sophisticated form of ad hominem than actual refutation. for example, correcting someones grammar, or harping on minor mistakes in names or numbers. unless the opposing argument actually depends on such things, the only purpose of correcting them is to discredit ones opponent. truly refuting something requires one to refute its central point, or at least one of them. and that means one has to commit explicitly to what the central point is. so a truly effective refutation would look like: the authors main point seems to be x. as he says: quotation but this is wrong for the following reasons... the quotation you point out as mistaken need not be the actual statement of the authors main point. its enough to refute something it depends upon. now we have a way of classifying forms of disagreement. what good is it? one thing the disagreement hierarchy doesnt give us is a way of picking a winner. dh levels merely describe the form of a statement, not whether its correct. a dh6 response could still be completely mistaken. but while dh levels dont set a lower bound on the convincingness of a reply, they do set an upper bound. a dh6 response might be unconvincing, but a dh2 or lower response is always unconvincing. the most obvious advantage of classifying the forms of disagreement is that it will help people to evaluate what they read. in particular, it will help them to see through intellectually dishonest arguments. an eloquent speaker or writer can give the impression of vanquishing an opponent merely by using forceful words. in fact that is probably the defining quality of a demagogue. by giving names to the different forms of disagreement, we give critical readers a pin for popping such balloons. such labels may help writers too. most intellectual dishonesty is unintentional. someone arguing against the tone of something he disagrees with may believe hes really saying something. zooming out and seeing his current position on the disagreement hierarchy may inspire him to try moving up to counterargument or refutation. but the greatest benefit of disagreeing well is not just that it will make conversations better, but that it will make the people who have them happier. if you study conversations, you find there is a lot more meanness down in dh1 than up in dh6. you dont have to be mean when you have a real point to make. in fact, you dont want to. if you have something real to say, being mean just gets in the way. if moving up the disagreement hierarchy makes people less mean, that will make most of them happier. most people dont really enjoy being mean; they do it because they cant help it. thanks to trevor blackwell and jessica livingston for reading drafts of this. this essay was originally published at paulgraham.com as a child i read a book of stories about a famous judge in eighteenth century japan called ooka tadasuke. one of the cases he decided was brought by the owner of a food shop. a poor student who could afford only rice was eating his rice while enjoying the delicious cooking smells coming from the food shop. the owner wanted the student to pay for the smells he was enjoying. the student was stealing his smells! this story often comes to mind when i hear the riaa and mpaa accusing people of stealing music and movies. it sounds ridiculous to us to treat smells as property. but i can imagine scenarios in which one could charge for smells. imagine we were living on a moon base where we had to buy air by the liter. i could imagine air suppliers adding scents at an extra charge. the reason it seems ridiculous to us to treat smells as property is that it wouldnt work to. it would work on a moon base, though. what counts as property depends on what works to treat as property. and that not only can change, but has changed. humans may always (for some definition of human and always) have treated small items carried on ones person as property. but hunter gatherers didnt treat land, for example, as property in the way we do. the reason so many people think of property as having a single unchanging definition is that its definition changes very slowly. but we are in the midst of such a change now. the record labels and movie studios used to distribute what they made like air shipped through tubes on a moon base. but with the arrival of networks, its as if weve moved to a planet with a breathable atmosphere. data moves like smells now. and through a combination of wishful thinking and short-term greed, the labels and studios have put themselves in the position of the food shop owner, accusing us all of stealing their smells. (the reason i say short-term greed is that the underlying problem with the labels and studios is that the people who run them are driven by bonuses rather than equity. if they were driven by equity theyd be looking for ways to take advantage of technological change instead of fighting it. but building new things takes too long. their bonuses depend on this years revenues, and the best way to increase those is to extract more money from stuff they do already.) so what does this mean? should people not be able to charge for content? theres not a single yes or no answer to that question. people should be able to charge for content when it works to charge for content. but by "works" i mean something more subtle than "when they can get away with it." i mean when people can charge for content without warping society in order to do it. after all, the companies selling smells on the moon base could continue to sell them on the earth, if they lobbied successfully for laws requiring us all to continue to breathe through tubes down here too, even though we no longer needed to. the crazy legal measures that the labels and studios have been taking have a lot of that flavor. newspapers and magazines are just as screwed, but they are at least declining gracefully. the riaa and mpaa would make us breathe through tubes if they could. ultimately it comes down to common sense. when youre abusing the legal system by trying to use mass lawsuits against randomly chosen people as a form of exemplary punishment, or lobbying for laws that would break the internet if they passed, thats ipso facto evidence youre using a definition of property that doesnt work. this is where its helpful to have working democracies and multiple sovereign countries. if the world had a single, autocratic government, the labels and studios could buy laws making the definition of property be whatever they wanted. but fortunately there are still some countries that are not copyright colonies of the us, and even in the us, politicians still seem to be afraid of actual voters, in sufficient numbers. the people running the us may not like it when voters or other countries refuse to bend to their will, but ultimately its in all our interest that theres not a single point of attack for people trying to warp the law to serve their own purposes. private property is an extremely useful ideaarguably one of our greatest inventions. so far, each new definition of it has brought us increasing material wealth. it seems reasonable to suppose the newest one will too. it would be a disaster if we all had to keep running an obsolete version just because a few powerful people were too lazy to upgrade.  if you want to learn more about hunter gatherers i strongly recommend elizabeth marshall thomass the harmless people and the old way .  change in the definition of property is driven mostly by technological progress, however, and since technological progress is accelerating, so presumably will the rate of change in the definition of property. which means its all the more important for societies to be able to respond gracefully to such changes, because they will come at an ever increasing rate.  as far as i know, the term "copyright colony" was first used by myles peterson .  the state of technology isnt simply a function of the definition of property. they each constrain the other. but that being so, you cant mess with the definition of property without affecting (and probably harming) the state of technology. the history of the ussr offers a vivid illustration of that. thanks to sam altman and geoff ralston for reading drafts of this. this essay was originally published at paulgraham.com technology tends to separate normal from natural. our bodies werent designed to eat the foods that people in rich countries eat, or to get so little exercise. there may be a similar problem with the way we work: a normal job may be as bad for us intellectually as white flour or sugar is for us physically. i began to suspect this after spending several years working with startup founders. ive now worked with over 200 of them, and ive noticed a definite difference between programmers working on their own startups and those working for large organizations. i wouldnt say founders seem happier, necessarily; starting a startup can be very stressful. maybe the best way to put it is to say that theyre happier in the sense that your body is happier during a long run than sitting on a sofa eating doughnuts. though theyre statistically abnormal, startup founders seem to be working in a way thats more natural for humans. i was in africa last year and saw a lot of animals in the wild that id only seen in zoos before. it was remarkable how different they seemed. particularly lions. lions in the wild seem about ten times more alive. theyre like different animals. i suspect that working for oneself feels better to humans in much the same way that living in the wild must feel better to a wide-ranging predator like a lion. life in a zoo is easier, but it isnt the life they were designed for. whats so unnatural about working for a big company? the root of the problem is that humans werent meant to work in such large groups. another thing you notice when you see animals in the wild is that each species thrives in groups of a certain size. a herd of impalas might have 100 adults; baboons maybe 20; lions rarely 10. humans also seem designed to work in groups, and what ive read about hunter-gatherers accords with research on organizations and my own experience to suggest roughly what the ideal size is: groups of 8 work well; by 20 theyre getting hard to manage; and a group of 50 is really unwieldy.  whatever the upper limit is, we are clearly not meant to work in groups of several hundred. and yetfor reasons having more to do with technology than human naturea great many people work for companies with hundreds or thousands of employees. companies know groups that large wouldnt work, so they divide themselves into units small enough to work together. but to coordinate these they have to introduce something new: bosses. these smaller groups are always arranged in a tree structure. your boss is the point where your group attaches to the tree. but when you use this trick for dividing a large group into smaller ones, something strange happens that ive never heard anyone mention explicitly. in the group one level up from yours, your boss represents your entire group. a group of 10 managers is not merely a group of 10 people working together in the usual way. its really a group of groups. which means for a group of 10 managers to work together as if they were simply a group of 10 individuals, the group working for each manager would have to work as if they were a single personthe workers and manager would each share only one persons worth of freedom between them. in practice a group of people are never able to act as if they were one person. but in a large organization divided into groups in this way, the pressure is always in that direction. each group tries its best to work as if it were the small group of individuals that humans were designed to work in. that was the point of creating it. and when you propagate that constraint, the result is that each person gets freedom of action in inverse proportion to the size of the entire tree.  anyone whos worked for a large organization has felt this. you can feel the difference between working for a company with 100 employees and one with 10,000, even if your group has only 10 people. a group of 10 people within a large organization is a kind of fake tribe. the number of people you interact with is about right. but something is missing: individual initiative. tribes of hunter-gatherers have much more freedom. the leaders have a little more power than other members of the tribe, but they dont generally tell them what to do and when the way a boss can. its not your bosss fault. the real problem is that in the group above you in the hierarchy, your entire group is one virtual person. your boss is just the way that constraint is imparted to you. so working in a group of 10 people within a large organization feels both right and wrong at the same time. on the surface it feels like the kind of group youre meant to work in, but something major is missing. a job at a big company is like high fructose corn syrup: it has some of the qualities of things youre meant to like, but is disastrously lacking in others. indeed, food is an excellent metaphor to explain whats wrong with the usual sort of job. for example, working for a big company is the default thing to do, at least for programmers. how bad could it be? well, food shows that pretty clearly. if you were dropped at a random point in america today, nearly all the food around you would be bad for you. humans were not designed to eat white flour, refined sugar, high fructose corn syrup, and hydrogenated vegetable oil. and yet if you analyzed the contents of the average grocery store youd probably find these four ingredients accounted for most of the calories. "normal" food is terribly bad for you. the only people who eat what humans were actually designed to eat are a few birkenstock-wearing weirdos in berkeley. if "normal" food is so bad for us, why is it so common? there are two main reasons. one is that it has more immediate appeal. you may feel lousy an hour after eating that pizza, but eating the first couple bites feels great. the other is economies of scale. producing junk food scales; producing fresh vegetables doesnt. which means (a) junk food can be very cheap, and (b) its worth spending a lot to market it. if people have to choose between something thats cheap, heavily marketed, and appealing in the short term, and something thats expensive, obscure, and appealing in the long term, which do you think most will choose? its the same with work. the average mit graduate wants to work at google or microsoft, because its a recognized brand, its safe, and theyll get paid a good salary right away. its the job equivalent of the pizza they had for lunch. the drawbacks will only become apparent later, and then only in a vague sense of malaise. and founders and early employees of startups, meanwhile, are like the birkenstock-wearing weirdos of berkeley: though a tiny minority of the population, theyre the ones living as humans are meant to. in an artificial world, only extremists live naturally. the restrictiveness of big company jobs is particularly hard on programmers, because the essence of programming is to build new things. sales people make much the same pitches every day; support people answer much the same questions; but once youve written a piece of code you dont need to write it again. so a programmer working as programmers are meant to is always making new things. and when youre part of an organization whose structure gives each person freedom in inverse proportion to the size of the tree, youre going to face resistance when you do something new. this seems an inevitable consequence of bigness. its true even in the smartest companies. i was talking recently to a founder who considered starting a startup right out of college, but went to work for google instead because he thought hed learn more there. he didnt learn as much as he expected. programmers learn by doing, and most of the things he wanted to do, he couldntsometimes because the company wouldnt let him, but often because the companys code wouldnt let him. between the drag of legacy code, the overhead of doing development in such a large organization, and the restrictions imposed by interfaces owned by other groups, he could only try a fraction of the things he would have liked to. he said he has learned much more in his own startup, despite the fact that he has to do all the companys errands as well as programming, because at least when hes programming he can do whatever he wants. an obstacle downstream propagates upstream. if youre not allowed to implement new ideas, you stop having them. and vice versa: when you can do whatever you want, you have more ideas about what to do. so working for yourself makes your brain more powerful in the same way a low-restriction exhaust system makes an engine more powerful. working for yourself doesnt have to mean starting a startup, of course. but a programmer deciding between a regular job at a big company and their own startup is probably going to learn more doing the startup. you can adjust the amount of freedom you get by scaling the size of company you work for. if you start the company, youll have the most freedom. if you become one of the first 10 employees youll have almost as much freedom as the founders. even a company with 100 people will feel different from one with 1000. working for a small company doesnt ensure freedom. the tree structure of large organizations sets an upper bound on freedom, not a lower bound. the head of a small company may still choose to be a tyrant. the point is that a large organization is compelled by its structure to be one. that has real consequences for both organizations and individuals. one is that companies will inevitably slow down as they grow larger, no matter how hard they try to keep their startup mojo. its a consequence of the tree structure that every large organization is forced to adopt. or rather, a large organization could only avoid slowing down if they avoided tree structure. and since human nature limits the size of group that can work together, the only way i can imagine for larger groups to avoid tree structure would be to have no structure: to have each group actually be independent, and to work together the way components of a market economy do. that might be worth exploring. i suspect there are already some highly partitionable businesses that lean this way. but i dont know any technology companies that have done it. there is one thing companies can do short of structuring themselves as sponges: they can stay small. if im right, then it really pays to keep a company as small as it can be at every stage. particularly a technology company. which means its doubly important to hire the best people. mediocre hires hurt you twice: they get less done, but they also make you big, because you need more of them to solve a given problem. for individuals the upshot is the same: aim small. it will always suck to work for large organizations, and the larger the organization, the more it will suck. in an essay i wrote a couple years ago i advised graduating seniors to work for a couple years for another company before starting their own. id modify that now. work for another company if you want to, but only for a small one, and if you want to start your own startup, go ahead. the reason i suggested college graduates not start startups immediately was that i felt most would fail. and they will. but ambitious programmers are better off doing their own thing and failing than going to work at a big company. certainly theyll learn more. they might even be better off financially. a lot of people in their early twenties get into debt, because their expenses grow even faster than the salary that seemed so high when they left school. at least if you start a startup and fail your net worth will be zero rather than negative.  weve now funded so many different types of founders that we have enough data to see patterns, and there seems to be no benefit from working for a big company. the people whove worked for a few years do seem better than the ones straight out of college, but only because theyre that much older. the people who come to us from big companies often seem kind of conservative. its hard to say how much is because big companies made them that way, and how much is the natural conservatism that made them work for the big companies in the first place. but certainly a large part of it is learned. i know because ive seen it burn off. having seen that happen so many times is one of the things that convinces me that working for oneself, or at least for a small group, is the natural way for programmers to live. founders arriving at y combinator often have the downtrodden air of refugees. three months later theyre transformed: they have so much more confidence that they seem as if theyve grown several inches taller.  strange as this sounds, they seem both more worried and happier at the same time. which is exactly how id describe the way lions seem in the wild. watching employees get transformed into founders makes it clear that the difference between the two is due mostly to environmentand in particular that the environment in big companies is toxic to programmers. in the first couple weeks of working on their own startup they seem to come to life, because finally theyre working the way people are meant to.  when i talk about humans being meant or designed to live a certain way, i mean by evolution.  its not only the leaves who suffer. the constraint propagates up as well as down. so managers are constrained too; instead of just doing things, they have to act through subordinates.  do not finance your startup with credit cards. financing a startup with debt is usually a stupid move, and credit card debt stupidest of all. credit card debt is a bad idea, period. it is a trap set by evil companies for the desperate and the foolish.  the founders we fund used to be younger (initially we encouraged undergrads to apply), and the first couple times i saw this i used to wonder if they were actually getting physically taller. thanks to trevor blackwell, ross boucher, aaron iba, abby kirigin, ivan kirigin, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com (this essay grew out of something i wrote for myself to figure out what we do. even though y combinator is now 3 years old, were still trying to understand its implications.) i was annoyed recently to read a description of y combinator that said "y combinator does seed funding for startups." what was especially annoying about it was that i wrote it. this doesnt really convey what we do. and the reason its inaccurate is that, paradoxically, funding very early stage startups is not mainly about funding. saying yc does seed funding for startups is a description in terms of earlier models. its like calling a car a horseless carriage. when you scale animals you cant just keep everything in proportion. for example, volume grows as the cube of linear dimension, but surface area only as the square. so as animals get bigger they have trouble radiating heat. thats why mice and rabbits are furry and elephants and hippos arent. you cant make a mouse by scaling down an elephant. yc represents a new, smaller kind of animalso much smaller that all the rules are different. before us, most companies in the startup funding business were venture capital funds. vcs generally fund later stage companies than we do. and they supply so much money that, even though the other things they do may be very valuable, its not that inaccurate to regard vcs as sources of money. good vcs are "smart money," but theyre still money. all good investors supply a combination of money and help. but these scale differently, just as volume and surface area do. late stage investors supply huge amounts of money and comparatively little help: when a company about to go public gets a mezzanine round of $50 million, the deal tends to be almost entirely about money. as you move earlier in the venture funding process, the ratio of help to money increases, because earlier stage companies have different needs. early stage companies need less money because theyre smaller and cheaper to run, but they need more help because life is so precarious for them. so when vcs do a series a round for, say, $2 million, they generally expect to offer a significant amount of help along with the money. y combinator occupies the earliest end of the spectrum. were at least one and generally two steps before vc funding. (though some startups go straight from yc to vc, the most common trajectory is to do an angel round first.) and what happens at y combinator is as different from what happens in a series a round as a series a round is from a mezzanine financing. at our end, money is almost a negligible factor. the startup usually consists of just the founders. their living expenses are the companys main expense, and since most founders are under 30, their living expenses are low. but at this early stage companies need a lot of help. practically every question is still unanswered. some companies weve funded have been working on their software for a year or more, but others havent decided what to work on, or even who the founders should be. when pr people and journalists recount the histories of startups after theyve become big, they always underestimate how uncertain things were at first. theyre not being deliberately misleading. when you look at a company like google, its hard to imagine they could once have been small and helpless. sure, at one point they were a just a couple guys in a garagebut even then their greatness was assured, and all they had to do was roll forward along the railroad tracks of destiny. far from it. a lot of startups with just as promising beginnings end up failing. google has such momentum now that it would be hard for anyone to stop them. but all it would have taken in the beginning would have been for two google employees to focus on the wrong things for six months, and the company could have died. we know, because weve been there, just how vulnerable startups are in the earliest phases. curiously enough, thats why founders tend to get so rich from them. reward is always proportionate to risk, and very early stage startups are insanely risky. what we really do at y combinator is get startups launched straight. one of many metaphors you could use for yc is a steam catapult on an aircraft carrier. we get startups airborne. barely airborne, but enough that they can accelerate fast. when youre launching planes they have to be set up properly or youre just launching projectiles. they have to be pointed straight down the deck; the wings have to be trimmed properly; the engines have to be at full power; the pilot has to be ready. these are the kind of problems we deal with. after we fund startups we work closely with them for three monthsso closely in fact that we insist they move to where we are. and what we do in those three months is make sure everything is set up for launch. if there are tensions between cofounders we help sort them out. we get all the paperwork set up properly so there are no nasty surprises later. if the founders arent sure what to focus on first, we try to figure that out. if there is some obstacle right in front of them, we either try to remove it, or shift the startup sideways. the goal is to get every distraction out of the way so the founders can use that time to build (or finish building) something impressive. and then near the end of the three months we push the button on the steam catapult in the form of demo day, where the current group of startups present to pretty much every investor in silicon valley. launching companies isnt identical with launching products. though we do spend a lot of time on launch strategies for products, there are some things that take too long to build for a startup to launch them before raising their next round of funding. several of the most promising startups weve funded havent launched their products yet, but are definitely launched as companies. in the earliest stage, startups not only have more questions to answer, but they tend to be different kinds of questions. in later stage startups the questions are about deals, or hiring, or organization. in the earliest phase they tend to be about technology and design. what do you make? thats the first problem to solve. thats why our motto is "make something people want." this is always a good thing for companies to do, but its even more important early on, because it sets the bounds for every other question. who you hire, how much money you raise, how you market yourselfthey all depend on what youre making. because the early problems are so much about technology and design, you probably need to be hackers to do what we do. while some vcs have technical backgrounds, i dont know any who still write code. their expertise is mostly in businessas it should be, because thats the kind of expertise you need in the phase between series a and (if youre lucky) ipo. were so different from vcs that were really a different kind of animal. can we claim founders are better off as a result of this new type of venture firm? im pretty sure the answer is yes, because yc is an improved version of what happened to our startup, and our case was not atypical. we started viaweb with $10,000 in seed money from our friend julian. he was a lawyer and arranged all our paperwork, so we could just code. we spent three months building a version 1, which we then presented to investors to raise more money. sounds familiar, doesnt it? but yc improves on that significantly. julian knew a lot about law and business, but his advice ended there; he was not a startup guy. so we made some basic mistakes early on. and when we presented to investors, we presented to only 2, because that was all we knew. if wed had our later selves to encourage and advise us, and demo day to present at, we would have been in much better shape. we probably could have raised money at 3 to 5 times the valuation we did. if we take 6% of a company we fund, the founders only have to do 6.4% better in their next round of funding to end up net ahead. we certainly manage that. so who is our 6% coming out of? if the founders end up net ahead its not coming out of them. so is it coming out of later stage investors? well, they do end up paying more. but i think they pay more because the company is actually more valuable. and later stage investors have no problem with that. the returns of a vc fund depend on the quality of the companies they invest in, not how cheaply they can buy stock in them. if what we do is useful, why wasnt anyone doing it before? there are two answers to that. one is that people were doing it before, just haphazardly on a smaller scale. before us, seed funding came primarily from individual angel investors. larry and sergey, for example, got their seed funding from andy bechtolsheim, one of the founders of sun. and because he was a startup guy he probably gave them useful advice. but raising money from angel investors is a hit or miss thing. its a sideline for most of them, so they only do a handful of deals a year and they dont spend a lot of time on the startups they invest in. and theyre hard to reach, because they dont want random startups pestering them with business plans. the google guys were lucky because they knew someone who knew bechtolsheim. it generally takes a personal introduction with angels. the other reason no one was doing quite what we do is that till recently it was a lot more expensive to start a startup. youll notice we havent funded any biotech startups. thats still expensive. but advancing technology has made web startups so cheap that you really can get a company airborne for $15,000. if you understand how to operate a steam catapult, at least. so in effect whats happened is that a new ecological niche has opened up, and y combinator is the new kind of animal that has moved into it. were not a replacement for venture capital funds. we occupy a new, adjacent niche. and conditions in our niche are really quite different. its not just that the problems we face are different; the whole structure of the business is different. vcs are playing a zero-sum game. theyre all competing for a slice of a fixed amount of "deal flow," and that explains a lot of their behavior. whereas our m.o. is to create new deal flow, by encouraging hackers who would have gotten jobs to start their own startups instead. we compete more with employers than vcs. its not surprising something like this would happen. most fields become more specializedmore articulatedas they develop, and startups are certainly an area in which there has been a lot of development over the past couple decades. the venture business in its present form is only about forty years old. it stands to reason it would evolve. and its natural that the new niche would at first be described, even by its inhabitants, in terms of the old one. but really y combinator is not in the startup funding business. really were more of a small, furry steam catapult. thanks to trevor blackwell, jessica livingston, and robert morris for reading drafts of this. comment on this essay. this essay was originally published at paulgraham.com a user on hacker news recently posted a comment that set me thinking: something about hacker culture that never really set well with me was thisthe nastiness. ... i just dont understand why people troll like they do. ive thought a lot over the last couple years about the problem of trolls. its an old one, as old as forums, but were still just learning what the causes are and how to address them. there are two senses of the word "troll." in the original sense it meant someone, usually an outsider, who deliberately stirred up fights in a forum by saying controversial things.  for example, someone who didnt use a certain programming language might go to a forum for users of that language and make disparaging remarks about it, then sit back and watch as people rose to the bait. this sort of trolling was in the nature of a practical joke, like letting a bat loose in a room full of people. the definition then spread to people who behaved like assholes in forums, whether intentionally or not. now when people talk about trolls they usually mean this broader sense of the word. though in a sense this is historically inaccurate, it is in other ways more accurate, because when someone is being an asshole its usually uncertain even in their own mind how much is deliberate. that is arguably one of the defining qualities of an asshole. i think trolling in the broader sense has four causes. the most important is distance. people will say things in anonymous forums that theyd never dare say to someones face, just as theyll do things in cars that theyd never do as pedestrianslike tailgate people, or honk at them, or cut them off. trolling tends to be particularly bad in forums related to computers, and i think thats due to the kind of people you find there. most of them (myself included) are more comfortable dealing with abstract ideas than with people. hackers can be abrupt even in person. put them on an anonymous forum, and the problem gets worse. the third cause of trolling is incompetence. if you disagree with something, its easier to say "you suck" than to figure out and explain exactly what you disagree with. youre also safe that way from refutation. in this respect trolling is a lot like graffiti. graffiti happens at the intersection of ambition and incompetence: people want to make their mark on the world, but have no other way to do it than literally making a mark on the world.  the final contributing factor is the culture of the forum. trolls are like children (many are children) in that theyre capable of a wide range of behavior depending on what they think will be tolerated. in a place where rudeness isnt tolerated, most can be polite. but vice versa as well. theres a sort of greshams law of trolls: trolls are willing to use a forum with a lot of thoughtful people in it, but thoughtful people arent willing to use a forum with a lot of trolls in it. which means that once trolling takes hold, it tends to become the dominant culture. that had already happened to slashdot and digg by the time i paid attention to comment threads there, but i watched it happen to reddit. news.yc is, among other things, an experiment to see if this fate can be avoided. the sitess guidelines explicitly ask people not to say things they wouldnt say face to face. if someone starts being rude, other users will step in and tell them to stop. and when people seem to be deliberately trolling, we ban them ruthlessly. technical tweaks may also help. on reddit, votes on your comments dont affect your karma score, but they do on news.yc. and it does seem to influence people when they can see their reputation in the eyes of their peers drain away after making an asshole remark. often users have second thoughts and delete such comments. one might worry this would prevent people from expressing controversial ideas, but empirically that doesnt seem to be what happens. when people say something substantial that gets modded down, they stubbornly leave it up. what people delete are wisecracks, because they have less invested in them. so far the experiment seems to be working. the level of conversation on news.yc is as high as on any forum ive seen. but we still only have about 8,000 uniques a day. the conversations on reddit were good when it was that small. the challenge is whether we can keep things this way. im optimistic we will. were not depending just on technical tricks. the core users of news.yc are mostly refugees from other sites that were overrun by trolls. they feel about trolls roughly the way refugees from cuba or eastern europe feel about dictatorships. so there are a lot of people working to keep this from happening again.  i mean forum in the general sense of a place to exchange views. the original internet forums were not web sites but usenet newsgroups.  im talking here about everyday tagging. some graffiti is quite impressive (anything becomes art if you do it well enough) but the median tag is just visual spam. this essay was originally published at paulgraham.com the fiery reaction to the release of arc had an unexpected consequence: it made me realize i had a design philosophy. the main complaint of the more articulate critics was that arc seemed so flimsy. after years of working on it, all i had to show for myself were a few thousand lines of macros? why hadnt i worked on more substantial problems? as i was mulling over these remarks it struck me how familiar they seemed. this was exactly the kind of thing people said at first about viaweb, and y combinator, and most of my essays. when we launched viaweb, it seemed laughable to vcs and e-commerce "experts." we were just a couple guys in an apartment, which did not seem cool in 1995 the way it does now. and the thing wed built, as far as they could tell, wasnt even software. software, to them, equalled big, honking windows apps. since viaweb was the first web-based app theyd seen, it seemed to be nothing more than a website. they were even more contemptuous when they discovered that viaweb didnt process credit card transactions (we didnt for the whole first year). transaction processing seemed to them what e-commerce was all about. it sounded serious and difficult. and yet, mysteriously, viaweb ended up crushing all its competitors. the initial reaction to y combinator was almost identical. it seemed laughably lightweight. startup funding meant series a rounds: millions of dollars given to a small number of startups founded by people with established credentials after months of serious, businesslike meetings, on terms described in a document a foot thick. y combinator seemed inconsequential. its too early to say yet whether y combinator will turn out like viaweb, but judging from the number of imitations, a lot of people seem to think were on to something. i cant measure whether my essays are successful, except in page views, but the reaction to them is at least different from when i started. at first the default reaction of the slashdot trolls was (translated into articulate terms): "who is this guy and what authority does he have to write about these topics? i havent read the essay, but theres no way anything so short and written in such an informal style could have anything useful to say about such and such topic, when people with degrees in the subject have already written many thick books about it." now theres a new generation of trolls on a new generation of sites, but they have at least started to omit the initial "who is this guy?" now people are saying the same things about arc that they said at first about viaweb and y combinator and most of my essays. why the pattern? the answer, i realized, is that my m.o. for all four has been the same. here it is: i like to find (a) simple solutions (b) to overlooked problems (c) that actually need to be solved, and (d) deliver them as informally as possible, (e) starting with a very crude version 1, then (f) iterating rapidly. when i first laid out these principles explicitly, i noticed something striking: this is practically a recipe for generating a contemptuous initial reaction. though simple solutions are better, they dont seem as impressive as complex ones. overlooked problems are by definition problems that most people think dont matter. delivering solutions in an informal way means that instead of judging something by the way its presented, people have to actually understand it, which is more work. and starting with a crude version 1 means your initial effort is always small and incomplete. id noticed, of course, that people never seemed to grasp new ideas at first. i thought it was just because most people were stupid. now i see theres more to it than that. like a contrarian investment fund, someone following this strategy will almost always be doing things that seem wrong to the average person. as with contrarian investment strategies, thats exactly the point. this technique is successful (in the long term) because it gives you all the advantages other people forgo by trying to seem legit. if you work on overlooked problems, youre more likely to discover new things, because you have less competition. if you deliver solutions informally, you (a) save all the effort you would have had to expend to make them look impressive, and (b) avoid the danger of fooling yourself as well as your audience. and if you release a crude version 1 then iterate, your solution can benefit from the imagination of nature, which, as feynman pointed out, is more powerful than your own. in the case of viaweb, the simple solution was to make the software run on the server. the overlooked problem was to generate web sites automatically; in 1995, online stores were all made by hand by human designers, but we knew this wouldnt scale. the part that actually mattered was graphic design, not transaction processing. the informal delivery mechanism was me, showing up in jeans and a t-shirt at some retailers office. and the crude version 1 was, if i remember correctly, less than 10,000 lines of code when we launched. the power of this technique extends beyond startups and programming languages and essays. it probably extends to any kind of creative work. certainly it can be used in painting: this is exactly what cezanne and klee did. at y combinator we bet money on it, in the sense that we encourage the startups we fund to work this way. there are always new ideas right under your nose. so look for simple things that other people have overlookedthings people will later claim were "obvious"especially when theyve been led astray by obsolete conventions, or by trying to do things that are superficially impressive. figure out what the real problem is, and make sure you solve that. dont worry about trying to look corporate; the product is what wins in the long term. and launch as soon as you can, so you start learning from users what you should have been making. reddit is a classic example of this approach. when reddit first launched, it seemed like there was nothing to it. to the graphically unsophisticated its deliberately minimal design seemed like no design at all. but reddit solved the real problem, which was to tell people what was new and otherwise stay out of the way. as a result it became massively successful. now that conventional ideas have caught up with it, it seems obvious. people look at reddit and think the founders were lucky. like all such things, it was harder than it looked. the reddits pushed so hard against the current that they reversed it; now it looks like theyre merely floating downstream. so when you look at something like reddit and think "i wish i could think of an idea like that," remember: ideas like that are all around you. but you ignore them because they look wrong. this essay was originally published at paulgraham.com after the last talk i gave, one of the organizers got up on the stage to deliver an impromptu rebuttal. that never happened before. i only heard the first few sentences, but that was enough to tell what i said that upset him: that startups would do better if they moved to silicon valley. this conference was in london, and most of the audience seemed to be from the uk. so saying startups should move to silicon valley seemed like a nationalistic remark: an obnoxious american telling them that if they wanted to do things right they should all just move to america. actually im less american than i seem. i didnt say so, but im british by birth. and just as jews are ex officio allowed to tell jewish jokes, i dont feel like i have to bother being diplomatic with a british audience. the idea that startups would do better to move to silicon valley is not even a nationalistic one.  its the same thing i say to startups in the us. y combinator alternates between coasts every 6 months. every other funding cycle is in boston. and even though boston is the second biggest startup hub in the us (and the world), we tell the startups from those cycles that their best bet is to move to silicon valley. if thats true of boston, its even more true of every other city. this is about cities, not countries. and i think i can prove im right. you can easily reduce the opposing argument ad what most people would agree was absurdum. few would be willing to claim that it doesnt matter at all where a startup isthat a startup operating out of a small agricultural town wouldnt benefit from moving to a startup hub. most people could see how it might be helpful to be in a place where there was infrastructure for startups, accumulated knowledge about how to make them work, and other people trying to do it. and yet whatever argument you use to prove that startups dont need to move from london to silicon valley could equally well be used to prove startups dont need to move from smaller towns to london. the difference between cities is a matter of degree. and if, as nearly everyone who knows agrees, startups are better off in silicon valley than boston, then theyre better off in silicon valley than everywhere else too. i realize i might seem to have a vested interest in this conclusion, because startups that move to the us might do it through y combinator. but the american startups weve funded will attest that i say the same thing to them. im not claiming of course that every startup has to go to silicon valley to succeed. just that all other things being equal, the more of a startup hub a place is, the better startups will do there. but other considerations can outweigh the advantages of moving. im not saying founders with families should uproot them to move halfway around the world; that might be too much of a distraction. immigration difficulties might be another reason to stay put. dealing with immigration problems is like raising money: for some reason it seems to consume all your attention. a startup cant afford much of that. one canadian startup we funded spent about 6 months working on moving to the us. eventually they just gave up, because they couldnt afford to take so much time away from working on their software. (if another country wanted to establish a rival to silicon valley, the single best thing they could do might be to create a special visa for startup founders. us immigration policy is one of silicon valleys biggest weaknesses.) if your startup is connected to a specific industry, you may be better off in one of its centers. a startup doing something related to entertainment might want to be in new york or la. and finally, if a good investor has committed to fund you if you stay where you are, you should probably stay. finding investors is hard. you generally shouldnt pass up a definite funding offer to move.  in fact, the quality of the investors may be the main advantage of startup hubs. silicon valley investors are noticeably more aggressive than boston ones. over and over, ive seen startups weve funded snatched by west coast investors out from under the noses of boston investors who saw them first but acted too slowly. at this years boston demo day, i told the audience that this happened every year, so if they saw a startup they liked, they should make them an offer. and yet within a month it had happened again: an aggressive west coast vc who had met the founder of a yc-funded startup a week before beat out a boston vc who had known him for years. by the time the boston vc grasped what was happening, the deal was already gone. boston investors will admit theyre more conservative. some want to believe this comes from the citys prudent yankee character. but occams razor suggests the truth is less flattering. boston investors are probably more conservative than silicon valley investors for the same reason chicago investors are more conservative than boston ones. they dont understand startups as well. west coast investors arent bolder because theyre irresponsible cowboys, or because the good weather makes them optimistic. theyre bolder because they know what theyre doing. theyre the skiers who ski on the diamond slopes. boldness is the essence of venture investing. the way you get big returns is not by trying to avoid losses, but by trying to ensure you get some of the big hits. and the big hits often look risky at first. like facebook. facebook was started in boston. boston vcs had the first shot at them. but they said no, so facebook moved to silicon valley and raised money there. the partner who turned them down now says that "may turn out to have been a mistake." empirically, boldness wins. if the aggressive ways of west coast investors are going to come back to bite them, it has been a long time coming. silicon valley has been pulling ahead of boston since the 1970s. if there was going to be a comeuppance for the west coast investors, the bursting of the bubble would have been it. but since then the west coast has just pulled further ahead. west coast investors are confident enough of their judgement to act boldly; east coast investors, not so much; but anyone who thinks east coast investors act that way out of prudence should see the frantic reactions of an east coast vc in the process of losing a deal to a west coast one. in addition to the concentration that comes from specialization, startup hubs are also markets. and markets are usually centralized. even now, when traders could be anywhere, they cluster in a few cities. its hard to say exactly what it is about face to face contact that makes deals happen, but whatever it is, it hasnt yet been duplicated by technology. walk down university ave at the right time, and you might overhear five different people talking on the phone about deals. in fact, this is part of the reason y combinator is in boston half the time: its hard to stand that year round. but though it can sometimes be annoying to be surrounded by people who only think about one thing, its the place to be if that one thing is what youre trying to do. i was talking recently to someone who works on search at google. he knew a lot of people at yahoo, so he was in a good position to compare the two companies. i asked him why google was better at search. he said it wasnt anything specific google did, but simply that they understood search so much better. and thats why startups thrive in startup hubs like silicon valley. startups are a very specialized business, as specialized as diamond cutting. and in startup hubs they understand it.  the nationalistic idea is the converse: that startups should stay in a certain city because of the country its in. if you really have a "one world" viewpoint, deciding to move from london to silicon valley is no different from deciding to move from chicago to silicon valley.  an investor who merely seems like he will fund you, however, you can ignore. seeming like they will fund you one day is the way investors say no. thanks to sam altman, jessica livingston, harjeet taggar, and kulveer taggar for reading drafts of this. comment on this essay. this essay was originally published at paulgraham.com (this essay is derived from a keynote at fowa in october 2007.) theres something interesting happening right now. startups are undergoing the same transformation that technology does when it becomes cheaper. its a pattern we see over and over in technology. initially theres some device thats very expensive and made in small quantities. then someone discovers how to make them cheaply; many more get built; and as a result they can be used in new ways. computers are a familiar example. when i was a kid, computers were big, expensive machines built one at a time. now theyre a commodity. now we can stick computers in everything. this pattern is very old. most of the turning points in economic history are instances of it. it happened to steel in the 1850s, and to power in the 1780s. it happened to cloth manufacture in the thirteenth century, generating the wealth that later brought about the renaissance. agriculture itself was an instance of this pattern. now as well as being produced by startups, this pattern is happening to startups. its so cheap to start web startups that orders of magnitudes more will be started. if the pattern holds true, that should cause dramatic changes. so my first prediction about the future of web startups is pretty straightforward: there will be a lot of them. when starting a startup was expensive, you had to get the permission of investors to do it. now the only threshold is courage. even that threshold is getting lower, as people watch others take the plunge and survive. in the last batch of startups we funded, we had several founders who said theyd thought of applying before, but werent sure and got jobs instead. it was only after hearing reports of friends whod done it that they decided to try it themselves. starting a startup is hard, but having a 9 to 5 job is hard too, and in some ways a worse kind of hard. in a startup you have lots of worries, but you dont have that feeling that your life is flying by like you do in a big company. plus in a startup you could make much more money. as word spreads that startups work, the number may grow to a point that would now seem surprising. we now think of it as normal to have a job at a company, but this is the thinnest of historical veneers. just two or three lifetimes ago, most people in what are now called industrialized countries lived by farming. so while it may seem surprising to propose that large numbers of people will change the way they make a living, it would be more surprising if they didnt. when technology makes something dramatically cheaper, standardization always follows. when you make things in large volumes you tend to standardize everything that doesnt need to change. at y combinator we still only have four people, so we try to standardize everything. we could hire employees, but we want to be forced to figure out how to scale investing. we often tell startups to release a minimal version one quickly, then let the needs of the users determine what to do next. in essense, let the market design the product. weve done the same thing ourselves. we think of the techniques were developing for dealing with large numbers of startups as like software. sometimes it literally is software, like hacker news and our application system. one of the most important things weve been working on standardizing are investment terms. till now investment terms have been individually negotiated. this is a problem for founders, because it makes raising money take longer and cost more in legal fees. so as well as using the same paperwork for every deal we do, weve commissioned generic angel paperwork that all the startups we fund can use for future rounds. some investors will still want to cook up their own deal terms. series a rounds, where you raise a million dollars or more, will be custom deals for the forseeable future. but i think angel rounds will start to be done mostly with standardized agreements. an angel who wants to insert a bunch of complicated terms into the agreement is probably not one you want anyway. another thing i see starting to get standardized is acquisitions. as the volume of startups increases, big companies will start to develop standardized procedures that make acquisitions little more work than hiring someone. google is the leader here, as in so many areas of technology. they buy a lot of startups more than most people realize, because they only announce a fraction of them. and being google, theyre figuring out how to do it efficiently. one problem theyve solved is how to think about acquisitions. for most companies, acquisitions still carry some stigma of inadequacy. companies do them because they have to, but theres usually some feeling they shouldnt have tothat their own programmers should be able to build everything they need. googles example should cure the rest of the world of this idea. google has by far the best programmers of any public technology company. if they dont have a problem doing acquisitions, the others should have even less problem. however many google does, microsoft should do ten times as many. one reason google doesnt have a problem with acquisitions is that they know first-hand the quality of the people they can get that way. larry and sergey only started google after making the rounds of the search engines trying to sell their idea and finding no takers. theyve been the guys coming in to visit the big company, so they know who might be sitting across that conference table from them. risk is always proportionate to reward. the way to get really big returns is to do things that seem crazy, like starting a new search engine in 1998, or turning down a billion dollar acquisition offer. this has traditionally been a problem in venture funding. founders and investors have different attitudes to risk. knowing that risk is on average proportionate to reward, investors like risky strategies, while founders, who dont have a big enough sample size to care whats true on average, tend to be more conservative. if startups are easy to start, this conflict goes away, because founders can start them younger, when its rational to take more risk, and can start more startups total in their careers. when founders can do lots of startups, they can start to look at the world in the same portfolio-optimizing way as investors. and that means the overall amount of wealth created can be greater, because strategies can be riskier. if startups become a cheap commodity, more people will be able to have them, just as more people could have computers once microprocessors made them cheap. and in particular, younger and more technical founders will be able to start startups than could before. back when it cost a lot to start a startup, you had to convince investors to let you do it. and that required very different skills from actually doing the startup. if investors were perfect judges, the two would require exactly the same skills. but unfortunately most investors are terrible judges. i know because i see behind the scenes what an enormous amount of work it takes to raise money, and the amount of selling required in an industry is always inversely proportional to the judgement of the buyers. fortunately, if startups get cheaper to start, theres another way to convince investors. instead of going to venture capitalists with a business plan and trying to convince them to fund it, you can get a product launched on a few tens of thousands of dollars of seed money from us or your uncle, and approach them with a working company instead of a plan for one. then instead of having to seem smooth and confident, you can just point them to alexa. this way of convincing investors is better suited to hackers, who often went into technology in part because they felt uncomfortable with the amount of fakeness required in other fields. it might seem that if startups get cheap to start, it will mean the end of startup hubs like silicon valley. if all you need to start a startup is rent money, you should be able to do it anywhere. this is kind of true and kind of false. its true that you can now start a startup anywhere. but you have to do more with a startup than just start it. you have to make it succeed. and that is more likely to happen in a startup hub. ive thought a lot about this question, and it seems to me the increasing cheapness of web startups will if anything increase the importance of startup hubs. the value of startup hubs, like centers for any kind of business, lies in something very old-fashioned: face to face meetings. no technology in the immediate future will replace walking down university ave and running into a friend who tells you how to fix a bug thats been bothering you all weekend, or visiting a friends startup down the street and ending up in a conversation with one of their investors. the question of whether to be in a startup hub is like the question of whether to take outside investment. the question is not whether you need it, but whether it brings any advantage at all. because anything that brings an advantage will give your competitors an advantage over you if they do it and you dont. so if you hear someone saying "we dont need to be in silicon valley," that use of the word "need" is a sign theyre not even thinking about the question right. and while startup hubs are as powerful magnets as ever, the increasing cheapness of starting a startup means the particles theyre attracting are getting lighter. a startup now can be just a pair of 22 year old guys. a company like that can move much more easily than one with 10 people, half of whom have kids. we know because we make people move for y combinator, and it doesnt seem to be a problem. the advantage of being able to work together face to face for three months outweighs the inconvenience of moving. ask anyone whos done it. the mobility of seed-stage startups means that seed funding is a national business. one of the most common emails we get is from people asking if we can help them set up a local clone of y combinator. but this just wouldnt work. seed funding isnt regional, just as big research universities arent. is seed funding not merely national, but international? interesting question. there are signs it may be. weve had an ongoing stream of founders from outside the us, and they tend to do particularly well, because theyre all people who were so determined to succeed that they were willing to move to another country to do it. the more mobile startups get, the harder it would be to start new silicon valleys. if startups are mobile, the best local talent will go to the real silicon valley, and all theyll get at the local one will be the people who didnt have the energy to move. this is not a nationalistic idea, incidentally. its cities that compete, not countries. atlanta is just as hosed as munich. if the number of startups increases dramatically, then the people whose job is to judge them are going to have to get better at it. im thinking particularly of investors and acquirers. we now get on the order of 1000 applications a year. what are we going to do if we get 10,000? thats actually an alarming idea. but well figure out some kind of answer. well have to. it will probably involve writing some software, but fortunately we can do that. acquirers will also have to get better at picking winners. they generally do better than investors, because they pick later, when theres more performance to measure. but even at the most advanced acquirers, identifying companies to buy is extremely ad hoc, and completing the acquisition often involves a great deal of unneccessary friction. i think acquirers may eventually have chief acquisition officers who will both identify good acquisitions and make the deals happen. at the moment those two functions are separate. promising new startups are often discovered by developers. if someone powerful enough wants to buy them, the deal is handed over to corp dev guys to negotiate. it would be better if both were combined in one group, headed by someone with a technical background and some vision of what they wanted to accomplish. maybe in the future big companies will have both a vp of engineering responsible for technology developed in-house, and a cao responsible for bringing technology in from outside. at the moment, there is no one within big companies who gets in trouble when they buy a startup for $200 million that they could have bought earlier for $20 million. there should start to be someone who gets in trouble for that. if the best hackers start their own companies after college instead of getting jobs, that will change what happens in college. most of these changes will be for the better. i think the experience of college is warped in a bad way by the expectation that afterward youll be judged by potential employers. one change will be in the meaning of "after college," which will switch from when one graduates from college to when one leaves it. if youre starting your own company, why do you need a degree? we dont encourage people to start startups during college, but the best founders are certainly capable of it. some of the most successful companies weve funded were started by undergrads. i grew up in a time where college degrees seemed really important, so im alarmed to be saying things like this, but theres nothing magical about a degree. theres nothing that magically changes after you take that last exam. the importance of degrees is due solely to the administrative needs of large organizations. these can certainly affect your lifeits hard to get into grad school, or to get a work visa in the us, without an undergraduate degreebut tests like this will matter less and less. as well as mattering less whether students get degrees, it will also start to matter less where they go to college. in a startup youre judged by users, and they dont care where you went to college. so in a world of startups, elite universities will play less of a role as gatekeepers. in the us its a national scandal how easily children of rich parents game college admissions. but the way this problem ultimately gets solved may not be by reforming the universities but by going around them. we in the technology world are used to that sort of solution: you dont beat the incumbents; you redefine the problem to make them irrelevant. the greatest value of universities is not the brand name or perhaps even the classes so much as the people you meet. if it becomes common to start a startup after college, students may start trying to maximize this. instead of focusing on getting internships at companies they want to work for, they may start to focus on working with other students they want as cofounders. what students do in their classes will change too. instead of trying to get good grades to impress future employers, students will try to learn things. were talking about some pretty dramatic changes here. if it gets easier to start a startup, its easier for competitors too. that doesnt erase the advantage of increased cheapness, however. youre not all playing a zero-sum game. theres not some fixed number of startups that can succeed, regardless of how many are started. in fact, i dont think theres any limit to the number of startups that could succeed. startups succeed by creating wealth, which is the satisfaction of peoples desires. and peoples desires seem to be effectively infinite, at least in the short term. what the increasing number of startups does mean is that you wont be able to sit on a good idea. other people have your idea, and theyll be increasingly likely to do something about it. theres a good side to that, at least for consumers of technology. if people get right to work implementing ideas instead of sitting on them, technology will evolve faster. some kinds of innovations happen a company at a time, like the punctuated equilibrium model of evolution. there are some kinds of ideas that are so threatening that its hard for big companies even to think of them. look at what a hard time microsoft is having discovering web apps. theyre like a character in a movie that everyone in the audience can see something bad is about to happen to, but who cant see it himself. the big innovations that happen a company at a time will obviously happen faster if the rate of new companies increases. but in fact there will be a double speed increase. people wont wait as long to act on new ideas, but also those ideas will increasingly be developed within startups rather than big companies. which means technology will evolve faster per company as well. big companies are just not a good place to make things happen fast. i talked recently to a founder whose startup had been acquired by a big company. he was a precise sort of guy, so hed measured their productivity before and after. he counted lines of code, which can be a dubious measure, but in this case was meaningful because it was the same group of programmers. he found they were one thirteenth as productive after the acquisition. the company that bought them was not a particularly stupid one. i think what he was measuring was mostly the cost of bigness. i experienced this myself, and his number sounds about right. theres something about big companies that just sucks the energy out of you. imagine what all that energy could do if it were put to use. there is an enormous latent capacity in the worlds hackers that most people dont even realize is there. thats the main reason we do y combinator: to let loose all this energy by making it easy for hackers to start their own startups. the process of starting startups is currently like the plumbing in an old house. the pipes are narrow and twisty, and there are leaks in every joint. in the future this mess will gradually be replaced by a single, huge pipe. the water will still have to get from a to b, but it will get there faster and without the risk of spraying out through some random leak. this will change a lot of things for the better. in a big, straight pipe like that, the force of being measured by ones performance will propagate back through the whole system. performance is always the ultimate test, but there are so many kinks in the plumbing now that most people are insulated from it most of the time. so you end up with a world in which high school students think they need to get good grades to get into elite colleges, and college students think they need to get good grades to impress employers, within which the employees waste most of their time in political battles, and from which consumers have to buy anyway because there are so few choices. imagine if that sequence became a big, straight pipe. then the effects of being measured by performance would propagate all the way back to high school, flushing out all the arbitrary stuff people are measured by now. that is the future of web startups. thanks to brian oberkirch and simon willison for inviting me to speak, and the crew at carson systems for making everything run smoothly. this essay was originally published at paulgraham.com in high school i decided i was going to study philosophy in college. i had several motives, some more honorable than others. one of the less honorable was to shock people. college was regarded as job training where i grew up, so studying philosophy seemed an impressively impractical thing to do. sort of like slashing holes in your clothes or putting a safety pin through your ear, which were other forms of impressive impracticality then just coming into fashion. but i had some more honest motives as well. i thought studying philosophy would be a shortcut straight to wisdom. all the people majoring in other things would just end up with a bunch of domain knowledge. i would be learning what was really what. id tried to read a few philosophy books. not recent ones; you wouldnt find those in our high school library. but i tried to read plato and aristotle. i doubt i believed i understood them, but they sounded like they were talking about something important. i assumed id learn what in college. the summer before senior year i took some college classes. i learned a lot in the calculus class, but i didnt learn much in philosophy 101. and yet my plan to study philosophy remained intact. it was my fault i hadnt learned anything. i hadnt read the books we were assigned carefully enough. id give berkeleys principles of human knowledge another shot in college. anything so admired and so difficult to read must have something in it, if one could only figure out what. twenty-six years later, i still dont understand berkeley. i have a nice edition of his collected works. will i ever read it? seems unlikely. the difference between then and now is that now i understand why berkeley is probably not worth trying to understand. i think i see now what went wrong with philosophy, and how we might fix it. i did end up being a philosophy major for most of college. it didnt work out as id hoped. i didnt learn any magical truths compared to which everything else was mere domain knowledge. but i do at least know now why i didnt. philosophy doesnt really have a subject matter in the way math or history or most other university subjects do. there is no core of knowledge one must master. the closest you come to that is a knowledge of what various individual philosophers have said about different topics over the years. few were sufficiently correct that people have forgotten who discovered what they discovered. formal logic has some subject matter. i took several classes in logic. i dont know if i learned anything from them.  it does seem to me very important to be able to flip ideas around in ones head: to see when two ideas dont fully cover the space of possibilities, or when one idea is the same as another but with a couple things changed. but did studying logic teach me the importance of thinking this way, or make me any better at it? i dont know. there are things i know i learned from studying philosophy. the most dramatic i learned immediately, in the first semester of freshman year, in a class taught by sydney shoemaker. i learned that i dont exist. i am (and you are) a collection of cells that lurches around driven by various forces, and calls itself i . but theres no central, indivisible thing that your identity goes with. you could conceivably lose half your brain and live. which means your brain could conceivably be split into two halves and each transplanted into different bodies. imagine waking up after such an operation. you have to imagine being two people. the real lesson here is that the concepts we use in everyday life are fuzzy, and break down if pushed too hard. even a concept as dear to us as i . it took me a while to grasp this, but when i did it was fairly sudden, like someone in the nineteenth century grasping evolution and realizing the story of creation theyd been told as a child was all wrong.  outside of math theres a limit to how far you can push words; in fact, it would not be a bad definition of math to call it the study of terms that have precise meanings. everyday words are inherently imprecise. they work well enough in everyday life that you dont notice. words seem to work, just as newtonian physics seems to. but you can always make them break if you push them far enough. i would say that this has been, unfortunately for philosophy, the central fact of philosophy. most philosophical debates are not merely afflicted by but driven by confusions over words. do we have free will? depends what you mean by "free." do abstract ideas exist? depends what you mean by "exist." wittgenstein is popularly credited with the idea that most philosophical controversies are due to confusions over language. im not sure how much credit to give him. i suspect a lot of people realized this, but reacted simply by not studying philosophy, rather than becoming philosophy professors. how did things get this way? can something people have spent thousands of years studying really be a waste of time? those are interesting questions. in fact, some of the most interesting questions you can ask about philosophy. the most valuable way to approach the current philosophical tradition may be neither to get lost in pointless speculations like berkeley, nor to shut them down like wittgenstein, but to study it as an example of reason gone wrong. western philosophy really begins with socrates, plato, and aristotle. what we know of their predecessors comes from fragments and references in later works; their doctrines could be described as speculative cosmology that occasionally strays into analysis. presumably they were driven by whatever makes people in every other society invent cosmologies.  with socrates, plato, and particularly aristotle, this tradition turned a corner. there started to be a lot more analysis. i suspect plato and aristotle were encouraged in this by progress in math. mathematicians had by then shown that you could figure things out in a much more conclusive way than by making up fine sounding stories about them.  people talk so much about abstractions now that we dont realize what a leap it must have been when they first started to. it was presumably many thousands of years between when people first started describing things as hot or cold and when someone asked "what is heat?" no doubt it was a very gradual process. we dont know if plato or aristotle were the first to ask any of the questions they did. but their works are the oldest we have that do this on a large scale, and there is a freshness (not to say naivete) about them that suggests some of the questions they asked were new to them, at least. aristotle in particular reminds me of the phenomenon that happens when people discover something new, and are so excited by it that they race through a huge percentage of the newly discovered territory in one lifetime. if so, thats evidence of how new this kind of thinking was.  this is all to explain how plato and aristotle can be very impressive and yet naive and mistaken. it was impressive even to ask the questions they did. that doesnt mean they always came up with good answers. its not considered insulting to say that ancient greek mathematicians were naive in some respects, or at least lacked some concepts that would have made their lives easier. so i hope people will not be too offended if i propose that ancient philosophers were similarly naive. in particular, they dont seem to have fully grasped what i earlier called the central fact of philosophy: that words break if you push them too far. "much to the surprise of the builders of the first digital computers," rod brooks wrote, "programs written for them usually did not work."  something similar happened when people first started trying to talk about abstractions. much to their surprise, they didnt arrive at answers they agreed upon. in fact, they rarely seemed to arrive at answers at all. they were in effect arguing about artifacts induced by sampling at too low a resolution. the proof of how useless some of their answers turned out to be is how little effect they have. no one after reading aristotles metaphysics does anything differently as a result.  surely im not claiming that ideas have to have practical applications to be interesting? no, they may not have to. hardys boast that number theory had no use whatsoever wouldnt disqualify it. but he turned out to be mistaken. in fact, its suspiciously hard to find a field of math that truly has no practical use. and aristotles explanation of the ultimate goal of philosophy in book a of the metaphysics implies that philosophy should be useful too. aristotles goal was to find the most general of general principles. the examples he gives are convincing: an ordinary worker builds things a certain way out of habit; a master craftsman can do more because he grasps the underlying principles. the trend is clear: the more general the knowledge, the more admirable it is. but then he makes a mistakepossibly the most important mistake in the history of philosophy. he has noticed that theoretical knowledge is often acquired for its own sake, out of curiosity, rather than for any practical need. so he proposes there are two kinds of theoretical knowledge: some thats useful in practical matters and some that isnt. since people interested in the latter are interested in it for its own sake, it must be more noble. so he sets as his goal in the metaphysics the exploration of knowledge that has no practical use. which means no alarms go off when he takes on grand but vaguely understood questions and ends up getting lost in a sea of words. his mistake was to confuse motive and result. certainly, people who want a deep understanding of something are often driven by curiosity rather than any practical need. but that doesnt mean what they end up learning is useless. its very valuable in practice to have a deep understanding of what youre doing; even if youre never called on to solve advanced problems, you can see shortcuts in the solution of simple ones, and your knowledge wont break down in edge cases, as it would if you were relying on formulas you didnt understand. knowledge is power. thats what makes theoretical knowledge prestigious. its also what causes smart people to be curious about certain things and not others; our dna is not so disinterested as we might think. so while ideas dont have to have immediate practical applications to be interesting, the kinds of things we find interesting will surprisingly often turn out to have practical applications. the reason aristotle didnt get anywhere in the metaphysics was partly that he set off with contradictory aims: to explore the most abstract ideas, guided by the assumption that they were useless. he was like an explorer looking for a territory to the north of him, starting with the assumption that it was located to the south. and since his work became the map used by generations of future explorers, he sent them off in the wrong direction as well.  perhaps worst of all, he protected them from both the criticism of outsiders and the promptings of their own inner compass by establishing the principle that the most noble sort of theoretical knowledge had to be useless. the metaphysics is mostly a failed experiment. a few ideas from it turned out to be worth keeping; the bulk of it has had no effect at all. the metaphysics is among the least read of all famous books. its not hard to understand the way newtons principia is, but the way a garbled message is. arguably its an interesting failed experiment. but unfortunately that was not the conclusion aristotles successors derived from works like the metaphysics .  soon after, the western world fell on intellectual hard times. instead of version 1s to be superseded, the works of plato and aristotle became revered texts to be mastered and discussed. and so things remained for a shockingly long time. it was not till around 1600 (in europe, where the center of gravity had shifted by then) that one found people confident enough to treat aristotles work as a catalog of mistakes. and even then they rarely said so outright. if it seems surprising that the gap was so long, consider how little progress there was in math between hellenistic times and the renaissance. in the intervening years an unfortunate idea took hold: that it was not only acceptable to produce works like the metaphysics , but that it was a particularly prestigious line of work, done by a class of people called philosophers. no one thought to go back and debug aristotles motivating argument. and so instead of correcting the problem aristotle discovered by falling into itthat you can easily get lost if you talk too loosely about very abstract ideasthey continued to fall into it. curiously, however, the works they produced continued to attract new readers. traditional philosophy occupies a kind of singularity in this respect. if you write in an unclear way about big ideas, you produce something that seems tantalizingly attractive to inexperienced but intellectually ambitious students. till one knows better, its hard to distinguish something thats hard to understand because the writer was unclear in his own mind from something like a mathematical proof thats hard to understand because the ideas it represents are hard to understand. to someone who hasnt learned the difference, traditional philosophy seems extremely attractive: as hard (and therefore impressive) as math, yet broader in scope. that was what lured me in as a high school student. this singularity is even more singular in having its own defense built in. when things are hard to understand, people who suspect theyre nonsense generally keep quiet. theres no way to prove a text is meaningless. the closest you can get is to show that the official judges of some class of texts cant distinguish them from placebos.  and so instead of denouncing philosophy, most people who suspected it was a waste of time just studied other things. that alone is fairly damning evidence, considering philosophys claims. its supposed to be about the ultimate truths. surely all smart people would be interested in it, if it delivered on that promise. because philosophys flaws turned away the sort of people who might have corrected them, they tended to be self-perpetuating. bertrand russell wrote in a letter in 1912: hitherto the people attracted to philosophy have been mostly those who loved the big generalizations, which were all wrong, so that few people with exact minds have taken up the subject.  his response was to launch wittgenstein at it, with dramatic results. i think wittgenstein deserves to be famous not for the discovery that most previous philosophy was a waste of time, which judging from the circumstantial evidence must have been made by every smart person who studied a little philosophy and declined to pursue it further, but for how he acted in response.  instead of quietly switching to another field, he made a fuss, from inside. he was gorbachev. the field of philosophy is still shaken from the fright wittgenstein gave it.  later in life he spent a lot of time talking about how words worked. since that seems to be allowed, thats what a lot of philosophers do now. meanwhile, sensing a vacuum in the metaphysical speculation department, the people who used to do literary criticism have been edging kantward, under new names like "literary theory," "critical theory," and when theyre feeling ambitious, plain "theory." the writing is the familiar word salad: gender is not like some of the other grammatical modes which express precisely a mode of conception without any reality that corresponds to the conceptual mode, and consequently do not express precisely something in reality by which the intellect could be moved to conceive a thing the way it does, even where that motive is not something in the thing as such.  the singularity ive described is not going away. theres a market for writing that sounds impressive and cant be disproven. there will always be both supply and demand. so if one group abandons this territory, there will always be others ready to occupy it. we may be able to do better. heres an intriguing possibility. perhaps we should do what aristotle meant to do, instead of what he did. the goal he announces in the metaphysics seems one worth pursuing: to discover the most general truths. that sounds good. but instead of trying to discover them because theyre useless, lets try to discover them because theyre useful. i propose we try again, but that we use that heretofore despised criterion, applicability, as a guide to keep us from wondering off into a swamp of abstractions. instead of trying to answer the question: what are the most general truths? lets try to answer the question of all the useful things we can say, which are the most general? the test of utility i propose is whether we cause people who read what weve written to do anything differently afterward. knowing we have to give definite (if implicit) advice will keep us from straying beyond the resolution of the words were using. the goal is the same as aristotles; we just approach it from a different direction. as an example of a useful, general idea, consider that of the controlled experiment. theres an idea that has turned out to be widely applicable. some might say its part of science, but its not part of any specific science; its literally meta-physics (in our sense of "meta"). the idea of evolution is another. it turns out to have quite broad applicationsfor example, in genetic algorithms and even product design. frankfurts distinction between lying and bullshitting seems a promising recent example.  these seem to me what philosophy should look like: quite general observations that would cause someone who understood them to do something differently. such observations will necessarily be about things that are imprecisely defined. once you start using words with precise meanings, youre doing math. so starting from utility wont entirely solve the problem i described aboveit wont flush out the metaphysical singularity. but it should help. it gives people with good intentions a new roadmap into abstraction. and they may thereby produce things that make the writing of the people with bad intentions look bad by comparison. one drawback of this approach is that it wont produce the sort of writing that gets you tenure. and not just because its not currently the fashion. in order to get tenure in any field you must not arrive at conclusions that members of tenure committees can disagree with. in practice there are two kinds of solutions to this problem. in math and the sciences, you can prove what youre saying, or at any rate adjust your conclusions so youre not claiming anything false ("6 of 8 subjects had lower blood pressure after the treatment"). in the humanities you can either avoid drawing any definite conclusions (e.g. conclude that an issue is a complex one), or draw conclusions so narrow that no one cares enough to disagree with you. the kind of philosophy im advocating wont be able to take either of these routes. at best youll be able to achieve the essayists standard of proof, not the mathematicians or the experimentalists. and yet you wont be able to meet the usefulness test without implying definite and fairly broadly applicable conclusions. worse still, the usefulness test will tend to produce results that annoy people: theres no use in telling people things they already believe, and people are often upset to be told things they dont. heres the exciting thing, though. anyone can do this. getting to general plus useful by starting with useful and cranking up the generality may be unsuitable for junior professors trying to get tenure, but its better for everyone else, including professors who already have it. this side of the mountain is a nice gradual slope. you can start by writing things that are useful but very specific, and then gradually make them more general. joes has good burritos. what makes a good burrito? what makes good food? what makes anything good? you can take as long as you want. you dont have to get all the way to the top of the mountain. you dont have to tell anyone youre doing philosophy. if it seems like a daunting task to do philosophy, heres an encouraging thought. the field is a lot younger than it seems. though the first philosophers in the western tradition lived about 2500 years ago, it would be misleading to say the field is 2500 years old, because for most of that time the leading practitioners werent doing much more than writing commentaries on plato or aristotle while watching over their shoulders for the next invading army. in the times when they werent, philosophy was hopelessly intermingled with religion. it didnt shake itself free till a couple hundred years ago, and even then was afflicted by the structural problems ive described above. if i say this, some will say its a ridiculously overbroad and uncharitable generalization, and others will say its old news, but here goes: judging from their works, most philosophers up to the present have been wasting their time. so in a sense the field is still at the first step.  that sounds a preposterous claim to make. it wont seem so preposterous in 10,000 years. civilization always seems old, because its always the oldest its ever been. the only way to say whether something is really old or not is by looking at structural evidence, and structurally philosophy is young; its still reeling from the unexpected breakdown of words. philosophy is as young now as math was in 1500. there is a lot more to discover.  in practice formal logic is not much use, because despite some progress in the last 150 years were still only able to formalize a small percentage of statements. we may never do that much better, for the same reason 1980s-style "knowledge representation" could never have worked; many statements may have no representation more concise than a huge, analog brain state.  it was harder for darwins contemporaries to grasp this than we can easily imagine. the story of creation in the bible is not just a judeo-christian concept; its roughly what everyone must have believed since before people were people. the hard part of grasping evolution was to realize that species werent, as they seem to be, unchanging, but had instead evolved from different, simpler organisms over unimaginably long periods of time. now we dont have to make that leap. no one in an industrialized country encounters the idea of evolution for the first time as an adult. everyones taught about it as a child, either as truth or heresy.  greek philosophers before plato wrote in verse. this must have affected what they said. if you try to write about the nature of the world in verse, it inevitably turns into incantation. prose lets you be more precise, and more tentative.  philosophy is like maths neer-do-well brother. it was born when plato and aristotle looked at the works of their predecessors and said in effect "why cant you be more like your brother?" russell was still saying the same thing 2300 years later. math is the precise half of the most abstract ideas, and philosophy the imprecise half. its probably inevitable that philosophy will suffer by comparison, because theres no lower bound to its precision. bad math is merely boring, whereas bad philosophy is nonsense. and yet there are some good ideas in the imprecise half.  aristotles best work was in logic and zoology, both of which he can be said to have invented. but the most dramatic departure from his predecessors was a new, much more analytical style of thinking. he was arguably the first scientist.  brooks, rodney, programming in common lisp , wiley, 1985, p. 94.  some would say we depend on aristotle more than we realize, because his ideas were one of the ingredients in our common culture. certainly a lot of the words we use have a connection with aristotle, but it seems a bit much to suggest that we wouldnt have the concept of the essence of something or the distinction between matter and form if aristotle hadnt written about them. one way to see how much we really depend on aristotle would be to diff european culture with chinese: what ideas did european culture have in 1800 that chinese culture didnt, in virtue of aristotles contribution?  the meaning of the word "philosophy" has changed over time. in ancient times it covered a broad range of topics, comparable in scope to our "scholarship" (though without the methodological implications). even as late as newtons time it included what we now call "science." but core of the subject today is still what seemed to aristotle the core: the attempt to discover the most general truths. aristotle didnt call this "metaphysics." that name got assigned to it because the books we now call the metaphysics came after (meta  after) the physics in the standard edition of aristotles works compiled by andronicus of rhodes three centuries later. what we call "metaphysics" aristotle called "first philosophy."  some of aristotles immediate successors may have realized this, but its hard to say because most of their works are lost.  sokal, alan, "transgressing the boundaries: toward a transformative hermeneutics of quantum gravity," social text 46/47, pp. 217-252. abstract-sounding nonsense seems to be most attractive when its aligned with some axe the audience already has to grind. if this is so we should find its most popular with groups that are (or feel) weak. the powerful dont need its reassurance.  letter to ottoline morrell, december 1912. quoted in: monk, ray, ludwig wittgenstein: the duty of genius , penguin, 1991, p. 75.  a preliminary result, that all metaphysics between aristotle and 1783 had been a waste of time, is due to i. kant.  wittgenstein asserted a sort of mastery to which the inhabitants of early 20th century cambridge seem to have been peculiarly vulnerableperhaps partly because so many had been raised religious and then stopped believing, so had a vacant space in their heads for someone to tell them what to do (others chose marx or cardinal newman), and partly because a quiet, earnest place like cambridge in that era had no natural immunity to messianic figures, just as european politics then had no natural immunity to dictators.  this is actually from the ordinatio of duns scotus (ca. 1300), with "number" replaced by "gender." plus ca change. wolter, allan (trans), duns scotus: philosophical writings , nelson, 1963, p. 92.  frankfurt, harry, on bullshit , princeton university press, 2005.  some introductions to philosophy now take the line that philosophy is worth studying as a process rather than for any particular truths youll learn. the philosophers whose works they cover would be rolling in their graves at that. they hoped they were doing more than serving as examples of how to argue: they hoped they were getting results. most were wrong, but it doesnt seem an impossible hope. this argument seems to me like someone in 1500 looking at the lack of results achieved by alchemy and saying its value was as a process. no, they were going about it wrong. it turns out it is possible to transmute lead into gold (though not economically at current energy prices), but the route to that knowledge was to backtrack and try another approach. thanks to trevor blackwell, paul buchheit, jessica livingston, robert morris, mark nitzberg, and peter norvig for reading drafts of this. this essay was originally published at paulgraham.com a few weeks ago i had a thought so heretical that it really surprised me. it may not matter all that much where you go to college. for me, as for a lot of middle class kids, getting into a good college was more or less the meaning of life when i was growing up. what was i? a student. to do that well meant to get good grades. why did one have to get good grades? to get into a good college. and why did one want to do that? there seemed to be several reasons: youd learn more, get better jobs, make more money. but it didnt matter exactly what the benefits would be. college was a bottleneck through which all your future prospects passed; everything would be better if you went to a better college. a few weeks ago i realized that somewhere along the line i had stopped believing that. what first set me thinking about this was the new trend of worrying obsessively about what kindergarten your kids go to. it seemed to me this couldnt possibly matter. either it wont help your kid get into harvard, or if it does, getting into harvard wont mean much anymore. and then i thought: how much does it mean even now? it turns out i have a lot of data about that. my three partners and i run a seed stage investment firm called y combinator . we invest when the company is just a couple guys and an idea. the idea doesnt matter much; it will change anyway. most of our decision is based on the founders. the average founder is three years out of college. many have just graduated; a few are still in school. so were in much the same position as a graduate program, or a company hiring people right out of college. except our choices are immediately and visibly tested. there are two possible outcomes for a startup: success or failureand usually you know within a year which it will be. the test applied to a startup is among the purest of real world tests. a startup succeeds or fails depending almost entirely on the efforts of the founders. success is decided by the market: you only succeed if users like what youve built. and users dont care where you went to college. as well as having precisely measurable results, we have a lot of them. instead of doing a small number of large deals like a traditional venture capital fund, we do a large number of small ones. we currently fund about 40 companies a year, selected from about 900 applications representing a total of about 2000 people.  between the volume of people we judge and the rapid, unequivocal test thats applied to our choices, y combinator has been an unprecedented opportunity for learning how to pick winners. one of the most surprising things weve learned is how little it matters where people went to college. i thought id already been cured of caring about that. theres nothing like going to grad school at harvard to cure you of any illusions you might have about the average harvard undergrad. and yet y combinator showed us we were still overestimating people whod been to elite colleges. wed interview people from mit or harvard or stanford and sometimes find ourselves thinking: they must be smarter than they seem. it took us a few iterations to learn to trust our senses. practically everyone thinks that someone who went to mit or harvard or stanford must be smart. even people who hate you for it believe it. but when you think about what it means to have gone to an elite college, how could this be true? were talking about a decision made by admissions officersbasically, hr peoplebased on a cursory examination of a huge pile of depressingly similar applications submitted by seventeen year olds. and what do they have to go on? an easily gamed standardized test; a short essay telling you what the kid thinks you want to hear; an interview with a random alum; a high school record thats largely an index of obedience. who would rely on such a test? and yet a lot of companies do. a lot of companies are very much influenced by where applicants went to college. how could they be? i think i know the answer to that. there used to be a saying in the corporate world: "no one ever got fired for buying ibm." you no longer hear this about ibm specifically, but the idea is very much alive; there is a whole category of "enterprise" software companies that exist to take advantage of it. people buying technology for large organizations dont care if they pay a fortune for mediocre software. its not their money. they just want to buy from a supplier who seems safea company with an established name, confident salesmen, impressive offices, and software that conforms to all the current fashions. not necessarily a company that will deliver so much as one that, if they do let you down, will still seem to have been a prudent choice. so companies have evolved to fill that niche. a recruiter at a big company is in much the same position as someone buying technology for one. if someone went to stanford and is not obviously insane, theyre probably a safe bet. and a safe bet is enough. no one ever measures recruiters by the later performance of people they turn down.  im not saying, of course, that elite colleges have evolved to prey upon the weaknesses of large organizations the way enterprise software companies have. but they work as if they had. in addition to the power of the brand name, graduates of elite colleges have two critical qualities that plug right into the way large organizations work. theyre good at doing what theyre asked, since thats what it takes to please the adults who judge you at seventeen. and having been to an elite college makes them more confident. back in the days when people might spend their whole career at one big company, these qualities must have been very valuable. graduates of elite colleges would have been capable, yet amenable to authority. and since individual performance is so hard to measure in large organizations, their own confidence would have been the starting point for their reputation. things are very different in the new world of startups. we couldnt save someone from the markets judgement even if we wanted to. and being charming and confident counts for nothing with users. all users care about is whether you make something they like. if you dont, youre dead. knowing that test is coming makes us work a lot harder to get the right answers than anyone would if they were merely hiring people. we cant afford to have any illusions about the predictors of success. and what weve found is that the variation between schools is so much smaller than the variation between individuals that its negligible by comparison. we can learn more about someone in the first minute of talking to them than by knowing where they went to school. it seems obvious when you put it that way. look at the individual, not where they went to college. but thats a weaker statement than the idea i began with, that it doesnt matter much where a given individual goes to college. dont you learn things at the best schools that you wouldnt learn at lesser places? apparently not. obviously you cant prove this in the case of a single individual, but you can tell from aggregate evidence: you cant, without asking them, distinguish people who went to one school from those who went to another three times as far down the us news list.  try it and see. how can this be? because how much you learn in college depends a lot more on you than the college. a determined party animal can get through the best school without learning anything. and someone with a real thirst for knowledge will be able to find a few smart people to learn from at a school that isnt prestigious at all. the other students are the biggest advantage of going to an elite college; you learn more from them than the professors. but you should be able to reproduce this at most colleges if you make a conscious effort to find smart friends. at most colleges you can find at least a handful of other smart students, and most people have only a handful of close friends in college anyway.  the odds of finding smart professors are even better. the curve for faculty is a lot flatter than for students, especially in math and the hard sciences; you have to go pretty far down the list of colleges before you stop finding smart professors in the math department. so its not surprising that weve found the relative prestige of different colleges useless in judging individuals. theres a lot of randomness in how colleges select people, and what they learn there depends much more on them than the college. between these two sources of variation, the college someone went to doesnt mean a lot. it is to some degree a predictor of ability, but so weak that we regard it mainly as a source of error and try consciously to ignore it. i doubt what weve discovered is an anomaly specific to startups. probably people have always overestimated the importance of where one goes to college. were just finally able to measure it. the unfortunate thing is not just that people are judged by such a superficial test, but that so many judge themselves by it. a lot of people, probably the majority of people in america, have some amount of insecurity about where, or whether, they went to college. the tragedy of the situation is that by far the greatest liability of not having gone to the college youd have liked is your own feeling that youre thereby lacking something. colleges are a bit like exclusive clubs in this respect. there is only one real advantage to being a member of most exclusive clubs: you know you wouldnt be missing much if you werent. when youre excluded, you can only imagine the advantages of being an insider. but invariably theyre larger in your imagination than in real life. so it is with colleges. colleges differ, but theyre nothing like the stamp of destiny so many imagine them to be. people arent what some admissions officer decides about them at seventeen. theyre what they make themselves. indeed, the great advantage of not caring where people went to college is not just that you can stop judging them (and yourself) by superficial measures, but that you can focus instead on what really matters. what matters is what you make of yourself. i think thats what we should tell kids. their job isnt to get good grades so they can get into a good college, but to learn and do. and not just because thats more rewarding than worldly success. that will increasingly be the route to worldly success.  is what we measure worth measuring? i think so. you can get rich simply by being energetic and unscrupulous, but getting rich from a technology startup takes some amount of brains. it is just the kind of work the upper middle class values; it has about the same intellectual component as being a doctor.  actually, someone did, once. mitch kapors wife freada was in charge of hr at lotus in the early years. (as he is at pains to point out, they did not become romantically involved till afterward.) at one point they worried lotus was losing its startup edge and turning into a big company. so as an experiment she sent their recruiters the resumes of the first 40 employees, with identifying details changed. these were the people who had made lotus into the star it was. not one got an interview.  the us news list? surely no one trusts that. even if the statistics they consider are useful, how do they decide on the relative weights? the reason the us news list is meaningful is precisely because they are so intellectually dishonest in that respect. there is no external source they can use to calibrate the weighting of the statistics they use; if there were, we could just use that instead. what they must do is adjust the weights till the top schools are the usual suspects in about the right order. so in effect what the us news list tells us is what the editors think the top schools are, which is probably not far from the conventional wisdom on the matter. the amusing thing is, because some schools work hard to game the system, the editors will have to keep tweaking their algorithm to get the rankings they want.  possible doesnt mean easy, of course. a smart student at a party school will inevitably be something of an outcast, just as he or she would be in most high schools . thanks to trevor blackwell, sarah harlin, jessica livingston, jackie mcdonough, peter norvig, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com (this is a talk i gave at the last y combinator dinner of the summer. usually we dont have a speaker at the last dinner; its more of a party. but it seemed worth spoiling the atmosphere if i could save some of the startups from preventable deaths. so at the last minute i cooked up this rather grim talk. i didnt mean this as an essay; i wrote it down because i only had two hours before dinner and think fastest while writing.) a couple days ago i told a reporter that we expected about a third of the companies we funded to succeed. actually i was being conservative. im hoping it might be as much as a half. wouldnt it be amazing if we could achieve a 50% success rate? another way of saying that is that half of you are going to die. phrased that way, it doesnt sound good at all. in fact, its kind of weird when you think about it, because our definition of success is that the founders get rich. if half the startups we fund succeed, then half of you are going to get rich and the other half are going to get nothing. if you can just avoid dying, you get rich. that sounds like a joke, but its actually a pretty good description of what happens in a typical startup. it certainly describes what happened in viaweb. we avoided dying till we got rich. it was really close, too. when we were visiting yahoo to talk about being acquired, we had to interrupt everything and borrow one of their conference rooms to talk down an investor who was about to back out of a new funding round we needed to stay alive. so even in the middle of getting rich we were fighting off the grim reaper. you may have heard that quote about luck consisting of opportunity meeting preparation. youve now done the preparation. the work youve done so far has, in effect, put you in a position to get lucky: you can now get rich by not letting your company die. thats more than most people have. so lets talk about how not to die. weve done this five times now, and weve seen a bunch of startups die. about 10 of them so far. we dont know exactly what happens when they die, because they generally dont die loudly and heroically. mostly they crawl off somewhere and die. for us the main indication of impending doom is when we dont hear from you. when we havent heard from, or about, a startup for a couple months, thats a bad sign. if we send them an email asking whats up, and they dont reply, thats a really bad sign. so far that is a 100% accurate predictor of death. whereas if a startup regularly does new deals and releases and either sends us mail or shows up at yc events, theyre probably going to live. i realize this will sound naive, but maybe the linkage works in both directions. maybe if you can arrange that we keep hearing from you, you wont die. that may not be so naive as it sounds. youve probably noticed that having dinners every tuesday with us and the other founders causes you to get more done than you would otherwise, because every dinner is a mini demo day. every dinner is a kind of a deadline. so the mere constraint of staying in regular contact with us will push you to make things happen, because otherwise youll be embarrassed to tell us that you havent done anything new since the last time we talked. if this works, it would be an amazing hack. it would be pretty cool if merely by staying in regular contact with us you could get rich. it sounds crazy, but theres a good chance that would work. a variant is to stay in touch with other yc-funded startups. there is now a whole neighborhood of them in san francisco. if you move there, the peer pressure that made you work harder all summer will continue to operate. when startups die, the official cause of death is always either running out of money or a critical founder bailing. often the two occur simultaneously. but i think the underlying cause is usually that theyve become demoralized. you rarely hear of a startup thats working around the clock doing deals and pumping out new features, and dies because they cant pay their bills and their isp unplugs their server. startups rarely die in mid keystroke. so keep typing! if so many startups get demoralized and fail when merely by hanging on they could get rich, you have to assume that running a startup can be demoralizing. that is certainly true. ive been there, and thats why ive never done another startup. the low points in a startup are just unbelievably low. i bet even google had moments where things seemed hopeless. knowing that should help. if you know its going to feel terrible sometimes, then when it feels terrible you wont think "ouch, this feels terrible, i give up." it feels that way for everyone. and if you just hang on, things will probably get better. the metaphor people use to describe the way a startup feels is at least a roller coaster and not drowning. you dont just sink and sink; there are ups after the downs. another feeling that seems alarming but is in fact normal in a startup is the feeling that what youre doing isnt working. the reason you can expect to feel this is that what you do probably wont work. startups almost never get it right the first time. much more commonly you launch something, and no one cares. dont assume when this happens that youve failed. thats normal for startups. but dont sit around doing nothing. iterate. i like paul buchheits suggestion of trying to make something that at least someone really loves. as long as youve made something that a few users are ecstatic about, youre on the right track. it will be good for your morale to have even a handful of users who really love you, and startups run on morale. but also it will tell you what to focus on. what is it about you that they love? can you do more of that? where can you find more people who love that sort of thing? as long as you have some core of users who love you, all you have to do is expand it. it may take a while, but as long as you keep plugging away, youll win in the end. both blogger and delicious did that. both took years to succeed. but both began with a core of fanatically devoted users, and all evan and joshua had to do was grow that core incrementally. wufoo is on the same trajectory now. so when you release something and it seems like no one cares, look more closely. are there zero users who really love you, or is there at least some little group that does? its quite possible there will be zero. in that case, tweak your product and try again. every one of you is working on a space that contains at least one winning permutation somewhere in it. if you just keep trying, youll find it. let me mention some things not to do. the number one thing not to do is other things. if you find yourself saying a sentence that ends with "but were going to keep working on the startup," you are in big trouble. bobs going to grad school, but were going to keep working on the startup. were moving back to minnesota, but were going to keep working on the startup. were taking on some consulting projects, but were going to keep working on the startup. you may as well just translate these to "were giving up on the startup, but were not willing to admit that to ourselves," because thats what it means most of the time. a startup is so hard that working on it cant be preceded by "but." in particular, dont go to graduate school, and dont start other projects. distraction is fatal to startups. going to (or back to) school is a huge predictor of death because in addition to the distraction it gives you something to say youre doing. if youre only doing a startup, then if the startup fails, you fail. if youre in grad school and your startup fails, you can say later "oh yeah, we had this startup on the side when i was in grad school, but it didnt go anywhere." you cant use euphemisms like "didnt go anywhere" for something thats your only occupation. people wont let you. one of the most interesting things weve discovered from working on y combinator is that founders are more motivated by the fear of looking bad than by the hope of getting millions of dollars. so if you want to get millions of dollars, put yourself in a position where failure will be public and humiliating. when we first met the founders of octopart , they seemed very smart, but not a great bet to succeed, because they didnt seem especially committed. one of the two founders was still in grad school. it was the usual story: hed drop out if it looked like the startup was taking off. since then he has not only dropped out of grad school, but appeared full length in newsweek with the word "billionaire" printed across his chest. he just cannot fail now. everyone he knows has seen that picture. girls who dissed him in high school have seen it. his mom probably has it on the fridge. it would be unthinkably humiliating to fail now. at this point he is committed to fight to the death. i wish every startup we funded could appear in a newsweek article describing them as the next generation of billionaires, because then none of them would be able to give up. the success rate would be 90%. im not kidding. when we first knew the octoparts they were lighthearted, cheery guys. now when we talk to them they seem grimly determined. the electronic parts distributors are trying to squash them to keep their monopoly pricing. (if it strikes you as odd that people still order electronic parts out of thick paper catalogs in 2007, theres a reason for that. the distributors want to prevent the transparency that comes from having prices online.) i feel kind of bad that weve transformed these guys from lighthearted to grimly determined. but that comes with the territory. if a startup succeeds, you get millions of dollars, and you dont get that kind of money just by asking for it. you have to assume it takes some amount of pain. and however tough things get for the octoparts, i predict theyll succeed. they may have to morph themselves into something totally different, but they wont just crawl off and die. theyre smart; theyre working in a promising field; and they just cannot give up. all of you guys already have the first two. youre all smart and working on promising ideas. whether you end up among the living or the dead comes down to the third ingredient, not giving up. so ill tell you now: bad shit is coming. it always is in a startup. the odds of getting from launch to liquidity without some kind of disaster happening are one in a thousand. so dont get demoralized. when the disaster strikes, just say to yourself, ok, this was what paul was talking about. what did he say to do? oh, yeah. dont give up. this essay was originally published at paulgraham.com a good programmer working intensively on his own code can hold it in his mind the way a mathematician holds a problem hes working on. mathematicians dont answer questions by working them out on paper the way schoolchildren are taught to. they do more in their heads: they try to understand a problem space well enough that they can walk around it the way you can walk around the memory of the house you grew up in. at its best programming is the same. you hold the whole program in your head, and you can manipulate it at will. thats particularly valuable at the start of a project, because initially the most important thing is to be able to change what youre doing. not just to solve the problem in a different way, but to change the problem youre solving. your code is your understanding of the problem youre exploring. so its only when you have your code in your head that you really understand the problem. its not easy to get a program into your head. if you leave a project for a few months, it can take days to really understand it again when you return to it. even when youre actively working on a program it can take half an hour to load into your head when you start work each day. and thats in the best case. ordinary programmers working in typical office conditions never enter this mode. or to put it more dramatically, ordinary programmers working in typical office conditions never really understand the problems theyre solving. even the best programmers dont always have the whole program theyre working on loaded into their heads. but there are things you can do to help: avoid distractions. distractions are bad for many types of work, but especially bad for programming, because programmers tend to operate at the limit of the detail they can handle. the danger of a distraction depends not on how long it is, but on how much it scrambles your brain. a programmer can leave the office and go and get a sandwich without losing the code in his head. but the wrong kind of interruption can wipe your brain in 30 seconds. oddly enough, scheduled distractions may be worse than unscheduled ones. if you know you have a meeting in an hour, you dont even start working on something hard. work in long stretches. since theres a fixed cost each time you start working on a program, its more efficient to work in a few long sessions than many short ones. there will of course come a point where you get stupid because youre tired. this varies from person to person. ive heard of people hacking for 36 hours straight, but the most ive ever been able to manage is about 18, and i work best in chunks of no more than 12. the optimum is not the limit you can physically endure. theres an advantage as well as a cost of breaking up a project. sometimes when you return to a problem after a rest, you find your unconscious mind has left an answer waiting for you. use succinct languages. more powerful programming languages make programs shorter. and programmers seem to think of programs at least partially in the language theyre using to write them. the more succinct the language, the shorter the program, and the easier it is to load and keep in your head. you can magnify the effect of a powerful language by using a style called bottom-up programming, where you write programs in multiple layers, the lower ones acting as programming languages for those above. if you do this right, you only have to keep the topmost layer in your head. keep rewriting your program. rewriting a program often yields a cleaner design. but it would have advantages even if it didnt: you have to understand a program completely to rewrite it, so there is no better way to get one loaded into your head. write rereadable code. all programmers know its good to write readable code. but you yourself are the most important reader. especially in the beginning; a prototype is a conversation with yourself. and when writing for yourself you have different priorities. if youre writing for other people, you may not want to make code too dense. some parts of a program may be easiest to to read if you spread things out, like an introductory textbook. whereas if youre writing code to make it easy to reload into your head, it may be best to go for brevity. work in small groups. when you manipulate a program in your head, your vision tends to stop at the edge of the code you own. other parts you dont understand as well, and more importantly, cant take liberties with. so the smaller the number of programmers, the more completely a project can mutate. if theres just one programmer, as there often is at first, you can do all-encompassing redesigns. dont have multiple people editing the same piece of code. you never understand other peoples code as well as your own. no matter how thoroughly youve read it, youve only read it, not written it. so if a piece of code is written by multiple authors, none of them understand it as well as a single author would. and of course you cant safely redesign something other people are working on. its not just that youd have to ask permission. you dont even let yourself think of such things. redesigning code with several authors is like changing laws; redesigning code you alone control is like seeing the other interpretation of an ambiguous image. if you want to put several people to work on a project, divide it into components and give each to one person. start small. a program gets easier to hold in your head as you become familiar with it. you can start to treat parts as black boxes once you feel confident youve fully explored them. but when you first start working on a project, youre forced to see everything. if you start with too big a problem, you may never quite be able to encompass it. so if you need to write a big, complex program, the best way to begin may not be to write a spec for it, but to write a prototype that solves a subset of the problem. whatever the advantages of planning, theyre often outweighed by the advantages of being able to keep a program in your head. its striking how often programmers manage to hit all eight points by accident. someone has an idea for a new project, but because its not officially sanctioned, he has to do it in off hourswhich turn out to be more productive because there are no distractions. driven by his enthusiasm for the new project he works on it for many hours at a stretch. because its initially just an experiment, instead of a "production" language he uses a mere "scripting" languagewhich is in fact far more powerful. he completely rewrites the program several times; that wouldnt be justifiable for an official project, but this is a labor of love and he wants it to be perfect. and since no one is going to see it except him, he omits any comments except the note-to-self variety. he works in a small group perforce, because he either hasnt told anyone else about the idea yet, or it seems so unpromising that no one else is allowed to work on it. even if there is a group, they couldnt have multiple people editing the same code, because it changes too fast for that to be possible. and the project starts small because the idea is small at first; he just has some cool hack he wants to try out. even more striking are the number of officially sanctioned projects that manage to do all eight things wrong . in fact, if you look at the way software gets written in most organizations, its almost as if they were deliberately trying to do things wrong. in a sense, they are. one of the defining qualities of organizations since there have been such a thing is to treat individuals as interchangeable parts. this works well for more parallelizable tasks, like fighting wars. for most of history a well-drilled army of professional soldiers could be counted on to beat an army of individual warriors, no matter how valorous. but having ideas is not very parallelizable. and thats what programs are: ideas. its not merely true that organizations dislike the idea of depending on individual genius, its a tautology. its part of the definition of an organization not to. of our current concept of an organization, at least. maybe we could define a new kind of organization that combined the efforts of individuals without requiring them to be interchangeable. arguably a market is such a form of organization, though it may be more accurate to describe a market as a degenerate caseas what you get by default when organization isnt possible. probably the best well do is some kind of hack, like making the programming parts of an organization work differently from the rest. perhaps the optimal solution is for big companies not even to try to develop ideas in house, but simply to buy them. but regardless of what the solution turns out to be, the first step is to realize theres a problem. there is a contradiction in the very phrase "software company." the two words are pulling in opposite directions. any good programmer in a large organization is going to be at odds with it, because organizations are designed to prevent what programmers strive for. good programmers manage to get a lot done anyway. but often it requires practically an act of rebellion against the organizations that employ them. perhaps it will help if more people understand that the way programmers behave is driven by the demands of the work they do. its not because theyre irresponsible that they work in long binges during which they blow off all other obligations, plunge straight into programming instead of writing specs first, and rewrite code that already works. its not because theyre unfriendly that they prefer to work alone, or growl at people who pop their head in the door to say hello. this apparently random collection of annoying habits has a single explanation: the power of holding a program in ones head. whether or not understanding this can help large organizations, it can certainly help their competitors. the weakest point in big companies is that they dont let individual programmers do great work. so if youre a little startup, this is the place to attack them. take on the kind of problems that have to be solved in one big brain. thanks to sam altman, david greenspan, aaron iba, jessica livingston, robert morris, peter norvig, lisa randall, emmett shear, sergei tsarev, and stephen wolfram for reading drafts of this. this essay was originally published at paulgraham.com one of the more surprising things ive noticed while working on y combinator is how frightening the most ambitious startup ideas are. in this essay im going to demonstrate this phenomenon by describing some. any one of them could make you a billionaire. that might sound like an attractive prospect, and yet when i describe these ideas you may notice you find yourself shrinking away from them. dont worry, its not a sign of weakness. arguably its a sign of sanity. the biggest startup ideas are terrifying. and not just because theyd be a lot of work. the biggest ideas seem to threaten your identity: you wonder if youd have enough ambition to carry them through. theres a scene in being john malkovich where the nerdy hero encounters a very attractive, sophisticated woman. she says to him: heres the thing: if you ever got me, you wouldnt have a clue what to do with me. thats what these ideas say to us. this phenomenon is one of the most important things you can understand about startups. youd expect big startup ideas to be attractive, but actually they tend to repel you. and that has a bunch of consequences. it means these ideas are invisible to most people who try to think of startup ideas, because their subconscious filters them out. even the most ambitious people are probably best off approaching them obliquely. the best ideas are just on the right side of impossible. i dont know if this one is possible, but there are signs it might be. making a new search engine means competing with google, and recently ive noticed some cracks in their fortress. the point when it became clear to me that microsoft had lost their way was when they decided to get into the search business. that was not a natural move for microsoft. they did it because they were afraid of google, and google was in the search business. but this meant (a) google was now setting microsofts agenda, and (b) microsofts agenda consisted of stuff they werent good at. microsoft : google :: google : facebook. that does not by itself mean theres room for a new search engine, but lately when using google search ive found myself nostalgic for the old days, when google was true to its own slightly aspy self. google used to give me a page of the right answers, fast, with no clutter. now the results seem inspired by the scientologist principle that whats true is whats true for you. and the pages dont have the clean, sparse feel they used to. google search results used to look like the output of a unix utility. now if i accidentally put the cursor in the wrong place, anything might happen. the way to win here is to build the search engine all the hackers use. a search engine whose users consisted of the top 10,000 hackers and no one else would be in a very powerful position despite its small size, just as google was when it was that search engine. and for the first time in over a decade the idea of switching seems thinkable to me. since anyone capable of starting this company is one of those 10,000 hackers, the route is at least straightforward: make the search engine you yourself want. feel free to make it excessively hackerish. make it really good for code search, for example. would you like search queries to be turing complete? anything that gets you those 10,000 users is ipso facto good. dont worry if something you want to do will constrain you in the long term, because if you dont get that initial core of users, there wont be a long term. if you can just build something that you and your friends genuinely prefer to google, youre already about 10% of the way to an ipo, just as facebook was (though they probably didnt realize it) when they got all the harvard undergrads. email was not designed to be used the way we use it now. email is not a messaging protocol. its a todo list. or rather, my inbox is a todo list, and email is the way things get onto it. but it is a disastrously bad todo list. im open to different types of solutions to this problem, but i suspect that tweaking the inbox is not enough, and that email has to be replaced with a new protocol. this new protocol should be a todo list protocol, not a messaging protocol, although there is a degenerate case where what someone wants you to do is: read the following text. as a todo list protocol, the new protocol should give more power to the recipient than email does. i want there to be more restrictions on what someone can put on my todo list. and when someone can put something on my todo list, i want them to tell me more about what they want from me. do they want me to do something beyond just reading some text? how important is it? (there obviously has to be some mechanism to prevent people from saying everything is important.) when does it have to be done? this is one of those ideas thats like an irresistible force meeting an immovable object. on one hand, entrenched protocols are impossible to replace. on the other, it seems unlikely that people in 100 years will still be living in the same email hell we do now. and if email is going to get replaced eventually, why not now? if you do it right, you may be able to avoid the usual chicken and egg problem new protocols face, because some of the most powerful people in the world will be among the first to switch to it. theyre all at the mercy of email too. whatever you build, make it fast. gmail has become painfully slow. if you made something no better than gmail, but fast, that alone would let you start to pull users away from gmail. gmail is slow because google cant afford to spend a lot on it. but people will pay for this. id have no problem paying $50 a month. considering how much time i spend in email, its kind of scary to think how much id be justified in paying. at least $1000 a month. if i spend several hours a day reading and writing email, that would be a cheap way to make my life better. people are all over this idea lately, and i think theyre onto something. im reluctant to suggest that an institution thats been around for a millennium is finished just because of some mistakes they made in the last few decades, but certainly in the last few decades us universities seem to have been headed down the wrong path. one could do a lot better for a lot less money. i dont think universities will disappear. they wont be replaced wholesale. theyll just lose the de facto monopoly on certain types of learning that they once had. there will be many different ways to learn different things, and some may look quite different from universities. y combinator itself is arguably one of them. learning is such a big problem that changing the way people do it will have a wave of secondary effects. for example, the name of the university one went to is treated by a lot of people (correctly or not) as a credential in its own right. if learning breaks up into many little pieces, credentialling may separate from it. there may even need to be replacements for campus social life (and oddly enough, yc even has aspects of that). you could replace high schools too, but there you face bureaucratic obstacles that would slow down a startup. universities seem the place to start. hollywood has been slow to embrace the internet. that was a mistake, because i think we can now call a winner in the race between delivery mechanisms, and it is the internet, not cable. a lot of the reason is the horribleness of cable clients, also known as tvs. our family didnt wait for apple tv. we hated our last tv so much that a few months ago we replaced it with an imac bolted to the wall. its a little inconvenient to control it with a wireless mouse, but the overall experience is much better than the nightmare ui we had to deal with before. some of the attention people currently devote to watching movies and tv can be stolen by things that seem completely unrelated, like social networking apps. more can be stolen by things that are a little more closely related, like games. but there will probably always remain some residual demand for conventional drama, where you sit passively and watch as a plot happens. so how do you deliver drama via the internet? whatever you make will have to be on a larger scale than youtube clips. when people sit down to watch a show, they want to know what theyre going to get: either part of a series with familiar characters, or a single longer "movie" whose basic premise they know in advance. there are two ways delivery and payment could play out. either some company like netflix or apple will be the app store for entertainment, and youll reach audiences through them. or the would-be app stores will be too overreaching, or too technically inflexible, and companies will arise to supply payment and streaming a la carte to the producers of drama. if thats the way things play out, there will also be a need for such infrastructure companies. i was talking recently to someone who knew apple well, and i asked him if the people now running the company would be able to keep creating new things the way apple had under steve jobs. his answer was simply "no." i already feared that would be the answer. i asked more to see how hed qualify it. but he didnt qualify it at all. no, there will be no more great new stuff beyond whatevers currently in the pipeline. apples revenues may continue to rise for a long time, but as microsoft shows, revenue is a lagging indicator in the technology business. so if apples not going to make the next ipad, who is? none of the existing players. none of them are run by product visionaries, and empirically you cant seem to get those by hiring them. empirically the way you get a product visionary as ceo is for him to found the company and not get fired. so the company that creates the next wave of hardware is probably going to have to be a startup. i realize it sounds preposterously ambitious for a startup to try to become as big as apple. but no more ambitious than it was for apple to become as big as apple, and they did it. plus a startup taking on this problem now has an advantage the original apple didnt: the example of apple. steve jobs has shown us whats possible. that helps would-be successors both directly, as roger bannister did, by showing how much better you can do than people did before, and indirectly, as augustus did, by lodging the idea in users minds that a single person could unroll the future for them. now steve is gone theres a vacuum we can all feel. if a new company led boldly into the future of hardware, users would follow. the ceo of that company, the "next steve jobs," might not measure up to steve jobs. but he wouldnt have to. hed just have to do a better job than samsung and hp and nokia, and that seems pretty doable. the last 10 years have reminded us what moores law actually says. till about 2002 you could safely misinterpret it as promising that clock speeds would double every 18 months. actually what it says is that circuit densities will double every 18 months. it used to seem pedantic to point that out. not any more. intel can no longer give us faster cpus, just more of them. this moores law is not as good as the old one. moores law used to mean that if your software was slow, all you had to do was wait, and the inexorable progress of hardware would solve your problems. now if your software is slow you have to rewrite it to do more things in parallel, which is a lot more work than waiting. it would be great if a startup could give us something of the old moores law back, by writing software that could make a large number of cpus look to the developer like one very fast cpu. there are several ways to approach this problem. the most ambitious is to try to do it automatically: to write a compiler that will parallelize our code for us. theres a name for this compiler, the sufficiently smart compiler, and it is a byword for impossibility. but is it really impossible? is there no configuration of the bits in memory of a present day computer that is this compiler? if you really think so, you should try to prove it, because that would be an interesting result. and if its not impossible but simply very hard, it might be worth trying to write it. the expected value would be high even if the chance of succeeding was low. the reason the expected value is so high is web services. if you could write software that gave programmers the convenience of the way things were in the old days, you could offer it to them as a web service. and that would in turn mean that you got practically all the users. imagine there was another processor manufacturer that could still translate increased circuit densities into increased clock speeds. theyd take most of intels business. and since web services mean that no one sees their processors anymore, by writing the sufficiently smart compiler you could create a situation indistinguishable from you being that manufacturer, at least for the server market. the least ambitious way of approaching the problem is to start from the other end, and offer programmers more parallelizable lego blocks to build programs out of, like hadoop and mapreduce. then the programmer still does much of the work of optimization. theres an intriguing middle ground where you build a semi-automatic weaponwhere theres a human in the loop. you make something that looks to the user like the sufficiently smart compiler, but inside has people, using highly developed optimization tools to find and eliminate bottlenecks in users programs. these people might be your employees, or you might create a marketplace for optimization. an optimization marketplace would be a way to generate the sufficiently smart compiler piecemeal, because participants would immediately start writing bots. it would be a curious state of affairs if you could get to the point where everything could be done by bots, because then youd have made the sufficiently smart compiler, but no one person would have a complete copy of it. i realize how crazy all this sounds. in fact, what i like about this idea is all the different ways in which its wrong. the whole idea of focusing on optimization is counter to the general trend in software development for the last several decades. trying to write the sufficiently smart compiler is by definition a mistake. and even if it werent, compilers are the sort of software thats supposed to be created by open source projects, not companies. plus if this works it will deprive all the programmers who take pleasure in making multithreaded apps of so much amusing complexity. the forum troll i have by now internalized doesnt even know where to begin in raising objections to this project. now thats what i call a startup idea. but wait, heres another that could face even greater resistance: ongoing, automatic medical diagnosis. one of my tricks for generating startup ideas is to imagine the ways in which well seem backward to future generations. and im pretty sure that to people 50 or 100 years in the future, it will seem barbaric that people in our era waited till they had symptoms to be diagnosed with conditions like heart disease and cancer. for example, in 2004 bill clinton found he was feeling short of breath. doctors discovered that several of his arteries were over 90% blocked and 3 days later he had a quadruple bypass. it seems reasonable to assume bill clinton has the best medical care available. and yet even he had to wait till his arteries were over 90% blocked to learn that the number was over 90%. surely at some point in the future well know these numbers the way we now know something like our weight. ditto for cancer. it will seem preposterous to future generations that we wait till patients have physical symptoms to be diagnosed with cancer. cancer will show up on some sort of radar screen immediately. (of course, what shows up on the radar screen may be different from what we think of now as cancer. i wouldnt be surprised if at any given time we have ten or even hundreds of microcancers going at once, none of which normally amount to anything.) a lot of the obstacles to ongoing diagnosis will come from the fact that its going against the grain of the medical profession. the way medicine has always worked is that patients come to doctors with problems, and the doctors figure out whats wrong. a lot of doctors dont like the idea of going on the medical equivalent of what lawyers call a "fishing expedition," where you go looking for problems without knowing what youre looking for. they call the things that get discovered this way "incidentalomas," and they are something of a nuisance. for example, a friend of mine once had her brain scanned as part of a study. she was horrified when the doctors running the study discovered what appeared to be a large tumor. after further testing, it turned out to be a harmless cyst. but it cost her a few days of terror. a lot of doctors worry that if you start scanning people with no symptoms, youll get this on a giant scale: a huge number of false alarms that make patients panic and require expensive and perhaps even dangerous tests to resolve. but i think thats just an artifact of current limitations. if people were scanned all the time and we got better at deciding what was a real problem, my friend would have known about this cyst her whole life and known it was harmless, just as we do a birthmark. there is room for a lot of startups here. in addition to the technical obstacles all startups face, and the bureaucratic obstacles all medical startups face, theyll be going against thousands of years of medical tradition. but it will happen, and it will be a great thingso great that people in the future will feel as sorry for us as we do for the generations that lived before anaesthesia and antibiotics. let me conclude with some tactical advice. if you want to take on a problem as big as the ones ive discussed, dont make a direct frontal attack on it. dont say, for example, that youre going to replace email. if you do that you raise too many expectations. your employees and investors will constantly be asking "are we there yet?" and youll have an army of haters waiting to see you fail. just say youre building todo-list software. that sounds harmless. people can notice youve replaced email when its a fait accompli . empirically, the way to do really big things seems to be to start with deceptively small things. want to dominate microcomputer software? start by writing a basic interpreter for a machine with a few thousand users. want to make the universal web site? start by building a site for harvard undergrads to stalk one another. empirically, its not just for other people that you need to start small. you need to for your own sake. neither bill gates nor mark zuckerberg knew at first how big their companies were going to get. all they knew was that they were onto something. maybe its a bad idea to have really big ambitions initially, because the bigger your ambition, the longer its going to take, and the further you project into the future, the more likely youll get it wrong. i think the way to use these big ideas is not to try to identify a precise point in the future and then ask yourself how to get from here to there, like the popular image of a visionary. youll be better off if you operate like columbus and just head in a general westerly direction. dont try to construct the future like a building, because your current blueprint is almost certainly mistaken. start with something you know works, and when you expand, expand westward. the popular image of the visionary is someone with a clear view of the future, but empirically it may be better to have a blurry one.  its also one of the most important things vcs fail to understand about startups. most expect founders to walk in with a clear plan for the future, and judge them based on that. few consciously realize that in the biggest successes there is the least correlation between the initial plan and what the startup eventually becomes.  this sentence originally read "gmail is painfully slow." thanks to paul buchheit for the correction.  roger bannister is famous as the first person to run a mile in under 4 minutes. but his world record only lasted 46 days. once he showed it could be done, lots of others followed. ten years later jim ryun ran a 3:59 mile as a high school junior.  if you want to be the next apple, maybe you dont even want to start with consumer electronics. maybe at first you make something hackers use. or you make something popular but apparently unimportant, like a headset or router. all you need is a bridgehead. thanks to sam altman, trevor blackwell, paul buchheit, patrick collison, aaron iba, jessica livingston, robert morris, harj taggar and garry tan for reading drafts of this. this essay was originally published at paulgraham.com i have too much stuff. most people in america do. in fact, the poorer people are, the more stuff they seem to have. hardly anyone is so poor that they cant afford a front yard full of old cars. it wasnt always this way. stuff used to be rare and valuable. you can still see evidence of that if you look for it. for example, in my house in cambridge, which was built in 1876, the bedrooms dont have closets. in those days peoples stuff fit in a chest of drawers. even as recently as a few decades ago there was a lot less stuff. when i look back at photos from the 1970s, im surprised how empty houses look. as a kid i had what i thought was a huge fleet of toy cars, but theyd be dwarfed by the number of toys my nephews have. all together my matchboxes and corgis took up about a third of the surface of my bed. in my nephews rooms the bed is the only clear space. stuff has gotten a lot cheaper, but our attitudes toward it havent changed correspondingly. we overvalue stuff. that was a big problem for me when i had no money. i felt poor, and stuff seemed valuable, so almost instinctively i accumulated it. friends would leave something behind when they moved, or id see something as i was walking down the street on trash night (beware of anything you find yourself describing as "perfectly good"), or id find something in almost new condition for a tenth its retail price at a garage sale. and pow, more stuff. in fact these free or nearly free things werent bargains, because they were worth even less than they cost. most of the stuff i accumulated was worthless, because i didnt need it. what i didnt understand was that the value of some new acquisition wasnt the difference between its retail price and what i paid for it. it was the value i derived from it. stuff is an extremely illiquid asset. unless you have some plan for selling that valuable thing you got so cheaply, what difference does it make what its "worth?" the only way youre ever going to extract any value from it is to use it. and if you dont have any immediate use for it, you probably never will. companies that sell stuff have spent huge sums training us to think stuff is still valuable. but it would be closer to the truth to treat stuff as worthless. in fact, worse than worthless, because once youve accumulated a certain amount of stuff, it starts to own you rather than the other way around. i know of one couple who couldnt retire to the town they preferred because they couldnt afford a place there big enough for all their stuff. their house isnt theirs; its their stuffs. and unless youre extremely organized, a house full of stuff can be very depressing. a cluttered room saps ones spirits. one reason, obviously, is that theres less room for people in a room full of stuff. but theres more going on than that. i think humans constantly scan their environment to build a mental model of whats around them. and the harder a scene is to parse, the less energy you have left for conscious thoughts. a cluttered room is literally exhausting. (this could explain why clutter doesnt seem to bother kids as much as adults. kids are less perceptive. they build a coarser model of their surroundings, and this consumes less energy.) i first realized the worthlessness of stuff when i lived in italy for a year. all i took with me was one large backpack of stuff. the rest of my stuff i left in my landladys attic back in the us. and you know what? all i missed were some of the books. by the end of the year i couldnt even remember what else i had stored in that attic. and yet when i got back i didnt discard so much as a box of it. throw away a perfectly good rotary telephone? i might need that one day. the really painful thing to recall is not just that i accumulated all this useless stuff, but that i often spent money i desperately needed on stuff that i didnt. why would i do that? because the people whose job is to sell you stuff are really, really good at it. the average 25 year old is no match for companies that have spent years figuring out how to get you to spend money on stuff. they make the experience of buying stuff so pleasant that "shopping" becomes a leisure activity. how do you protect yourself from these people? it cant be easy. im a fairly skeptical person, and their tricks worked on me well into my thirties. but one thing that might work is to ask yourself, before buying something, "is this going to make my life noticeably better?" a friend of mine cured herself of a clothes buying habit by asking herself before she bought anything "am i going to wear this all the time?" if she couldnt convince herself that something she was thinking of buying would become one of those few things she wore all the time, she wouldnt buy it. i think that would work for any kind of purchase. before you buy anything, ask yourself: will this be something i use constantly? or is it just something nice? or worse still, a mere bargain? the worst stuff in this respect may be stuff you dont use much because its too good. nothing owns you like fragile stuff. for example, the "good china" so many households have, and whose defining quality is not so much that its fun to use, but that one must be especially careful not to break it. another way to resist acquiring stuff is to think of the overall cost of owning it. the purchase price is just the beginning. youre going to have to think about that thing for yearsperhaps for the rest of your life. every thing you own takes energy away from you. some give more than they take. those are the only things worth having. ive now stopped accumulating stuff. except booksbut books are different. books are more like a fluid than individual objects. its not especially inconvenient to own several thousand books, whereas if you owned several thousand random possessions youd be a local celebrity. but except for books, i now actively avoid stuff. if i want to spend money on some kind of treat, ill take services over goods any day. im not claiming this is because ive achieved some kind of zenlike detachment from material things. im talking about something more mundane. a historical change has taken place, and ive now realized it. stuff used to be valuable, and now its not. in industrialized countries the same thing happened with food in the middle of the twentieth century. as food got cheaper (or we got richer; theyre indistinguishable), eating too much started to be a bigger danger than eating too little. weve now reached that point with stuff. for most people, rich or poor, stuff has become a burden. the good news is, if youre carrying a burden without knowing it, your life could be better than you realize. imagine walking around for years with five pound ankle weights, then suddenly having them removed. this essay was originally published at paulgraham.com an investor wants to give you money for a certain percentage of your startup. should you take it? youre about to hire your first employee. how much stock should you give him? these are some of the hardest questions founders face. and yet both have the same answer: 1/(1 - n) whenever youre trading stock in your company for anything, whether its money or an employee or a deal with another company, the test for whether to do it is the same. you should give up n% of your company if what you trade it for improves your average outcome enough that the (100 - n)% you have left is worth more than the whole company was before. for example, if an investor wants to buy half your company, how much does that investment have to improve your average outcome for you to break even? obviously it has to double: if you trade half your company for something that more than doubles the companys average outcome, youre net ahead. you have half as big a share of something worth more than twice as much. in the general case, if n is the fraction of the company youre giving up, the deal is a good one if it makes the company worth more than 1/(1 - n). for example, suppose y combinator offers to fund you in return for 6% of your company. in this case, n is .06 and 1/(1 - n) is 1.064. so you should take the deal if you believe we can improve your average outcome by more than 6.4%. if we improve your outcome by 10%, youre net ahead, because the remaining .94 you hold is worth .94 x 1.1  1.034.  one of the things the equity equation shows us is that, financially at least, taking money from a top vc firm can be a really good deal. greg mcadoo from sequoia recently said at a yc dinner that when sequoia invests alone they like to take about 30% of a company. 1/.7  1.43, meaning that deal is worth taking if they can improve your outcome by more than 43%. for the average startup, that would be an extraordinary bargain. it would improve the average startups prospects by more than 43% just to be able to say they were funded by sequoia, even if they never actually got the money. the reason sequoia is such a good deal is that the percentage of the company they take is artificially low. they dont even try to get market price for their investment; they limit their holdings to leave the founders enough stock to feel the company is still theirs. the catch is that sequoia gets about 6000 business plans a year and funds about 20 of them, so the odds of getting this great deal are 1 in 300. the companies that make it through are not average startups. of course, there are other factors to consider in a vc deal. its never just a straight trade of money for stock. but if it were, taking money from a top firm would generally be a bargain. you can use the same formula when giving stock to employees, but it works in the other direction. if i is the average outcome for the company with the addition of some new person, then theyre worth n such that i  1/(1 - n). which means n  (i - 1)/i. for example, suppose youre just two founders and you want to hire an additional hacker whos so good you feel hell increase the average outcome of the whole company by 20%. n  (1.2 - 1)/1.2  .167. so youll break even if you trade 16.7% of the company for him. that doesnt mean 16.7% is the right amount of stock to give him. stock is not the only cost of hiring someone: theres usually salary and overhead as well. and if the company merely breaks even on the deal, theres no reason to do it. i think to translate salary and overhead into stock you should multiply the annual rate by about 1.5. most startups grow fast or die; if you die you dont have to pay the guy, and if you grow fast youll be paying next years salary out of next years valuation, which should be 3x this years. if your valuation grows 3x a year, the total cost in stock of a new hires salary and overhead is 1.5 years cost at the present valuation.  how much of an additional margin should the company need as the "activation energy" for the deal? since this is in effect the companys profit on a hire, the market will determine that: if youre a hot opportunity, you can charge more. lets run through an example. suppose the company wants to make a "profit" of 50% on the new hire mentioned above. so subtract a third from 16.7% and we have 11.1% as his "retail" price. suppose further that hes going to cost $60k a year in salary and overhead, x 1.5  $90k total. if the companys valuation is $2 million, $90k is 4.5%. 11.1% - 4.5%  an offer of 6.6%. incidentally, notice how important it is for early employees to take little salary. it comes right out of stock that could otherwise be given to them. obviously there is a great deal of play in these numbers. im not claiming that stock grants can now be reduced to a formula. ultimately you always have to guess. but at least know what youre guessing. if you choose a number based on your gut feel, or a table of typical grant sizes supplied by a vc firm, understand what those are estimates of. and more generally, when you make any decision involving equity, run it through 1/(1 - n) to see if it makes sense. you should always feel richer after trading equity. if the trade didnt increase the value of your remaining shares enough to put you net ahead, you wouldnt have (or shouldnt have) done it.  this is why we cant believe anyone would think y combinator was a bad deal. does anyone really think were so useless that in three months we cant improve a startups prospects by 6.4%?  the obvious choice for your present valuation is the post-money valuation of your last funding round. this probably undervalues the company, though, because (a) unless your last round just happened, the company is presumably worth more, and (b) the valuation of an early funding round usually reflects some other contribution by the investors. thanks to sam altman, trevor blackwell, paul buchheit, hutch fishman, david hornik, paul kedrosky, jessica livingston, gary sabot, and joshua schachter for reading drafts of this. this essay was originally published at paulgraham.com people who worry about the increasing gap between rich and poor generally look back on the mid twentieth century as a golden age. in those days we had a large number of high-paying union manufacturing jobs that boosted the median income. i wouldnt quite call the high-paying union job a myth, but i think people who dwell on it are reading too much into it. oddly enough, it was working with startups that made me realize where the high-paying union job came from. in a rapidly growing market, you dont worry too much about efficiency. its more important to grow fast. if theres some mundane problem getting in your way, and theres a simple solution thats somewhat expensive, just take it and get on with more important things. ebay didnt win by paying less for servers than their competitors. difficult though it may be to imagine now, manufacturing was a growth industry in the mid twentieth century. this was an era when small firms making everything from cars to candy were getting consolidated into a new kind of corporation with national reach and huge economies of scale. you had to grow fast or die. workers were for these companies what servers are for an internet startup. a reliable supply was more important than low cost. if you looked in the head of a 1950s auto executive, the attitude must have been: sure, give em whatever they ask for, so long as the new model isnt delayed. in other words, those workers were not paid what their work was worth. circumstances being what they were, companies would have been stupid to insist on paying them so little. if you want a less controversial example of this phenomenon, ask anyone who worked as a consultant building web sites during the internet bubble. in the late nineties you could get paid huge sums of money for building the most trivial things. and yet does anyone who was there have any expectation those days will ever return? i doubt it. surely everyone realizes that was just a temporary aberration. the era of labor unions seems to have been the same kind of aberration, just spread over a longer period, and mixed together with a lot of ideology that prevents people from viewing it with as cold an eye as they would something like consulting during the bubble. basically, unions were just razorfish. people who think the labor movement was the creation of heroic union organizers have a problem to explain: why are unions shrinking now? the best they can do is fall back on the default explanation of people living in fallen civilizations. our ancestors were giants. the workers of the early twentieth century must have had a moral courage thats lacking today. in fact theres a simpler explanation. the early twentieth century was just a fast-growing startup overpaying for infrastructure. and we in the present are not a fallen people, who have abandoned whatever mysterious high-minded principles produced the high-paying union job. we simply live in a time when the fast-growing companies overspend on different things. this essay was originally published at paulgraham.com (this essay is derived from a keynote talk at the 2007 ases summit at stanford.) the world of investors is a foreign one to most hackerspartly because investors are so unlike hackers, and partly because they tend to operate in secret. ive been dealing with this world for many years, both as a founder and an investor, and i still dont fully understand it. in this essay im going to list some of the more surprising things ive learned about investors. some i only learned in the past year. teaching hackers how to deal with investors is probably the second most important thing we do at y combinator. the most important thing for a startup is to make something good. but everyone knows thats important. the dangerous thing about investors is that hackers dont know how little they know about this strange world. about a year ago i tried to figure out what youd need to reproduce silicon valley . i decided the critical ingredients were rich people and nerdsinvestors and founders. people are all you need to make technology, and all the other people will move. if i had to narrow that down, id say investors are the limiting factor. not because they contribute more to the startup, but simply because theyre least willing to move. theyre rich. theyre not going to move to albuquerque just because there are some smart hackers there they could invest in. whereas hackers will move to the bay area to find investors. there are several types of investors. the two main categories are angels and vcs: vcs invest other peoples money, and angels invest their own. though theyre less well known, the angel investors are probably the more critical ingredient in creating a silicon valley. most companies that vcs invest in would never have made it that far if angels hadnt invested first. vcs say between half and three quarters of companies that raise series a rounds have taken some outside investment already.  angels are willing to fund riskier projects than vcs. they also give valuable advice, because (unlike vcs) many have been startup founders themselves. googles story shows the key role angels play. a lot of people know google raised money from kleiner and sequoia. what most dont realize is how late. that vc round was a series b round; the premoney valuation was $75 million. google was already a successful company at that point. really, google was funded with angel money. it may seem odd that the canonical silicon valley startup was funded by angels, but this is not so surprising. risk is always proportionate to reward. so the most successful startup of all is likely to have seemed an extremely risky bet at first, and that is exactly the kind vcs wont touch. where do angel investors come from? from other startups. so startup hubs like silicon valley benefit from something like the marketplace effect, but shifted in time: startups are there because startups were there. if angels are so important, why do we hear more about vcs? because vcs like publicity. they need to market themselves to the investors who are their "customers"the endowments and pension funds and rich families whose money they investand also to founders who might come to them for funding. angels dont need to market themselves to investors because they invest their own money. nor do they want to market themselves to founders: they dont want random people pestering them with business plans. actually, neither do vcs. both angels and vcs get deals almost exclusively through personal introductions.  the reason vcs want a strong brand is not to draw in more business plans over the transom, but so they win deals when competing against other vcs. whereas angels are rarely in direct competition, because (a) they do fewer deals, (b) theyre happy to split them, and (c) they invest at a point where the stream is broader. some angels are, or were, hackers. but most vcs are a different type of people: theyre dealmakers. if youre a hacker, heres a thought experiment you can run to understand why there are basically no hacker vcs: how would you like a job where you never got to make anything, but instead spent all your time listening to other people pitch (mostly terrible) projects, deciding whether to fund them, and sitting on their boards if you did? that would not be fun for most hackers. hackers like to make things. this would be like being an administrator. because most vcs are a different species of people from founders, its hard to know what theyre thinking. if youre a hacker, the last time you had to deal with these guys was in high school. maybe in college you walked past their fraternity on your way to the lab. but dont underestimate them. theyre as expert in their world as you are in yours. what theyre good at is reading people, and making deals work to their advantage. think twice before you try to beat them at that. because most investors are dealmakers rather than technology people, they generally dont understand what youre doing. i knew as a founder that most vcs didnt get technology. i also knew some made a lot of money. and yet it never occurred to me till recently to put those two ideas together and ask "how can vcs make money by investing in stuff they dont understand?" the answer is that theyre like momentum investors. you can (or could once) make a lot of money by noticing sudden changes in stock prices. when a stock jumps upward, you buy, and when it suddenly drops, you sell. in effect youre insider trading, without knowing what you know. you just know someone knows something, and thats making the stock move. this is how most venture investors operate. they dont try to look at something and predict whether it will take off. they win by noticing that something is taking off a little sooner than everyone else. that generates almost as good returns as actually being able to pick winners. they may have to pay a little more than they would if they got in at the very beginning, but only a little. investors always say what they really care about is the team. actually what they care most about is your traffic, then what other investors think, then the team. if you dont yet have any traffic, they fall back on number 2, what other investors think. and this, as you can imagine, produces wild oscillations in the "stock price" of a startup. one week everyone wants you, and theyre begging not to be cut out of the deal. but all it takes is for one big investor to cool on you, and the next week no one will return your phone calls. we regularly have startups go from hot to cold or cold to hot in a matter of days, and literally nothing has changed. there are two ways to deal with this phenomenon. if youre feeling really confident, you can try to ride it. you can start by asking a comparatively lowly vc for a small amount of money, and then after generating interest there, ask more prestigious vcs for larger amounts, stirring up a crescendo of buzz, and then "sell" at the top. this is extremely risky, and takes months even if you succeed. i wouldnt try it myself. my advice is to err on the side of safety: when someone offers you a decent deal, just take it and get on with building the company. startups win or lose based on the quality of their product, not the quality of their funding deals. venture investors like companies that could go public. thats where the big returns are. they know the odds of any individual startup going public are small, but they want to invest in those that at least have a chance of going public. currently the way vcs seem to operate is to invest in a bunch of companies, most of which fail, and one of which is google. those few big wins compensate for losses on their other investments. what this means is that most vcs will only invest in you if youre a potential google. they dont care about companies that are a safe bet to be acquired for $20 million. there needs to be a chance, however small, of the company becoming really big. angels are different in this respect. theyre happy to invest in a company where the most likely outcome is a $20 million acquisition if they can do it at a low enough valuation. but of course they like companies that could go public too. so having an ambitious long-term plan pleases everyone. if you take vc money, you have to mean it, because the structure of vc deals prevents early acquisitions. if you take vc money, they wont let you sell early. the fact that theyre running investment funds makes vcs want to invest large amounts. a typical vc fund is now hundreds of millions of dollars. if $400 million has to be invested by 10 partners, they have to invest $40 million each. vcs usually sit on the boards of companies they fund. if the average deal size was $1 million, each partner would have to sit on 40 boards, which would not be fun. so they prefer bigger deals, where they can put a lot of money to work at once. vcs dont regard you as a bargain if you dont need a lot of money. that may even make you less attractive, because it means their investment creates less of a barrier to entry for competitors. angels are in a different position because theyre investing their own money. theyre happy to invest small amountssometimes as little as $20,000as long as the potential returns look good enough. so if youre doing something inexpensive, go to angels. vcs admit that valuations are an artifact. they decide how much money you need and how much of the company they want, and those two constraints yield a valuation. valuations increase as the size of the investment does. a company that an angel is willing to put $50,000 into at a valuation of a million cant take $6 million from vcs at that valuation. that would leave the founders less than a seventh of the company between them (since the option pool would also come out of that seventh). most vcs wouldnt want that, which is why you never hear of deals where a vc invests $6 million at a premoney valuation of $1 million. if valuations change depending on the amount invested, that shows how far they are from reflecting any kind of value of the company. since valuations are made up, founders shouldnt care too much about them. thats not the part to focus on. in fact, a high valuation can be a bad thing. if you take funding at a premoney valuation of $10 million, you wont be selling the company for 20. youll have to sell for over 50 for the vcs to get even a 5x return, which is low to them. more likely theyll want you to hold out for 100. but needing to get a high price decreases the chance of getting bought at all; many companies can buy you for $10 million, but only a handful for 100. and since a startup is like a pass/fail course for the founders, what you want to optimize is your chance of a good outcome, not the percentage of the company you keep. so why do founders chase high valuations? theyre tricked by misplaced ambition. they feel theyve achieved more if they get a higher valuation. they usually know other founders, and if they get a higher valuation they can say "mine is bigger than yours." but funding is not the real test. the real test is the final outcome for the founder, and getting too high a valuation may just make a good outcome less likely. the one advantage of a high valuation is that you get less dilution. but there is another less sexy way to achieve that: just take less money. ten years ago investors were looking for the next bill gates. this was a mistake, because microsoft was a very anomalous startup. they started almost as a contract programming operation, and the reason they became huge was that ibm happened to drop the pc standard in their lap. now all the vcs are looking for the next larry and sergey. this is a good trend, because larry and sergey are closer to the ideal startup founders. historically investors thought it was important for a founder to be an expert in business. so they were willing to fund teams of mbas who planned to use the money to pay programmers to build their product for them. this is like funding steve ballmer in the hope that the programmer hell hire is bill gateskind of backward, as the events of the bubble showed. now most vcs know they should be funding technical guys. this is more pronounced among the very top funds; the lamer ones still want to fund mbas. if youre a hacker, its good news that investors are looking for larry and sergey. the bad news is, the only investors who can do it right are the ones who knew them when they were a couple of cs grad students, not the confident media stars they are today. what investors still dont get is how clueless and tentative great founders can seem at the very beginning. investors do more for startups than give them money. theyre helpful in doing deals and arranging introductions, and some of the smarter ones, particularly angels, can give good advice about the product. in fact, id say what separates the great investors from the mediocre ones is the quality of their advice. most investors give advice, but the top ones give good advice. whatever help investors give a startup tends to be underestimated. its to everyones advantage to let the world think the founders thought of everything. the goal of the investors is for the company to become valuable, and the company seems more valuable if it seems like all the good ideas came from within. this trend is compounded by the obsession that the press has with founders. in a company founded by two people, 10% of the ideas might come from the first guy they hire. arguably theyve done a bad job of hiring otherwise. and yet this guy will be almost entirely overlooked by the press. i say this as a founder: the contribution of founders is always overestimated. the danger here is that new founders, looking at existing founders, will think that theyre supermen that one couldnt possibly equal oneself. actually they have a hundred different types of support people just offscreen making the whole show possible.  ive been very surprised to discover how timid most vcs are. they seem to be afraid of looking bad to their partners, and perhaps also to the limited partnersthe people whose money they invest. you can measure this fear in how much less risk vcs are willing to take. you can tell they wont make investments for their fund that they might be willing to make themselves as angels. though its not quite accurate to say that vcs are less willing to take risks. theyre less willing to do things that might look bad. thats not the same thing. for example, most vcs would be very reluctant to invest in a startup founded by a pair of 18 year old hackers, no matter how brilliant, because if the startup failed their partners could turn on them and say "what, you invested $x million of our money in a pair of 18 year olds?" whereas if a vc invested in a startup founded by three former banking executives in their 40s who planned to outsource their product developmentwhich to my mind is actually a lot riskier than investing in a pair of really smart 18 year oldshe couldnt be faulted, if it failed, for making such an apparently prudent investment. as a friend of mine said, "most vcs cant do anything that would sound bad to the kind of doofuses who run pension funds." angels can take greater risks because they dont have to answer to anyone. some founders are quite dejected when they get turned down by investors. they shouldnt take it so much to heart. to start with, investors are often wrong. its hard to think of a successful startup that wasnt turned down by investors at some point. lots of vcs rejected google. so obviously the reaction of investors is not a very meaningful test. investors will often reject you for what seem to be superficial reasons. i read of one vc who turned down a startup simply because theyd given away so many little bits of stock that the deal required too many signatures to close.  the reason investors can get away with this is that they see so many deals. it doesnt matter if they underestimate you because of some surface imperfection, because the next best deal will be almost as good . imagine picking out apples at a grocery store. you grab one with a little bruise. maybe its just a surface bruise, but why even bother checking when there are so many other unbruised apples to choose from? investors would be the first to admit theyre often wrong. so when you get rejected by investors, dont think "we suck," but instead ask "do we suck?" rejection is a question, not an answer. ive been surprised to discover how emotional investors can be. youd expect them to be cold and calculating, or at least businesslike, but often theyre not. im not sure if its their position of power that makes them this way, or the large sums of money involved, but investment negotiations can easily turn personal. if you offend investors, theyll leave in a huff. a while ago an eminent vc firm offered a series a round to a startup wed seed funded. then they heard a rival vc firm was also interested. they were so afraid that theyd be rejected in favor of this other firm that they gave the startup whats known as an "exploding termsheet." they had, i think, 24 hours to say yes or no, or the deal was off. exploding termsheets are a somewhat dubious device, but not uncommon. what surprised me was their reaction when i called to talk about it. i asked if theyd still be interested in the startup if the rival vc didnt end up making an offer, and they said no. what rational basis could they have had for saying that? if they thought the startup was worth investing in, what difference should it make what some other vc thought? surely it was their duty to their limited partners simply to invest in the best opportunities they found; they should be delighted if the other vc said no, because it would mean theyd overlooked a good opportunity. but of course there was no rational basis for their decision. they just couldnt stand the idea of taking this rival firms rejects. in this case the exploding termsheet was not (or not only) a tactic to pressure the startup. it was more like the high school trick of breaking up with someone before they can break up with you. in an earlier essay i said that vcs were a lot like high school girls. a few vcs have joked about that characterization, but none have disputed it. most deals, for investment or acquisition, happen in two phases. theres an initial phase of negotiation about the big questions. if this succeeds you get a termsheet, so called because it outlines the key terms of a deal. a termsheet is not legally binding, but it is a definite step. its supposed to mean that a deal is going to happen, once the lawyers work out all the details. in theory these details are minor ones; by definition all the important points are supposed to be covered in the termsheet. inexperience and wishful thinking combine to make founders feel that when they have a termsheet, they have a deal. they want there to be a deal; everyone acts like they have a deal; so there must be a deal. but there isnt and may not be for several months. a lot can change for a startup in several months. its not uncommon for investors and acquirers to get buyers remorse. so you have to keep pushing, keep selling, all the way to the close. otherwise all the "minor" details left unspecified in the termsheet will be interpreted to your disadvantage. the other side may even break the deal; if they do that, theyll usually seize on some technicality or claim you misled them, rather than admitting they changed their minds. it can be hard to keep the pressure on an investor or acquirer all the way to the closing, because the most effective pressure is competition from other investors or acquirers, and these tend to drop away when you get a termsheet. you should try to stay as close friends as you can with these rivals, but the most important thing is just to keep up the momentum in your startup. the investors or acquirers chose you because you seemed hot. keep doing whatever made you seem hot. keep releasing new features; keep getting new users; keep getting mentioned in the press and in blogs. ive been surprised how willing investors are to split deals. you might think that if they found a good deal theyd want it all to themselves, but they seem positively eager to syndicate. this is understandable with angels; they invest on a smaller scale and dont like to have too much money tied up in any one deal. but vcs also share deals a lot. why? partly i think this is an artifact of the rule i quoted earlier: after traffic, vcs care most what other vcs think. a deal that has multiple vcs interested in it is more likely to close, so of deals that close, more will have multiple investors. there is one rational reason to want multiple vcs in a deal: any investor who co-invests with you is one less investor who could fund a competitor. apparently kleiner and sequoia didnt like splitting the google deal, but it did at least have the advantage, from each ones point of view, that there probably wouldnt be a competitor funded by the other. splitting deals thus has similar advantages to confusing paternity. but i think the main reason vcs like splitting deals is the fear of looking bad. if another firm shares the deal, then in the event of failure it will seem to have been a prudent choicea consensus decision, rather than just the whim of an individual partner. investing is not covered by antitrust law. at least, it better not be, because investors regularly do things that would be illegal otherwise. i know personally of cases where one investor has talked another out of making a competitive offer, using the promise of sharing future deals. in principle investors are all competing for the same deals, but the spirit of cooperation is stronger than the spirit of competition. the reason, again, is that there are so many deals. though a professional investor may have a closer relationship with a founder he invests in than with other investors, his relationship with the founder is only going to last a couple years, whereas his relationship with other firms will last his whole career. there isnt so much at stake in his interactions with other investors, but there will be a lot of them. professional investors are constantly trading little favors. another reason investors stick together is to preserve the power of investors as a whole. so you will not, as of this writing, be able to get investors into an auction for your series a round. theyd rather lose the deal than establish a precedent of vcs competitively bidding against one another. an efficient startup funding market may be coming in the distant future; things tend to move in that direction; but its certainly not here now. the reason startups work so well is that everyone with power also has equity. the only way any of them can succeed is if they all do. this makes everyone naturally pull in the same direction, subject to differences of opinion about tactics. the problem is, larger scale investors dont have exactly the same motivation. close, but not identical. they dont need any given startup to succeed, like founders do, just their portfolio as a whole to. so in borderline cases the rational thing for them to do is to sacrifice unpromising startups. large-scale investors tend to put startups in three categories: successes, failures, and the "living dead"companies that are plugging along but dont seem likely in the immediate future to get bought or go public. to the founders, "living dead" sounds harsh. these companies may be far from failures by ordinary standards. but they might as well be from a venture investors point of view, and they suck up just as much time and attention as the successes. so if such a company has two possible strategies, a conservative one thats slightly more likely to work in the end, or a risky one that within a short time will either yield a giant success or kill the company, vcs will push for the kill-or-cure option. to them the company is already a write-off. better to have resolution, one way or the other, as soon as possible. if a startup gets into real trouble, instead of trying to save it vcs may just sell it at a low price to another of their portfolio companies. philip greenspun said in founders at work that ars digitas vcs did this to them. most people would rather a 100% chance of $1 million than a 20% chance of $10 million. investors are rich enough to be rational and prefer the latter. so theyll always tend to encourage founders to keep rolling the dice. if a company is doing well, investors will want founders to turn down most acquisition offers. and indeed, most startups that turn down acquisition offers ultimately do better. but its still hair-raising for the founders, because they might end up with nothing. when someones offering to buy you for a price at which your stock is worth $5 million, saying no is equivalent to having $5 million and betting it all on one spin of the roulette wheel. investors will tell you the company is worth more. and they may be right. but that doesnt mean its wrong to sell. any financial advisor who put all his clients assets in the stock of a single, private company would probably lose his license for it. more and more, investors are letting founders cash out partially. that should correct the problem. most founders have such low standards that theyll feel rich with a sum that doesnt seem huge to investors. but this custom is spreading too slowly, because vcs are afraid of seeming irresponsible. no one wants to be the first vc to give someone fuck-you money and then actually get told "fuck you." but until this does start to happen, we know vcs are being too conservative. back when i was a founder i used to think all vcs were the same. and in fact they do all look the same. theyre all what hackers call "suits." but since ive been dealing with vcs more ive learned that some suits are smarter than others. theyre also in a business where winners tend to keep winning and losers to keep losing. when a vc firm has been successful in the past, everyone wants funding from them, so they get the pick of all the new deals. the self-reinforcing nature of the venture funding market means that the top ten firms live in a completely different world from, say, the hundredth. as well as being smarter, they tend to be calmer and more upstanding; they dont need to do iffy things to get an edge, and dont want to because they have more brand to protect. there are only two kinds of vcs you want to take money from, if you have the luxury of choosing: the "top tier" vcs, meaning about the top 20 or so firms, plus a few new ones that are not among the top 20 only because they havent been around long enough. its particularly important to raise money from a top firm if youre a hacker, because theyre more confident. that means theyre less likely to stick you with a business guy as ceo, like vcs used to do in the 90s. if you seem smart and want to do it, theyll let you run the company. raising money is a huge time suck at just the point where startups can least afford it. its not unusual for it to take five or six months to close a funding round. six weeks is fast. and raising money is not just something you can leave running as a background process. when youre raising money, its inevitably the main focus of the company. which means building the product isnt. suppose a y combinator company starts talking to vcs after demo day, and is successful in raising money from them, closing the deal after a comparatively short 8 weeks. since demo day occurs after 10 weeks, the company is now 18 weeks old. raising money, rather than working on the product, has been the companys main focus for 44% of its existence. and mind you, this an example where things turned out well . when a startup does return to working on the product after a funding round finally closes, its as if they were returning to work after a months-long illness. theyve lost most of their momentum. investors have no idea how much they damage the companies they invest in by taking so long to do it. but companies do. so there is a big opportunity here for a new kind of venture fund that invests smaller amounts at lower valuations, but promises to either close or say no very quickly. if there were such a firm, id recommend it to startups in preference to any other, no matter how prestigious. startups live on speed and momentum. the reason funding deals take so long to close is mainly that investors cant make up their minds. vcs are not big companies; they can do a deal in 24 hours if they need to. but they usually let the initial meetings stretch out over a couple weeks. the reason is the selection algorithm i mentioned earlier. most dont try to predict whether a startup will win, but to notice quickly that it already is winning. they care what the market thinks of you and what other vcs think of you, and they cant judge those just from meeting you. because theyre investing in things that (a) change fast and (b) they dont understand, a lot of investors will reject you in a way that can later be claimed not to have been a rejection. unless you know this world, you may not even realize youve been rejected. heres a vc saying no: were really excited about your project, and we want to keep in close touch as you develop it further. translated into more straightforward language, this means: were not investing in you, but we may change our minds if it looks like youre taking off. sometimes theyre more candid and say explicitly that they need to "see some traction." theyll invest in you if you start to get lots of users. but so would any vc. so all theyre saying is that youre still at square 1. heres a test for deciding whether a vcs response was yes or no. look down at your hands. are you holding a termsheet? some founders say "who needs investors?" empirically the answer seems to be: everyone who wants to succeed. practically every successful startup takes outside investment at some point. why? what the people who think they dont need investors forget is that they will have competitors. the question is not whether you need outside investment, but whether it could help you at all. if the answer is yes, and you dont take investment, then competitors who do will have an advantage over you. and in the startup world a little advantage can expand into a lot. mike moritz famously said that he invested in yahoo because he thought they had a few weeks lead over their competitors. that may not have mattered quite so much as he thought, because google came along three years later and kicked yahoos ass. but there is something in what he said. sometimes a small lead can grow into the yes half of a binary choice. maybe as it gets cheaper to start a startup, it will start to be possible to succeed in a competitive market without outside funding. there are certainly costs to raising money. but as of this writing the empirical evidence says its a net win. a lot of founders approach investors as if they needed their permission to start a companyas if it were like getting into college. but you dont need investors to start most companies; they just make it easier. and in fact, investors greatly prefer it if you dont need them. what excites them, both consciously and unconsciously, is the sort of startup that approaches them saying "the trains leaving the station; are you in or out?" not the one saying "please can we have some money to start a company?" most investors are "bottoms" in the sense that the startups they like most are those that are rough with them. when google stuck kleiner and sequoia with a $75 million premoney valuation, their reaction was probably "ouch! that feels so good." and they were right, werent they? that deal probably made them more than any other theyve done. the thing is, vcs are pretty good at reading people. so dont try to act tough with them unless you really are the next google, or theyll see through you in a second. instead of acting tough, what most startups should do is simply always have a backup plan. always have some alternative plan for getting started if any given investor says no. having one is the best insurance against needing one. so you shouldnt start a startup thats expensive to start, because then youll be at the mercy of investors. if you ultimately want to do something that will cost a lot, start by doing a cheaper subset of it, and expand your ambitions when and if you raise more money. apparently the most likely animals to be left alive after a nuclear war are cockroaches, because theyre so hard to kill. thats what you want to be as a startup, initially. instead of a beautiful but fragile flower that needs to have its stem in a plastic tube to support itself, better to be small, ugly, and indestructible.  i may be underestimating vcs. they may play some behind the scenes role in ipos, which you ultimately need if you want to create a silicon valley.  a few vcs have an email address you can send your business plan to, but the number of startups that get funded this way is basically zero. you should always get a personal introductionand to a partner, not an associate.  several people have told us that the most valuable thing about startup school was that they got to see famous startup founders and realized they were just ordinary guys. though were happy to provide this service, this is not generally the way we pitch startup school to potential speakers.  actually this sounds to me like a vc who got buyers remorse, then used a technicality to get out of the deal. but its telling that it even seemed a plausible excuse. thanks to sam altman, paul buchheit, hutch fishman, and robert morris for reading drafts of this, and to kenneth king of ases for inviting me to speak. comment on this essay. this essay was originally published at paulgraham.com there are two different ways people judge you. sometimes judging you correctly is the end goal. but theres a second much more common type of judgement where it isnt. we tend to regard all judgements of us as the first type. wed probably be happier if we realized which are and which arent. the first type of judgement, the type where judging you is the end goal, include court cases, grades in classes, and most competitions. such judgements can of course be mistaken, but because the goal is to judge you correctly, theres usually some kind of appeals process. if you feel youve been misjudged, you can protest that youve been treated unfairly. nearly all the judgements made on children are of this type, so we get into the habit early in life of thinking that all judgements are. but in fact there is a second much larger class of judgements where judging you is only a means to something else. these include college admissions, hiring and investment decisions, and of course the judgements made in dating. this kind of judgement is not really about you. put yourself in the position of someone selecting players for a national team. suppose for the sake of simplicity that this is a game with no positions, and that you have to select 20 players. there will be a few stars who clearly should make the team, and many players who clearly shouldnt. the only place your judgement makes a difference is in the borderline cases. suppose you screw up and underestimate the 20th best player, causing him not to make the team, and his place to be taken by the 21st best. youve still picked a good team. if the players have the usual distribution of ability, the 21st best player will be only slightly worse than the 20th best. probably the difference between them will be less than the measurement error. the 20th best player may feel he has been misjudged. but your goal here wasnt to provide a service estimating peoples ability. it was to pick a team, and if the difference between the 20th and 21st best players is less than the measurement error, youve still done that optimally. its a false analogy even to use the word unfair to describe this kind of misjudgement. its not aimed at producing a correct estimate of any given individual, but at selecting a reasonably optimal set. one thing that leads us astray here is that the selector seems to be in a position of power. that makes him seem like a judge. if you regard someone judging you as a customer instead of a judge, the expectation of fairness goes away. the author of a good novel wouldnt complain that readers were unfair for preferring a potboiler with a racy cover. stupid, perhaps, but not unfair. our early training and our self-centeredness combine to make us believe that every judgement of us is about us. in fact most arent. this is a rare case where being less self-centered will make people more confident. once you realize how little most people judging you care about judging you accuratelyonce you realize that because of the normal distribution of most applicant pools, it matters least to judge accurately in precisely the cases where judgement has the most effectyou wont take rejection so personally. and curiously enough, taking rejection less personally may help you to get rejected less often. if you think someone judging you will work hard to judge you correctly, you can afford to be passive. but the more you realize that most judgements are greatly influenced by random, extraneous factorsthat most people judging you are more like a fickle novel buyer than a wise and perceptive magistratethe more you realize you can do things to influence the outcome. one good place to apply this principle is in college applications. most high school students applying to college do it with the usual childs mix of inferiority and self-centeredness: inferiority in that they assume that admissions committees must be all-seeing; self-centeredness in that they assume admissions committees care enough about them to dig down into their application and figure out whether theyre good or not. these combine to make applicants passive in applying and hurt when theyre rejected. if college applicants realized how quick and impersonal most selection processes are, theyd make more effort to sell themselves, and take the outcome less personally. this essay was originally published at paulgraham.com a few days ago i suddenly realized microsoft was dead. i was talking to a young startup founder about how google was different from yahoo. i said that yahoo had been warped from the start by their fear of microsoft. that was why theyd positioned themselves as a "media company" instead of a technology company. then i looked at his face and realized he didnt understand. it was as if id told him how much girls liked barry manilow in the mid 80s. barry who? microsoft? he didnt say anything, but i could tell he didnt quite believe anyone would be frightened of them. microsoft cast a shadow over the software world for almost 20 years starting in the late 80s. i can remember when it was ibm before them. i mostly ignored this shadow. i never used microsoft software, so it only affected me indirectlyfor example, in the spam i got from botnets. and because i wasnt paying attention, i didnt notice when the shadow disappeared. but its gone now. i can sense that. no one is even afraid of microsoft anymore. they still make a lot of moneyso does ibm, for that matter. but theyre not dangerous. when did microsoft die, and of what? i know they seemed dangerous as late as 2001, because i wrote an essay then about how they were less dangerous than they seemed. id guess they were dead by 2005. i know when we started y combinator we didnt worry about microsoft as competition for the startups we funded. in fact, weve never even invited them to the demo days we organize for startups to present to investors. we invite yahoo and google and some other internet companies, but weve never bothered to invite microsoft. nor has anyone there ever even sent us an email. theyre in a different world. what killed them? four things, i think, all of them occurring simultaneously in the mid 2000s. the most obvious is google. there can only be one big man in town, and theyre clearly it. google is the most dangerous company now by far, in both the good and bad senses of the word. microsoft can at best limp along afterward. when did google take the lead? there will be a tendency to push it back to their ipo in august 2004, but they werent setting the terms of the debate then. id say they took the lead in 2005. gmail was one of the things that put them over the edge. gmail showed they could do more than search. gmail also showed how much you could do with web-based software, if you took advantage of what later came to be called "ajax." and that was the second cause of microsofts death: everyone can see the desktop is over. it now seems inevitable that applications will live on the webnot just email, but everything, right up to photoshop . even microsoft sees that now. ironically, microsoft unintentionally helped create ajax. the x in ajax is from the xmlhttprequest object, which lets the browser communicate with the server in the background while displaying a page. (originally the only way to communicate with the server was to ask for a new page.) xmlhttprequest was created by microsoft in the late 90s because they needed it for outlook. what they didnt realize was that it would be useful to a lot of other people tooin fact, to anyone who wanted to make web apps work like desktop ones. the other critical component of ajax is javascript, the programming language that runs in the browser. microsoft saw the danger of javascript and tried to keep it broken for as long as they could.  but eventually the open source world won, by producing javascript libraries that grew over the brokenness of explorer the way a tree grows over barbed wire. the third cause of microsofts death was broadband internet. anyone who cares can have fast internet access now. and the bigger the pipe to the server, the less you need the desktop. the last nail in the coffin came, of all places, from apple. thanks to os x, apple has come back from the dead in a way that is extremely rare in technology.  their victory is so complete that im now surprised when i come across a computer running windows. nearly all the people we fund at y combinator use apple laptops. it was the same in the audience at startup school . all the computer people use macs or linux now. windows is for grandmas, like macs used to be in the 90s. so not only does the desktop no longer matter, no one who cares about computers uses microsofts anyway. and of course apple has microsoft on the run in music too, with tv and phones on the way. im glad microsoft is dead. they were like nero or commodusevil in the way only inherited power can make you. because remember, the microsoft monopoly didnt begin with microsoft. they got it from ibm. the software business was overhung by a monopoly from about the mid-1950s to about 2005. for practically its whole existence, that is. one of the reasons "web 2.0" has such an air of euphoria about it is the feeling, conscious or not, that this era of monopoly may finally be over. of course, as a hacker i cant help thinking about how something broken could be fixed. is there some way microsoft could come back? in principle, yes. to see how, envision two things: (a) the amount of cash microsoft now has on hand, and (b) larry and sergey making the rounds of all the search engines ten years ago trying to sell the idea for google for a million dollars, and being turned down by everyone. the surprising fact is, brilliant hackersdangerously brilliant hackerscan be had very cheaply, by the standards of a company as rich as microsoft. they cant hire smart people anymore, but they could buy as many as they wanted for only an order of magnitude more. so if they wanted to be a contender again, this is how they could do it: buy all the good "web 2.0" startups. they could get substantially all of them for less than theyd have to pay for facebook. put them all in a building in silicon valley, surrounded by lead shielding to protect them from any contact with redmond. i feel safe suggesting this, because theyd never do it. microsofts biggest weakness is that they still dont realize how much they suck. they still think they can write software in house. maybe they can, by the standards of the desktop world. but that world ended a few years ago. i already know what the reaction to this essay will be. half the readers will say that microsoft is still an enormously profitable company, and that i should be more careful about drawing conclusions based on what a few people think in our insular little "web 2.0" bubble. the other half, the younger half, will complain that this is old news. see also: microsoft is dead: the cliffs notes  it doesnt take a conscious effort to make software incompatible. all you have to do is not work too hard at fixing bugswhich, if youre a big company, you produce in copious quantities. the situation is analogous to the writing of " literary theorists ." most dont try to be obscure; they just dont make an effort to be clear. it wouldnt pay.  in part because steve jobs got pushed out by john sculley in a way thats rare among technology companies. if apples board hadnt made that blunder, they wouldnt have had to bounce back. this essay was originally published at paulgraham.com (this essay is derived from talks at the 2007 startup school and the berkeley csua.) weve now been doing y combinator long enough to have some data about success rates. our first batch, in the summer of 2005, had eight startups in it. of those eight, it now looks as if at least four succeeded. three have been acquired: reddit was a merger of two, reddit and infogami, and a third was acquired that we cant talk about yet. another from that batch was loopt , which is doing so well they could probably be acquired in about ten minutes if they wanted to. so about half the founders from that first summer, less than two years ago, are now rich, at least by their standards. (one thing you learn when you get rich is that there are many degrees of it.) im not ready to predict our success rate will stay as high as 50%. that first batch could have been an anomaly. but we should be able to do better than the oft-quoted (and probably made up) standard figure of 10%. id feel safe aiming at 25%. even the founders who fail dont seem to have such a bad time. of those first eight startups, three are now probably dead. in two cases the founders just went on to do other things at the end of the summer. i dont think they were traumatized by the experience. the closest to a traumatic failure was kiko, whose founders kept working on their startup for a whole year before being squashed by google calendar. but they ended up happy. they sold their software on ebay for a quarter of a million dollars. after they paid back their angel investors, they had about a years salary each.  then they immediately went on to start a new and much more exciting startup, justin.tv . so here is an even more striking statistic: 0% of that first batch had a terrible experience. they had ups and downs, like every startup, but i dont think any would have traded it for a job in a cubicle. and that statistic is probably not an anomaly. whatever our long-term success rate ends up being, i think the rate of people who wish theyd gotten a regular job will stay close to 0%. the big mystery to me is: why dont more people start startups? if nearly everyone who does it prefers it to a regular job, and a significant percentage get rich, why doesnt everyone want to do this? a lot of people think we get thousands of applications for each funding cycle. in fact we usually only get several hundred. why dont more people apply? and while it must seem to anyone watching this world that startups are popping up like crazy, the number is small compared to the number of people with the necessary skills. the great majority of programmers still go straight from college to cubicle, and stay there. it seems like people are not acting in their own interest. whats going on? well, i can answer that. because of y combinators position at the very start of the venture funding process, were probably the worlds leading experts on the psychology of people who arent sure if they want to start a company. theres nothing wrong with being unsure. if youre a hacker thinking about starting a startup and hesitating before taking the leap, youre part of a grand tradition. larry and sergey seem to have felt the same before they started google, and so did jerry and filo before they started yahoo. in fact, id guess the most successful startups are the ones started by uncertain hackers rather than gung-ho business guys. we have some evidence to support this. several of the most successful startups weve funded told us later that they only decided to apply at the last moment. some decided only hours before the deadline. the way to deal with uncertainty is to analyze it into components. most people who are reluctant to do something have about eight different reasons mixed together in their heads, and dont know themselves which are biggest. some will be justified and some bogus, but unless you know the relative proportion of each, you dont know whether your overall uncertainty is mostly justified or mostly bogus. so im going to list all the components of peoples reluctance to start startups, and explain which are real. then would-be founders can use this as a checklist to examine their own feelings. i admit my goal is to increase your self-confidence. but there are two things different here from the usual confidence-building exercise. one is that im motivated to be honest. most people in the confidence-building business have already achieved their goal when you buy the book or pay to attend the seminar where they tell you how great you are. whereas if i encourage people to start startups who shouldnt, i make my own life worse. if i encourage too many people to apply to y combinator, it just means more work for me, because i have to read all the applications. the other thing thats going to be different is my approach. instead of being positive, im going to be negative. instead of telling you "come on, you can do it" im going to consider all the reasons you arent doing it, and show why most (but not all) should be ignored. well start with the one everyones born with. a lot of people think theyre too young to start a startup. many are right. the median age worldwide is about 27, so probably a third of the population can truthfully say theyre too young. whats too young? one of our goals with y combinator was to discover the lower bound on the age of startup founders. it always seemed to us that investors were too conservative herethat they wanted to fund professors, when really they should be funding grad students or even undergrads. the main thing weve discovered from pushing the edge of this envelope is not where the edge is, but how fuzzy it is. the outer limit may be as low as 16. we dont look beyond 18 because people younger than that cant legally enter into contracts. but the most successful founder weve funded so far, sam altman, was 19 at the time. sam altman, however, is an outlying data point. when he was 19, he seemed like he had a 40 year old inside him. there are other 19 year olds who are 12 inside. theres a reason we have a distinct word "adult" for people over a certain age. there is a threshold you cross. its conventionally fixed at 21, but different people cross it at greatly varying ages. youre old enough to start a startup if youve crossed this threshold, whatever your age. how do you tell? there are a couple tests adults use. i realized these tests existed after meeting sam altman, actually. i noticed that i felt like i was talking to someone much older. afterward i wondered, what am i even measuring? what made him seem older? one test adults use is whether you still have the kid flake reflex. when youre a little kid and youre asked to do something hard, you can cry and say "i cant do it" and the adults will probably let you off. as a kid theres a magic button you can press by saying "im just a kid" that will get you out of most difficult situations. whereas adults, by definition, are not allowed to flake. they still do, of course, but when they do theyre ruthlessly pruned. the other way to tell an adult is by how they react to a challenge. someone whos not yet an adult will tend to respond to a challenge from an adult in a way that acknowledges their dominance. if an adult says "thats a stupid idea," a kid will either crawl away with his tail between his legs, or rebel. but rebelling presumes inferiority as much as submission. the adult response to "thats a stupid idea," is simply to look the other person in the eye and say "really? why do you think so?" there are a lot of adults who still react childishly to challenges, of course. what you dont often find are kids who react to challenges like adults. when you do, youve found an adult, whatever their age. i once wrote that startup founders should be at least 23, and that people should work for another company for a few years before starting their own. i no longer believe that, and what changed my mind is the example of the startups weve funded. i still think 23 is a better age than 21. but the best way to get experience if youre 21 is to start a startup. so, paradoxically, if youre too inexperienced to start a startup, what you should do is start one. thats a way more efficient cure for inexperience than a normal job. in fact, getting a normal job may actually make you less able to start a startup, by turning you into a tame animal who thinks he needs an office to work in and a product manager to tell him what software to write. what really convinced me of this was the kikos. they started a startup right out of college. their inexperience caused them to make a lot of mistakes. but by the time we funded their second startup, a year later, they had become extremely formidable. they were certainly not tame animals. and there is no way theyd have grown so much if theyd spent that year working at microsoft, or even google. theyd still have been diffident junior programmers. so now id advise people to go ahead and start startups right out of college. theres no better time to take risks than when youre young. sure, youll probably fail. but even failure will get you to the ultimate goal faster than getting a job. it worries me a bit to be saying this, because in effect were advising people to educate themselves by failing at our expense, but its the truth. you need a lot of determination to succeed as a startup founder. its probably the single best predictor of success. some people may not be determined enough to make it. its hard for me to say for sure, because im so determined that i cant imagine whats going on in the heads of people who arent. but i know they exist. most hackers probably underestimate their determination. ive seen a lot become visibly more determined as they get used to running a startup. i can think of several weve funded who would have been delighted at first to be bought for $2 million, but are now set on world domination. how can you tell if youre determined enough, when larry and sergey themselves were unsure at first about starting a company? im guessing here, but id say the test is whether youre sufficiently driven to work on your own projects. though they may have been unsure whether they wanted to start a company, it doesnt seem as if larry and sergey were meek little research assistants, obediently doing their advisors bidding. they started projects of their own. you may need to be moderately smart to succeed as a startup founder. but if youre worried about this, youre probably mistaken. if youre smart enough to worry that you might not be smart enough to start a startup, you probably are. and in any case, starting a startup just doesnt require that much intelligence. some startups do. you have to be good at math to write mathematica. but most companies do more mundane stuff where the decisive factor is effort, not brains. silicon valley can warp your perspective on this, because theres a cult of smartness here. people who arent smart at least try to act that way. but if you think it takes a lot of intelligence to get rich, try spending a couple days in some of the fancier bits of new york or la. if you dont think youre smart enough to start a startup doing something technically difficult, just write enterprise software. enterprise software companies arent technology companies, theyre sales companies, and sales depends mostly on effort. this is another variable whose coefficient should be zero. you dont need to know anything about business to start a startup. the initial focus should be the product. all you need to know in this phase is how to build things people want. if you succeed, youll have to think about how to make money from it. but this is so easy you can pick it up on the fly. i get a fair amount of flak for telling founders just to make something great and not worry too much about making money. and yet all the empirical evidence points that way: pretty much 100% of startups that make something popular manage to make money from it. and acquirers tell me privately that revenue is not what they buy startups for, but their strategic value. which means, because they made something people want. acquirers know the rule holds for them too: if users love you, you can always make money from that somehow, and if they dont, the cleverest business model in the world wont save you. so why do so many people argue with me? i think one reason is that they hate the idea that a bunch of twenty year olds could get rich from building something cool that doesnt make any money. they just dont want that to be possible. but how possible it is doesnt depend on how much they want it to be. for a while it annoyed me to hear myself described as some kind of irresponsible pied piper, leading impressionable young hackers down the road to ruin. but now i realize this kind of controversy is a sign of a good idea. the most valuable truths are the ones most people dont believe. theyre like undervalued stocks. if you start with them, youll have the whole field to yourself. so when you find an idea you know is good but most people disagree with, you should not merely ignore their objections, but push aggressively in that direction. in this case, that means you should seek out ideas that would be popular but seem hard to make money from. well bet a seed round you cant make something popular that we cant figure out how to make money from. not having a cofounder is a real problem. a startup is too much for one person to bear. and though we differ from other investors on a lot of questions, we all agree on this. all investors, without exception, are more likely to fund you with a cofounder than without. weve funded two single founders, but in both cases we suggested their first priority should be to find a cofounder. both did. but wed have preferred them to have cofounders before they applied. its not super hard to get a cofounder for a project thats just been funded, and wed rather have cofounders committed enough to sign up for something super hard. if you dont have a cofounder, what should you do? get one. its more important than anything else. if theres no one where you live who wants to start a startup with you, move where there are people who do. if no one wants to work with you on your current idea, switch to an idea people want to work on. if youre still in school, youre surrounded by potential cofounders. a few years out it gets harder to find them. not only do you have a smaller pool to draw from, but most already have jobs, and perhaps even families to support. so if you had friends in college you used to scheme about startups with, stay in touch with them as well as you can. that may help keep the dream alive. its possible you could meet a cofounder through something like a users group or a conference. but i wouldnt be too optimistic. you need to work with someone to know whether you want them as a cofounder.  the real lesson to draw from this is not how to find a cofounder, but that you should start startups when youre young and there are lots of them around. in a sense, its not a problem if you dont have a good idea, because most startups change their idea anyway. in the average y combinator startup, id guess 70% of the idea is new at the end of the first three months. sometimes its 100%. in fact, were so sure the founders are more important than the initial idea that were going to try something new this funding cycle. were going to let people apply with no idea at all. if you want, you can answer the question on the application form that asks what youre going to do with "we have no idea." if you seem really good well accept you anyway. were confident we can sit down with you and cook up some promising project. really this just codifies what we do already. we put little weight on the idea. we ask mainly out of politeness. the kind of question on the application form that we really care about is the one where we ask what cool things youve made. if what youve made is version one of a promising startup, so much the better, but the main thing we care about is whether youre good at making things. being lead developer of a popular open source project counts almost as much. that solves the problem if you get funded by y combinator. what about in the general case? because in another sense, it is a problem if you dont have an idea. if you start a startup with no idea, what do you do next? so heres the brief recipe for getting startup ideas. find something thats missing in your own life, and supply that needno matter how specific to you it seems. steve wozniak built himself a computer; who knew so many other people would want them? a need thats narrow but genuine is a better starting point than one thats broad but hypothetical. so even if the problem is simply that you dont have a date on saturday night, if you can think of a way to fix that by writing software, youre onto something, because a lot of other people have the same problem. a lot of people look at the ever-increasing number of startups and think "this cant continue." implicit in their thinking is a fallacy: that there is some limit on the number of startups there could be. but this is false. no one claims theres any limit on the number of people who can work for salary at 1000-person companies. why should there be any limit on the number who can work for equity at 5-person companies?  nearly everyone who works is satisfying some kind of need. breaking up companies into smaller units doesnt make those needs go away. existing needs would probably get satisfied more efficiently by a network of startups than by a few giant, hierarchical organizations, but i dont think that would mean less opportunity, because satisfying current needs would lead to more. certainly this tends to be the case in individuals. nor is there anything wrong with that. we take for granted things that medieval kings would have considered effeminate luxuries, like whole buildings heated to spring temperatures year round. and if things go well, our descendants will take for granted things we would consider shockingly luxurious. there is no absolute standard for material wealth. health care is a component of it, and that alone is a black hole. for the foreseeable future, people will want ever more material wealth, so there is no limit to the amount of work available for companies, and for startups in particular. usually the limited-room fallacy is not expressed directly. usually its implicit in statements like "there are only so many startups google, microsoft, and yahoo can buy." maybe, though the list of acquirers is a lot longer than that. and whatever you think of other acquirers, google is not stupid. the reason big companies buy startups is that theyve created something valuable. and why should there be any limit to the number of valuable startups companies can acquire, any more than there is a limit to the amount of wealth individual people want? maybe there would be practical limits on the number of startups any one acquirer could assimilate, but if there is value to be had, in the form of upside that founders are willing to forgo in return for an immediate payment, acquirers will evolve to consume it. markets are pretty smart that way. this one is real. i wouldnt advise anyone with a family to start a startup. im not saying its a bad idea, just that i dont want to take responsibility for advising it. im willing to take responsibility for telling 22 year olds to start startups. so what if they fail? theyll learn a lot, and that job at microsoft will still be waiting for them if they need it. but im not prepared to cross moms. what you can do, if you have a family and want to start a startup, is start a consulting business you can then gradually turn into a product business. empirically the chances of pulling that off seem very small. youre never going to produce google this way. but at least youll never be without an income. another way to decrease the risk is to join an existing startup instead of starting your own. being one of the first employees of a startup is a lot like being a founder, in both the good ways and the bad. youll be roughly 1/n2 founder, where n is your employee number. as with the question of cofounders, the real lesson here is to start startups when youre young. this is my excuse for not starting a startup. startups are stressful. why do it if you dont need the money? for every "serial entrepreneur," there are probably twenty sane ones who think "start another company? are you crazy?" ive come close to starting new startups a couple times, but i always pull back because i dont want four years of my life to be consumed by random schleps. i know this business well enough to know you cant do it half-heartedly. what makes a good startup founder so dangerous is his willingness to endure infinite schleps. there is a bit of a problem with retirement, though. like a lot of people, i like to work. and one of the many weird little problems you discover when you get rich is that a lot of the interesting people youd like to work with are not rich. they need to work at something that pays the bills. which means if you want to have them as colleagues, you have to work at something that pays the bills too, even though you dont need to. i think this is what drives a lot of serial entrepreneurs, actually. thats why i love working on y combinator so much. its an excuse to work on something interesting with people i like. this was my reason for not starting a startup for most of my twenties. like a lot of people that age, i valued freedom most of all. i was reluctant to do anything that required a commitment of more than a few months. nor would i have wanted to do anything that completely took over my life the way a startup does. and thats fine. if you want to spend your time travelling around, or playing in a band, or whatever, thats a perfectly legitimate reason not to start a company. if you start a startup that succeeds, its going to consume at least three or four years. (if it fails, youll be done a lot quicker.) so you shouldnt do it if youre not ready for commitments on that scale. be aware, though, that if you get a regular job, youll probably end up working there for as long as a startup would take, and youll find you have much less spare time than you might expect. so if youre ready to clip on that id badge and go to that orientation session, you may also be ready to start that startup. im told there are people who need structure in their lives. this seems to be a nice way of saying they need someone to tell them what to do. i believe such people exist. theres plenty of empirical evidence: armies, religious cults, and so on. they may even be the majority. if youre one of these people, you probably shouldnt start a startup. in fact, you probably shouldnt even go to work for one. in a good startup, you dont get told what to do very much. there may be one person whose job title is ceo, but till the company has about twelve people no one should be telling anyone what to do. thats too inefficient. each person should just do what they need to without anyone telling them. if that sounds like a recipe for chaos, think about a soccer team. eleven people manage to work together in quite complicated ways, and yet only in occasional emergencies does anyone tell anyone else what to do. a reporter once asked david beckham if there were any language problems at real madrid, since the players were from about eight different countries. he said it was never an issue, because everyone was so good they never had to talk. they all just did the right thing. how do you tell if youre independent-minded enough to start a startup? if youd bristle at the suggestion that you arent, then you probably are. perhaps some people are deterred from starting startups because they dont like the uncertainty. if you go to work for microsoft, you can predict fairly accurately what the next few years will be likeall too accurately, in fact. if you start a startup, anything might happen. well, if youre troubled by uncertainty, i can solve that problem for you: if you start a startup, it will probably fail. seriously, though, this is not a bad way to think about the whole experience. hope for the best, but expect the worst. in the worst case, it will at least be interesting. in the best case you might get rich. no one will blame you if the startup tanks, so long as you made a serious effort. there may once have been a time when employers would regard that as a mark against you, but they wouldnt now. i asked managers at big companies, and they all said theyd prefer to hire someone whod tried to start a startup and failed over someone whod spent the same time working at a big company. nor will investors hold it against you, as long as you didnt fail out of laziness or incurable stupidity. im told theres a lot of stigma attached to failing in other placesin europe, for example. not here. in america, companies, like practically everything else, are disposable. one reason people whove been out in the world for a year or two make better founders than people straight from college is that they know what theyre avoiding. if their startup fails, theyll have to get a job, and they know how much jobs suck. if youve had summer jobs in college, you may think you know what jobs are like, but you probably dont. summer jobs at technology companies are not real jobs. if you get a summer job as a waiter, thats a real job. then you have to carry your weight. but software companies dont hire students for the summer as a source of cheap labor. they do it in the hope of recruiting them when they graduate. so while theyre happy if you produce, they dont expect you to. that will change if you get a real job after you graduate. then youll have to earn your keep. and since most of what big companies do is boring, youre going to have to work on boring stuff. easy, compared to college, but boring. at first it may seem cool to get paid for doing easy stuff, after paying to do hard stuff in college. but that wears off after a few months. eventually it gets demoralizing to work on dumb stuff, even if its easy and you get paid a lot. and thats not the worst of it. the thing that really sucks about having a regular job is the expectation that youre supposed to be there at certain times. even google is afflicted with this, apparently. and what this means, as everyone whos had a regular job can tell you, is that there are going to be times when you have absolutely no desire to work on anything, and youre going to have to go to work anyway and sit in front of your screen and pretend to. to someone who likes work, as most good hackers do, this is torture. in a startup, you skip all that. theres no concept of office hours in most startups. work and life just get mixed together. but the good thing about that is that no one minds if you have a life at work. in a startup you can do whatever you want most of the time. if youre a founder, what you want to do most of the time is work. but you never have to pretend to. if you took a nap in your office in a big company, it would seem unprofessional. but if youre starting a startup and you fall asleep in the middle of the day, your cofounders will just assume you were tired. a significant number of would-be startup founders are probably dissuaded from doing it by their parents. im not going to say you shouldnt listen to them. families are entitled to their own traditions, and who am i to argue with them? but i will give you a couple reasons why a safe career might not be what your parents really want for you. one is that parents tend to be more conservative for their kids than they would be for themselves. this is actually a rational response to their situation. parents end up sharing more of their kids ill fortune than good fortune. most parents dont mind this; its part of the job; but it does tend to make them excessively conservative. and erring on the side of conservatism is still erring. in almost everything, reward is proportionate to risk. so by protecting their kids from risk, parents are, without realizing it, also protecting them from rewards. if they saw that, theyd want you to take more risks. the other reason parents may be mistaken is that, like generals, theyre always fighting the last war. if they want you to be a doctor, odds are its not just because they want you to help the sick, but also because its a prestigious and lucrative career.  but not so lucrative or prestigious as it was when their opinions were formed. when i was a kid in the seventies, a doctor was the thing to be. there was a sort of golden triangle involving doctors, mercedes 450sls, and tennis. all three vertices now seem pretty dated. the parents who want you to be a doctor may simply not realize how much things have changed. would they be that unhappy if you were steve jobs instead? so i think the way to deal with your parents opinions about what you should do is to treat them like feature requests. even if your only goal is to please them, the way to do that is not simply to give them what they ask for. instead think about why theyre asking for something, and see if theres a better way to give them what they need. this leads us to the last and probably most powerful reason people get regular jobs: its the default thing to do. defaults are enormously powerful, precisely because they operate without any conscious choice. to almost everyone except criminals, it seems an axiom that if you need money, you should get a job. actually this tradition is not much more than a hundred years old. before that, the default way to make a living was by farming. its a bad plan to treat something only a hundred years old as an axiom. by historical standards, thats something thats changing pretty rapidly. we may be seeing another such change right now. ive read a lot of economic history, and i understand the startup world pretty well, and it now seems to me fairly likely that were seeing the beginning of a change like the one from farming to manufacturing. and you know what? if youd been around when that change began (around 1000 in europe) it would have seemed to nearly everyone that running off to the city to make your fortune was a crazy thing to do. though serfs were in principle forbidden to leave their manors, it cant have been that hard to run away to a city. there were no guards patrolling the perimeter of the village. what prevented most serfs from leaving was that it seemed insanely risky. leave ones plot of land? leave the people youd spent your whole life with, to live in a giant city of three or four thousand complete strangers? how would you live? how would you get food, if you didnt grow it? frightening as it seemed to them, its now the default with us to live by our wits. so if it seems risky to you to start a startup, think how risky it once seemed to your ancestors to live as we do now. oddly enough, the people who know this best are the very ones trying to get you to stick to the old model. how can larry and sergey say you should come work as their employee, when they didnt get jobs themselves? now we look back on medieval peasants and wonder how they stood it. how grim it must have been to till the same fields your whole life with no hope of anything better, under the thumb of lords and priests you had to give all your surplus to and acknowledge as your masters. i wouldnt be surprised if one day people look back on what we consider a normal job in the same way. how grim it would be to commute every day to a cubicle in some soulless office complex, and be told what to do by someone you had to acknowledge as a bosssomeone who could call you into their office and say "take a seat," and youd sit! imagine having to ask permission to release software to users. imagine being sad on sunday afternoons because the weekend was almost over, and tomorrow youd have to get up and go to work. how did they stand it? its exciting to think we may be on the cusp of another shift like the one from farming to manufacturing. thats why i care about startups. startups arent interesting just because theyre a way to make a lot of money. i couldnt care less about other ways to do that, like speculating in securities. at most those are interesting the way puzzles are. theres more going on with startups. they may represent one of those rare, historic shifts in the way wealth is created. thats ultimately what drives us to work on y combinator. we want to make money, if only so we dont have to stop doing it, but thats not the main goal. there have only been a handful of these great economic shifts in human history. it would be an amazing hack to make one happen faster.  the only people who lost were us. the angels had convertible debt, so they had first claim on the proceeds of the auction. y combinator only got 38 cents on the dollar.  the best kind of organization for that might be an open source project, but those dont involve a lot of face to face meetings. maybe it would be worth starting one that did.  there need to be some number of big companies to acquire the startups, so the number of big companies couldnt decrease to zero.  thought experiment: if doctors did the same work, but as impoverished outcasts, which parents would still want their kids to be doctors? thanks to trevor blackwell, jessica livingston, and robert morris for reading drafts of this, to the founders of zenter for letting me use their web-based powerpoint killer even though it isnt launched yet, and to ming-hay luk of the berkeley csua for inviting me to speak. comment on this essay. this essay was originally published at paulgraham.com a few days ago i finally figured out something ive wondered about for 25 years: the relationship between wisdom and intelligence. anyone can see theyre not the same by the number of people who are smart, but not very wise. and yet intelligence and wisdom do seem related. how? what is wisdom? id say its knowing what to do in a lot of situations. im not trying to make a deep point here about the true nature of wisdom, just to figure out how we use the word. a wise person is someone who usually knows the right thing to do. and yet isnt being smart also knowing what to do in certain situations? for example, knowing what to do when the teacher tells your elementary school class to add all the numbers from 1 to 100?  some say wisdom and intelligence apply to different types of problemswisdom to human problems and intelligence to abstract ones. but that isnt true. some wisdom has nothing to do with people: for example, the wisdom of the engineer who knows certain structures are less prone to failure than others. and certainly smart people can find clever solutions to human problems as well as abstract ones.  another popular explanation is that wisdom comes from experience while intelligence is innate. but people are not simply wise in proportion to how much experience they have. other things must contribute to wisdom besides experience, and some may be innate: a reflective disposition, for example. neither of the conventional explanations of the difference between wisdom and intelligence stands up to scrutiny. so what is the difference? if we look at how people use the words "wise" and "smart," what they seem to mean is different shapes of performance. "wise" and "smart" are both ways of saying someone knows what to do. the difference is that "wise" means one has a high average outcome across all situations, and "smart" means one does spectacularly well in a few. that is, if you had a graph in which the x axis represented situations and the y axis the outcome, the graph of the wise person would be high overall, and the graph of the smart person would have high peaks. the distinction is similar to the rule that one should judge talent at its best and character at its worst. except you judge intelligence at its best, and wisdom by its average. thats how the two are related: theyre the two different senses in which the same curve can be high. so a wise person knows what to do in most situations, while a smart person knows what to do in situations where few others could. we need to add one more qualification: we should ignore cases where someone knows what to do because they have inside information.  but aside from that, i dont think we can get much more specific without starting to be mistaken. nor do we need to. simple as it is, this explanation predicts, or at least accords with, both of the conventional stories about the distinction between wisdom and intelligence. human problems are the most common type, so being good at solving those is key in achieving a high average outcome. and it seems natural that a high average outcome depends mostly on experience, but that dramatic peaks can only be achieved by people with certain rare, innate qualities; nearly anyone can learn to be a good swimmer, but to be an olympic swimmer you need a certain body type. this explanation also suggests why wisdom is such an elusive concept: theres no such thing. "wise" means somethingthat one is on average good at making the right choice. but giving the name "wisdom" to the supposed quality that enables one to do that doesnt mean such a thing exists. to the extent "wisdom" means anything, it refers to a grab-bag of qualities as various as self-discipline, experience, and empathy.  likewise, though "intelligent" means something, were asking for trouble if we insist on looking for a single thing called "intelligence." and whatever its components, theyre not all innate. we use the word "intelligent" as an indication of ability: a smart person can grasp things few others could. it does seem likely theres some inborn predisposition to intelligence (and wisdom too), but this predisposition is not itself intelligence. one reason we tend to think of intelligence as inborn is that people trying to measure it have concentrated on the aspects of it that are most measurable. a quality thats inborn will obviously be more convenient to work with than one thats influenced by experience, and thus might vary in the course of a study. the problem comes when we drag the word "intelligence" over onto what theyre measuring. if theyre measuring something inborn, they cant be measuring intelligence. three year olds arent smart. when we describe one as smart, its shorthand for "smarter than other three year olds." perhaps its a technicality to point out that a predisposition to intelligence is not the same as intelligence. but its an important technicality, because it reminds us that we can become smarter, just as we can become wiser. the alarming thing is that we may have to choose between the two. if wisdom and intelligence are the average and peaks of the same curve, then they converge as the number of points on the curve decreases. if theres just one point, theyre identical: the average and maximum are the same. but as the number of points increases, wisdom and intelligence diverge. and historically the number of points on the curve seems to have been increasing: our ability is tested in an ever wider range of situations. in the time of confucius and socrates, people seem to have regarded wisdom, learning, and intelligence as more closely related than we do. distinguishing between "wise" and "smart" is a modern habit.  and the reason we do is that theyve been diverging. as knowledge gets more specialized, there are more points on the curve, and the distinction between the spikes and the average becomes sharper, like a digital image rendered with more pixels. one consequence is that some old recipes may have become obsolete. at the very least we have to go back and figure out if they were really recipes for wisdom or intelligence. but the really striking change, as intelligence and wisdom drift apart, is that we may have to decide which we prefer. we may not be able to optimize for both simultaneously. society seems to have voted for intelligence. we no longer admire the sagenot the way people did two thousand years ago. now we admire the genius. because in fact the distinction we began with has a rather brutal converse: just as you can be smart without being very wise, you can be wise without being very smart. that doesnt sound especially admirable. that gets you james bond, who knows what to do in a lot of situations, but has to rely on q for the ones involving math. intelligence and wisdom are obviously not mutually exclusive. in fact, a high average may help support high peaks. but there are reasons to believe that at some point you have to choose between them. one is the example of very smart people, who are so often unwise that in popular culture this now seems to be regarded as the rule rather than the exception. perhaps the absent-minded professor is wise in his way, or wiser than he seems, but hes not wise in the way confucius or socrates wanted people to be.  for both confucius and socrates, wisdom, virtue, and happiness were necessarily related. the wise man was someone who knew what the right choice was and always made it; to be the right choice, it had to be morally right; he was therefore always happy, knowing hed done the best he could. i cant think of many ancient philosophers who would have disagreed with that, so far as it goes. "the superior man is always happy; the small man sad," said confucius.  whereas a few years ago i read an interview with a mathematician who said that most nights he went to bed discontented, feeling he hadnt made enough progress.  the chinese and greek words we translate as "happy" didnt mean exactly what we do by it, but theres enough overlap that this remark contradicts them. is the mathematician a small man because hes discontented? no; hes just doing a kind of work that wasnt very common in confuciuss day. human knowledge seems to grow fractally. time after time, something that seemed a small and uninteresting areaexperimental error, eventurns out, when examined up close, to have as much in it as all knowledge up to that point. several of the fractal buds that have exploded since ancient times involve inventing and discovering new things. math, for example, used to be something a handful of people did part-time. now its the career of thousands. and in work that involves making new things, some old rules dont apply. recently ive spent some time advising people, and there i find the ancient rule still works: try to understand the situation as well as you can, give the best advice you can based on your experience, and then dont worry about it, knowing you did all you could. but i dont have anything like this serenity when im writing an essay. then im worried. what if i run out of ideas? and when im writing, four nights out of five i go to bed discontented, feeling i didnt get enough done. advising people and writing are fundamentally different types of work. when people come to you with a problem and you have to figure out the right thing to do, you dont (usually) have to invent anything. you just weigh the alternatives and try to judge which is the prudent choice. but prudence cant tell me what sentence to write next. the search space is too big. someone like a judge or a military officer can in much of his work be guided by duty, but duty is no guide in making things. makers depend on something more precarious: inspiration. and like most people who lead a precarious existence, they tend to be worried, not contented. in that respect theyre more like the small man of confuciuss day, always one bad harvest (or ruler) away from starvation. except instead of being at the mercy of weather and officials, theyre at the mercy of their own imagination. to me it was a relief just to realize it might be ok to be discontented. the idea that a successful person should be happy has thousands of years of momentum behind it. if i was any good, why didnt i have the easy confidence winners are supposed to have? but that, i now believe, is like a runner asking "if im such a good athlete, why do i feel so tired?" good runners still get tired; they just get tired at higher speeds. people whose work is to invent or discover things are in the same position as the runner. theres no way for them to do the best they can, because theres no limit to what they could do. the closest you can come is to compare yourself to other people. but the better you do, the less this matters. an undergrad who gets something published feels like a star. but for someone at the top of the field, whats the test of doing well? runners can at least compare themselves to others doing exactly the same thing; if you win an olympic gold medal, you can be fairly content, even if you think you could have run a bit faster. but what is a novelist to do? whereas if youre doing the kind of work in which problems are presented to you and you have to choose between several alternatives, theres an upper bound on your performance: choosing the best every time. in ancient societies, nearly all work seems to have been of this type. the peasant had to decide whether a garment was worth mending, and the king whether or not to invade his neighbor, but neither was expected to invent anything. in principle they could have; the king could have invented firearms, then invaded his neighbor. but in practice innovations were so rare that they werent expected of you, any more than goalkeepers are expected to score goals.  in practice, it seemed as if there was a correct decision in every situation, and if you made it youd done your job perfectly, just as a goalkeeper who prevents the other team from scoring is considered to have played a perfect game. in this world, wisdom seemed paramount.  even now, most people do work in which problems are put before them and they have to choose the best alternative. but as knowledge has grown more specialized, there are more and more types of work in which people have to make up new things, and in which performance is therefore unbounded. intelligence has become increasingly important relative to wisdom because there is more room for spikes. another sign we may have to choose between intelligence and wisdom is how different their recipes are. wisdom seems to come largely from curing childish qualities, and intelligence largely from cultivating them. recipes for wisdom, particularly ancient ones, tend to have a remedial character. to achieve wisdom one must cut away all the debris that fills ones head on emergence from childhood, leaving only the important stuff. both self-control and experience have this effect: to eliminate the random biases that come from your own nature and from the circumstances of your upbringing respectively. thats not all wisdom is, but its a large part of it. much of whats in the sages head is also in the head of every twelve year old. the difference is that in the head of the twelve year old its mixed together with a lot of random junk. the path to intelligence seems to be through working on hard problems. you develop intelligence as you might develop muscles, through exercise. but there cant be too much compulsion here. no amount of discipline can replace genuine curiosity. so cultivating intelligence seems to be a matter of identifying some bias in ones charactersome tendency to be interested in certain types of thingsand nurturing it. instead of obliterating your idiosyncrasies in an effort to make yourself a neutral vessel for the truth, you select one and try to grow it from a seedling into a tree. the wise are all much alike in their wisdom, but very smart people tend to be smart in distinctive ways. most of our educational traditions aim at wisdom. so perhaps one reason schools work badly is that theyre trying to make intelligence using recipes for wisdom. most recipes for wisdom have an element of subjection. at the very least, youre supposed to do what the teacher says. the more extreme recipes aim to break down your individuality the way basic training does. but thats not the route to intelligence. whereas wisdom comes through humility, it may actually help, in cultivating intelligence, to have a mistakenly high opinion of your abilities, because that encourages you to keep working. ideally till you realize how mistaken you were. (the reason its hard to learn new skills late in life is not just that ones brain is less malleable. another probably even worse obstacle is that one has higher standards.) i realize were on dangerous ground here. im not proposing the primary goal of education should be to increase students "self-esteem." that just breeds laziness. and in any case, it doesnt really fool the kids, not the smart ones. they can tell at a young age that a contest where everyone wins is a fraud. a teacher has to walk a narrow path: you want to encourage kids to come up with things on their own, but you cant simply applaud everything they produce. you have to be a good audience: appreciative, but not too easily impressed. and thats a lot of work. you have to have a good enough grasp of kids capacities at different ages to know when to be surprised. thats the opposite of traditional recipes for education. traditionally the student is the audience, not the teacher; the students job is not to invent, but to absorb some prescribed body of material. (the use of the term "recitation" for sections in some colleges is a fossil of this.) the problem with these old traditions is that theyre too much influenced by recipes for wisdom. i deliberately gave this essay a provocative title; of course its worth being wise. but i think its important to understand the relationship between intelligence and wisdom, and particularly what seems to be the growing gap between them. that way we can avoid applying rules and standards to intelligence that are really meant for wisdom. these two senses of "knowing what to do" are more different than most people realize. the path to wisdom is through discipline, and the path to intelligence through carefully selected self-indulgence. wisdom is universal, and intelligence idiosyncratic. and while wisdom yields calmness, intelligence much of the time leads to discontentment. thats particularly worth remembering. a physicist friend recently told me half his department was on prozac. perhaps if we acknowledge that some amount of frustration is inevitable in certain kinds of work, we can mitigate its effects. perhaps we can box it up and put it away some of the time, instead of letting it flow together with everyday sadness to produce what seems an alarmingly large pool. at the very least, we can avoid being discontented about being discontented. if you feel exhausted, its not necessarily because theres something wrong with you. maybe youre just running fast.  gauss was supposedly asked this when he was 10. instead of laboriously adding together the numbers like the other students, he saw that they consisted of 50 pairs that each summed to 101 (100 + 1, 99 + 2, etc), and that he could just multiply 101 by 50 to get the answer, 5050.  a variant is that intelligence is the ability to solve problems, and wisdom the judgement to know how to use those solutions. but while this is certainly an important relationship between wisdom and intelligence, its not the distinction between them. wisdom is useful in solving problems too, and intelligence can help in deciding what to do with the solutions.  in judging both intelligence and wisdom we have to factor out some knowledge. people who know the combination of a safe will be better at opening it than people who dont, but no one would say that was a test of intelligence or wisdom. but knowledge overlaps with wisdom and probably also intelligence. a knowledge of human nature is certainly part of wisdom. so where do we draw the line? perhaps the solution is to discount knowledge that at some point has a sharp drop in utility. for example, understanding french will help you in a large number of situations, but its value drops sharply as soon as no one else involved knows french. whereas the value of understanding vanity would decline more gradually. the knowledge whose utility drops sharply is the kind that has little relation to other knowledge. this includes mere conventions, like languages and safe combinations, and also what wed call "random" facts, like movie stars birthdays, or how to distinguish 1956 from 1957 studebakers.  people seeking some single thing called "wisdom" have been fooled by grammar. wisdom is just knowing the right thing to do, and there are a hundred and one different qualities that help in that. some, like selflessness, might come from meditating in an empty room, and others, like a knowledge of human nature, might come from going to drunken parties. perhaps realizing this will help dispel the cloud of semi-sacred mystery that surrounds wisdom in so many peoples eyes. the mystery comes mostly from looking for something that doesnt exist. and the reason there have historically been so many different schools of thought about how to achieve wisdom is that theyve focused on different components of it. when i use the word "wisdom" in this essay, i mean no more than whatever collection of qualities helps people make the right choice in a wide variety of situations.  even in english, our sense of the word "intelligence" is surprisingly recent. predecessors like "understanding" seem to have had a broader meaning.  there is of course some uncertainty about how closely the remarks attributed to confucius and socrates resemble their actual opinions. im using these names as we use the name "homer," to mean the hypothetical people who said the things attributed to them.  analects vii:36, fung trans. some translators use "calm" instead of "happy." one source of difficulty here is that present-day english speakers have a different idea of happiness from many older societies. every language probably has a word meaning "how one feels when things are going well," but different cultures react differently when things go well. we react like children, with smiles and laughter. but in a more reserved society, or in one where life was tougher, the reaction might be a quiet contentment.  it may have been andrew wiles, but im not sure. if anyone remembers such an interview, id appreciate hearing from you.  confucius claimed proudly that he had never invented anythingthat he had simply passed on an accurate account of ancient traditions.  its hard for us now to appreciate how important a duty it must have been in preliterate societies to remember and pass on the groups accumulated knowledge. even in confuciuss time it still seems to have been the first duty of the scholar.  the bias toward wisdom in ancient philosophy may be exaggerated by the fact that, in both greece and china, many of the first philosophers (including confucius and plato) saw themselves as teachers of administrators, and so thought disproportionately about such matters. the few people who did invent things, like storytellers, must have seemed an outlying data point that could be ignored. thanks to trevor blackwell, sarah harlin, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com (foreword to jessica livingstons founders at work .) apparently sprinters reach their highest speed right out of the blocks, and spend the rest of the race slowing down. the winners slow down the least. its that way with most startups too. the earliest phase is usually the most productive. thats when they have the really big ideas. imagine what apple was like when 100% of its employees were either steve jobs or steve wozniak. the striking thing about this phase is that its completely different from most peoples idea of what business is like. if you looked in peoples heads (or stock photo collections) for images representing "business," youd get images of people dressed up in suits, groups sitting around conference tables looking serious, powerpoint presentations, people producing thick reports for one another to read. early stage startups are the exact opposite of this. and yet theyre probably the most productive part of the whole economy. why the disconnect? i think theres a general principle at work here: the less energy people expend on performance, the more they expend on appearances to compensate. more often than not the energy they expend on seeming impressive makes their actual performance worse. a few years ago i read an article in which a car magazine modified the "sports" model of some production car to get the fastest possible standing quarter mile. you know how they did it? they cut off all the crap the manufacturer had bolted onto the car to make it look fast. business is broken the same way that car was. the effort that goes into looking productive is not merely wasted, but actually makes organizations less productive. suits, for example. suits do not help people to think better. i bet most executives at big companies do their best thinking when they wake up on sunday morning and go downstairs in their bathrobe to make a cup of coffee. thats when you have ideas. just imagine what a company would be like if people could think that well at work. people do in startups, at least some of the time. (half the time youre in a panic because your servers are on fire, but the other half youre thinking as deeply as most people only get to sitting alone on a sunday morning.) ditto for most of the other differences between startups and what passes for productivity in big companies. and yet conventional ideas of professionalism have such an iron grip on our minds that even startup founders are affected by them. in our startup, when outsiders came to visit we tried hard to seem "professional." wed clean up our offices, wear better clothes, try to arrange that a lot of people were there during conventional office hours. in fact, programming didnt get done by well-dressed people at clean desks during office hours. it got done by badly dressed people (i was notorious for programmming wearing just a towel) in offices strewn with junk at 2 in the morning. but no visitor would understand that. not even investors, who are supposed to be able to recognize real productivity when they see it. even we were affected by the conventional wisdom. we thought of ourselves as impostors, succeeding despite being totally unprofessional. it was as if wed created a formula 1 car but felt sheepish because it didnt look like a car was supposed to look. in the car world, there are at least some people who know that a high performance car looks like a formula 1 racecar, not a sedan with giant rims and a fake spoiler bolted to the trunk. why not in business? probably because startups are so small. the really dramatic growth happens when a startup only has three or four people, so only three or four people see that, whereas tens of thousands see business as its practiced by boeing or philip morris. this book can help fix that problem, by showing everyone what, till now, only a handful people got to see: what happens in the first year of a startup. this is what real productivity looks like. this is the formula 1 racecar. it looks weird, but it goes fast. of course, big companies wont be able to do everything these startups do. in big companies theres always going to be more politics, and less scope for individual decisions. but seeing what startups are really like will at least show other organizations what to aim for. the time may soon be coming when instead of startups trying to seem more corporate, corporations will try to seem more like startups. that would be a good thing. this essay was originally published at paulgraham.com i grew up believing that taste is just a matter of personal preference. each person has things they like, but no ones preferences are any better than anyone elses. there is no such thing as good taste. like a lot of things i grew up believing, this turns out to be false, and im going to try to explain why. one problem with saying theres no such thing as good taste is that it also means theres no such thing as good art. if there were good art, then people who liked it would have better taste than people who didnt. so if you discard taste, you also have to discard the idea of art being good, and artists being good at making it. it was pulling on that thread that unravelled my childhood faith in relativism. when youre trying to make things, taste becomes a practical matter. you have to decide what to do next. would it make the painting better if i changed that part? if theres no such thing as better, it doesnt matter what you do. in fact, it doesnt matter if you paint at all. you could just go out and buy a ready-made blank canvas. if theres no such thing as good, that would be just as great an achievement as the ceiling of the sistine chapel. less laborious, certainly, but if you can achieve the same level of performance with less effort, surely thats more impressive, not less. yet that doesnt seem quite right, does it? i think the key to this puzzle is to remember that art has an audience. art has a purpose, which is to interest its audience. good art (like good anything) is art that achieves its purpose particularly well. the meaning of "interest" can vary. some works of art are meant to shock, and others to please; some are meant to jump out at you, and others to sit quietly in the background. but all art has to work on an audience, andheres the critical pointmembers of the audience share things in common. for example, nearly all humans find human faces engaging. it seems to be wired into us. babies can recognize faces practically from birth. in fact, faces seem to have co-evolved with our interest in them; the face is the bodys billboard. so all other things being equal, a painting with faces in it will interest people more than one without.  one reason its easy to believe that taste is merely personal preference is that, if it isnt, how do you pick out the people with better taste? there are billions of people, each with their own opinion; on what grounds can you prefer one to another?  but if audiences have a lot in common, youre not in a position of having to choose one out of a random set of individual biases, because the set isnt random. all humans find faces engagingpractically by definition: face recognition is in our dna. and so having a notion of good art, in the sense of art that does its job well, doesnt require you to pick out a few individuals and label their opinions as correct. no matter who you pick, theyll find faces engaging. of course, space aliens probably wouldnt find human faces engaging. but there might be other things they shared in common with us. the most likely source of examples is math. i expect space aliens would agree with us most of the time about which of two proofs was better. erdos thought so. he called a maximally elegant proof one out of gods book, and presumably gods book is universal.  once you start talking about audiences, you dont have to argue simply that there are or arent standards of taste. instead tastes are a series of concentric rings, like ripples in a pond. there are some things that will appeal to you and your friends, others that will appeal to most people your age, others that will appeal to most humans, and perhaps others that would appeal to most sentient beings (whatever that means). the picture is slightly more complicated than that, because in the middle of the pond there are overlapping sets of ripples. for example, there might be things that appealed particularly to men, or to people from a certain culture. if good art is art that interests its audience, then when you talk about art being good, you also have to say for what audience. so is it meaningless to talk about art simply being good or bad? no, because one audience is the set of all possible humans. i think thats the audience people are implicitly talking about when they say a work of art is good: they mean it would engage any human.  and that is a meaningful test, because although, like any everyday concept, "human" is fuzzy around the edges, there are a lot of things practically all humans have in common. in addition to our interest in faces, theres something special about primary colors for nearly all of us, because its an artifact of the way our eyes work. most humans will also find images of 3d objects engaging, because that also seems to be built into our visual perception.  and beneath that theres edge-finding, which makes images with definite shapes more engaging than mere blur. humans have a lot more in common than this, of course. my goal is not to compile a complete list, just to show that theres some solid ground here. peoples preferences arent random. so an artist working on a painting and trying to decide whether to change some part of it doesnt have to think "why bother? i might as well flip a coin." instead he can ask "what would make the painting more interesting to people?" and the reason you cant equal michelangelo by going out and buying a blank canvas is that the ceiling of the sistine chapel is more interesting to people. a lot of philosophers have had a hard time believing it was possible for there to be objective standards for art. it seemed obvious that beauty, for example, was something that happened in the head of the observer, not something that was a property of objects. it was thus "subjective" rather than "objective." but in fact if you narrow the definition of beauty to something that works a certain way on humans, and you observe how much humans have in common, it turns out to be a property of objects after all. you dont have to choose between something being a property of the subject or the object if subjects all react similarly. being good art is thus a property of objects as much as, say, being toxic to humans is: its good art if it consistently affects humans in a certain way. so could we figure out what the best art is by taking a vote? after all, if appealing to humans is the test, we should be able to just ask them, right? well, not quite. for products of nature that might work. id be willing to eat the apple the worlds population had voted most delicious, and id probably be willing to visit the beach they voted most beautiful, but having to look at the painting they voted the best would be a crapshoot. man-made stuff is different. for one thing, artists, unlike apple trees, often deliberately try to trick us. some tricks are quite subtle. for example, any work of art sets expectations by its level of finish. you dont expect photographic accuracy in something that looks like a quick sketch. so one widely used trick, especially among illustrators, is to intentionally make a painting or drawing look like it was done faster than it was. the average person looks at it and thinks: how amazingly skillful. its like saying something clever in a conversation as if youd thought of it on the spur of the moment, when in fact youd worked it out the day before. another much less subtle influence is brand. if you go to see the mona lisa, youll probably be disappointed, because its hidden behind a thick glass wall and surrounded by a frenzied crowd taking pictures of themselves in front of it. at best you can see it the way you see a friend across the room at a crowded party. the louvre might as well replace it with copy; no one would be able to tell. and yet the mona lisa is a small, dark painting. if you found people whod never seen an image of it and sent them to a museum in which it was hanging among other paintings with a tag labelling it as a portrait by an unknown fifteenth century artist, most would walk by without giving it a second look. for the average person, brand dominates all other factors in the judgement of art. seeing a painting they recognize from reproductions is so overwhelming that their response to it as a painting is drowned out. and then of course there are the tricks people play on themselves. most adults looking at art worry that if they dont like what theyre supposed to, theyll be thought uncultured. this doesnt just affect what they claim to like; they actually make themselves like things theyre supposed to. thats why you cant just take a vote. though appeal to people is a meaningful test, in practice you cant measure it, just as you cant find north using a compass with a magnet sitting next to it. there are sources of error so powerful that if you take a vote, all youre measuring is the error. we can, however, approach our goal from another direction, by using ourselves as guinea pigs. youre human. if you want to know what the basic human reaction to a piece of art would be, you can at least approach that by getting rid of the sources of error in your own judgements. for example, while anyones reaction to a famous painting will be warped at first by its fame, there are ways to decrease its effects. one is to come back to the painting over and over. after a few days the fame wears off, and you can start to see it as a painting. another is to stand close. a painting familiar from reproductions looks more familiar from ten feet away; close in you see details that get lost in reproductions, and which youre therefore seeing for the first time. there are two main kinds of error that get in the way of seeing a work of art: biases you bring from your own circumstances, and tricks played by the artist. tricks are straightforward to correct for. merely being aware of them usually prevents them from working. for example, when i was ten i used to be very impressed by airbrushed lettering that looked like shiny metal. but once you study how its done, you see that its a pretty cheesy trickone of the sort that relies on pushing a few visual buttons really hard to temporarily overwhelm the viewer. its like trying to convince someone by shouting at them. the way not to be vulnerable to tricks is to explicitly seek out and catalog them. when you notice a whiff of dishonesty coming from some kind of art, stop and figure out whats going on. when someone is obviously pandering to an audience thats easily fooled, whether its someone making shiny stuff to impress ten year olds, or someone making conspicuously avant-garde stuff to impress would-be intellectuals, learn how they do it. once youve seen enough examples of specific types of tricks, you start to become a connoisseur of trickery in general, just as professional magicians are. what counts as a trick? roughly, its something done with contempt for the audience. for example, the guys designing ferraris in the 1950s were probably designing cars that they themselves admired. whereas i suspect over at general motors the marketing people are telling the designers, "most people who buy suvs do it to seem manly, not to drive off-road. so dont worry about the suspension; just make that sucker as big and tough-looking as you can."  i think with some effort you can make yourself nearly immune to tricks. its harder to escape the influence of your own circumstances, but you can at least move in that direction. the way to do it is to travel widely, in both time and space. if you go and see all the different kinds of things people like in other cultures, and learn about all the different things people have liked in the past, youll probably find it changes what you like. i doubt you could ever make yourself into a completely universal person, if only because you can only travel in one direction in time. but if you find a work of art that would appeal equally to your friends, to people in nepal, and to the ancient greeks, youre probably onto something. my main point here is not how to have good taste, but that there can even be such a thing. and i think ive shown that. there is such a thing as good art. its art that interests its human audience, and since humans have a lot in common, what interests them is not random. since theres such a thing as good art, theres also such a thing as good taste, which is the ability to recognize it. if we were talking about the taste of apples, id agree that taste is just personal preference. some people like certain kinds of apples and others like other kinds, but how can you say that one is right and the other wrong?  the thing is, art isnt apples. art is man-made. it comes with a lot of cultural baggage, and in addition the people who make it often try to trick us. most peoples judgement of art is dominated by these extraneous factors; theyre like someone trying to judge the taste of apples in a dish made of equal parts apples and jalapeno peppers. all theyre tasting is the peppers. so it turns out you can pick out some people and say that they have better taste than others: theyre the ones who actually taste art like apples. or to put it more prosaically, theyre the people who (a) are hard to trick, and (b) dont just like whatever they grew up with. if you could find people whod eliminated all such influences on their judgement, youd probably still see variation in what they liked. but because humans have so much in common, youd also find they agreed on a lot. theyd nearly all prefer the ceiling of the sistine chapel to a blank canvas. i wrote this essay because i was tired of hearing "taste is subjective" and wanted to kill it once and for all. anyone who makes things knows intuitively thats not true. when youre trying to make art, the temptation to be lazy is as great as in any other kind of work. of course it matters to do a good job. and yet you can see how great a hold "taste is subjective" has even in the art world by how nervous it makes people to talk about art being good or bad. those whose jobs require them to judge art, like curators, mostly resort to euphemisms like "significant" or "important" or (getting dangerously close) "realized."  i dont have any illusions that being able to talk about art being good or bad will cause the people who talk about it to have anything more useful to say. indeed, one of the reasons "taste is subjective" found such a receptive audience is that, historically, the things people have said about good taste have generally been such nonsense. its not for the people who talk about art that i want to free the idea of good art, but for those who make it. right now, ambitious kids going to art school run smack into a brick wall. they arrive hoping one day to be as good as the famous artists theyve seen in books, and the first thing they learn is that the concept of good has been retired. instead everyone is just supposed to explore their own personal vision.  when i was in art school, we were looking one day at a slide of some great fifteenth century painting, and one of the students asked "why dont artists paint like that now?" the room suddenly got quiet. though rarely asked out loud, this question lurks uncomfortably in the back of every art students mind. it was as if someone had brought up the topic of lung cancer in a meeting within philip morris. "well," the professor replied, "were interested in different questions now." he was a pretty nice guy, but at the time i couldnt help wishing i could send him back to fifteenth century florence to explain in person to leonardo & co. how we had moved beyond their early, limited concept of art. just imagine that conversation. in fact, one of the reasons artists in fifteenth century florence made such great things was that they believed you could make great things.  they were intensely competitive and were always trying to outdo one another, like mathematicians or physicists todaymaybe like anyone who has ever done anything really well. the idea that you could make great things was not just a useful illusion. they were actually right. so the most important consequence of realizing there can be good art is that it frees artists to try to make it. to the ambitious kids arriving at art school this year hoping one day to make great things, i say: dont believe it when they tell you this is a naive and outdated ambition. there is such a thing as good art, and if you try to make it, there are people who will notice.  this is not to say, of course, that good paintings must have faces in them, just that everyones visual piano has that key on it. there are situations in which you want to avoid faces, precisely because they attract so much attention. but you can see how universally faces work by their prevalence in advertising.  the other reason its easy to believe is that it makes people feel good. to a kid, this idea is crack. in every other respect theyre constantly being told that they have a lot to learn. but in this theyre perfect. their opinion carries the same weight as any adults. you should probably question anything you believed as a kid that youd want to believe this much.  its conceivable that the elegance of proofs is quantifiable, in the sense that there may be some formal measure that turns out to coincide with mathematicians judgements. perhaps it would be worth trying to make a formal language for proofs in which those considered more elegant consistently came out shorter (perhaps after being macroexpanded or compiled).  maybe it would be possible to make art that would appeal to space aliens, but im not going to get into that because (a) its too hard to answer, and (b) im satisfied if i can establish that good art is a meaningful idea for human audiences.  if early abstract paintings seem more interesting than later ones, it may be because the first abstract painters were trained to paint from life, and their hands thus tended to make the kind of gestures you use in representing physical things. in effect they were saying "scaramara" instead of "uebfgbsb."  its a bit more complicated, because sometimes artists unconsciously use tricks by imitating art that does.  i phrased this in terms of the taste of apples because if people can see the apples, they can be fooled. when i was a kid most apples were a variety called red delicious that had been bred to look appealing in stores, but which didnt taste very good.  to be fair, curators are in a difficult position. if theyre dealing with recent art, they have to include things in shows that they think are bad. thats because the test for what gets included in shows is basically the market price, and for recent art that is largely determined by successful businessmen and their wives. so its not always intellectual dishonesty that makes curators and dealers use neutral-sounding language.  what happens in practice is that everyone gets really good at talking about art. as the art itself gets more random, the effort that would have gone into the work goes instead into the intellectual sounding theory behind it. "my work represents an exploration of gender and sexuality in an urban context," etc. different people win at that game.  there were several other reasons, including that florence was then the richest and most sophisticated city in the world, and that they lived in a time before photography had (a) killed portraiture as a source of income and (b) made brand the dominant factor in the sale of art. incidentally, im not saying that good art  fifteenth century european art. im not saying we should make what they made, but that we should work like they worked. there are fields now in which many people work with the same energy and honesty that fifteenth century artists did, but art is not one of them. thanks to trevor blackwell, jessica livingston, and robert morris for reading drafts of this, and to paul watson for permission to use the image at the top. comment on this essay. this essay was originally published at paulgraham.com a year ago i noticed a pattern in the least successful startups wed funded: they all seemed hard to talk to. it felt as if there was some kind of wall between us. i could never quite tell if they understood what i was saying. this caught my attention because earlier wed noticed a pattern among the most successful startups, and it seemed to hinge on a different quality. we found the startups that did best were the ones with the sort of founders about whom wed say "they can take care of themselves." the startups that do best are fire-and-forget in the sense that all you have to do is give them a lead, and theyll close it, whatever type of lead it is. when theyre raising money, for example, you can do the initial intros knowing that if you wanted to you could stop thinking about it at that point. you wont have to babysit the round to make sure it happens. that type of founder is going to come back with the money; the only question is how much on what terms. it seemed odd that the outliers at the two ends of the spectrum could be detected by what appeared to be unrelated tests. youd expect that if the founders at one end were distinguished by the presence of quality x, at the other end theyd be distinguished by lack of x. was there some kind of inverse relation between resourcefulness and being hard to talk to? it turns out there is, and the key to the mystery is the old adage "a word to the wise is sufficient." because this phrase is not only overused, but overused in an indirect way (by prepending the subject to some advice), most people whove heard it dont know what it means. what it means is that if someone is wise, all you have to do is say one word to them, and theyll understand immediately. you dont have to explain in detail; theyll chase down all the implications. in much the same way that all you have to do is give the right sort of founder a one line intro to a vc, and hell chase down the money. thats the connection. understanding all the implicationseven the inconvenient implicationsof what someone tells you is a subset of resourcefulness. its conversational resourcefulness. like real world resourcefulness, conversational resourcefulness often means doing things you dont want to. chasing down all the implications of whats said to you can sometimes lead to uncomfortable conclusions. the best word to describe the failure to do so is probably "denial," though that seems a bit too narrow. a better way to describe the situation would be to say that the unsuccessful founders had the sort of conservatism that comes from weakness. they traversed idea space as gingerly as a very old person traverses the physical world. the unsuccessful founders werent stupid. intellectually they were as capable as the successful founders of following all the implications of what one said to them. they just werent eager to. so being hard to talk to was not what was killing the unsuccessful startups. it was a sign of an underlying lack of resourcefulness. thats what was killing them. as well as failing to chase down the implications of what was said to them, the unsuccessful founders would also fail to chase down funding, and users, and sources of new ideas. but the most immediate evidence i had that something was amiss was that i couldnt talk to them.  a yc partner wrote: my feeling with the bad groups is that coming into office hours, theyve already decided what theyre going to do and everything i say is being put through an internal process in their heads, which either desperately tries to munge what ive said into something that conforms with their decision or just outright dismisses it and creates a rationalization for doing so. they may not even be conscious of this process but thats what i think is happening when you say something to bad groups and they have that glazed over look. i dont think its confusion or lack of understanding per se, its this internal process at work. with the good groups, you can tell that everything you say is being looked at with fresh eyes and even if its dismissed, its because of some logical reason e.g. "we already tried that" or "from speaking to our users that isnt what theyd like," etc. those groups never have that glazed over look. thanks to sam altman, patrick collison, aaron iba, jessica livingston, robert morris, harj taggar, and garry tan for reading drafts of this. this essay was originally published at paulgraham.com in the q & a period after a recent talk, someone asked what made startups fail. after standing there gaping for a few seconds i realized this was kind of a trick question. its equivalent to asking how to make a startup succeedif you avoid every cause of failure, you succeedand thats too big a question to answer on the fly. afterwards i realized it could be helpful to look at the problem from this direction. if you have a list of all the things you shouldnt do, you can turn that into a recipe for succeeding just by negating. and this form of list may be more useful in practice. its easier to catch yourself doing something you shouldnt than always to remember to do something you should.  in a sense theres just one mistake that kills startups: not making something users want. if you make something users want, youll probably be fine, whatever else you do or dont do. and if you dont make something users want, then youre dead, whatever else you do or dont do. so really this is a list of 18 things that cause startups not to make something users want. nearly all failure funnels through that. have you ever noticed how few successful startups were founded by just one person? even companies you think of as having one founder, like oracle, usually turn out to have more. it seems unlikely this is a coincidence. whats wrong with having one founder? to start with, its a vote of no confidence. it probably means the founder couldnt talk any of his friends into starting the company with him. thats pretty alarming, because his friends are the ones who know him best. but even if the founders friends were all wrong and the company is a good bet, hes still at a disadvantage. starting a startup is too hard for one person. even if you could do all the work yourself, you need colleagues to brainstorm with, to talk you out of stupid decisions, and to cheer you up when things go wrong. the last one might be the most important. the low points in a startup are so low that few could bear them alone. when you have multiple founders, esprit de corps binds them together in a way that seems to violate conservation laws. each thinks "i cant let my friends down." this is one of the most powerful forces in human nature, and its missing when theres just one founder. startups prosper in some places and not others. silicon valley dominates, then boston, then seattle, austin, denver, and new york. after that theres not much. even in new york the number of startups per capita is probably a 20th of what it is in silicon valley. in towns like houston and chicago and detroit its too small to measure. why is the falloff so sharp? probably for the same reason it is in other industries. whats the sixth largest fashion center in the us? the sixth largest center for oil, or finance, or publishing? whatever they are theyre probably so far from the top that it would be misleading even to call them centers. its an interesting question why cities become startup hubs, but the reason startups prosper in them is probably the same as it is for any industry: thats where the experts are. standards are higher; people are more sympathetic to what youre doing; the kind of people you want to hire want to live there; supporting industries are there; the people you run into in chance meetings are in the same business. who knows exactly how these factors combine to boost startups in silicon valley and squish them in detroit, but its clear they do from the number of startups per capita in each. most of the groups that apply to y combinator suffer from a common problem: choosing a small, obscure niche in the hope of avoiding competition. if you watch little kids playing sports, you notice that below a certain age theyre afraid of the ball. when the ball comes near them their instinct is to avoid it. i didnt make a lot of catches as an eight year old outfielder, because whenever a fly ball came my way, i used to close my eyes and hold my glove up more for protection than in the hope of catching it. choosing a marginal project is the startup equivalent of my eight year old strategy for dealing with fly balls. if you make anything good, youre going to have competitors, so you may as well face that. you can only avoid competition by avoiding good ideas. i think this shrinking from big problems is mostly unconscious. its not that people think of grand ideas but decide to pursue smaller ones because they seem safer. your unconscious wont even let you think of grand ideas. so the solution may be to think about ideas without involving yourself. what would be a great idea for someone else to do as a startup? many of the applications we get are imitations of some existing company. thats one source of ideas, but not the best. if you look at the origins of successful startups, few were started in imitation of some other startup. where did they get their ideas? usually from some specific, unsolved problem the founders identified. our startup made software for making online stores. when we started it, there wasnt any; the few sites you could order from were hand-made at great expense by web consultants. we knew that if online shopping ever took off, these sites would have to be generated by software, so we wrote some. pretty straightforward. it seems like the best problems to solve are ones that affect you personally. apple happened because steve wozniak wanted a computer, google because larry and sergey couldnt find stuff online, hotmail because sabeer bhatia and jack smith couldnt exchange email at work. so instead of copying the facebook, with some variation that the facebook rightly ignored, look for ideas from the other direction. instead of starting from companies and working back to the problems they solved, look for problems and imagine the company that might solve them.  what do people complain about? what do you wish there was? in some fields the way to succeed is to have a vision of what you want to achieve, and to hold true to it no matter what setbacks you encounter. starting startups is not one of them. the stick-to-your-vision approach works for something like winning an olympic gold medal, where the problem is well-defined. startups are more like science, where you need to follow the trail wherever it leads. so dont get too attached to your original plan, because its probably wrong. most successful startups end up doing something different than they originally intendedoften so different that it doesnt even seem like the same company. you have to be prepared to see the better idea when it arrives. and the hardest part of that is often discarding your old idea. but openness to new ideas has to be tuned just right. switching to a new idea every week will be equally fatal. is there some kind of external test you can use? one is to ask whether the ideas represent some kind of progression. if in each new idea youre able to re-use most of what you built for the previous ones, then youre probably in a process that converges. whereas if you keep restarting from scratch, thats a bad sign. fortunately theres someone you can ask for advice: your users. if youre thinking about turning in some new direction and your users seem excited about it, its probably a good bet. i forgot to include this in the early versions of the list, because nearly all the founders i know are programmers. this is not a serious problem for them. they might accidentally hire someone bad, but its not going to kill the company. in a pinch they can do whatevers required themselves. but when i think about what killed most of the startups in the e-commerce business back in the 90s, it was bad programmers. a lot of those companies were started by business guys who thought the way startups worked was that you had some clever idea and then hired programmers to implement it. thats actually much harder than it soundsalmost impossibly hard in factbecause business guys cant tell which are the good programmers. they dont even get a shot at the best ones, because no one really good wants a job implementing the vision of a business guy. in practice what happens is that the business guys choose people they think are good programmers (it says here on his resume that hes a microsoft certified developer) but who arent. then theyre mystified to find that their startup lumbers along like a world war ii bomber while their competitors scream past like jet fighters. this kind of startup is in the same position as a big company, but without the advantages. so how do you pick good programmers if youre not a programmer? i dont think theres an answer. i was about to say youd have to find a good programmer to help you hire people. but if you cant recognize good programmers, how would you even do that? a related problem (since it tends to be done by bad programmers) is choosing the wrong platform. for example, i think a lot of startups during the bubble killed themselves by deciding to build server-based applications on windows. hotmail was still running on freebsd for years after microsoft bought it, presumably because windows couldnt handle the load. if hotmails founders had chosen to use windows, they would have been swamped. paypal only just dodged this bullet. after they merged with x.com, the new ceo wanted to switch to windowseven after paypal cofounder max levchin showed that their software scaled only 1% as well on windows as unix. fortunately for paypal they switched ceos instead. platform is a vague word. it could mean an operating system, or a programming language, or a "framework" built on top of a programming language. it implies something that both supports and limits, like the foundation of a house. the scary thing about platforms is that there are always some that seem to outsiders to be fine, responsible choices and yet, like windows in the 90s, will destroy you if you choose them. java applets were probably the most spectacular example. this was supposed to be the new way of delivering applications. presumably it killed just about 100% of the startups who believed that. how do you pick the right platforms? the usual way is to hire good programmers and let them choose. but there is a trick you could use if youre not a programmer: visit a top computer science department and see what they use in research projects. companies of all sizes have a hard time getting software done. its intrinsic to the medium; software is always 85% done. it takes an effort of will to push through this and get something released to users.  startups make all kinds of excuses for delaying their launch. most are equivalent to the ones people use for procrastinating in everyday life. theres something that needs to happen first. maybe. but if the software were 100% finished and ready to launch at the push of a button, would they still be waiting? one reason to launch quickly is that it forces you to actually finish some quantum of work. nothing is truly finished till its released; you can see that from the rush of work thats always involved in releasing anything, no matter how finished you thought it was. the other reason you need to launch is that its only by bouncing your idea off users that you fully understand it. several distinct problems manifest themselves as delays in launching: working too slowly; not truly understanding the problem; fear of having to deal with users; fear of being judged; working on too many different things; excessive perfectionism. fortunately you can combat all of them by the simple expedient of forcing yourself to launch something fairly quickly. launching too slowly has probably killed a hundred times more startups than launching too fast, but it is possible to launch too fast. the danger here is that you ruin your reputation. you launch something, the early adopters try it out, and if its no good they may never come back. so whats the minimum you need to launch? we suggest startups think about what they plan to do, identify a core thats both (a) useful on its own and (b) something that can be incrementally expanded into the whole project, and then get that done as soon as possible. this is the same approach i (and many other programmers) use for writing software. think about the overall goal, then start by writing the smallest subset of it that does anything useful. if its a subset, youll have to write it anyway, so in the worst case you wont be wasting your time. but more likely youll find that implementing a working subset is both good for morale and helps you see more clearly what the rest should do. the early adopters you need to impress are fairly tolerant. they dont expect a newly launched product to do everything; it just has to do something . you cant build things users like without understanding them. i mentioned earlier that the most successful startups seem to have begun by trying to solve a problem their founders had. perhaps theres a rule here: perhaps you create wealth in proportion to how well you understand the problem youre solving, and the problems you understand best are your own.  thats just a theory. whats not a theory is the converse: if youre trying to solve problems you dont understand, youre hosed. and yet a surprising number of founders seem willing to assume that someone, theyre not sure exactly who, will want what theyre building. do the founders want it? no, theyre not the target market. who is? teenagers. people interested in local events (that one is a perennial tarpit). or "business" users. what business users? gas stations? movie studios? defense contractors? you can of course build something for users other than yourself. we did. but you should realize youre stepping into dangerous territory. youre flying on instruments, in effect, so you should (a) consciously shift gears, instead of assuming you can rely on your intuitions as you ordinarily would, and (b) look at the instruments. in this case the instruments are the users. when designing for other people you have to be empirical. you can no longer guess what will work; you have to find users and measure their responses. so if youre going to make something for teenagers or "business" users or some other group that doesnt include you, you have to be able to talk some specific ones into using what youre making. if you cant, youre on the wrong track. most successful startups take funding at some point. like having more than one founder, it seems a good bet statistically. how much should you take, though? startup funding is measured in time. every startup that isnt profitable (meaning nearly all of them, initially) has a certain amount of time left before the money runs out and they have to stop. this is sometimes referred to as runway, as in "how much runway do you have left?" its a good metaphor because it reminds you that when the money runs out youre going to be airborne or dead. too little money means not enough to get airborne. what airborne means depends on the situation. usually you have to advance to a visibly higher level: if all you have is an idea, a working prototype; if you have a prototype, launching; if youre launched, significant growth. it depends on investors, because until youre profitable thats who you have to convince. so if you take money from investors, you have to take enough to get to the next step, whatever that is.  fortunately you have some control over both how much you spend and what the next step is. we advise startups to set both low, initially: spend practically nothing, and make your initial goal simply to build a solid prototype. this gives you maximum flexibility. its hard to distinguish spending too much from raising too little. if you run out of money, you could say either was the cause. the only way to decide which to call it is by comparison with other startups. if you raised five million and ran out of money, you probably spent too much. burning through too much money is not as common as it used to be. founders seem to have learned that lesson. plus it keeps getting cheaper to start a startup. so as of this writing few startups spend too much. none of the ones weve funded have. (and not just because we make small investments; many have gone on to raise further rounds.) the classic way to burn through cash is by hiring a lot of people. this bites you twice: in addition to increasing your costs, it slows you downso money thats getting consumed faster has to last longer. most hackers understand why that happens; fred brooks explained it in the mythical man-month. we have three general suggestions about hiring: (a) dont do it if you can avoid it, (b) pay people with equity rather than salary, not just to save money, but because you want the kind of people who are committed enough to prefer that, and (c) only hire people who are either going to write code or go out and get users, because those are the only things you need at first. its obvious how too little money could kill you, but is there such a thing as having too much? yes and no. the problem is not so much the money itself as what comes with it. as one vc who spoke at y combinator said, "once you take several million dollars of my money, the clock is ticking." if vcs fund you, theyre not going to let you just put the money in the bank and keep operating as two guys living on ramen. they want that money to go to work.  at the very least youll move into proper office space and hire more people. that will change the atmosphere, and not entirely for the better. now most of your people will be employees rather than founders. they wont be as committed; theyll need to be told what to do; theyll start to engage in office politics. when you raise a lot of money, your company moves to the suburbs and has kids. perhaps more dangerously, once you take a lot of money it gets harder to change direction. suppose your initial plan was to sell something to companies. after taking vc money you hire a sales force to do that. what happens now if you realize you should be making this for consumers instead of businesses? thats a completely different kind of selling. what happens, in practice, is that you dont realize that. the more people you have, the more you stay pointed in the same direction. another drawback of large investments is the time they take. the time required to raise money grows with the amount.  when the amount rises into the millions, investors get very cautious. vcs never quite say yes or no; they just engage you in an apparently endless conversation. raising vc scale investments is thus a huge time sinkmore work, probably, than the startup itself. and you dont want to be spending all your time talking to investors while your competitors are spending theirs building things. we advise founders who go on to seek vc money to take the first reasonable deal they get. if you get an offer from a reputable firm at a reasonable valuation with no unusually onerous terms, just take it and get on with building the company.  who cares if you could get a 30% better deal elsewhere? economically, startups are an all-or-nothing game. bargain-hunting among investors is a waste of time. as a founder, you have to manage your investors. you shouldnt ignore them, because they may have useful insights. but neither should you let them run the company. thats supposed to be your job. if investors had sufficient vision to run the companies they fund, why didnt they start them? pissing off investors by ignoring them is probably less dangerous than caving in to them. in our startup, we erred on the ignoring side. a lot of our energy got drained away in disputes with investors instead of going into the product. but this was less costly than giving in, which would probably have destroyed the company. if the founders know what theyre doing, its better to have half their attention focused on the product than the full attention of investors who dont. how hard you have to work on managing investors usually depends on how much money youve taken. when you raise vc-scale money, the investors get a great deal of control. if they have a board majority, theyre literally your bosses. in the more common case, where founders and investors are equally represented and the deciding vote is cast by neutral outside directors, all the investors have to do is convince the outside directors and they control the company. if things go well, this shouldnt matter. so long as you seem to be advancing rapidly, most investors will leave you alone. but things dont always go smoothly in startups. investors have made trouble even for the most successful companies. one of the most famous examples is apple, whose board made a nearly fatal blunder in firing steve jobs. apparently even google got a lot of grief from their investors early on. when i said at the beginning that if you make something users want, youll be fine, you may have noticed i didnt mention anything about having the right business model. thats not because making money is unimportant. im not suggesting that founders start companies with no chance of making money in the hope of unloading them before they tank. the reason we tell founders not to worry about the business model initially is that making something people want is so much harder. i dont know why its so hard to make something people want. it seems like it should be straightforward. but you can tell it must be hard by how few startups do it. because making something people want is so much harder than making money from it, you should leave business models for later, just as youd leave some trivial but messy feature for version 2. in version 1, solve the core problem. and the core problem in a startup is how to create wealth ( how much people want something x the number who want it), not how to convert that wealth into money. the companies that win are the ones that put users first. google, for example. they made search work, then worried about how to make money from it. and yet some startup founders still think its irresponsible not to focus on the business model from the beginning. theyre often encouraged in this by investors whose experience comes from less malleable industries. it is irresponsible not to think about business models. its just ten times more irresponsible not to think about the product. nearly all programmers would rather spend their time writing code and have someone else handle the messy business of extracting money from it. and not just the lazy ones. larry and sergey apparently felt this way too at first. after developing their new search algorithm, the first thing they tried was to get some other company to buy it. start a company? yech. most hackers would rather just have ideas. but as larry and sergey found, theres not much of a market for ideas. no one trusts an idea till you embody it in a product and use that to grow a user base. then theyll pay big time. maybe this will change, but i doubt it will change much. theres nothing like users for convincing acquirers. its not just that the risk is decreased. the acquirers are human, and they have a hard time paying a bunch of young guys millions of dollars just for being clever. when the idea is embodied in a company with a lot of users, they can tell themselves theyre buying the users rather than the cleverness, and this is easier for them to swallow.  if youre going to attract users, youll probably have to get up from your computer and go find some. its unpleasant work, but if you can make yourself do it you have a much greater chance of succeeding. in the first batch of startups we funded, in the summer of 2005, most of the founders spent all their time building their applications. but there was one who was away half the time talking to executives at cell phone companies, trying to arrange deals. can you imagine anything more painful for a hacker?  but it paid off, because this startup seems the most successful of that group by an order of magnitude. if you want to start a startup, you have to face the fact that you cant just hack. at least one hacker will have to spend some of the time doing business stuff. fights between founders are surprisingly common. about 20% of the startups weve funded have had a founder leave. it happens so often that weve reversed our attitude to vesting. we still dont require it, but now we advise founders to vest so there will be an orderly way for people to quit. a founder leaving doesnt necessarily kill a startup, though. plenty of successful startups have had that happen.  fortunately its usually the least committed founder who leaves. if there are three founders and one who was lukewarm leaves, big deal. if you have two and one leaves, or a guy with critical technical skills leaves, thats more of a problem. but even that is survivable. blogger got down to one person, and they bounced back. most of the disputes ive seen between founders could have been avoided if theyd been more careful about who they started a company with. most disputes are not due to the situation but the people. which means theyre inevitable. and most founders whove been burned by such disputes probably had misgivings, which they suppressed, when they started the company. dont suppress misgivings. its much easier to fix problems before the company is started than after. so dont include your housemate in your startup because hed feel left out otherwise. dont start a company with someone you dislike because they have some skill you need and you worry you wont find anyone else. the people are the most important ingredient in a startup, so dont compromise there. the failed startups you hear most about are the spectactular flameouts. those are actually the elite of failures. the most common type is not the one that makes spectacular mistakes, but the one that doesnt do much of anythingthe one we never even hear about, because it was some project a couple guys started on the side while working on their day jobs, but which never got anywhere and was gradually abandoned. statistically, if you want to avoid failure, it would seem like the most important thing is to quit your day job. most founders of failed startups dont quit their day jobs, and most founders of successful ones do. if startup failure were a disease, the cdc would be issuing bulletins warning people to avoid day jobs. does that mean you should quit your day job? not necessarily. im guessing here, but id guess that many of these would-be founders may not have the kind of determination it takes to start a company, and that in the back of their minds, they know it. the reason they dont invest more time in their startup is that they know its a bad investment.  id also guess theres some band of people who could have succeeded if theyd taken the leap and done it full-time, but didnt. i have no idea how wide this band is, but if the winner/borderline/hopeless progression has the sort of distribution youd expect, the number of people who could have made it, if theyd quit their day job, is probably an order of magnitude larger than the number who do make it.  if thats true, most startups that could succeed fail because the founders dont devote their whole efforts to them. that certainly accords with what i see out in the world. most startups fail because they dont make something people want, and the reason most dont is that they dont try hard enough. in other words, starting startups is just like everything else. the biggest mistake you can make is not to try hard enough. to the extent theres a secret to success, its not to be in denial about that.  this is not a complete list of the causes of failure, just those you can control. there are also several you cant, notably ineptitude and bad luck.  ironically, one variant of the facebook that might work is a facebook exclusively for college students.  steve jobs tried to motivate people by saying "real artists ship." this is a fine sentence, but unfortunately not true. many famous works of art are unfinished. its true in fields that have hard deadlines, like architecture and filmmaking, but even there people tend to be tweaking stuff till its yanked out of their hands.  theres probably also a second factor: startup founders tend to be at the leading edge of technology, so problems they face are probably especially valuable.  you should take more than you think youll need, maybe 50% to 100% more, because software takes longer to write and deals longer to close than you expect.  since people sometimes call us vcs, i should add that were not. vcs invest large amounts of other peoples money. we invest small amounts of our own, like angel investors.  not linearly of course, or it would take forever to raise five million dollars. in practice it just feels like it takes forever. though if you include the cases where vcs dont invest, it would literally take forever in the median case. and maybe we should, because the danger of chasing large investments is not just that they take a long time. thats the best case. the real danger is that youll expend a lot of time and get nothing.  some vcs will offer you an artificially low valuation to see if you have the balls to ask for more. its lame that vcs play such games, but some do. if youre dealing with one of those you should push back on the valuation a bit.  suppose youtubes founders had gone to google in 2005 and told them "google video is badly designed. give us $10 million and well tell you all the mistakes you made." they would have gotten the royal raspberry. eighteen months later google paid $1.6 billion for the same lesson, partly because they could then tell themselves that they were buying a phenomenon, or a community, or some vague thing like that. i dont mean to be hard on google. they did better than their competitors, who may have now missed the video boat entirely.  yes, actually: dealing with the government. but phone companies are up there.  many more than most people realize, because companies dont advertise this. did you know apple originally had three founders?  im not dissing these people. i dont have the determination myself. ive twice come close to starting startups since viaweb, and both times i bailed because i realized that without the spur of poverty i just wasnt willing to endure the stress of a startup.  so how do you know whether youre in the category of people who should quit their day job, or the presumably larger one who shouldnt? i got to the point of saying that this was hard to judge for yourself and that you should seek outside advice, before realizing that thats what we do. we think of ourselves as investors, but viewed from the other direction y combinator is a service for advising people whether or not to quit their day job. we could be mistaken, and no doubt often are, but we do at least bet money on our conclusions. thanks to sam altman, jessica livingston, greg mcadoo, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com (this essay is derived from a talk at mit.) till recently graduating seniors had two choices: get a job or go to grad school. i think there will increasingly be a third option: to start your own startup. but how common will that be? im sure the default will always be to get a job, but starting a startup could well become as popular as grad school. in the late 90s my professor friends used to complain that they couldnt get grad students, because all the undergrads were going to work for startups. i wouldnt be surprised if that situation returns, but with one difference: this time theyll be starting their own instead of going to work for other peoples. the most ambitious students will at this point be asking: why wait till you graduate? why not start a startup while youre in college? in fact, why go to college at all? why not start a startup instead? a year and a half ago i gave a talk where i said that the average age of the founders of yahoo, google, and microsoft was 24, and that if grad students could start startups, why not undergrads? im glad i phrased that as a question, because now i can pretend it wasnt merely a rhetorical one. at the time i couldnt imagine why there should be any lower limit for the age of startup founders. graduation is a bureaucratic change, not a biological one. and certainly there are undergrads as competent technically as most grad students. so why shouldnt undergrads be able to start startups as well as grad students? i now realize that something does change at graduation: you lose a huge excuse for failing. regardless of how complex your life is, youll find that everyone else, including your family and friends, will discard all the low bits and regard you as having a single occupation at any given time. if youre in college and have a summer job writing software, you still read as a student. whereas if you graduate and get a job programming, youll be instantly regarded by everyone as a programmer. the problem with starting a startup while youre still in school is that theres a built-in escape hatch. if you start a startup in the summer between your junior and senior year, it reads to everyone as a summer job. so if it goes nowhere, big deal; you return to school in the fall with all the other seniors; no one regards you as a failure, because your occupation is student, and you didnt fail at that. whereas if you start a startup just one year later, after you graduate, as long as youre not accepted to grad school in the fall the startup reads to everyone as your occupation. youre now a startup founder, so you have to do well at that. for nearly everyone, the opinion of ones peers is the most powerful motivator of allmore powerful even than the nominal goal of most startup founders, getting rich.  about a month into each funding cycle we have an event called prototype day where each startup presents to the others what theyve got so far. you might think they wouldnt need any more motivation. theyre working on their cool new idea; they have funding for the immediate future; and theyre playing a game with only two outcomes: wealth or failure. youd think that would be motivation enough. and yet the prospect of a demo pushes most of them into a rush of activity. even if you start a startup explicitly to get rich, the money you might get seems pretty theoretical most of the time. what drives you day to day is not wanting to look bad. you probably cant change that. even if you could, i dont think youd want to; someone who really, truly doesnt care what his peers think of him is probably a psychopath. so the best you can do is consider this force like a wind, and set up your boat accordingly. if you know your peers are going to push you in some direction, choose good peers, and position yourself so they push you in a direction you like. graduation changes the prevailing winds, and those make a difference. starting a startup is so hard that its a close call even for the ones that succeed. however high a startup may be flying now, it probably has a few leaves stuck in the landing gear from those trees it barely cleared at the end of the runway. in such a close game, the smallest increase in the forces against you can be enough to flick you over the edge into failure. when we first started y combinator we encouraged people to start startups while they were still in college. thats partly because y combinator began as a kind of summer program. weve kept the program shapeall of us having dinner together once a week turns out to be a good ideabut weve decided now that the party line should be to tell people to wait till they graduate. does that mean you cant start a startup in college? not at all. sam altman, the co-founder of loopt , had just finished his sophomore year when we funded them, and loopt is probably the most promising of all the startups weve funded so far. but sam altman is a very unusual guy. within about three minutes of meeting him, i remember thinking "ah, so this is what bill gates must have been like when he was 19." if it can work to start a startup during college, why do we tell people not to? for the same reason that the probably apocryphal violinist, whenever he was asked to judge someones playing, would always say they didnt have enough talent to make it as a pro. succeeding as a musician takes determination as well as talent, so this answer works out to be the right advice for everyone. the ones who are uncertain believe it and give up, and the ones who are sufficiently determined think "screw that, ill succeed anyway." so our official policy now is only to fund undergrads we cant talk out of it. and frankly, if youre not certain, you should wait. its not as if all the opportunities to start companies are going to be gone if you dont do it now. maybe the window will close on some idea youre working on, but that wont be the last idea youll have. for every idea that times out, new ones become feasible. historically the opportunities to start startups have only increased with time. in that case, you might ask, why not wait longer? why not go work for a while, or go to grad school, and then start a startup? and indeed, that might be a good idea. if i had to pick the sweet spot for startup founders, based on who were most excited to see applications from, id say its probably the mid-twenties. why? what advantages does someone in their mid-twenties have over someone whos 21? and why isnt it older? what can 25 year olds do that 32 year olds cant? those turn out to be questions worth examining. if you start a startup soon after college, youll be a young founder by present standards, so you should know what the relative advantages of young founders are. theyre not what you might think. as a young founder your strengths are: stamina, poverty, rootlessness, colleagues, and ignorance. the importance of stamina shouldnt be surprising. if youve heard anything about startups youve probably heard about the long hours. as far as i can tell these are universal. i cant think of any successful startups whose founders worked 9 to 5. and its particularly necessary for younger founders to work long hours because theyre probably not as efficient as theyll be later. your second advantage, poverty, might not sound like an advantage, but it is a huge one. poverty implies you can live cheaply, and this is critically important for startups. nearly every startup that fails, fails by running out of money. its a little misleading to put it this way, because theres usually some other underlying cause. but regardless of the source of your problems, a low burn rate gives you more opportunity to recover from them. and since most startups make all kinds of mistakes at first, room to recover from mistakes is a valuable thing to have. most startups end up doing something different than they planned. the way the successful ones find something that works is by trying things that dont. so the worst thing you can do in a startup is to have a rigid, pre-ordained plan and then start spending a lot of money to implement it. better to operate cheaply and give your ideas time to evolve. recent grads can live on practically nothing, and this gives you an edge over older founders, because the main cost in software startups is people. the guys with kids and mortgages are at a real disadvantage. this is one reason id bet on the 25 year old over the 32 year old. the 32 year old probably is a better programmer, but probably also has a much more expensive life. whereas a 25 year old has some work experience (more on that later) but can live as cheaply as an undergrad. robert morris and i were 29 and 30 respectively when we started viaweb, but fortunately we still lived like 23 year olds. we both had roughly zero assets. i would have loved to have a mortgage, since that would have meant i had a house . but in retrospect having nothing turned out to be convenient. i wasnt tied down and i was used to living cheaply. even more important than living cheaply, though, is thinking cheaply. one reason the apple ii was so popular was that it was cheap. the computer itself was cheap, and it used cheap, off-the-shelf peripherals like a cassette tape recorder for data storage and a tv as a monitor. and you know why? because woz designed this computer for himself, and he couldnt afford anything more. we benefitted from the same phenomenon. our prices were daringly low for the time. the top level of service was $300 a month, which was an order of magnitude below the norm. in retrospect this was a smart move, but we didnt do it because we were smart. $300 a month seemed like a lot of money to us. like apple, we created something inexpensive, and therefore popular, simply because we were poor. a lot of startups have that form: someone comes along and makes something for a tenth or a hundredth of what it used to cost, and the existing players cant follow because they dont even want to think about a world in which thats possible. traditional long distance carriers, for example, didnt even want to think about voip. (it was coming, all the same.) being poor helps in this game, because your own personal bias points in the same direction technology evolves in. the advantages of rootlessness are similar to those of poverty. when youre young youre more mobilenot just because you dont have a house or much stuff, but also because youre less likely to have serious relationships. this turns out to be important, because a lot of startups involve someone moving. the founders of kiko, for example, are now en route to the bay area to start their next startup. its a better place for what they want to do. and it was easy for them to decide to go, because neither as far as i know has a serious girlfriend, and everything they own will fit in one caror more precisely, will either fit in one car or is crappy enough that they dont mind leaving it behind. they at least were in boston. what if theyd been in nebraska, like evan williams was at their age? someone wrote recently that the drawback of y combinator was that you had to move to participate. it couldnt be any other way. the kind of conversations we have with founders, we have to have in person. we fund a dozen startups at a time, and we cant be in a dozen places at once. but even if we could somehow magically save people from moving, we wouldnt. we wouldnt be doing founders a favor by letting them stay in nebraska. places that arent startup hubs are toxic to startups. you can tell that from indirect evidence. you can tell how hard it must be to start a startup in houston or chicago or miami from the microscopically small number, per capita, that succeed there. i dont know exactly whats suppressing all the startups in these townsprobably a hundred subtle little thingsbut something must be.  maybe this will change. maybe the increasing cheapness of startups will mean theyll be able to survive anywhere, instead of only in the most hospitable environments. maybe 37signals is the pattern for the future. but maybe not. historically there have always been certain towns that were centers for certain industries, and if you werent in one of them you were at a disadvantage. so my guess is that 37signals is an anomaly. were looking at a pattern much older than "web 2.0" here. perhaps the reason more startups per capita happen in the bay area than miami is simply that there are more founder-type people there. successful startups are almost never started by one person. usually they begin with a conversation in which someone mentions that something would be a good idea for a company, and his friend says, "yeah, that is a good idea, lets try it." if youre missing that second person who says "lets try it," the startup never happens. and that is another area where undergrads have an edge. theyre surrounded by people willing to say that. at a good college youre concentrated together with a lot of other ambitious and technically minded peopleprobably more concentrated than youll ever be again. if your nucleus spits out a neutron, theres a good chance it will hit another nucleus. the number one question people ask us at y combinator is: where can i find a co-founder? thats the biggest problem for someone starting a startup at 30. when they were in school they knew a lot of good co-founders, but by 30 theyve either lost touch with them or these people are tied down by jobs they dont want to leave. viaweb was an anomaly in this respect too. though we were comparatively old, we werent tied down by impressive jobs. i was trying to be an artist, which is not very constraining, and robert, though 29, was still in grad school due to a little interruption in his academic career back in 1988. so arguably the worm made viaweb possible. otherwise robert would have been a junior professor at that age, and he wouldnt have had time to work on crazy speculative projects with me. most of the questions people ask y combinator we have some kind of answer for, but not the co-founder question. there is no good answer. co-founders really should be people you already know. and by far the best place to meet them is school. you have a large sample of smart people; you get to compare how they all perform on identical tasks; and everyones life is pretty fluid. a lot of startups grow out of schools for this reason. google, yahoo, and microsoft, among others, were all founded by people who met in school. (in microsofts case, it was high school.) many students feel they should wait and get a little more experience before they start a company. all other things being equal, they should. but all other things are not quite as equal as they look. most students dont realize how rich they are in the scarcest ingredient in startups, co-founders. if you wait too long, you may find that your friends are now involved in some project they dont want to abandon. the better they are, the more likely this is to happen. one way to mitigate this problem might be to actively plan your startup while youre getting those n years of experience. sure, go off and get jobs or go to grad school or whatever, but get together regularly to scheme, so the idea of starting a startup stays alive in everyones brain. i dont know if this works, but it cant hurt to try. it would be helpful just to realize what an advantage you have as students. some of your classmates are probably going to be successful startup founders; at a great technical university, that is a near certainty. so which ones? if i were you id look for the people who are not just smart, but incurable builders . look for the people who keep starting projects, and finish at least some of them. thats what we look for. above all else, above academic credentials and even the idea you apply with, we look for people who build things. the other place co-founders meet is at work. fewer do than at school, but there are things you can do to improve the odds. the most important, obviously, is to work somewhere that has a lot of smart, young people. another is to work for a company located in a startup hub. it will be easier to talk a co-worker into quitting with you in a place where startups are happening all around you. you might also want to look at the employment agreement you sign when you get hired. most will say that any ideas you think of while youre employed by the company belong to them. in practice its hard for anyone to prove what ideas you had when, so the line gets drawn at code. if youre going to start a startup, dont write any of the code while youre still employed. or at least discard any code you wrote while still employed and start over. its not so much that your employer will find out and sue you. it wont come to that; investors or acquirers or (if youre so lucky) underwriters will nail you first. between t  0 and when you buy that yacht, someone is going to ask if any of your code legally belongs to anyone else, and you need to be able to say no.  the most overreaching employee agreement ive seen so far is amazons. in addition to the usual clauses about owning your ideas, you also cant be a founder of a startup that has another founder who worked at amazoneven if you didnt know them or even work there at the same time. i suspect theyd have a hard time enforcing this, but its a bad sign they even try. there are plenty of other places to work; you may as well choose one that keeps more of your options open. speaking of cool places to work, there is of course google. but i notice something slightly frightening about google: zero startups come out of there. in that respect its a black hole. people seem to like working at google too much to leave. so if you hope to start a startup one day, the evidence so far suggests you shouldnt work there. i realize this seems odd advice. if they make your life so good that you dont want to leave, why not work there? because, in effect, youre probably getting a local maximum. you need a certain activation energy to start a startup. so an employer whos fairly pleasant to work for can lull you into staying indefinitely, even if it would be a net win for you to leave.  the best place to work, if you want to start a startup, is probably a startup. in addition to being the right sort of experience, one way or another it will be over quickly. youll either end up rich, in which case problem solved, or the startup will get bought, in which case it it will start to suck to work there and it will be easy to leave, or most likely, the thing will blow up and youll be free again. your final advantage, ignorance, may not sound very useful. i deliberately used a controversial word for it; you might equally call it innocence. but it seems to be a powerful force. my y combinator co-founder jessica livingston is just about to publish a book of interviews with startup founders, and i noticed a remarkable pattern in them. one after another said that if theyd known how hard it would be, they would have been too intimidated to start. ignorance can be useful when its a counterweight to other forms of stupidity. its useful in starting startups because youre capable of more than you realize. starting startups is harder than you expect, but youre also capable of more than you expect, so they balance out. most people look at a company like apple and think, how could i ever make such a thing? apple is an institution, and im just a person. but every institution was at one point just a handful of people in a room deciding to start something. institutions are made up, and made up by people no different from you. im not saying everyone could start a startup. im sure most people couldnt; i dont know much about the population at large. when you get to groups i know well, like hackers, i can say more precisely. at the top schools, id guess as many as a quarter of the cs majors could make it as startup founders if they wanted. that "if they wanted" is an important qualificationso important that its almost cheating to append it like thatbecause once you get over a certain threshold of intelligence, which most cs majors at top schools are past, the deciding factor in whether you succeed as a founder is how much you want to. you dont have to be that smart. if youre not a genius, just start a startup in some unsexy field where youll have less competition, like software for human resources departments. i picked that example at random, but i feel safe in predicting that whatever they have now, it wouldnt take genius to do better. there are a lot of people out there working on boring stuff who are desperately in need of better software, so however short you think you fall of larry and sergey, you can ratchet down the coolness of the idea far enough to compensate. as well as preventing you from being intimidated, ignorance can sometimes help you discover new ideas. steve wozniak put this very strongly: all the best things that i did at apple came from (a) not having money and (b) not having done it before, ever. every single thing that we came out with that was really great, id never once done that thing in my life. when you know nothing, you have to reinvent stuff for yourself, and if youre smart your reinventions may be better than what preceded them. this is especially true in fields where the rules change. all our ideas about software were developed in a time when processors were slow, and memories and disks were tiny. who knows what obsolete assumptions are embedded in the conventional wisdom? and the way these assumptions are going to get fixed is not by explicitly deallocating them, but by something more akin to garbage collection. someone ignorant but smart will come along and reinvent everything, and in the process simply fail to reproduce certain existing ideas. so much for the advantages of young founders. what about the disadvantages? im going to start with what goes wrong and try to trace it back to the root causes. what goes wrong with young founders is that they build stuff that looks like class projects. it was only recently that we figured this out ourselves. we noticed a lot of similarities between the startups that seemed to be falling behind, but we couldnt figure out how to put it into words. then finally we realized what it was: they were building class projects. but what does that really mean? whats wrong with class projects? whats the difference between a class project and a real startup? if we could answer that question it would be useful not just to would-be startup founders but to students in general, because wed be a long way toward explaining the mystery of the so-called real world. there seem to be two big things missing in class projects: (1) an iterative definition of a real problem and (2) intensity. the first is probably unavoidable. class projects will inevitably solve fake problems. for one thing, real problems are rare and valuable. if a professor wanted to have students solve real problems, hed face the same paradox as someone trying to give an example of whatever "paradigm" might succeed the standard model of physics. there may well be something that does, but if you could think of an example youd be entitled to the nobel prize. similarly, good new problems are not to be had for the asking. in technology the difficulty is compounded by the fact that real startups tend to discover the problem theyre solving by a process of evolution. someone has an idea for something; they build it; and in doing so (and probably only by doing so) they realize the problem they should be solving is another one. even if the professor let you change your project description on the fly, there isnt time enough to do that in a college class, or a market to supply evolutionary pressures. so class projects are mostly about implementation, which is the least of your problems in a startup. its not just that in a startup you work on the idea as well as implementation. the very implementation is different. its main purpose is to refine the idea. often the only value of most of the stuff you build in the first six months is that it proves your initial idea was mistaken. and thats extremely valuable. if youre free of a misconception that everyone else still shares, youre in a powerful position. but youre not thinking that way about a class project. proving your initial plan was mistaken would just get you a bad grade. instead of building stuff to throw away, you tend to want every line of code to go toward that final goal of showing you did a lot of work. that leads to our second difference: the way class projects are measured. professors will tend to judge you by the distance between the starting point and where you are now. if someone has achieved a lot, they should get a good grade. but customers will judge you from the other direction: the distance remaining between where you are now and the features they need. the market doesnt give a shit how hard you worked. users just want your software to do what they need, and you get a zero otherwise. that is one of the most distinctive differences between school and the real world: there is no reward for putting in a good effort. in fact, the whole concept of a "good effort" is a fake idea adults invented to encourage kids. it is not found in nature. such lies seem to be helpful to kids. but unfortunately when you graduate they dont give you a list of all the lies they told you during your education. you have to get them beaten out of you by contact with the real world. and this is why so many jobs want work experience. i couldnt understand that when i was in college. i knew how to program. in fact, i could tell i knew how to program better than most people doing it for a living. so what was this mysterious "work experience" and why did i need it? now i know what it is, and part of the confusion is grammatical. describing it as "work experience" implies its like experience operating a certain kind of machine, or using a certain programming language. but really what work experience refers to is not some specific expertise, but the elimination of certain habits left over from childhood. one of the defining qualities of kids is that they flake. when youre a kid and you face some hard test, you can cry and say "i cant" and they wont make you do it. of course, no one can make you do anything in the grownup world either. what they do instead is fire you. and when motivated by that you find you can do a lot more than you realized. so one of the things employers expect from someone with "work experience" is the elimination of the flake reflexthe ability to get things done, with no excuses. the other thing you get from work experience is an understanding of what work is, and in particular, how intrinsically horrible it is. fundamentally the equation is a brutal one: you have to spend most of your waking hours doing stuff someone else wants, or starve. there are a few places where the work is so interesting that this is concealed, because what other people want done happens to coincide with what you want to work on. but you only have to imagine what would happen if they diverged to see the underlying reality. its not so much that adults lie to kids about this as never explain it. they never explain what the deal is with money. you know from an early age that youll have some sort of job, because everyone asks what youre going to "be" when you grow up. what they dont tell you is that as a kid youre sitting on the shoulders of someone else whos treading water, and that starting working means you get thrown into the water on your own, and have to start treading water yourself or sink. "being" something is incidental; the immediate problem is not to drown. the relationship between work and money tends to dawn on you only gradually. at least it did for me. ones first thought tends to be simply "this sucks. im in debt. plus i have to get up on monday and go to work." gradually you realize that these two things are as tightly connected as only a market can make them. so the most important advantage 24 year old founders have over 20 year old founders is that they know what theyre trying to avoid. to the average undergrad the idea of getting rich translates into buying ferraris, or being admired. to someone who has learned from experience about the relationship between money and work, it translates to something way more important: it means you get to opt out of the brutal equation that governs the lives of 99.9% of people. getting rich means you can stop treading water. someone who gets this will work much harder at making a startup succeedwith the proverbial energy of a drowning man, in fact. but understanding the relationship between money and work also changes the way you work. you dont get money just for working, but for doing things other people want. someone whos figured that out will automatically focus more on the user. and that cures the other half of the class-project syndrome. after youve been working for a while, you yourself tend to measure what youve done the same way the market does. of course, you dont have to spend years working to learn this stuff. if youre sufficiently perceptive you can grasp these things while youre still in school. sam altman did. he must have, because loopt is no class project. and as his example suggests, this can be valuable knowledge. at a minimum, if you get this stuff, you already have most of what you gain from the "work experience" employers consider so desirable. but of course if you really get it, you can use this information in a way thats more valuable to you than that. so suppose you think you might start a startup at some point, either when you graduate or a few years after. what should you do now? for both jobs and grad school, there are ways to prepare while youre in college. if you want to get a job when you graduate, you should get summer jobs at places youd like to work. if you want to go to grad school, it will help to work on research projects as an undergrad. whats the equivalent for startups? how do you keep your options maximally open? one thing you can do while youre still in school is to learn how startups work. unfortunately thats not easy. few if any colleges have classes about startups. there may be business school classes on entrepreneurship, as they call it over there, but these are likely to be a waste of time. business schools like to talk about startups, but philosophically theyre at the opposite end of the spectrum. most books on startups also seem to be useless. ive looked at a few and none get it right. books in most fields are written by people who know the subject from experience, but for startups theres a unique problem: by definition the founders of successful startups dont need to write books to make money. as a result most books on the subject end up being written by people who dont understand it. so id be skeptical of classes and books. the way to learn about startups is by watching them in action, preferably by working at one. how do you do that as an undergrad? probably by sneaking in through the back door. just hang around a lot and gradually start doing things for them. most startups are (or should be) very cautious about hiring. every hire increases the burn rate, and bad hires early on are hard to recover from. however, startups usually have a fairly informal atmosphere, and theres always a lot that needs to be done. if you just start doing stuff for them, many will be too busy to shoo you away. you can thus gradually work your way into their confidence, and maybe turn it into an official job later, or not, whichever you prefer. this wont work for all startups, but it would work for most ive known. number two, make the most of the great advantage of school: the wealth of co-founders. look at the people around you and ask yourself which youd like to work with. when you apply that test, you may find you get surprising results. you may find youd prefer the quiet guy youve mostly ignored to someone who seems impressive but has an attitude to match. im not suggesting you suck up to people you dont really like because you think one day theyll be successful. exactly the opposite, in fact: you should only start a startup with someone you like, because a startup will put your friendship through a stress test. im just saying you should think about who you really admire and hang out with them, instead of whoever circumstances throw you together with. another thing you can do is learn skills that will be useful to you in a startup. these may be different from the skills youd learn to get a job. for example, thinking about getting a job will make you want to learn programming languages you think employers want, like java and c++. whereas if you start a startup, you get to pick the language, so you have to think about which will actually let you get the most done. if you use that test you might end up learning ruby or python instead. but the most important skill for a startup founder isnt a programming technique. its a knack for understanding users and figuring out how to give them what they want. i know i repeat this, but thats because its so important. and its a skill you can learn, though perhaps habit might be a better word. get into the habit of thinking of software as having users. what do those users want? what would make them say wow? this is particularly valuable for undergrads, because the concept of users is missing from most college programming classes. the way you get taught programming in college would be like teaching writing as grammar, without mentioning that its purpose is to communicate something to an audience. fortunately an audience for software is now only an http request away. so in addition to the programming you do for your classes, why not build some kind of website people will find useful? at the very least it will teach you how to write software with users. in the best case, it might not just be preparation for a startup, but the startup itself, like it was for yahoo and google.  even the desire to protect ones children seems weaker, judging from things people have historically done to their kids rather than risk their communitys disapproval. (i assume we still do things that will be regarded in the future as barbaric, but historical abuses are easier for us to see.)  worrying that y combinator makes founders move for 3 months also suggests one underestimates how hard it is to start a startup. youre going to have to put up with much greater inconveniences than that.  most employee agreements say that any idea relating to the companys present or potential future business belongs to them. often as not the second clause could include any possible startup, and anyone doing due diligence for an investor or acquirer will assume the worst. to be safe either (a) dont use code written while you were still employed in your previous job, or (b) get your employer to renounce, in writing, any claim to the code you write for your side project. many will consent to (b) rather than lose a prized employee. the downside is that youll have to tell them exactly what your project does.  geshke and warnock only founded adobe because xerox ignored them. if xerox had used what they built, they would probably never have left parc. thanks to jessica livingston and robert morris for reading drafts of this, and to jeff arnold and the sipb for inviting me to speak. comment on this essay. this essay was originally published at paulgraham.com in a few days it will be demo day, when the startups we funded this summer present to investors. y combinator funds startups twice a year, in january and june. ten weeks later we invite all the investors we know to hear them present what theyve built so far. ten weeks is not much time. the average startup probably doesnt have much to show for itself after ten weeks. but the average startup fails. when you look at the ones that went on to do great things, you find a lot that began with someone pounding out a prototype in a week or two of nonstop work. startups are a counterexample to the rule that haste makes waste. (too much money seems to be as bad for startups as too much time, so we dont give them much money either.) a week before demo day, we have a dress rehearsal called rehearsal day. at other y combinator events we allow outside guests, but not at rehearsal day. no one except the other founders gets to see the rehearsals. the presentations on rehearsal day are often pretty rough. but this is to be expected. we try to pick founders who are good at building things, not ones who are slick presenters. some of the founders are just out of college, or even still in it, and have never spoken to a group of people they didnt already know. so we concentrate on the basics. on demo day each startup will only get ten minutes, so we encourage them to focus on just two goals: (a) explain what youre doing, and (b) explain why users will want it. that might sound easy, but its not when the speakers have no experience presenting, and theyre explaining technical matters to an audience thats mostly non-technical. this situation is constantly repeated when startups present to investors: people who are bad at explaining, talking to people who are bad at understanding. practically every successful startup, including stars like google, presented at some point to investors who didnt get it and turned them down. was it because the founders were bad at presenting, or because the investors were obtuse? its probably always some of both. at the most recent rehearsal day, we four y combinator partners found ourselves saying a lot of the same things we said at the last two. so at dinner afterward we collected all our tips about presenting to investors. most startups face similar challenges, so we hope these will be useful to a wider audience. investors main question when judging a very early startup is whether youve made a compelling product. before they can judge whether youve built a good x, they have to understand what kind of x youve built. they will get very frustrated if instead of telling them what you do, you make them sit through some kind of preamble. say what youre doing as soon as possible, preferably in the first sentence. "were jeff and bob and weve built an easy to use web-based database. now well show it to you and explain why people need this." if youre a great public speaker you may be able to violate this rule. last year one founder spent the whole first half of his talk on a fascinating analysis of the limits of the conventional desktop metaphor. he got away with it, but unless youre a captivating speaker, which most hackers arent, its better to play it safe. this section is now obsolete for yc founders presenting at demo day, because demo day presentations are now so short that they rarely include much if any demo. they seem to work just as well without, however, which makes me think i was wrong to emphasize demos so much before. a demo explains what youve made more effectively than any verbal description. the only thing worth talking about first is the problem youre trying to solve and why its important. but dont spend more than a tenth of your time on that. then demo. when you demo, dont run through a catalog of features. instead start with the problem youre solving, and then show how your product solves it. show features in an order driven by some kind of purpose, rather than the order in which they happen to appear on the screen. if youre demoing something web-based, assume that the network connection will mysteriously die 30 seconds into your presentation, and come prepared with a copy of the server software running on your laptop. one reason founders resist describing their projects concisely is that, at this early stage, there are all kinds of possibilities. the most concise descriptions seem misleadingly narrow. so for example a group that has built an easy web-based database might resist calling their applicaton that, because it could be so much more. in fact, it could be anything... the problem is, as you approach (in the calculus sense) a description of something that could be anything, the content of your description approaches zero. if you describe your web-based database as "a system to allow people to collaboratively leverage the value of information," it will go in one investor ear and out the other. theyll just discard that sentence as meaningless boilerplate, and hope, with increasing impatience, that in the next sentence youll actually explain what youve made. your primary goal is not to describe everything your system might one day become, but simply to convince investors youre worth talking to further. so approach this like an algorithm that gets the right answer by successive approximations. begin with a description thats gripping but perhaps overly narrow, then flesh it out to the extent you can. its the same principle as incremental development: start with a simple prototype, then add features, but at every point have working code. in this case, "working code" means a working description in the investors head. have one person talk while another uses the computer. if the same person does both, theyll inevitably mumble downwards at the computer screen instead of talking clearly at the audience. as long as youre standing near the audience and looking at them, politeness (and habit) compel them to pay attention to you. once you stop looking at them to fuss with something on your computer, their minds drift off to the errands they have to run later. if you only have a few minutes, spend them explaining what your product does and why its great. second order issues like competitors or resumes should be single slides you go through quickly at the end. if you have impressive resumes, just flash them on the screen for 15 seconds and say a few words. for competitors, list the top 3 and explain in one sentence each what they lack that you have. and put this kind of thing at the end, after youve made it clear what youve built. its good to talk about how you plan to make money, but mainly because it shows you care about that and have thought about it. dont go into detail about your business model, because (a) thats not what smart investors care about in a brief presentation, and (b) any business model you have at this point is probably wrong anyway. recently a vc who came to speak at y combinator talked about a company he just invested in. he said their business model was wrong and would probably change three times before they got it right. the founders were experienced guys whod done startups before and whod just succeeded in getting millions from one of the top vc firms, and even their business model was crap. (and yet he invested anyway, because he expected it to be crap at this stage.) if youre solving an important problem, youre going to sound a lot smarter talking about that than the business model. the business model is just a bunch of guesses, and guesses about stuff thats probably not your area of expertise. so dont spend your precious few minutes talking about crap when you could be talking about solid, interesting things you know a lot about: the problem youre solving and what youve built so far. as well as being a bad use of time, if your business model seems spectacularly wrong, that will push the stuff you want investors to remember out of their heads. theyll just remember you as the company with the boneheaded plan for making money, rather than the company that solved that important problem. everyone at rehearsal day could see the difference between the people whod been out in the world for a while and had presented to groups, and those who hadnt. you need to use a completely different voice and manner talking to a roomful of people than you would in conversation. everyday life gives you no practice in this. if you cant already do it, the best solution is to treat it as a consciously artificial trick, like juggling. however, that doesnt mean you should talk like some kind of announcer. audiences tune that out. what you need to do is talk in this artificial way, and yet make it seem conversational. (writing is the same. good writing is an elaborate effort to seem spontaneous.) if you want to write out your whole presentation beforehand and memorize it, thats ok. that has worked for some groups in the past. but make sure to write something that sounds like spontaneous, informal speech, and deliver it that way too. err on the side of speaking slowly. at rehearsal day, one of the founders mentioned a rule actors use: if you feel youre speaking too slowly, youre speaking at about the right speed. startups often want to show that all the founders are equal partners. this is a good instinct; investors dislike unbalanced teams. but trying to show it by partitioning the presentation is going too far. its distracting. you can demonstrate your respect for one another in more subtle ways. for example, when one of the groups presented at demo day, the more extroverted of the two founders did most of the talking, but he described his co-founder as the best hacker hed ever met, and you could tell he meant it. pick the one or at most two best speakers, and have them do most of the talking. exception: if one of the founders is an expert in some specific technical field, it can be good for them to talk about that for a minute or so. this kind of "expert witness" can add credibility, even if the audience doesnt understand all the details. if jobs and wozniak had 10 minutes to present the apple ii, it might be a good plan to have jobs speak for 9 minutes and have woz speak for a minute in the middle about some of the technical feats hed pulled off in the design. (though of course if it were actually those two, jobs would speak for the entire 10 minutes.) between the brief time available and their lack of technical background, many in the audience will have a hard time evaluating what youre doing. probably the single biggest piece of evidence, initially, will be your own confidence in it. you have to show youre impressed with what youve made. and i mean show, not tell. never say "were passionate" or "our product is great." people just ignore thator worse, write you off as bullshitters. such messages must be implicit. what you must not do is seem nervous and apologetic. if youve truly made something good, youre doing investors a favor by telling them about it. if you dont genuinely believe that, perhaps you ought to change what your company is doing. if you dont believe your startup has such promise that youd be doing them a favor by letting them invest, why are you investing your time in it? dont worry if your company is just a few months old and doesnt have an office yet, or your founders are technical people with no business experience. google was like that once, and they turned out ok. smart investors can see past such superficial flaws. theyre not looking for finished, smooth presentations. theyre looking for raw talent. all you need to convince them of is that youre smart and that youre onto something good. if you try too hard to conceal your rawnessby trying to seem corporate, or pretending to know about stuff you dontyou may just conceal your talent. you can afford to be candid about what you havent figured out yet. dont go out of your way to bring it up (e.g. by having a slide about what might go wrong), but dont try to pretend either that youre further along than you are. if youre a hacker and youre presenting to experienced investors, theyre probably better at detecting bullshit than you are at producing it. when there are a lot of words on a slide, people just skip reading it. so look at your slides and ask of each word "could i cross this out?" this includes gratuitous clip art. try to get your slides under 20 words if you can. dont read your slides. they should be something in the background as you face the audience and talk to them, not something you face and read to an audience sitting behind you. cluttered sites dont do well in demos, especially when theyre projected onto a screen. at the very least, crank up the font size big enough to make all the text legible. but cluttered sites are bad anyway, so perhaps you should use this opportunity to make your design simpler. if you have any kind of data, however preliminary, tell the audience. numbers stick in peoples heads. if you can claim that the median visitor generates 12 page views, thats great. but dont give them more than four or five numbers, and only give them numbers specific to you. you dont need to tell them the size of the market youre in. who cares, really, if its 500 million or 5 billion a year? talking about that is like an actor at the beginning of his career telling his parents how much tom hanks makes. yeah, sure, but first you have to become tom hanks. the important part is not whether he makes ten million a year or a hundred, but how you get there. the biggest fear of investors looking at early stage startups is that youve built something based on your own a priori theories of what the world needs, but that no one will actually want. so its good if you can talk about problems specific users have and how you solve them. greg mcadoo said one thing sequoia looks for is the "proxy for demand." what are people doing now, using inadequate tools, that shows they need what youre making? another sign of user need is when people pay a lot for something. its easy to convince investors there will be demand for a cheaper alternative to something popular, if you preserve the qualities that made it popular. the best stories about user needs are about your own. a remarkable number of famous startups grew out of some need the founders had: apple, microsoft, yahoo, google. experienced investors know that, so stories of this type will get their attention. the next best thing is to talk about the needs of people you know personally, like your friends or siblings. professional investors hear a lot of pitches. after a while they all blur together. the first cut is simply to be one of those they remember. and the way to ensure that is to create a descriptive phrase about yourself that sticks in their heads. in hollywood, these phrases seem to be of the form "x meets y." in the startup world, theyre usually "the x of y" or "the x y." viawebs was "the microsoft word of ecommerce." find one and launch it clearly (but apparently casually) in your talk, preferably near the beginning. its a good exercise for you, too, to sit down and try to figure out how to describe your startup in one compelling phrase. if you cant, your plans may not be sufficiently focused. this essay was originally published at paulgraham.com when i was in high school i spent a lot of time imitating bad writers. what we studied in english classes was mostly fiction, so i assumed that was the highest form of writing. mistake number one. the stories that seemed to be most admired were ones in which people suffered in complicated ways. anything funny or gripping was ipso facto suspect, unless it was old enough to be hard to understand, like shakespeare or chaucer. mistake number two. the ideal medium seemed the short story, which ive since learned had quite a brief life, roughly coincident with the peak of magazine publishing. but since their size made them perfect for use in high school classes, we read a lot of them, which gave us the impression the short story was flourishing. mistake number three. and because they were so short, nothing really had to happen; you could just show a randomly truncated slice of life, and that was considered advanced. mistake number four. the result was that i wrote a lot of stories in which nothing happened except that someone was unhappy in a way that seemed deep. for most of college i was a philosophy major. i was very impressed by the papers published in philosophy journals. they were so beautifully typeset, and their tone was just captivatingalternately casual and buffer-overflowingly technical. a fellow would be walking along a street and suddenly modality qua modality would spring upon him. i didnt ever quite understand these papers, but i figured id get around to that later, when i had time to reread them more closely. in the meantime i tried my best to imitate them. this was, i can now see, a doomed undertaking, because they werent really saying anything. no philosopher ever refuted another, for example, because no one said anything definite enough to refute. needless to say, my imitations didnt say anything either. in grad school i was still wasting time imitating the wrong things. there was then a fashionable type of program called an expert system, at the core of which was something called an inference engine. i looked at what these things did and thought "i could write that in a thousand lines of code." and yet eminent professors were writing books about them, and startups were selling them for a years salary a copy. what an opportunity, i thought; these impressive things seem easy to me; i must be pretty sharp. wrong. it was simply a fad. the books the professors wrote about expert systems are now ignored. they were not even on a path to anything interesting. and the customers paying so much for them were largely the same government agencies that paid thousands for screwdrivers and toilet seats. how do you avoid copying the wrong things? copy only what you genuinely like. that would have saved me in all three cases. i didnt enjoy the short stories we had to read in english classes; i didnt learn anything from philosophy papers; i didnt use expert systems myself. i believed these things were good because they were admired. it can be hard to separate the things you like from the things youre impressed with. one trick is to ignore presentation. whenever i see a painting impressively hung in a museum, i ask myself: how much would i pay for this if i found it at a garage sale, dirty and frameless, and with no idea who painted it? if you walk around a museum trying this experiment, youll find you get some truly startling results. dont ignore this data point just because its an outlier. another way to figure out what you like is to look at what you enjoy as guilty pleasures. many things people like, especially if theyre young and ambitious, they like largely for the feeling of virtue in liking them. 99% of people reading ulysses are thinking "im reading ulysses " as they do it. a guilty pleasure is at least a pure one. what do you read when you dont feel up to being virtuous? what kind of book do you read and feel sad that theres only half of it left, instead of being impressed that youre half way through? thats what you really like. even when you find genuinely good things to copy, theres another pitfall to be avoided. be careful to copy what makes them good, rather than their flaws. its easy to be drawn into imitating flaws, because theyre easier to see, and of course easier to copy too. for example, most painters in the eighteenth and nineteenth centuries used brownish colors. they were imitating the great painters of the renaissance, whose paintings by that time were brown with dirt. those paintings have since been cleaned, revealing brilliant colors; their imitators are of course still brown. it was painting, incidentally, that cured me of copying the wrong things. halfway through grad school i decided i wanted to try being a painter, and the art world was so manifestly corrupt that it snapped the leash of credulity. these people made philosophy professors seem as scrupulous as mathematicians. it was so clearly a choice of doing good work xor being an insider that i was forced to see the distinction. its there to some degree in almost every field, but i had till then managed to avoid facing it. that was one of the most valuable things i learned from painting: you have to figure out for yourself whats good . you cant trust authorities. theyll lie to you on this one. comment on this essay. this essay was originally published at paulgraham.com ive discovered a handy test for figuring out what youre addicted to. imagine you were going to spend the weekend at a friends house on a little island off the coast of maine. there are no shops on the island and you wont be able to leave while youre there. also, youve never been to this house before, so you cant assume it will have more than any house might. what, besides clothes and toiletries, do you make a point of packing? thats what youre addicted to. for example, if you find yourself packing a bottle of vodka (just in case), you may want to stop and think about that. for me the list is four things: books, earplugs, a notebook, and a pen. there are other things i might bring if i thought of it, like music, or tea, but i can live without them. im not so addicted to caffeine that i wouldnt risk the house not having any tea, just for a weekend. quiet is another matter. i realize it seems a bit eccentric to take earplugs on a trip to an island off the coast of maine. if anywhere should be quiet, that should. but what if the person in the next room snored? what if there was a kid playing basketball? (thump, thump, thump... thump.) why risk it? earplugs are small. sometimes i can think with noise. if i already have momentum on some project, i can work in noisy places. i can edit an essay or debug code in an airport. but airports are not so bad: most of the noise is whitish. i couldnt work with the sound of a sitcom coming through the wall, or a car in the street playing thump-thump music. and of course theres another kind of thinking, when youre starting something new, that requires complete quiet. you never know when this will strike. its just as well to carry plugs. the notebook and pen are professional equipment, as it were. though actually there is something druglike about them, in the sense that their main purpose is to make me feel better. i hardly ever go back and read stuff i write down in notebooks. its just that if i cant write things down, worrying about remembering one idea gets in the way of having the next. pen and paper wick ideas. the best notebooks ive found are made by a company called miquelrius. i use their smallest size, which is about 2.5 x 4 in. the secret to writing on such narrow pages is to break words only when you run out of space, like a latin inscription. i use the cheapest plastic bic ballpoints, partly because their gluey ink doesnt seep through pages, and partly so i dont worry about losing them. i only started carrying a notebook about three years ago. before that i used whatever scraps of paper i could find. but the problem with scraps of paper is that theyre not ordered. in a notebook you can guess what a scribble means by looking at the pages around it. in the scrap era i was constantly finding notes id written years before that might say something i needed to remember, if i could only figure out what. as for books, i know the house would probably have something to read. on the average trip i bring four books and only read one of them, because i find new books to read en route. really bringing books is insurance. i realize this dependence on books is not entirely goodthat what i need them for is distraction. the books i bring on trips are often quite virtuous, the sort of stuff that might be assigned reading in a college class. but i know my motives arent virtuous. i bring books because if the world gets boring i need to be able to slip into another distilled by some writer. its like eating jam when you know you should be eating fruit. there is a point where ill do without books. i was walking in some steep mountains once, and decided id rather just think, if i was bored, rather than carry a single unnecessary ounce. it wasnt so bad. i found i could entertain myself by having ideas instead of reading other peoples. if you stop eating jam, fruit starts to taste better. so maybe ill try not bringing books on some future trip. theyre going to have to pry the plugs out of my cold, dead ears, however. this essay was originally published at paulgraham.com (this essay is derived from talks at usenix 2006 and railsconf 2006.) a couple years ago my friend trevor and i went to look at the apple garage. as we stood there, he said that as a kid growing up in saskatchewan hed been amazed at the dedication jobs and wozniak must have had to work in a garage. "those guys must have been freezing!" thats one of californias hidden advantages: the mild climate means theres lots of marginal space. in cold places that margin gets trimmed off. theres a sharper line between outside and inside, and only projects that are officially sanctionedby organizations, or parents, or wives, or at least by oneselfget proper indoor space. that raises the activation energy for new ideas. you cant just tinker. you have to justify. some of silicon valleys most famous companies began in garages: hewlett-packard in 1938, apple in 1976, google in 1998. in apples case the garage story is a bit of an urban legend. woz says all they did there was assemble some computers, and that he did all the actual design of the apple i and apple ii in his apartment or his cube at hp.  this was apparently too marginal even for apples pr people. by conventional standards, jobs and wozniak were marginal people too. obviously they were smart, but they cant have looked good on paper. they were at the time a pair of college dropouts with about three years of school between them, and hippies to boot. their previous business experience consisted of making "blue boxes" to hack into the phone system, a business with the rare distinction of being both illegal and unprofitable. now a startup operating out of a garage in silicon valley would feel part of an exalted tradition, like the poet in his garret, or the painter who cant afford to heat his studio and thus has to wear a beret indoors. but in 1976 it didnt seem so cool. the world hadnt yet realized that starting a computer company was in the same category as being a writer or a painter. it hadnt been for long. only in the preceding couple years had the dramatic fall in the cost of hardware allowed outsiders to compete. in 1976, everyone looked down on a company operating out of a garage, including the founders. one of the first things jobs did when they got some money was to rent office space. he wanted apple to seem like a real company. they already had something few real companies ever have: a fabulously well designed product. youd think theyd have had more confidence. but ive talked to a lot of startup founders, and its always this way. theyve built something thats going to change the world, and theyre worried about some nit like not having proper business cards. thats the paradox i want to explore: great new things often come from the margins, and yet the people who discover them are looked down on by everyone, including themselves. its an old idea that new things come from the margins. i want to examine its internal structure. why do great ideas come from the margins? what kind of ideas? and is there anything we can do to encourage the process? one reason so many good ideas come from the margin is simply that theres so much of it. there have to be more outsiders than insiders, if insider means anything. if the number of outsiders is huge it will always seem as if a lot of ideas come from them, even if few do per capita. but i think theres more going on than this. there are real disadvantages to being an insider, and in some kinds of work they can outweigh the advantages. imagine, for example, what would happen if the government decided to commission someone to write an official great american novel. first thered be a huge ideological squabble over who to choose. most of the best writers would be excluded for having offended one side or the other. of the remainder, the smart ones would refuse such a job, leaving only a few with the wrong sort of ambition. the committee would choose one at the height of his careerthat is, someone whose best work was behind himand hand over the project with copious free advice about how the book should show in positive terms the strength and diversity of the american people, etc, etc. the unfortunate writer would then sit down to work with a huge weight of expectation on his shoulders. not wanting to blow such a public commission, hed play it safe. this book had better command respect, and the way to ensure that would be to make it a tragedy. audiences have to be enticed to laugh, but if you kill people they feel obliged to take you seriously. as everyone knows, america plus tragedy equals the civil war, so thats what it would have to be about. better stick to the standard cartoon version that the civil war was about slavery; people would be confused otherwise; plus you can show a lot of strength and diversity. when finally completed twelve years later, the book would be a 900-page pastiche of existing popular novelsroughly gone with the wind plus roots . but its bulk and celebrity would make it a bestseller for a few months, until blown out of the water by a talk-show hosts autobiography. the book would be made into a movie and thereupon forgotten, except by the more waspish sort of reviewers, among whom it would be a byword for bogusness like milli vanilli or battlefield earth. maybe i got a little carried away with this example. and yet is this not at each point the way such a project would play out? the government knows better than to get into the novel business, but in other fields where they have a natural monopoly, like nuclear waste dumps, aircraft carriers, and regime change, youd find plenty of projects isomorphic to this oneand indeed, plenty that were less successful. this little thought experiment suggests a few of the disadvantages of insider projects: the selection of the wrong kind of people, the excessive scope, the inability to take risks, the need to seem serious, the weight of expectations, the power of vested interests, the undiscerning audience, and perhaps most dangerous, the tendency of such work to become a duty rather than a pleasure. a world with outsiders and insiders implies some kind of test for distinguishing between them. and the trouble with most tests for selecting elites is that there are two ways to pass them: to be good at what they try to measure, and to be good at hacking the test itself. so the first question to ask about a field is how honest its tests are, because this tells you what it means to be an outsider. this tells you how much to trust your instincts when you disagree with authorities, whether its worth going through the usual channels to become one yourself, and perhaps whether you want to work in this field at all. tests are least hackable when there are consistent standards for quality, and the people running the test really care about its integrity. admissions to phd programs in the hard sciences are fairly honest, for example. the professors will get whoever they admit as their own grad students, so they try hard to choose well, and they have a fair amount of data to go on. whereas undergraduate admissions seem to be much more hackable. one way to tell whether a field has consistent standards is the overlap between the leading practitioners and the people who teach the subject in universities. at one end of the scale you have fields like math and physics, where nearly all the teachers are among the best practitioners. in the middle are medicine, law, history, architecture, and computer science, where many are. at the bottom are business, literature, and the visual arts, where theres almost no overlap between the teachers and the leading practitioners. its this end that gives rise to phrases like "those who cant do, teach." incidentally, this scale might be helpful in deciding what to study in college. when i was in college the rule seemed to be that you should study whatever you were most interested in. but in retrospect youre probably better off studying something moderately interesting with someone whos good at it than something very interesting with someone who isnt. you often hear people say that you shouldnt major in business in college, but this is actually an instance of a more general rule: dont learn things from teachers who are bad at them. how much you should worry about being an outsider depends on the quality of the insiders. if youre an amateur mathematician and think youve solved a famous open problem, better go back and check. when i was in grad school, a friend in the math department had the job of replying to people who sent in proofs of fermats last theorem and so on, and it did not seem as if he saw it as a valuable source of tipsmore like manning a mental health hotline. whereas if the stuff youre writing seems different from what english professors are interested in, thats not necessarily a problem. where the method of selecting the elite is thoroughly corrupt, most of the good people will be outsiders. in art, for example, the image of the poor, misunderstood genius is not just one possible image of a great artist: its the standard image. im not saying its correct, incidentally, but it is telling how well this image has stuck. you couldnt make a rap like that stick to math or medicine.  if its corrupt enough, a test becomes an anti-test, filtering out the people it should select by making them to do things only the wrong people would do. popularity in high school seems to be such a test. there are plenty of similar ones in the grownup world. for example, rising up through the hierarchy of the average big company demands an attention to politics few thoughtful people could spare.  someone like bill gates can grow a company under him, but its hard to imagine him having the patience to climb the corporate ladder at general electricor microsoft, actually. its kind of strange when you think about it, because lord-of-the-flies schools and bureaucratic companies are both the default. there are probably a lot of people who go from one to the other and never realize the whole world doesnt work this way. i think thats one reason big companies are so often blindsided by startups. people at big companies dont realize the extent to which they live in an environment that is one large, ongoing test for the wrong qualities. if youre an outsider, your best chances for beating insiders are obviously in fields where corrupt tests select a lame elite. but theres a catch: if the tests are corrupt, your victory wont be recognized, at least in your lifetime. you may feel you dont need that, but history suggests its dangerous to work in fields with corrupt tests. you may beat the insiders, and yet not do as good work, on an absolute scale, as you would in a field that was more honest. standards in art, for example, were almost as corrupt in the first half of the eighteenth century as they are today. this was the era of those fluffy idealized portraits of countesses with their lapdogs. chardin decided to skip all that and paint ordinary things as he saw them. hes now considered the best of that periodand yet not the equal of leonardo or bellini or memling, who all had the additional encouragement of honest standards. it can be worth participating in a corrupt contest, however, if its followed by another that isnt corrupt. for example, it would be worth competing with a company that can spend more than you on marketing, as long as you can survive to the next round, when customers compare your actual products. similarly, you shouldnt be discouraged by the comparatively corrupt test of college admissions, because its followed immediately by less hackable tests.  even in a field with honest tests, there are still advantages to being an outsider. the most obvious is that outsiders have nothing to lose. they can do risky things, and if they fail, so what? few will even notice. the eminent, on the other hand, are weighed down by their eminence. eminence is like a suit: it impresses the wrong people, and it constrains the wearer. outsiders should realize the advantage they have here. being able to take risks is hugely valuable. everyone values safety too much, both the obscure and the eminent. no one wants to look like a fool. but its very useful to be able to. if most of your ideas arent stupid, youre probably being too conservative. youre not bracketing the problem. lord acton said we should judge talent at its best and character at its worst. for example, if you write one great book and ten bad ones, you still count as a great writeror at least, a better writer than someone who wrote eleven that were merely good. whereas if youre a quiet, law-abiding citizen most of the time but occasionally cut someone up and bury them in your backyard, youre a bad guy. almost everyone makes the mistake of treating ideas as if they were indications of character rather than talentas if having a stupid idea made you stupid. theres a huge weight of tradition advising us to play it safe. "even a fool is thought wise if he keeps silent," says the old testament (proverbs 17:28). well, that may be fine advice for a bunch of goatherds in bronze age palestine. there conservatism would be the order of the day. but times have changed. it might still be reasonable to stick with the old testament in political questions, but materially the world now has a lot more state. tradition is less of a guide, not just because things change faster, but because the space of possibilities is so large. the more complicated the world gets, the more valuable it is to be willing to look like a fool. and yet the more successful people become, the more heat they get if they screw upor even seem to screw up. in this respect, as in many others, the eminent are prisoners of their own success. so the best way to understand the advantages of being an outsider may be to look at the disadvantages of being an insider. if you ask eminent people whats wrong with their lives, the first thing theyll complain about is the lack of time. a friend of mine at google is fairly high up in the company and went to work for them long before they went public. in other words, hes now rich enough not to have to work. i asked him if he could still endure the annoyances of having a job, now that he didnt have to. and he said that there werent really any annoyances, exceptand he got a wistful look when he said thisthat he got so much email . the eminent feel like everyone wants to take a bite out of them. the problem is so widespread that people pretending to be eminent do it by pretending to be overstretched. the lives of the eminent become scheduled, and thats not good for thinking. one of the great advantages of being an outsider is long, uninterrupted blocks of time. thats what i remember about grad school: apparently endless supplies of time, which i spent worrying about, but not writing, my dissertation. obscurity is like health foodunpleasant, perhaps, but good for you. whereas fame tends to be like the alcohol produced by fermentation. when it reaches a certain concentration, it kills off the yeast that produced it. the eminent generally respond to the shortage of time by turning into managers. they dont have time to work. theyre surrounded by junior people theyre supposed to help or supervise. the obvious solution is to have the junior people do the work. some good stuff happens this way, but there are problems it doesnt work so well for: the kind where it helps to have everything in one head. for example, it recently emerged that the famous glass artist dale chihuly hasnt actually blown glass for 27 years. he has assistants do the work for him. but one of the most valuable sources of ideas in the visual arts is the resistance of the medium. thats why oil paintings look so different from watercolors. in principle you could make any mark in any medium; in practice the medium steers you. and if youre no longer doing the work yourself, you stop learning from this. so if you want to beat those eminent enough to delegate, one way to do it is to take advantage of direct contact with the medium. in the arts its obvious how: blow your own glass, edit your own films, stage your own plays. and in the process pay close attention to accidents and to new ideas you have on the fly. this technique can be generalized to any sort of work: if youre an outsider, dont be ruled by plans. planning is often just a weakness forced on those who delegate. is there a general rule for finding problems best solved in one head? well, you can manufacture them by taking any project usually done by multiple people and trying to do it all yourself. wozniaks work was a classic example: he did everything himself, hardware and software, and the result was miraculous. he claims not one bug was ever found in the apple ii, in either hardware or software. another way to find good problems to solve in one head is to focus on the grooves in the chocolate barthe places where tasks are divided when theyre split between several people. if you want to beat delegation, focus on a vertical slice: for example, be both writer and editor, or both design buildings and construct them. one especially good groove to span is the one between tools and things made with them. for example, programming languages and applications are usually written by different people, and this is responsible for a lot of the worst flaws in programming languages . i think every language should be designed simultaneously with a large application written in it, the way c was with unix. techniques for competing with delegation translate well into business, because delegation is endemic there. instead of avoiding it as a drawback of senility, many companies embrace it as a sign of maturity. in big companies software is often designed, implemented, and sold by three separate types of people. in startups one person may have to do all three. and though this feels stressful, its one reason startups win. the needs of customers and the means of satisfying them are all in one head. the very skill of insiders can be a weakness. once someone is good at something, they tend to spend all their time doing that. this kind of focus is very valuable, actually. much of the skill of experts is the ability to ignore false trails. but focus has drawbacks: you dont learn from other fields, and when a new approach arrives, you may be the last to notice. for outsiders this translates into two ways to win. one is to work on a variety of things. since you cant derive as much benefit (yet) from a narrow focus, you may as well cast a wider net and derive what benefit you can from similarities between fields. just as you can compete with delegation by working on larger vertical slices, you can compete with specialization by working on larger horizontal slicesby both writing and illustrating your book, for example. the second way to compete with focus is to see what focus overlooks. in particular, new things. so if youre not good at anything yet, consider working on something so new that no one else is either. it wont have any prestige yet, if no one is good at it, but youll have it all to yourself. the potential of a new medium is usually underestimated, precisely because no one has yet explored its possibilities. before durer tried making engravings, no one took them very seriously. engraving was for making little devotional imagesbasically fifteenth century baseball cards of saints. trying to make masterpieces in this medium must have seemed to durers contemporaries that way that, say, making masterpieces in comics might seem to the average person today. in the computer world we get not new mediums but new platforms: the minicomputer, the microprocessor, the web-based application. at first theyre always dismissed as being unsuitable for real work. and yet someone always decides to try anyway, and it turns out you can do more than anyone expected. so in the future when you hear people say of a new platform: yeah, its popular and cheap, but not ready yet for real work, jump on it. as well as being more comfortable working on established lines, insiders generally have a vested interest in perpetuating them. the professor who made his reputation by discovering some new idea is not likely to be the one to discover its replacement. this is particularly true with companies, who have not only skill and pride anchoring them to the status quo, but money as well. the achilles heel of successful companies is their inability to cannibalize themselves. many innovations consist of replacing something with a cheaper alternative, and companies just dont want to see a path whose immediate effect is to cut an existing source of revenue. so if youre an outsider you should actively seek out contrarian projects. instead of working on things the eminent have made prestigious, work on things that could steal that prestige. the really juicy new approaches are not the ones insiders reject as impossible, but those they ignore as undignified. for example, after wozniak designed the apple ii he offered it first to his employer, hp. they passed. one of the reasons was that, to save money, hed designed the apple ii to use a tv as a monitor, and hp felt they couldnt produce anything so declasse. wozniak used a tv as a monitor for the simple reason that he couldnt afford a monitor. outsiders are not merely free but compelled to make things that are cheap and lightweight. and both are good bets for growth: cheap things spread faster, and lightweight things evolve faster. the eminent, on the other hand, are almost forced to work on a large scale. instead of garden sheds they must design huge art museums. one reason they work on big things is that they can: like our hypothetical novelist, theyre flattered by such opportunities. they also know that big projects will by their sheer bulk impress the audience. a garden shed, however lovely, would be easy to ignore; a few might even snicker at it. you cant snicker at a giant museum, no matter how much you dislike it. and finally, there are all those people the eminent have working for them; they have to choose projects that can keep them all busy. outsiders are free of all this. they can work on small things, and theres something very pleasing about small things. small things can be perfect; big ones always have something wrong with them. but theres a magic in small things that goes beyond such rational explanations. all kids know it. small things have more personality. plus making them is more fun. you can do what you want; you dont have to satisfy committees. and perhaps most important, small things can be done fast. the prospect of seeing the finished project hangs in the air like the smell of dinner cooking. if you work fast, maybe you could have it done tonight. working on small things is also a good way to learn. the most important kinds of learning happen one project at a time. ("next time, i wont...") the faster you cycle through projects, the faster youll evolve. plain materials have a charm like small scale. and in addition theres the challenge of making do with less. every designers ears perk up at the mention of that game, because its a game you cant lose. like the jv playing the varsity, if you even tie, you win. so paradoxically there are cases where fewer resources yield better results, because the designers pleasure at their own ingenuity more than compensates.  so if youre an outsider, take advantage of your ability to make small and inexpensive things. cultivate the pleasure and simplicity of that kind of work; one day youll miss it. when youre old and eminent, what will you miss about being young and obscure? what people seem to miss most is the lack of responsibilities. responsibility is an occupational disease of eminence. in principle you could avoid it, just as in principle you could avoid getting fat as you get old, but few do. i sometimes suspect that responsibility is a trap and that the most virtuous route would be to shirk it, but regardless its certainly constraining. when youre an outsider youre constrained too, of course. youre short of money, for example. but that constrains you in different ways. how does responsibility constrain you? the worst thing is that it allows you not to focus on real work. just as the most dangerous forms of procrastination are those that seem like work, the danger of responsibilities is not just that they can consume a whole day, but that they can do it without setting off the kind of alarms youd set off if you spent a whole day sitting on a park bench. a lot of the pain of being an outsider is being aware of ones own procrastination. but this is actually a good thing. youre at least close enough to work that the smell of it makes you hungry. as an outsider, youre just one step away from getting things done. a huge step, admittedly, and one that most people never seem to make, but only one step. if you can summon up the energy to get started, you can work on projects with an intensity (in both senses) that few insiders can match. for insiders work turns into a duty, laden with responsibilities and expectations. its never so pure as it was when they were young. work like a dog being taken for a walk, instead of an ox being yoked to the plow. thats what they miss. a lot of outsiders make the mistake of doing the opposite; they admire the eminent so much that they copy even their flaws. copying is a good way to learn, but copy the right things. when i was in college i imitated the pompous diction of famous professors. but this wasnt what made them eminentit was more a flaw their eminence had allowed them to sink into. imitating it was like pretending to have gout in order to seem rich. half the distinguishing qualities of the eminent are actually disadvantages. imitating these is not only a waste of time, but will make you seem a fool to your models, who are often well aware of it. what are the genuine advantages of being an insider? the greatest is an audience. it often seems to outsiders that the great advantage of insiders is moneythat they have the resources to do what they want. but so do people who inherit money, and that doesnt seem to help, not as much as an audience. its good for morale to know people want to see what youre making; it draws work out of you. if im right that the defining advantage of insiders is an audience, then we live in exciting times, because just in the last ten years the internet has made audiences a lot more liquid. outsiders dont have to content themselves anymore with a proxy audience of a few smart friends. now, thanks to the internet, they can start to grow themselves actual audiences. this is great news for the marginal, who retain the advantages of outsiders while increasingly being able to siphon off what had till recently been the prerogative of the elite. though the web has been around for more than ten years, i think were just beginning to see its democratizing effects. outsiders are still learning how to steal audiences. but more importantly, audiences are still learning how to be stolentheyre still just beginning to realize how much deeper bloggers can dig than journalists, how much more interesting a democratic news site can be than a front page controlled by editors, and how much funnier a bunch of kids with webcams can be than mass-produced sitcoms. the big media companies shouldnt worry that people will post their copyrighted material on youtube. they should worry that people will post their own stuff on youtube, and audiences will watch that instead. if i had to condense the power of the marginal into one sentence it would be: just try hacking something together. that phrase draws in most threads ive mentioned here. hacking something together means deciding what to do as youre doing it, not a subordinate executing the vision of his boss. it implies the result wont be pretty, because it will be made quickly out of inadequate materials. it may work, but it wont be the sort of thing the eminent would want to put their name on. something hacked together means something that barely solves the problem, or maybe doesnt solve the problem at all, but another you discovered en route. but thats ok, because the main value of that initial version is not the thing itself, but what it leads to. insiders who darent walk through the mud in their nice clothes will never make it to the solid ground on the other side. the word "try" is an especially valuable component. i disagree here with yoda, who said there is no try. there is try. it implies theres no punishment if you fail. youre driven by curiosity instead of duty. that means the wind of procrastination will be in your favor: instead of avoiding this work, this will be what you do as a way of avoiding other work. and when you do it, youll be in a better mood. the more the work depends on imagination, the more that matters, because most people have more ideas when theyre happy. if i could go back and redo my twenties, that would be one thing id do more of: just try hacking things together. like many people that age, i spent a lot of time worrying about what i should do. i also spent some time trying to build stuff. i should have spent less time worrying and more time building. if youre not sure what to do, make something. raymond chandlers advice to thriller writers was "when in doubt, have a man come through a door with a gun in his hand." he followed that advice. judging from his books, he was often in doubt. but though the result is occasionally cheesy, its never boring. in life, as in books, action is underrated. fortunately the number of things you can just hack together keeps increasing. people fifty years ago would be astonished that one could just hack together a movie, for example. now you can even hack together distribution. just make stuff and put it online. if you really want to score big, the place to focus is the margin of the margin: the territories only recently captured from the insiders. thats where youll find the juiciest projects still undone, either because they seemed too risky, or simply because there were too few insiders to explore everything. this is why i spend most of my time writing essays lately. the writing of essays used to be limited to those who could get them published. in principle you could have written them and just shown them to your friends; in practice that didnt work.  an essayist needs the resistance of an audience, just as an engraver needs the resistance of the plate. up till a few years ago, writing essays was the ultimate insiders game. domain experts were allowed to publish essays about their field, but the pool allowed to write on general topics was about eight people who went to the right parties in new york. now the reconquista has overrun this territory, and, not surprisingly, found it sparsely cultivated. there are so many essays yet unwritten. they tend to be the naughtier ones; the insiders have pretty much exhausted the motherhood and apple pie topics. this leads to my final suggestion: a technique for determining when youre on the right track. youre on the right track when people complain that youre unqualified, or that youve done something inappropriate. if people are complaining, that means youre doing something rather than sitting around, which is the first step. and if theyre driven to such empty forms of complaint, that means youve probably done something good. if you make something and people complain that it doesnt work , thats a problem. but if the worst thing they can hit you with is your own status as an outsider, that implies that in every other respect youve succeeded. pointing out that someone is unqualified is as desperate as resorting to racial slurs. its just a legitimate sounding way of saying: we dont like your type around here. but the best thing of all is when people call what youre doing inappropriate. ive been hearing this word all my life and i only recently realized that it is, in fact, the sound of the homing beacon. "inappropriate" is the null criticism. its merely the adjective form of "i dont like it." so that, i think, should be the highest goal for the marginal. be inappropriate. when you hear people saying that, youre golden. and they, incidentally, are busted.  the facts about apples early history are from an interview with steve wozniak in jessica livingstons founders at work .  as usual the popular image is several decades behind reality. now the misunderstood artist is not a chain-smoking drunk who pours his soul into big, messy canvases that philistines see and say "thats not art" because it isnt a picture of anything. the philistines have now been trained that anything hung on a wall is art. now the misunderstood artist is a coffee-drinking vegan cartoonist whose work they see and say "thats not art" because it looks like stuff theyve seen in the sunday paper.  in fact this would do fairly well as a definition of politics: what determines rank in the absence of objective tests.  in high school youre led to believe your whole future depends on where you go to college, but it turns out only to buy you a couple years. by your mid-twenties the people worth impressing already judge you more by what youve done than where you went to school.  managers are presumably wondering, how can i make this miracle happen? how can i make the people working for me do more with less? unfortunately the constraint probably has to be self-imposed. if youre expected to do more with less, then youre being starved, not eating virtuously.  without the prospect of publication, the closest most people come to writing essays is to write in a journal. i find i never get as deeply into subjects as i do in proper essays. as the name implies, you dont go back and rewrite journal entries over and over for two weeks. thanks to sam altman, trevor blackwell, paul buchheit, sarah harlin, jessica livingston, jackie mcdonough, robert morris, olin shivers, and chris small for reading drafts of this, and to chris small and chad fowler for inviting me to speak. this essay was originally published at paulgraham.com (this essay is derived from a keynote at xtech.) startups happen in clusters. there are a lot of them in silicon valley and boston, and few in chicago or miami. a country that wants startups will probably also have to reproduce whatever makes these clusters form. ive claimed that the recipe is a great university near a town smart people like. if you set up those conditions within the us, startups will form as inevitably as water droplets condense on a cold piece of metal. but when i consider what it would take to reproduce silicon valley in another country, its clear the us is a particularly humid environment. startups condense more easily here. it is by no means a lost cause to try to create a silicon valley in another country. theres room not merely to equal silicon valley, but to surpass it. but if you want to do that, you have to understand the advantages startups get from being in america. for example, i doubt it would be possible to reproduce silicon valley in japan, because one of silicon valleys most distinctive features is immigration. half the people there speak with accents. and the japanese dont like immigration. when they think about how to make a japanese silicon valley, i suspect they unconsciously frame it as how to make one consisting only of japanese people. this way of framing the question probably guarantees failure. a silicon valley has to be a mecca for the smart and the ambitious, and you cant have a mecca if you dont let people into it. of course, its not saying much that america is more open to immigration than japan. immigration policy is one area where a competitor could do better. i could see india one day producing a rival to silicon valley. obviously they have the right people: you can tell that by the number of indians in the current silicon valley. the problem with india itself is that its still so poor. in poor countries, things we take for granted are missing. a friend of mine visiting india sprained her ankle falling down the steps in a railway station. when she turned to see what had happened, she found the steps were all different heights. in industrialized countries we walk down steps our whole lives and never think about this, because theres an infrastructure that prevents such a staircase from being built. the us has never been so poor as some countries are now. there have never been swarms of beggars in the streets of american cities. so we have no data about what it takes to get from the swarms-of-beggars stage to the silicon-valley stage. could you have both at once, or does there have to be some baseline prosperity before you get a silicon valley? i suspect there is some speed limit to the evolution of an economy. economies are made out of people, and attitudes can only change a certain amount per generation.  another country i could see wanting to have a silicon valley is china. but i doubt they could do it yet either. china still seems to be a police state, and although present rulers seem enlightened compared to the last, even enlightened despotism can probably only get you part way toward being a great economic power. it can get you factories for building things designed elsewhere. can it get you the designers, though? can imagination flourish where people cant criticize the government? imagination means having odd ideas, and its hard to have odd ideas about technology without also having odd ideas about politics. and in any case, many technical ideas do have political implications. so if you squash dissent, the back pressure will propagate into technical fields.  singapore would face a similar problem. singapore seems very aware of the importance of encouraging startups. but while energetic government intervention may be able to make a port run efficiently, it cant coax startups into existence. a state that bans chewing gum has a long way to go before it could create a san francisco. do you need a san francisco? might there not be an alternate route to innovation that goes through obedience and cooperation instead of individualism? possibly, but id bet not. most imaginative people seem to share a certain prickly independence , whenever and wherever they lived. you see it in diogenes telling alexander to get out of his light and two thousand years later in feynman breaking into safes at los alamos.  imaginative people dont want to follow or lead. theyre most productive when everyone gets to do what they want. ironically, of all rich countries the us has lost the most civil liberties recently. but im not too worried yet. im hoping once the present administration is out, the natural openness of american culture will reassert itself. you need a great university to seed a silicon valley, and so far there are few outside the us. i asked a handful of american computer science professors which universities in europe were most admired, and they all basically said "cambridge" followed by a long pause while they tried to think of others. there dont seem to be many universities elsewhere that compare with the best in america, at least in technology. in some countries this is the result of a deliberate policy. the german and dutch governments, perhaps from fear of elitism, try to ensure that all universities are roughly equal in quality. the downside is that none are especially good. the best professors are spread out, instead of being concentrated as they are in the us. this probably makes them less productive, because they dont have good colleagues to inspire them. it also means no one university will be good enough to act as a mecca, attracting talent from abroad and causing startups to form around it. the case of germany is a strange one. the germans invented the modern university, and up till the 1930s theirs were the best in the world. now they have none that stand out. as i was mulling this over, i found myself thinking: "i can understand why german universities declined in the 1930s, after they excluded jews. but surely they should have bounced back by now." then i realized: maybe not. there are few jews left in germany and most jews i know would not want to move there. and if you took any great american university and removed the jews, youd have some pretty big gaps. so maybe it would be a lost cause trying to create a silicon valley in germany, because you couldnt establish the level of university youd need as a seed.  its natural for us universities to compete with one another because so many are private. to reproduce the quality of american universities you probably also have to reproduce this. if universities are controlled by the central government, log-rolling will pull them all toward the mean: the new institute of x will end up at the university in the district of a powerful politician, instead of where it should be. i think one of the biggest obstacles to creating startups in europe is the attitude toward employment. the famously rigid labor laws hurt every company, but startups especially, because startups have the least time to spare for bureaucratic hassles. the difficulty of firing people is a particular problem for startups because they have no redundancy. every person has to do their job well. but the problem is more than just that some startup might have a problem firing someone they needed to. across industries and countries, theres a strong inverse correlation between performance and job security. actors and directors are fired at the end of each film, so they have to deliver every time. junior professors are fired by default after a few years unless the university chooses to grant them tenure. professional athletes know theyll be pulled if they play badly for just a couple games. at the other end of the scale (at least in the us) are auto workers, new york city schoolteachers, and civil servants, who are all nearly impossible to fire. the trend is so clear that youd have to be willfully blind not to see it. performance isnt everything, you say? well, are auto workers, schoolteachers, and civil servants happier than actors, professors, and professional athletes? european public opinion will apparently tolerate people being fired in industries where they really care about performance. unfortunately the only industry they care enough about so far is soccer. but that is at least a precedent. the problem in more traditional places like europe and japan goes deeper than the employment laws. more dangerous is the attitude they reflect: that an employee is a kind of servant, whom the employer has a duty to protect. it used to be that way in america too. in 1970 you were still supposed to get a job with a big company, for whom ideally youd work your whole career. in return the company would take care of you: theyd try not to fire you, cover your medical expenses, and support you in old age. gradually employment has been shedding such paternalistic overtones and becoming simply an economic exchange. but the importance of the new model is not just that it makes it easier for startups to grow. more important, i think, is that it it makes it easier for people to start startups. even in the us most kids graduating from college still think theyre supposed to get jobs, as if you couldnt be productive without being someones employee. but the less you identify work with employment, the easier it becomes to start a startup. when you see your career as a series of different types of work, instead of a lifetimes service to a single employer, theres less risk in starting your own company, because youre only replacing one segment instead of discarding the whole thing. the old ideas are so powerful that even the most successful startup founders have had to struggle against them. a year after the founding of apple, steve wozniak still hadnt quit hp. he still planned to work there for life. and when jobs found someone to give apple serious venture funding, on the condition that woz quit, he initially refused, arguing that hed designed both the apple i and the apple ii while working at hp, and there was no reason he couldnt continue. if there are any laws regulating businesses, you can assume larval startups will break most of them, because they dont know what the laws are and dont have time to find out. for example, many startups in america begin in places where its not really legal to run a business. hewlett-packard, apple, and google were all run out of garages. many more startups, including ours, were initially run out of apartments. if the laws against such things were actually enforced, most startups wouldnt happen. that could be a problem in fussier countries. if hewlett and packard tried running an electronics company out of their garage in switzerland, the old lady next door would report them to the municipal authorities. but the worst problem in other countries is probably the effort required just to start a company. a friend of mine started a company in germany in the early 90s, and was shocked to discover, among many other regulations, that you needed $20,000 in capital to incorporate. thats one reason im not typing this on an apfel laptop. jobs and wozniak couldnt have come up with that kind of money in a company financed by selling a vw bus and an hp calculator. we couldnt have started viaweb either.  heres a tip for governments that want to encourage startups: read the stories of existing startups, and then try to simulate what would have happened in your country. when you hit something that would have killed apple, prune it off. startups are marginal . theyre started by the poor and the timid; they begin in marginal space and spare time; theyre started by people who are supposed to be doing something else; and though businesses, their founders often know nothing about business. young startups are fragile. a society that trims its margins sharply will kill them all. what sustains a startup in the beginning is the prospect of getting their initial product out. the successful ones therefore make the first version as simple as possible. in the us they usually begin by making something just for the local market. this works in america, because the local market is 300 million people. it wouldnt work so well in sweden. in a small country, a startup has a harder task: they have to sell internationally from the start. the eu was designed partly to simulate a single, large domestic market. the problem is that the inhabitants still speak many different languages. so a software startup in sweden is still at a disadvantage relative to one in the us, because they have to deal with internationalization from the beginning. its significant that the most famous recent startup in europe, skype, worked on a problem that was intrinsically international. however, for better or worse it looks as if europe will in a few decades speak a single language. when i was a student in italy in 1990, few italians spoke english. now all educated people seem to be expected to-- and europeans do not like to seem uneducated. this is presumably a taboo subject, but if present trends continue, french and german will eventually go the way of irish and luxembourgish: theyll be spoken in homes and by eccentric nationalists. startups are easier to start in america because funding is easier to get. there are now a few vc firms outside the us, but startup funding doesnt only come from vc firms. a more important source, because its more personal and comes earlier in the process, is money from individual angel investors. google might never have got to the point where they could raise millions from vc funds if they hadnt first raised a hundred thousand from andy bechtolsheim. and he could help them because he was one of the founders of sun. this pattern is repeated constantly in startup hubs. its this pattern that makes them startup hubs. the good news is, all you have to do to get the process rolling is get those first few startups successfully launched. if they stick around after they get rich, startup founders will almost automatically fund and encourage new startups. the bad news is that the cycle is slow. it probably takes five years, on average, before a startup founder can make angel investments. and while governments might be able to set up local vc funds by supplying the money themselves and recruiting people from existing firms to run them, only organic growth can produce angel investors. incidentally, americas private universities are one reason theres so much venture capital. a lot of the money in vc funds comes from their endowments. so another advantage of private universities is that a good chunk of the countrys wealth is managed by enlightened investors. compared to other industrialized countries the us is disorganized about routing people into careers. for example, in america people often dont decide to go to medical school till theyve finished college. in europe they generally decide in high school. the european approach reflects the old idea that each person has a single, definite occupation-- which is not far from the idea that each person has a natural "station" in life. if this were true, the most efficient plan would be to discover each persons station as early as possible, so they could receive the training appropriate to it. in the us things are more haphazard. but that turns out to be an advantage as an economy gets more liquid, just as dynamic typing turns out to work better than static for ill-defined problems. this is particularly true with startups. "startup founder" is not the sort of career a high school student would choose. if you ask at that age, people will choose conservatively. theyll choose well-understood occupations like engineer, or doctor, or lawyer. startups are the kind of thing people dont plan, so youre more likely to get them in a society where its ok to make career decisions on the fly. for example, in theory the purpose of a phd program is to train you to do research. but fortunately in the us this is another rule that isnt very strictly enforced. in the us most people in cs phd programs are there simply because they wanted to learn more. they havent decided what theyll do afterward. so american grad schools spawn a lot of startups, because students dont feel theyre failing if they dont go into research. those worried about americas "competitiveness" often suggest spending more on public schools. but perhaps americas lousy public schools have a hidden advantage. because theyre so bad, the kids adopt an attitude of waiting for college. i did; i knew i was learning so little that i wasnt even learning what the choices were, let alone which to choose. this is demoralizing, but it does at least make you keep an open mind. certainly if i had to choose between bad high schools and good universities, like the us, and good high schools and bad universities, like most other industrialized countries, id take the us system. better to make everyone feel like a late bloomer than a failed child prodigy. theres one item conspicuously missing from this list: american attitudes. americans are said to be more entrepreneurial, and less afraid of risk. but america has no monopoly on this. indians and chinese seem plenty entrepreneurial, perhaps more than americans. some say europeans are less energetic, but i dont believe it. i think the problem with europe is not that they lack balls, but that they lack examples. even in the us, the most successful startup founders are often technical people who are quite timid, initially, about the idea of starting their own company. few are the sort of backslapping extroverts one thinks of as typically american. they can usually only summon up the activation energy to start a startup when they meet people whove done it and realize they could too. i think what holds back european hackers is simply that they dont meet so many people whove done it. you see that variation even within the us. stanford students are more entrepreneurial than yale students, but not because of some difference in their characters; the yale students just have fewer examples. i admit there seem to be different attitudes toward ambition in europe and the us. in the us its ok to be overtly ambitious, and in most of europe its not. but this cant be an intrinsically european quality; previous generations of europeans were as ambitious as americans. what happened? my hypothesis is that ambition was discredited by the terrible things ambitious people did in the first half of the twentieth century. now swagger is out. (even now the image of a very ambitious german presses a button or two, doesnt it?) it would be surprising if european attitudes werent affected by the disasters of the twentieth century. it takes a while to be optimistic after events like that. but ambition is human nature. gradually it will re-emerge.  i dont mean to suggest by this list that america is the perfect place for startups. its the best place so far, but the sample size is small, and "so far" is not very long. on historical time scales, what we have now is just a prototype. so lets look at silicon valley the way youd look at a product made by a competitor. what weaknesses could you exploit? how could you make something users would like better? the users in this case are those critical few thousand people youd like to move to your silicon valley. to start with, silicon valley is too far from san francisco. palo alto, the original ground zero, is about thirty miles away, and the present center more like forty. so people who come to work in silicon valley face an unpleasant choice: either live in the boring sprawl of the valley proper, or live in san francisco and endure an hour commute each way. the best thing would be if the silicon valley were not merely closer to the interesting city, but interesting itself. and there is a lot of room for improvement here. palo alto is not so bad, but everything built since is the worst sort of strip development. you can measure how demoralizing it is by the number of people who will sacrifice two hours a day commuting rather than live there. another area in which you could easily surpass silicon valley is public transportation. there is a train running the length of it, and by american standards its not bad. which is to say that to japanese or europeans it would seem like something out of the third world. the kind of people you want to attract to your silicon valley like to get around by train, bicycle, and on foot. so if you want to beat america, design a town that puts cars last. it will be a while before any american city can bring itself to do that. there are also a couple things you could do to beat america at the national level. one would be to have lower capital gains taxes. it doesnt seem critical to have the lowest income taxes, because to take advantage of those, people have to move.  but if capital gains rates vary, you move assets, not yourself, so changes are reflected at market speeds. the lower the rate, the cheaper it is to buy stock in growing companies as opposed to real estate, or bonds, or stocks bought for the dividends they pay. so if you want to encourage startups you should have a low rate on capital gains. politicians are caught between a rock and a hard place here, however: make the capital gains rate low and be accused of creating "tax breaks for the rich," or make it high and starve growing companies of investment capital. as galbraith said, politics is a matter of choosing between the unpalatable and the disastrous. a lot of governments experimented with the disastrous in the twentieth century; now the trend seems to be toward the merely unpalatable. oddly enough, the leaders now are european countries like belgium, which has a capital gains tax rate of zero. the other place you could beat the us would be with smarter immigration policy. there are huge gains to be made here. silicon valleys are made of people, remember. like a company whose software runs on windows, those in the current silicon valley are all too aware of the shortcomings of the ins, but theres little they can do about it. theyre hostages of the platform. americas immigration system has never been well run, and since 2001 there has been an additional admixture of paranoia. what fraction of the smart people who want to come to america can even get in? i doubt even half. which means if you made a competing technology hub that let in all smart people, youd immediately get more than half the worlds top talent, for free. us immigration policy is particularly ill-suited to startups, because it reflects a model of work from the 1970s. it assumes good technical people have college degrees, and that work means working for a big company. if you dont have a college degree you cant get an h1b visa, the type usually issued to programmers. but a test that excludes steve jobs, bill gates, and michael dell cant be a good one. plus you cant get a visa for working on your own company, only for working as an employee of someone elses. and if you want to apply for citizenship you darent work for a startup at all, because if your sponsor goes out of business, you have to start over. american immigration policy keeps out most smart people, and channels the rest into unproductive jobs. it would be easy to do better. imagine if, instead, you treated immigration like recruiting-- if you made a conscious effort to seek out the smartest people and get them to come to your country. a country that got immigration right would have a huge advantage. at this point you could become a mecca for smart people simply by having an immigration system that let them in. if you look at the kinds of things you have to do to create an environment where startups condense, none are great sacrifices. great universities? livable towns? civil liberties? flexible employment laws? immigration policies that let in smart people? tax laws that encourage growth? its not as if you have to risk destroying your country to get a silicon valley; these are all good things in their own right. and then of course theres the question, can you afford not to? i can imagine a future in which the default choice of ambitious young people is to start their own company rather than work for someone elses. im not sure that will happen, but its where the trend points now. and if that is the future, places that dont have startups will be a whole step behind, like those that missed the industrial revolution.  on the verge of the industrial revolution, england was already the richest country in the world. as far as such things can be compared, per capita income in england in 1750 was higher than indias in 1960. deane, phyllis, the first industrial revolution , cambridge university press, 1965.  this has already happened once in china, during the ming dynasty, when the country turned its back on industrialization at the command of the court. one of europes advantages was that it had no government powerful enough to do that.  of course, feynman and diogenes were from adjacent traditions, but confucius, though more polite, was no more willing to be told what to think.  for similar reasons it might be a lost cause to try to establish a silicon valley in israel. instead of no jews moving there, only jews would move there, and i dont think you could build a silicon valley out of just jews any more than you could out of just japanese. (this is not a remark about the qualities of these groups, just their sizes. japanese are only about 2% of the world population, and jews about .2%.)  according to the world bank, the initial capital requirement for german companies is 47.6% of the per capita income. doh. world bank, doing business in 2006 , http://doingbusiness.org  for most of the twentieth century, europeans looked back on the summer of 1914 as if theyd been living in a dream world. it seems more accurate (or at least, as accurate) to call the years after 1914 a nightmare than to call those before a dream. a lot of the optimism europeans consider distinctly american is simply what they too were feeling in 1914.  the point where things start to go wrong seems to be about 50%. above that people get serious about tax avoidance. the reason is that the payoff for avoiding tax grows hyperexponentially (x/1-x for 0  x  1). if your income tax rate is 10%, moving to monaco would only give you 11% more income, which wouldnt even cover the extra cost. if its 90%, youd get ten times as much income. and at 98%, as it was briefly in britain in the 70s, moving to monaco would give you fifty times as much income. it seems quite likely that european governments of the 70s never drew this curve. thanks to trevor blackwell, matthias felleisen, jessica livingston, robert morris, neil rimer, hugues steinier, brad templeton, fred wilson, and stephen wolfram for reading drafts of this, and to ed dumbill for inviting me to speak. this essay was originally published at paulgraham.com (this essay is derived from a keynote at xtech.) could you reproduce silicon valley elsewhere, or is there something unique about it? it wouldnt be surprising if it were hard to reproduce in other countries, because you couldnt reproduce it in most of the us either. what does it take to make a silicon valley even here? what it takes is the right people. if you could get the right ten thousand people to move from silicon valley to buffalo, buffalo would become silicon valley.  thats a striking departure from the past. up till a couple decades ago, geography was destiny for cities. all great cities were located on waterways, because cities made money by trade, and water was the only economical way to ship. now you could make a great city anywhere, if you could get the right people to move there. so the question of how to make a silicon valley becomes: who are the right people, and how do you get them to move? i think you only need two kinds of people to create a technology hub: rich people and nerds. theyre the limiting reagents in the reaction that produces startups, because theyre the only ones present when startups get started. everyone else will move. observation bears this out: within the us, towns have become startup hubs if and only if they have both rich people and nerds. few startups happen in miami, for example, because although its full of rich people, it has few nerds. its not the kind of place nerds like. whereas pittsburgh has the opposite problem: plenty of nerds, but no rich people. the top us computer science departments are said to be mit, stanford, berkeley, and carnegie-mellon. mit yielded route 128. stanford and berkeley yielded silicon valley. but carnegie-mellon? the record skips at that point. lower down the list, the university of washington yielded a high-tech community in seattle, and the university of texas at austin yielded one in austin. but what happened in pittsburgh? and in ithaca, home of cornell, which is also high on the list? i grew up in pittsburgh and went to college at cornell, so i can answer for both. the weather is terrible, particularly in winter, and theres no interesting old city to make up for it, as there is in boston. rich people dont want to live in pittsburgh or ithaca. so while there are plenty of hackers who could start startups, theres no one to invest in them. do you really need the rich people? wouldnt it work to have the government invest in the nerds? no, it would not. startup investors are a distinct type of rich people. they tend to have a lot of experience themselves in the technology business. this (a) helps them pick the right startups, and (b) means they can supply advice and connections as well as money. and the fact that they have a personal stake in the outcome makes them really pay attention. bureaucrats by their nature are the exact opposite sort of people from startup investors. the idea of them making startup investments is comic. it would be like mathematicians running vogue -- or perhaps more accurately, vogue editors running a math journal.  though indeed, most things bureaucrats do, they do badly. we just dont notice usually, because they only have to compete against other bureaucrats. but as startup investors theyd have to compete against pros with a great deal more experience and motivation. even corporations that have in-house vc groups generally forbid them to make their own investment decisions. most are only allowed to invest in deals where some reputable private vc firm is willing to act as lead investor. if you go to see silicon valley, what youll see are buildings. but its the people that make it silicon valley, not the buildings. i read occasionally about attempts to set up " technology parks " in other places, as if the active ingredient of silicon valley were the office space. an article about sophia antipolis bragged that companies there included cisco, compaq, ibm, ncr, and nortel. dont the french realize these arent startups? building office buildings for technology companies wont get you a silicon valley, because the key stage in the life of a startup happens before they want that kind of space. the key stage is when theyre three guys operating out of an apartment. wherever the startup is when it gets funded, it will stay. the defining quality of silicon valley is not that intel or apple or google have offices there, but that they were started there. so if you want to reproduce silicon valley, what you need to reproduce is those two or three founders sitting around a kitchen table deciding to start a company. and to reproduce that you need those people. the exciting thing is, all you need are the people. if you could attract a critical mass of nerds and investors to live somewhere, you could reproduce silicon valley. and both groups are highly mobile. theyll go where life is good. so what makes a place good to them? what nerds like is other nerds. smart people will go wherever other smart people are. and in particular, to great universities. in theory there could be other ways to attract them, but so far universities seem to be indispensable. within the us, there are no technology hubs without first-rate universities-- or at least, first-rate computer science departments. so if you want to make a silicon valley, you not only need a university, but one of the top handful in the world. it has to be good enough to act as a magnet, drawing the best people from thousands of miles away. and that means it has to stand up to existing magnets like mit and stanford. this sounds hard. actually it might be easy. my professor friends, when theyre deciding where theyd like to work, consider one thing above all: the quality of the other faculty. what attracts professors is good colleagues. so if you managed to recruit, en masse, a significant number of the best young researchers, you could create a first-rate university from nothing overnight. and you could do that for surprisingly little. if you paid 200 people hiring bonuses of $3 million apiece, you could put together a faculty that would bear comparison with any in the world. and from that point the chain reaction would be self-sustaining. so whatever it costs to establish a mediocre university, for an additional half billion or so you could have a great one.  however, merely creating a new university would not be enough to start a silicon valley. the university is just the seed. it has to be planted in the right soil, or it wont germinate. plant it in the wrong place, and you just create carnegie-mellon. to spawn startups, your university has to be in a town that has attractions other than the university. it has to be a place where investors want to live, and students want to stay after they graduate. the two like much the same things, because most startup investors are nerds themselves. so what do nerds look for in a town? their tastes arent completely different from other peoples, because a lot of the towns they like most in the us are also big tourist destinations: san francisco, boston, seattle. but their tastes cant be quite mainstream either, because they dislike other big tourist destinations, like new york, los angeles, and las vegas. there has been a lot written lately about the "creative class." the thesis seems to be that as wealth derives increasingly from ideas, cities will prosper only if they attract those who have them. that is certainly true; in fact it was the basis of amsterdams prosperity 400 years ago. a lot of nerd tastes they share with the creative class in general. for example, they like well-preserved old neighborhoods instead of cookie-cutter suburbs, and locally-owned shops and restaurants instead of national chains. like the rest of the creative class, they want to live somewhere with personality. what exactly is personality? i think its the feeling that each building is the work of a distinct group of people. a town with personality is one that doesnt feel mass-produced. so if you want to make a startup hub-- or any town to attract the "creative class"-- you probably have to ban large development projects. when a large tract has been developed by a single organization, you can always tell.  most towns with personality are old, but they dont have to be. old towns have two advantages: theyre denser, because they were laid out before cars, and theyre more varied, because they were built one building at a time. you could have both now. just have building codes that ensure density, and ban large scale developments. a corollary is that you have to keep out the biggest developer of all: the government. a government that asks "how can we build a silicon valley?" has probably ensured failure by the way they framed the question. you dont build a silicon valley; you let one grow. if you want to attract nerds, you need more than a town with personality. you need a town with the right personality. nerds are a distinct subset of the creative class, with different tastes from the rest. you can see this most clearly in new york, which attracts a lot of creative people, but few nerds.  what nerds like is the kind of town where people walk around smiling. this excludes la, where no one walks at all, and also new york, where people walk, but not smiling. when i was in grad school in boston, a friend came to visit from new york. on the subway back from the airport she asked "why is everyone smiling?" i looked and they werent smiling. they just looked like they were compared to the facial expressions she was used to. if youve lived in new york, you know where these facial expressions come from. its the kind of place where your mind may be excited, but your body knows its having a bad time. people dont so much enjoy living there as endure it for the sake of the excitement. and if you like certain kinds of excitement, new york is incomparable. its a hub of glamour, a magnet for all the shorter half-life isotopes of style and fame. nerds dont care about glamour, so to them the appeal of new york is a mystery. people who like new york will pay a fortune for a small, dark, noisy apartment in order to live in a town where the cool people are really cool. a nerd looks at that deal and sees only: pay a fortune for a small, dark, noisy apartment. nerds will pay a premium to live in a town where the smart people are really smart, but you dont have to pay as much for that. its supply and demand: glamour is popular, so you have to pay a lot for it. most nerds like quieter pleasures. they like cafes instead of clubs; used bookshops instead of fashionable clothing shops; hiking instead of dancing; sunlight instead of tall buildings. a nerds idea of paradise is berkeley or boulder. its the young nerds who start startups, so its those specifically the city has to appeal to. the startup hubs in the us are all young-feeling towns. this doesnt mean they have to be new. cambridge has the oldest town plan in america, but it feels young because its full of students. what you cant have, if you want to create a silicon valley, is a large, existing population of stodgy people. it would be a waste of time to try to reverse the fortunes of a declining industrial town like detroit or philadelphia by trying to encourage startups. those places have too much momentum in the wrong direction. youre better off starting with a blank slate in the form of a small town. or better still, if theres a town young people already flock to, that one. the bay area was a magnet for the young and optimistic for decades before it was associated with technology. it was a place people went in search of something new. and so it became synonymous with california nuttiness. theres still a lot of that there. if you wanted to start a new fad-- a new way to focus ones "energy," for example, or a new category of things not to eat-- the bay area would be the place to do it. but a place that tolerates oddness in the search for the new is exactly what you want in a startup hub, because economically thats what startups are. most good startup ideas seem a little crazy; if they were obviously good ideas, someone would have done them already. (how many people are going to want computers in their houses ? what, another search engine?) thats the connection between technology and liberalism. without exception the high-tech cities in the us are also the most liberal. but its not because liberals are smarter that this is so. its because liberal cities tolerate odd ideas, and smart people by definition have odd ideas. conversely, a town that gets praised for being "solid" or representing "traditional values" may be a fine place to live, but its never going to succeed as a startup hub. the 2004 presidential election, though a disaster in other respects, conveniently supplied us with a county-by-county map of such places.  to attract the young, a town must have an intact center. in most american cities the center has been abandoned, and the growth, if any, is in the suburbs. most american cities have been turned inside out. but none of the startup hubs has: not san francisco, or boston, or seattle. they all have intact centers.  my guess is that no city with a dead center could be turned into a startup hub. young people dont want to live in the suburbs. within the us, the two cities i think could most easily be turned into new silicon valleys are boulder and portland. both have the kind of effervescent feel that attracts the young. theyre each only a great university short of becoming a silicon valley, if they wanted to. a great university near an attractive town. is that all it takes? that was all it took to make the original silicon valley. silicon valley traces its origins to william shockley, one of the inventors of the transistor. he did the research that won him the nobel prize at bell labs, but when he started his own company in 1956 he moved to palo alto to do it. at the time that was an odd thing to do. why did he? because he had grown up there and remembered how nice it was. now palo alto is suburbia, but then it was a charming college town-- a charming college town with perfect weather and san francisco only an hour away. the companies that rule silicon valley now are all descended in various ways from shockley semiconductor. shockley was a difficult man, and in 1957 his top people-- "the traitorous eight"-- left to start a new company, fairchild semiconductor. among them were gordon moore and robert noyce, who went on to found intel, and eugene kleiner, who founded the vc firm kleiner perkins. forty-two years later, kleiner perkins funded google, and the partner responsible for the deal was john doerr, who came to silicon valley in 1974 to work for intel. so although a lot of the newest companies in silicon valley dont make anything out of silicon, there always seem to be multiple links back to shockley. theres a lesson here: startups beget startups. people who work for startups start their own. people who get rich from startups fund new ones. i suspect this kind of organic growth is the only way to produce a startup hub, because its the only way to grow the expertise you need. that has two important implications. the first is that you need time to grow a silicon valley. the university you could create in a couple years, but the startup community around it has to grow organically. the cycle time is limited by the time it takes a company to succeed, which probably averages about five years. the other implication of the organic growth hypothesis is that you cant be somewhat of a startup hub. you either have a self-sustaining chain reaction, or not. observation confirms this too: cities either have a startup scene, or they dont. there is no middle ground. chicago has the third largest metropolitan area in america. as source of startups its negligible compared to seattle, number 15. the good news is that the initial seed can be quite small. shockley semiconductor, though itself not very successful, was big enough. it brought a critical mass of experts in an important new technology together in a place they liked enough to stay. of course, a would-be silicon valley faces an obstacle the original one didnt: it has to compete with silicon valley. can that be done? probably. one of silicon valleys biggest advantages is its venture capital firms. this was not a factor in shockleys day, because vc funds didnt exist. in fact, shockley semiconductor and fairchild semiconductor were not startups at all in our sense. they were subsidiaries-- of beckman instruments and fairchild camera and instrument respectively. those companies were apparently willing to establish subsidiaries wherever the experts wanted to live. venture investors, however, prefer to fund startups within an hours drive. for one, theyre more likely to notice startups nearby. but when they do notice startups in other towns they prefer them to move. they dont want to have to travel to attend board meetings, and in any case the odds of succeeding are higher in a startup hub. the centralizing effect of venture firms is a double one: they cause startups to form around them, and those draw in more startups through acquisitions. and although the first may be weakening because its now so cheap to start some startups, the second seems as strong as ever. three of the most admired "web 2.0" companies were started outside the usual startup hubs, but two of them have already been reeled in through acquisitions. such centralizing forces make it harder for new silicon valleys to get started. but by no means impossible. ultimately power rests with the founders. a startup with the best people will beat one with funding from famous vcs, and a startup that was sufficiently successful would never have to move. so a town that could exert enough pull over the right people could resist and perhaps even surpass silicon valley. for all its power, silicon valley has a great weakness: the paradise shockley found in 1956 is now one giant parking lot. san francisco and berkeley are great, but theyre forty miles away. silicon valley proper is soul-crushing suburban sprawl . it has fabulous weather, which makes it significantly better than the soul-crushing sprawl of most other american cities. but a competitor that managed to avoid sprawl would have real leverage. all a city needs is to be the kind of place the next traitorous eight look at and say "i want to stay here," and that would be enough to get the chain reaction started.  its interesting to consider how low this number could be made. i suspect five hundred would be enough, even if they could bring no assets with them. probably just thirty, if i could pick them, would be enough to turn buffalo into a significant startup hub.  bureaucrats manage to allocate research funding moderately well, but only because (like an in-house vc fund) they outsource most of the work of selection. a professor at a famous university who is highly regarded by his peers will get funding, pretty much regardless of the proposal. that wouldnt work for startups, whose founders arent sponsored by organizations, and are often unknowns.  youd have to do it all at once, or at least a whole department at a time, because people would be more likely to come if they knew their friends were. and you should probably start from scratch, rather than trying to upgrade an existing university, or much energy would be lost in friction.  hypothesis: any plan in which multiple independent buildings are gutted or demolished to be "redeveloped" as a single project is a net loss of personality for the city, with the exception of the conversion of buildings not previously public, like warehouses.  a few startups get started in new york, but less than a tenth as many per capita as in boston, and mostly in less nerdy fields like finance and media.  some blue counties are false positives (reflecting the remaining power of democractic party machines), but there are no false negatives. you can safely write off all the red counties.  some "urban renewal" experts took a shot at destroying bostons in the 1960s, leaving the area around city hall a bleak wasteland , but most neighborhoods successfully resisted them. thanks to chris anderson, trevor blackwell, marc hedlund, jessica livingston, robert morris, greg mcadoo, fred wilson, and stephen wolfram for reading drafts of this, and to ed dumbill for inviting me to speak. (the second part of this talk became why startups condense in america .) this essay was originally published at paulgraham.com (this essay is derived from a talk at the 2006 startup school .) the startups weve funded so far are pretty quick, but they seem quicker to learn some lessons than others. i think its because some things about startups are kind of counterintuitive. weve now invested in enough companies that ive learned a trick for determining which points are the counterintuitive ones: theyre the ones i have to keep repeating. so im going to number these points, and maybe with future startups ill be able to pull off a form of huffman coding. ill make them all read this, and then instead of nagging them in detail, ill just be able to say: number four! the thing i probably repeat most is this recipe for a startup: get a version 1 out fast, then improve it based on users reactions. by "release early" i dont mean you should release something full of bugs, but that you should release something minimal. users hate bugs, but they dont seem to mind a minimal version 1, if theres more coming soon. there are several reasons it pays to get version 1 done fast. one is that this is simply the right way to write software, whether for a startup or not. ive been repeating that since 1993, and i havent seen much since to contradict it. ive seen a lot of startups die because they were too slow to release stuff, and none because they were too quick.  one of the things that will surprise you if you build something popular is that you wont know your users. reddit now has almost half a million unique visitors a month. who are all those people? they have no idea. no web startup does. and since you dont know your users, its dangerous to guess what theyll like. better to release something and let them tell you. wufoo took this to heart and released their form-builder before the underlying database. you cant even drive the thing yet, but 83,000 people came to sit in the drivers seat and hold the steering wheel. and wufoo got valuable feedback from it: linux users complained they used too much flash, so they rewrote their software not to. if theyd waited to release everything at once, they wouldnt have discovered this problem till it was more deeply wired in. even if you had no users, it would still be important to release quickly, because for a startup the initial release acts as a shakedown cruise. if anything major is broken-- if the ideas no good, for example, or the founders hate one another-- the stress of getting that first version out will expose it. and if you have such problems you want to find them early. perhaps the most important reason to release early, though, is that it makes you work harder. when youre working on something that isnt released, problems are intriguing. in something thats out there, problems are alarming. there is a lot more urgency once you release. and i think thats precisely why people put it off. they know theyll have to work a lot harder once they do.  of course, "release early" has a second component, without which it would be bad advice. if youre going to start with something that doesnt do much, you better improve it fast. what i find myself repeating is "pump out features." and this rule isnt just for the initial stages. this is something all startups should do for as long as they want to be considered startups. i dont mean, of course, that you should make your application ever more complex. by "feature" i mean one unit of hacking-- one quantum of making users lives better. as with exercise, improvements beget improvements. if you run every day, youll probably feel like running tomorrow. but if you skip running for a couple weeks, it will be an effort to drag yourself out. so it is with hacking: the more ideas you implement, the more ideas youll have. you should make your system better at least in some small way every day or two. this is not just a good way to get development done; it is also a form of marketing. users love a site thats constantly improving. in fact, users expect a site to improve. imagine if you visited a site that seemed very good, and then returned two months later and not one thing had changed. wouldnt it start to seem lame?  theyll like you even better when you improve in response to their comments, because customers are used to companies ignoring them. if youre the rare exception-- a company that actually listens-- youll generate fanatical loyalty. you wont need to advertise, because your users will do it for you. this seems obvious too, so why do i have to keep repeating it? i think the problem here is that people get used to how things are. once a product gets past the stage where it has glaring flaws, you start to get used to it, and gradually whatever features it happens to have become its identity. for example, i doubt many people at yahoo (or google for that matter) realized how much better web mail could be till paul buchheit showed them. i think the solution is to assume that anything youve made is far short of what it could be. force yourself, as a sort of intellectual exercise, to keep thinking of improvements. ok, sure, what you have is perfect. but if you had to change something, what would it be? if your product seems finished, there are two possible explanations: (a) it is finished, or (b) you lack imagination. experience suggests (b) is a thousand times more likely. improving constantly is an instance of a more general rule: make users happy. one thing all startups have in common is that they cant force anyone to do anything. they cant force anyone to use their software, and they cant force anyone to do deals with them. a startup has to sing for its supper. thats why the successful ones make great things. they have to, or die. when youre running a startup you feel like a little bit of debris blown about by powerful winds. the most powerful wind is users. they can either catch you and loft you up into the sky, as they did with google, or leave you flat on the pavement, as they do with most startups. users are a fickle wind, but more powerful than any other. if they take you up, no competitor can keep you down. as a little piece of debris, the rational thing for you to do is not to lie flat, but to curl yourself into a shape the wind will catch. i like the wind metaphor because it reminds you how impersonal the stream of traffic is. the vast majority of people who visit your site will be casual visitors. its them you have to design your site for. the people who really care will find what they want by themselves. the median visitor will arrive with their finger poised on the back button. think about your own experience: most links you follow lead to something lame. anyone who has used the web for more than a couple weeks has been trained to click on back after following a link. so your site has to say "wait! dont click on back. this site isnt lame. look at this, for example." there are two things you have to do to make people pause. the most important is to explain, as concisely as possible, what the hell your site is about. how often have you visited a site that seemed to assume you already knew what they did? for example, the corporate site that says the company makes enterprise content management solutions for business that enable organizations to unify people, content and processes to minimize business risk, accelerate time-to-value and sustain lower total cost of ownership. an established company may get away with such an opaque description, but no startup can. a startup should be able to explain in one or two sentences exactly what it does.  and not just to users. you need this for everyone: investors, acquirers, partners, reporters, potential employees, and even current employees. you probably shouldnt even start a company to do something that cant be described compellingly in one or two sentences. the other thing i repeat is to give people everything youve got, right away. if you have something impressive, try to put it on the front page, because thats the only one most visitors will see. though indeed theres a paradox here: the more you push the good stuff toward the front, the more likely visitors are to explore further.  in the best case these two suggestions get combined: you tell visitors what your site is about by showing them. one of the standard pieces of advice in fiction writing is "show, dont tell." dont say that a characters angry; have him grind his teeth, or break his pencil in half. nothing will explain what your site does so well as using it. the industry term here is "conversion." the job of your site is to convert casual visitors into users-- whatever your definition of a user is. you can measure this in your growth rate. either your site is catching on, or it isnt, and you must know which. if you have decent growth, youll win in the end, no matter how obscure you are now. and if you dont, you need to fix something. another thing i find myself saying a lot is "dont worry." actually, its more often "dont worry about this; worry about that instead." startups are right to be paranoid, but they sometimes fear the wrong things. most visible disasters are not so alarming as they seem. disasters are normal in a startup: a founder quits, you discover a patent that covers what youre doing, your servers keep crashing, you run into an insoluble technical problem, you have to change your name, a deal falls through-- these are all par for the course. they wont kill you unless you let them. nor will most competitors. a lot of startups worry "what if google builds something like us?" actually big companies are not the ones you have to worry about-- not even google. the people at google are smart, but no smarter than you; theyre not as motivated, because google is not going to go out of business if this one product fails; and even at google they have a lot of bureaucracy to slow them down. what you should fear, as a startup, is not the established players, but other startups you dont know exist yet. theyre way more dangerous than google because, like you, theyre cornered animals. looking just at existing competitors can give you a false sense of security. you should compete against what someone else could be doing, not just what you can see people doing. a corollary is that you shouldnt relax just because you have no visible competitors yet. no matter what your idea, theres someone else out there working on the same thing. thats the downside of it being easier to start a startup: more people are doing it. but i disagree with caterina fake when she says that makes this a bad time to start a startup. more people are starting startups, but not as many more as could. most college graduates still think they have to get a job. the average person cant ignore something thats been beaten into their head since they were three just because serving web pages recently got a lot cheaper. and in any case, competitors are not the biggest threat. way more startups hose themselves than get crushed by competitors. there are a lot of ways to do it, but the three main ones are internal disputes, inertia, and ignoring users. each is, by itself, enough to kill you. but if i had to pick the worst, it would be ignoring users. if you want a recipe for a startup thats going to die, here it is: a couple of founders who have some great idea they know everyone is going to love, and thats what theyre going to build, no matter what. almost everyones initial plan is broken. if companies stuck to their initial plans, microsoft would be selling programming languages, and apple would be selling printed circuit boards. in both cases their customers told them what their business should be-- and they were smart enough to listen. as richard feynman said, the imagination of nature is greater than the imagination of man. youll find more interesting things by looking at the world than you could ever produce just by thinking. this principle is very powerful. its why the best abstract painting still falls short of leonardo, for example. and it applies to startups too. no idea for a product could ever be so clever as the ones you can discover by smashing a beam of prototypes into a beam of users. i now have enough experience with startups to be able to say what the most important quality is in a startup founder, and its not what you might think. the most important quality in a startup founder is determination. not intelligence-- determination. this is a little depressing. id like to believe viaweb succeeded because we were smart, not merely determined. a lot of people in the startup world want to believe that. not just founders, but investors too. they like the idea of inhabiting a world ruled by intelligence. and you can tell they really believe this, because it affects their investment decisions. time after time vcs invest in startups founded by eminent professors. this may work in biotech, where a lot of startups simply commercialize existing research, but in software you want to invest in students, not professors. microsoft, yahoo, and google were all founded by people who dropped out of school to do it. what students lack in experience they more than make up in dedication. of course, if you want to get rich, its not enough merely to be determined. you have to be smart too, right? id like to think so, but ive had an experience that convinced me otherwise: i spent several years living in new york. you can lose quite a lot in the brains department and it wont kill you. but lose even a little bit in the commitment department, and that will kill you very rapidly. running a startup is like walking on your hands: its possible, but it requires extraordinary effort. if an ordinary employee were asked to do the things a startup founder has to, hed be very indignant. imagine if you were hired at some big company, and in addition to writing software ten times faster than youd ever had to before, they expected you to answer support calls, administer the servers, design the web site, cold-call customers, find the company office space, and go out and get everyone lunch. and to do all this not in the calm, womb-like atmosphere of a big company, but against a backdrop of constant disasters. thats the part that really demands determination. in a startup, theres always some disaster happening. so if youre the least bit inclined to find an excuse to quit, theres always one right there. but if you lack commitment, chances are it will have been hurting you long before you actually quit. everyone who deals with startups knows how important commitment is, so if they sense youre ambivalent, they wont give you much attention. if you lack commitment, youll just find that for some mysterious reason good things happen to your competitors but not to you. if you lack commitment, it will seem to you that youre unlucky. whereas if youre determined to stick around, people will pay attention to you, because odds are theyll have to deal with you later. youre a local, not just a tourist, so everyone has to come to terms with you. at y combinator we sometimes mistakenly fund teams who have the attitude that theyre going to give this startup thing a shot for three months, and if something great happens, theyll stick with it-- "something great" meaning either that someone wants to buy them or invest millions of dollars in them. but if this is your attitude, "something great" is very unlikely to happen to you, because both acquirers and investors judge you by your level of commitment. if an acquirer thinks youre going to stick around no matter what, theyll be more likely to buy you, because if they dont and you stick around, youll probably grow, your price will go up, and theyll be left wishing theyd bought you earlier. ditto for investors. what really motivates investors, even big vcs, is not the hope of good returns, but the fear of missing out.  so if you make it clear youre going to succeed no matter what, and the only reason you need them is to make it happen a little faster, youre much more likely to get money. you cant fake this. the only way to convince everyone that youre ready to fight to the death is actually to be ready to. you have to be the right kind of determined, though. i carefully chose the word determined rather than stubborn, because stubbornness is a disastrous quality in a startup. you have to be determined, but flexible, like a running back. a successful running back doesnt just put his head down and try to run through people. he improvises: if someone appears in front of him, he runs around them; if someone tries to grab him, he spins out of their grip; hell even run in the wrong direction briefly if that will help. the one thing hell never do is stand still.  i was talking recently to a startup founder about whether it might be good to add a social component to their software. he said he didnt think so, because the whole social thing was tapped out. really? so in a hundred years the only social networking sites will be the facebook, myspace, flickr, and del.icio.us? not likely. there is always room for new stuff. at every point in history, even the darkest bits of the dark ages, people were discovering things that made everyone say "why didnt anyone think of that before?" we know this continued to be true up till 2004, when the facebook was founded-- though strictly speaking someone else did think of that. the reason we dont see the opportunities all around us is that we adjust to however things are, and assume thats how things have to be. for example, it would seem crazy to most people to try to make a better search engine than google. surely that field, at least, is tapped out. really? in a hundred years-- or even twenty-- are people still going to search for information using something like the current google? even google probably doesnt think that. in particular, i dont think theres any limit to the number of startups. sometimes you hear people saying "all these guys starting startups now are going to be disappointed. how many little startups are google and yahoo going to buy, after all?" that sounds cleverly skeptical, but i can prove its mistaken. no one proposes that theres some limit to the number of people who can be employed in an economy consisting of big, slow-moving companies with a couple thousand people each. why should there be any limit to the number who could be employed by small, fast-moving companies with ten each? it seems to me the only limit would be the number of people who want to work that hard. the limit on the number of startups is not the number that can get acquired by google and yahoo-- though it seems even that should be unlimited, if the startups were actually worth buying-- but the amount of wealth that can be created. and i dont think theres any limit on that, except cosmological ones. so for all practical purposes, there is no limit to the number of startups. startups make wealth, which means they make things people want, and if theres a limit on the number of things people want, we are nowhere near it. i still dont even have a flying car. this is another one ive been repeating since long before y combinator. it was practically the corporate motto at viaweb. startup founders are naturally optimistic. they wouldnt do it otherwise. but you should treat your optimism the way youd treat the core of a nuclear reactor: as a source of power thats also very dangerous. you have to build a shield around it, or it will fry you. the shielding of a reactor is not uniform; the reactor would be useless if it were. its pierced in a few places to let pipes in. an optimism shield has to be pierced too. i think the place to draw the line is between what you expect of yourself, and what you expect of other people. its ok to be optimistic about what you can do, but assume the worst about machines and other people. this is particularly necessary in a startup, because you tend to be pushing the limits of whatever youre doing. so things dont happen in the smooth, predictable way they do in the rest of the world. things change suddenly, and usually for the worse. shielding your optimism is nowhere more important than with deals. if your startup is doing a deal, just assume its not going to happen. the vcs who say theyre going to invest in you arent. the company that says theyre going to buy you isnt. the big customer who wants to use your system in their whole company wont. then if things work out you can be pleasantly surprised. the reason i warn startups not to get their hopes up is not to save them from being disappointed when things fall through. its for a more practical reason: to prevent them from leaning their company against something thats going to fall over, taking them with it. for example, if someone says they want to invest in you, theres a natural tendency to stop looking for other investors. thats why people proposing deals seem so positive: they want you to stop looking. and you want to stop too, because doing deals is a pain. raising money, in particular, is a huge time sink. so you have to consciously force yourself to keep looking. even if you ultimately do the first deal, it will be to your advantage to have kept looking, because youll get better terms. deals are dynamic; unless youre negotiating with someone unusually honest, theres not a single point where you shake hands and the deals done. there are usually a lot of subsidiary questions to be cleared up after the handshake, and if the other side senses weakness-- if they sense you need this deal-- they will be very tempted to screw you in the details. vcs and corp dev guys are professional negotiators. theyre trained to take advantage of weakness.  so while theyre often nice guys, they just cant help it. and as pros they do this more than you. so dont even try to bluff them. the only way a startup can have any leverage in a deal is genuinely not to need it. and if you dont believe in a deal, youll be less likely to depend on it. so i want to plant a hypnotic suggestion in your heads: when you hear someone say the words "we want to invest in you" or "we want to acquire you," i want the following phrase to appear automatically in your head: dont get your hopes up. just continue running your company as if this deal didnt exist. nothing is more likely to make it close. the way to succeed in a startup is to focus on the goal of getting lots of users, and keep walking swiftly toward it while investors and acquirers scurry alongside trying to wave money in your face. the way ive described it, starting a startup sounds pretty stressful. it is. when i talk to the founders of the companies weve funded, they all say the same thing: i knew it would be hard, but i didnt realize it would be this hard. so why do it? it would be worth enduring a lot of pain and stress to do something grand or heroic, but just to make money? is making money really that important? no, not really. it seems ridiculous to me when people take business too seriously. i regard making money as a boring errand to be got out of the way as soon as possible. there is nothing grand or heroic about starting a startup per se. so why do i spend so much time thinking about startups? ill tell you why. economically, a startup is best seen not as a way to get rich, but as a way to work faster. you have to make a living, and a startup is a way to get that done quickly, instead of letting it drag on through your whole life.  we take it for granted most of the time, but human life is fairly miraculous. it is also palpably short. youre given this marvellous thing, and then poof, its taken away. you can see why people invent gods to explain it. but even to people who dont believe in gods, life commands respect. there are times in most of our lives when the days go by in a blur, and almost everyone has a sense, when this happens, of wasting something precious. as ben franklin said, if you love life, dont waste time, because time is what life is made of. so no, theres nothing particularly grand about making money. thats not what makes startups worth the trouble. whats important about startups is the speed. by compressing the dull but necessary task of making a living into the smallest possible time, you show respect for life, and there is something grand about that.  startups can die from releasing something full of bugs, and not fixing them fast enough, but i dont know of any that died from releasing something stable but minimal very early, then promptly improving it.  i know this is why i havent released arc. the moment i do, ill have people nagging me for features.  a web site is different from a book or movie or desktop application in this respect. users judge a site not as a single snapshot, but as an animation with multiple frames. of the two, id say the rate of improvement is more important to users than where you currently are.  it should not always tell this to users, however. for example, myspace is basically a replacement mall for mallrats. but it was wiser for them, initially, to pretend that the site was about bands.  similarly, dont make users register to try your site. maybe what you have is so valuable that visitors should gladly register to get at it. but theyve been trained to expect the opposite. most of the things theyve tried on the web have sucked-- and probably especially those that made them register.  vcs have rational reasons for behaving this way. they dont make their money (if they make money) off their median investments. in a typical fund, half the companies fail, most of the rest generate mediocre returns, and one or two "make the fund" by succeeding spectacularly. so if they miss just a few of the most promising opportunities, it could hose the whole fund.  the attitude of a running back doesnt translate to soccer. though it looks great when a forward dribbles past multiple defenders, a player who persists in trying such things will do worse in the long term than one who passes.  the reason y combinator never negotiates valuations is that were not professional negotiators, and dont want to turn into them.  there are two ways to do work you love : (a) to make money, then work on what you love, or (b) to get a job where you get paid to work on stuff you love. in practice the first phases of both consist mostly of unedifying schleps, and in (b) the second phase is less secure. thanks to sam altman, trevor blackwell, beau hartshorne, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com plato quotes socrates as saying "the unexamined life is not worth living." part of what he meant was that the proper role of humans is to think, just as the proper role of anteaters is to poke their noses into anthills. a lot of ancient philosophy had the qualityand i dont mean this in an insulting wayof the kind of conversations freshmen have late at night in common rooms: what is our purpose? well, we humans are as conspicuously different from other animals as the anteater. in our case the distinguishing feature is the ability to reason. so obviously that is what we should be doing, and a human who doesnt is doing a bad job of being humanis no better than an animal. now wed give a different answer. at least, someone socratess age would. wed ask why we even suppose we have a "purpose" in life. we may be better adapted for some things than others; we may be happier doing things were adapted for; but why assume purpose? the history of ideas is a history of gradually discarding the assumption that its all about us. no, it turns out, the earth is not the center of the universenot even the center of the solar system. no, it turns out, humans are not created by god in his own image; theyre just one species among many, descended not merely from apes, but from microorganisms. even the concept of "me" turns out to be fuzzy around the edges if you examine it closely. the idea that were the center of things is difficult to discard. so difficult that theres probably room to discard more. richard dawkins made another step in that direction only in the last several decades, with the idea of the selfish gene . no, it turns out, were not even the protagonists: were just the latest model vehicle our genes have constructed to travel around in. and having kids is our genes heading for the lifeboats. reading that book snapped my brain out of its previous way of thinking the way darwins must have when it first appeared. (few people can experience now what darwins contemporaries did when the origin of species was first published, because everyone now is raised either to take evolution for granted, or to regard it as a heresy. no one encounters the idea of natural selection for the first time as an adult.) so if you want to discover things that have been overlooked till now, one really good place to look is in our blind spot: in our natural, naive belief that its all about us. and expect to encounter ferocious opposition if you do. conversely, if you have to choose between two theories, prefer the one that doesnt center on you. this principle isnt only for big ideas. it works in everyday life, too. for example, suppose youre saving a piece of cake in the fridge, and you come home one day to find your housemate has eaten it. two possible theories: a) your housemate did it deliberately to upset you. he knew you were saving that piece of cake. b) your housemate was hungry. i say pick b. no one knows who said "never attribute to malice what can be explained by incompetence," but it is a powerful idea. its more general version is our answer to the greeks: or better still, the positive version: this essay was originally published at paulgraham.com there are great startup ideas lying around unexploited right under our noses. one reason we dont see them is a phenomenon i call schlep blindness . schlep was originally a yiddish word but has passed into general use in the us. it means a tedious, unpleasant task. no one likes schleps, but hackers especially dislike them. most hackers who start startups wish they could do it by just writing some clever software, putting it on a server somewhere, and watching the money roll in-without ever having to talk to users, or negotiate with other companies, or deal with other peoples broken code. maybe thats possible, but i havent seen it. one of the many things we do at y combinator is teach hackers about the inevitability of schleps. no, you cant start a startup by just writing code. i remember going through this realization myself. there was a point in 1995 when i was still trying to convince myself i could start a company by just writing code. but i soon learned from experience that schleps are not merely inevitable, but pretty much what business consists of. a company is defined by the schleps it will undertake. and schleps should be dealt with the same way youd deal with a cold swimming pool: just jump in. which is not to say you should seek out unpleasant work per se, but that you should never shrink from it if its on the path to something great. the most dangerous thing about our dislike of schleps is that much of it is unconscious. your unconscious wont even let you see ideas that involve painful schleps. thats schlep blindness. the phenomenon isnt limited to startups. most people dont consciously decide not to be in as good physical shape as olympic athletes, for example. their unconscious mind decides for them, shrinking from the work involved. the most striking example i know of schlep blindness is stripe , or rather stripes idea. for over a decade, every hacker whod ever had to process payments online knew how painful the experience was. thousands of people must have known about this problem. and yet when they started startups, they decided to build recipe sites, or aggregators for local events. why? why work on problems few care much about and no one will pay for, when you could fix one of the most important components of the worlds infrastructure? because schlep blindness prevented people from even considering the idea of fixing payments. probably no one who applied to y combinator to work on a recipe site began by asking "should we fix payments, or build a recipe site?" and chose the recipe site. though the idea of fixing payments was right there in plain sight, they never saw it, because their unconscious mind shrank from the complications involved. youd have to make deals with banks. how do you do that? plus youre moving money, so youre going to have to deal with fraud, and people trying to break into your servers. plus there are probably all sorts of regulations to comply with. its a lot more intimidating to start a startup like this than a recipe site. that scariness makes ambitious ideas doubly valuable. in addition to their intrinsic value, theyre like undervalued stocks in the sense that theres less demand for them among founders. if you pick an ambitious idea, youll have less competition, because everyone else will have been frightened off by the challenges involved. (this is also true of starting a startup generally.) how do you overcome schlep blindness? frankly, the most valuable antidote to schlep blindness is probably ignorance. most successful founders would probably say that if theyd known when they were starting their company about the obstacles theyd have to overcome, they might never have started it. maybe thats one reason the most successful startups of all so often have young founders. in practice the founders grow with the problems. but no one seems able to foresee that, not even older, more experienced founders. so the reason younger founders have an advantage is that they make two mistakes that cancel each other out. they dont know how much they can grow, but they also dont know how much theyll need to. older founders only make the first mistake. ignorance cant solve everything though. some ideas so obviously entail alarming schleps that anyone can see them. how do you see ideas like that? the trick i recommend is to take yourself out of the picture. instead of asking "what problem should i solve?" ask "what problem do i wish someone else would solve for me?" if someone who had to process payments before stripe had tried asking that, stripe would have been one of the first things they wished for. its too late now to be stripe, but theres plenty still broken in the world, if you know how to see it. thanks to sam altman, paul buchheit, patrick collison, aaron iba, jessica livingston, emmett shear, and harj taggar for reading drafts of this. this essay was originally published at paulgraham.com (this essay is derived from a talk at google.) a few weeks ago i found to my surprise that id been granted four patents . this was all the more surprising because id only applied for three. the patents arent mine, of course. they were assigned to viaweb, and became yahoos when they bought us. but the news set me thinking about the question of software patents generally. patents are a hard problem. ive had to advise most of the startups weve funded about them, and despite years of experience im still not always sure im giving the right advice. one thing i do feel pretty certain of is that if youre against software patents, youre against patents in general. gradually our machines consist more and more of software. things that used to be done with levers and cams and gears are now done with loops and trees and closures. theres nothing special about physical embodiments of control systems that should make them patentable, and the software equivalent not. unfortunately, patent law is inconsistent on this point. patent law in most countries says that algorithms arent patentable. this rule is left over from a time when "algorithm" meant something like the sieve of eratosthenes. in 1800, people could not see as readily as we can that a great many patents on mechanical objects were really patents on the algorithms they embodied. patent lawyers still have to pretend thats what theyre doing when they patent algorithms. you must not use the word "algorithm" in the title of a patent application, just as you must not use the word "essays" in the title of a book. if you want to patent an algorithm, you have to frame it as a computer system executing that algorithm. then its mechanical; phew. the default euphemism for algorithm is "system and method." try a patent search for that phrase and see how many results you get. since software patents are no different from hardware patents, people who say "software patents are evil" are saying simply "patents are evil." so why do so many people complain about software patents specifically? i think the problem is more with the patent office than the concept of software patents. whenever software meets government, bad things happen, because software changes fast and government changes slow. the patent office has been overwhelmed by both the volume and the novelty of applications for software patents, and as a result theyve made a lot of mistakes. the most common is to grant patents that shouldnt be granted. to be patentable, an invention has to be more than new. it also has to be non-obvious. and this, especially, is where the uspto has been dropping the ball. slashdot has an icon that expresses the problem vividly: a knife and fork with the words "patent pending" superimposed. the scary thing is, this is the only icon they have for patent stories. slashdot readers now take it for granted that a story about a patent will be about a bogus patent. thats how bad the problem has become. the problem with amazons notorious one-click patent, for example, is not that its a software patent, but that its obvious. any online store that kept peoples shipping addresses would have implemented this. the reason amazon did it first was not that they were especially smart, but because they were one of the earliest sites with enough clout to force customers to log in before they could buy something.  we, as hackers, know the uspto is letting people patent the knives and forks of our world. the problem is, the uspto are not hackers. theyre probably good at judging new inventions for casting steel or grinding lenses, but they dont understand software yet. at this point an optimist would be tempted to add "but they will eventually." unfortunately that might not be true. the problem with software patents is an instance of a more general one: the patent office takes a while to understand new technology. if so, this problem will only get worse, because the rate of technological change seems to be increasing. in thirty years, the patent office may understand the sort of things we now patent as software, but there will be other new types of inventions they understand even less. applying for a patent is a negotiation. you generally apply for a broader patent than you think youll be granted, and the examiners reply by throwing out some of your claims and granting others. so i dont really blame amazon for applying for the one-click patent. the big mistake was the patent offices, for not insisting on something narrower, with real technical content. by granting such an over-broad patent, the uspto in effect slept with amazon on the first date. was amazon supposed to say no? where amazon went over to the dark side was not in applying for the patent, but in enforcing it. a lot of companies (microsoft, for example) have been granted large numbers of preposterously over-broad patents, but they keep them mainly for defensive purposes. like nuclear weapons, the main role of big companies patent portfolios is to threaten anyone who attacks them with a counter-suit. amazons suit against barnes & noble was thus the equivalent of a nuclear first strike. that suit probably hurt amazon more than it helped them. barnes & noble was a lame site; amazon would have crushed them anyway. to attack a rival they could have ignored, amazon put a lasting black mark on their own reputation. even now i think if you asked hackers to free-associate about amazon, the one-click patent would turn up in the first ten topics. google clearly doesnt feel that merely holding patents is evil. theyve applied for a lot of them. are they hypocrites? are patents evil? there are really two variants of that question, and people answering it often arent clear in their own minds which theyre answering. theres a narrow variant: is it bad, given the current legal system, to apply for patents? and also a broader one: is it bad that the current legal system allows patents? these are separate questions. for example, in preindustrial societies like medieval europe, when someone attacked you, you didnt call the police. there were no police. when attacked, you were supposed to fight back, and there were conventions about how to do it. was this wrong? thats two questions: was it wrong to take justice into your own hands, and was it wrong that you had to? we tend to say yes to the second, but no to the first. if no one else will defend you, you have to defend yourself.  the situation with patents is similar. business is a kind of ritualized warfare. indeed, it evolved from actual warfare: most early traders switched on the fly from merchants to pirates depending on how strong you seemed. in business there are certain rules describing how companies may and may not compete with one another, and someone deciding that theyre going to play by their own rules is missing the point. saying "im not going to apply for patents just because everyone else does" is not like saying "im not going to lie just because everyone else does." its more like saying "im not going to use tcp/ip just because everyone else does." oh yes you are. a closer comparison might be someone seeing a hockey game for the first time, realizing with shock that the players were deliberately bumping into one another, and deciding that one would on no account be so rude when playing hockey oneself. hockey allows checking. its part of the game. if your team refuses to do it, you simply lose. so it is in business. under the present rules, patents are part of the game. what does that mean in practice? we tell the startups we fund not to worry about infringing patents, because startups rarely get sued for patent infringement. there are only two reasons someone might sue you: for money, or to prevent you from competing with them. startups are too poor to be worth suing for money. and in practice they dont seem to get sued much by competitors, either. they dont get sued by other startups because (a) patent suits are an expensive distraction, and (b) since the other startups are as young as they are, their patents probably havent issued yet.  nor do startups, at least in the software business, seem to get sued much by established competitors. despite all the patents microsoft holds, i dont know of an instance where they sued a startup for patent infringement. companies like microsoft and oracle dont win by winning lawsuits. thats too uncertain. they win by locking competitors out of their sales channels. if you do manage to threaten them, theyre more likely to buy you than sue you. when you read of big companies filing patent suits against smaller ones, its usually a big company on the way down, grasping at straws. for example, unisyss attempts to enforce their patent on lzw compression. when you see a big company threatening patent suits, sell. when a company starts fighting over ip, its a sign theyve lost the real battle, for users. a company that sues competitors for patent infringement is like a defender who has been beaten so thoroughly that he turns to plead with the referee. you dont do that if you can still reach the ball, even if you genuinely believe youve been fouled. so a company threatening patent suits is a company in trouble . when we were working on viaweb, a bigger company in the e-commerce business was granted a patent on online ordering, or something like that. i got a call from a vp there asking if wed like to license it. i replied that i thought the patent was completely bogus, and would never hold up in court. "ok," he replied. "so, are you guys hiring?" if your startup grows big enough, however, youll start to get sued, no matter what you do. if you go public, for example, youll be sued by multiple patent trolls who hope youll pay them off to go away. more on them later. in other words, no one will sue you for patent infringement till you have money, and once you have money, people will sue you whether they have grounds to or not. so i advise fatalism. dont waste your time worrying about patent infringement. youre probably violating a patent every time you tie your shoelaces. at the start, at least, just worry about making something great and getting lots of users. if you grow to the point where anyone considers you worth attacking, youre doing well. we do advise the companies we fund to apply for patents, but not so they can sue competitors. successful startups either get bought or grow into big companies. if a startup wants to grow into a big company, they should apply for patents to build up the patent portfolio theyll need to maintain an armed truce with other big companies. if they want to get bought, they should apply for patents because patents are part of the mating dance with acquirers. most startups that succeed do it by getting bought, and most acquirers care about patents. startup acquisitions are usually a build-vs-buy decision for the acquirer. should we buy this little startup or build our own? and two things, especially, make them decide not to build their own: if you already have a large and rapidly growing user base, and if you have a fairly solid patent application on critical parts of your software. theres a third reason big companies should prefer buying to building: that if they built their own, theyd screw it up. but few big companies are smart enough yet to admit this to themselves. its usually the acquirers engineers who are asked how hard it would be for the company to build their own, and they overestimate their abilities.  a patent seems to change the balance. it gives the acquirer an excuse to admit they couldnt copy what youre doing. it may also help them to grasp whats special about your technology. frankly, it surprises me how small a role patents play in the software business. its kind of ironic, considering all the dire things experts say about software patents stifling innovation, but when one looks closely at the software business, the most striking thing is how little patents seem to matter. in other fields, companies regularly sue competitors for patent infringement. for example, the airport baggage scanning business was for many years a cozy duopoly shared between two companies, invision and l-3. in 2002 a startup called reveal appeared, with new technology that let them build scanners a third the size. they were sued for patent infringement before theyd even released a product. you rarely hear that kind of story in our world. the one example ive found is, embarrassingly enough, yahoo, which filed a patent suit against a gaming startup called xfire in 2005. xfire doesnt seem to be a very big deal, and its hard to say why yahoo felt threatened. xfires vp of engineering had worked at yahoo on similar stuff-- in fact, he was listed as an inventor on the patent yahoo sued over-- so perhaps there was something personal about it. my guess is that someone at yahoo goofed. at any rate they didnt pursue the suit very vigorously. why do patents play so small a role in software? i can think of three possible reasons. one is that software is so complicated that patents by themselves are not worth very much. i may be maligning other fields here, but it seems that in most types of engineering you can hand the details of some new technique to a group of medium-high quality people and get the desired result. for example, if someone develops a new process for smelting ore that gets a better yield, and you assemble a team of qualified experts and tell them about it, theyll be able to get the same yield. this doesnt seem to work in software. software is so subtle and unpredictable that "qualified experts" dont get you very far. thats why we rarely hear phrases like "qualified expert" in the software business. what that level of ability can get you is, say, to make your software compatible with some other piece of software-- in eight months, at enormous cost. to do anything harder you need individual brilliance. if you assemble a team of qualified experts and tell them to make a new web-based email program, theyll get their asses kicked by a team of inspired nineteen year olds. experts can implement, but they cant design . or rather, expertise in implementation is the only kind most people, including the experts themselves, can measure.  but design is a definite skill. its not just an airy intangible. things always seem intangible when you dont understand them. electricity seemed an airy intangible to most people in 1800. who knew there was so much to know about it? so it is with design. some people are good at it and some people are bad at it, and theres something very tangible theyre good or bad at. the reason design counts so much in software is probably that there are fewer constraints than on physical things. building physical things is expensive and dangerous. the space of possible choices is smaller; you tend to have to work as part of a larger group; and youre subject to a lot of regulations. you dont have any of that if you and a couple friends decide to create a new web-based application. because theres so much scope for design in software, a successful application tends to be way more than the sum of its patents. what protects little companies from being copied by bigger competitors is not just their patents, but the thousand little things the big company will get wrong if they try. the second reason patents dont count for much in our world is that startups rarely attack big companies head-on, the way reveal did. in the software business, startups beat established companies by transcending them. startups dont build desktop word processing programs to compete with microsoft word.  they build writely. if this paradigm is crowded, just wait for the next one; they run pretty frequently on this route. fortunately for startups, big companies are extremely good at denial. if you take the trouble to attack them from an oblique angle, theyll meet you half-way and maneuver to keep you in their blind spot. to sue a startup would mean admitting it was dangerous, and that often means seeing something the big company doesnt want to see. ibm used to sue its mainframe competitors regularly, but they didnt bother much about the microcomputer industry because they didnt want to see the threat it posed. companies building web based apps are similarly protected from microsoft, which even now doesnt want to imagine a world in which windows is irrelevant. the third reason patents dont seem to matter very much in software is public opinion-- or rather, hacker opinion. in a recent interview , steve ballmer coyly left open the possibility of attacking linux on patent grounds. but i doubt microsoft would ever be so stupid. theyd face the mother of all boycotts. and not just from the technical community in general; a lot of their own people would rebel. good hackers care a lot about matters of principle, and they are highly mobile. if a company starts misbehaving, smart people wont work there. for some reason this seems to be more true in software than other businesses. i dont think its because hackers have intrinsically higher principles so much as that their skills are easily transferrable. perhaps we can split the difference and say that mobility gives hackers the luxury of being principled. googles "dont be evil" policy may for this reason be the most valuable thing theyve discovered. its very constraining in some ways. if google does do something evil, they get doubly whacked for it: once for whatever they did, and again for hypocrisy. but i think its worth it. it helps them to hire the best people, and its better, even from a purely selfish point of view, to be constrained by principles than by stupidity. (i wish someone would get this point across to the present administration.) im not sure what the proportions are of the preceding three ingredients, but the custom among the big companies seems to be not to sue the small ones, and the startups are mostly too busy and too poor to sue one another. so despite the huge number of software patents theres not a lot of suing going on. with one exception: patent trolls. patent trolls are companies consisting mainly of lawyers whose whole business is to accumulate patents and threaten to sue companies who actually make things. patent trolls, it seems safe to say, are evil. i feel a bit stupid saying that, because when youre saying something that richard stallman and bill gates would both agree with, you must be perilously close to tautologies. the ceo of forgent, one of the most notorious patent trolls, says that what his company does is "the american way." actually thats not true. the american way is to make money by creating wealth , not by suing people.  what companies like forgent do is actually the proto-industrial way. in the period just before the industrial revolution, some of the greatest fortunes in countries like england and france were made by courtiers who extracted some lucrative right from the crown-- like the right to collect taxes on the import of silk-- and then used this to squeeze money from the merchants in that business. so when people compare patent trolls to the mafia, theyre more right than they know, because the mafia too are not merely bad, but bad specifically in the sense of being an obsolete business model. patent trolls seem to have caught big companies by surprise. in the last couple years theyve extracted hundreds of millions of dollars from them. patent trolls are hard to fight precisely because they create nothing. big companies are safe from being sued by other big companies because they can threaten a counter-suit. but because patent trolls dont make anything, theres nothing they can be sued for. i predict this loophole will get closed fairly quickly, at least by legal standards. its clearly an abuse of the system, and the victims are powerful.  but evil as patent trolls are, i dont think they hamper innovation much. they dont sue till a startup has made money, and by that point the innovation that generated it has already happened. i cant think of a startup that avoided working on some problem because of patent trolls. so much for hockey as the game is played now. what about the more theoretical question of whether hockey would be a better game without checking? do patents encourage or discourage innovation? this is a very hard question to answer in the general case. people write whole books on the topic. one of my main hobbies is the history of technology, and even though ive studied the subject for years, it would take me several weeks of research to be able to say whether patents have in general been a net win. one thing i can say is that 99.9% of the people who express opinions on the subject do it not based on such research, but out of a kind of religious conviction. at least, thats the polite way of putting it; the colloquial version involves speech coming out of organs not designed for that purpose. whether they encourage innovation or not, patents were at least intended to. you dont get a patent for nothing. in return for the exclusive right to use an idea, you have to publish it, and it was largely to encourage such openness that patents were established. before patents, people protected ideas by keeping them secret. with patents, central governments said, in effect, if you tell everyone your idea, well protect it for you. there is a parallel here to the rise of civil order, which happened at roughly the same time. before central governments were powerful enough to enforce order, rich people had private armies. as governments got more powerful, they gradually compelled magnates to cede most responsibility for protecting them. (magnates still have bodyguards, but no longer to protect them from other magnates.) patents, like police, are involved in many abuses. but in both cases the default is something worse. the choice is not "patents or freedom?" any more than it is "police or freedom?" the actual questions are respectively "patents or secrecy?" and "police or gangs?" as with gangs, we have some idea what secrecy would be like, because thats how things used to be. the economy of medieval europe was divided up into little tribes, each jealously guarding their privileges and secrets. in shakespeares time, "mystery" was synonymous with "craft." even today we can see an echo of the secrecy of medieval guilds, in the now pointless secrecy of the masons. the most memorable example of medieval industrial secrecy is probably venice, which forbade glassblowers to leave the city, and sent assassins after those who tried. we might like to think we wouldnt go so far, but the movie industry has already tried to pass laws prescribing three year prison terms just for putting movies on public networks. want to try a frightening thought experiment? if the movie industry could have any law they wanted, where would they stop? short of the death penalty, one assumes, but how close would they get? even worse than the spectacular abuses might be the overall decrease in efficiency that would accompany increased secrecy. as anyone who has dealt with organizations that operate on a "need to know" basis can attest, dividing information up into little cells is terribly inefficient. the flaw in the "need to know" principle is that you dont know who needs to know something. an idea from one area might spark a great discovery in another. but the discoverer doesnt know he needs to know it. if secrecy were the only protection for ideas, companies wouldnt just have to be secretive with other companies; theyd have to be secretive internally. this would encourage what is already the worst trait of big companies. im not saying secrecy would be worse than patents, just that we couldnt discard patents for free. businesses would become more secretive to compensate, and in some fields this might get ugly. nor am i defending the current patent system. there is clearly a lot thats broken about it. but the breakage seems to affect software less than most other fields. in the software business i know from experience whether patents encourage or discourage innovation, and the answer is the type that people who like to argue about public policy least like to hear: they dont affect innovation much, one way or the other. most innovation in the software business happens in startups, and startups should simply ignore other companies patents. at least, thats what we advise, and we bet money on that advice. the only real role of patents, for most startups, is as an element of the mating dance with acquirers. there patents do help a little. and so they do encourage innovation indirectly, in that they give more power to startups, which is where, pound for pound, the most innovation happens. but even in the mating dance, patents are of secondary importance. it matters more to make something great and get a lot of users.  you have to be careful here, because a great discovery often seems obvious in retrospect. one-click ordering, however, is not such a discovery.  "turn the other cheek" skirts the issue; the critical question is not how to deal with slaps, but sword thrusts.  applying for a patent is now very slow, but it might actually be bad if that got fixed. at the moment the time it takes to get a patent is conveniently just longer than the time it takes a startup to succeed or fail.  instead of the canonical "could you build this?" maybe the corp dev guys should be asking "will you build this?" or even "why havent you already built this?"  design ability is so hard to measure that you cant even trust the design worlds internal standards. you cant assume that someone with a degree in design is any good at design, or that an eminent designer is any better than his peers. if that worked, any company could build products as good as apples just by hiring sufficiently qualified designers.  if anyone wanted to try, wed be interested to hear from them. i suspect its one of those things thats not as hard as everyone assumes.  patent trolls cant even claim, like speculators, that they "create" liquidity.  if big companies dont want to wait for the government to take action, there is a way to fight back themselves. for a long time i thought there wasnt, because there was nothing to grab onto. but there is one resource patent trolls need: lawyers. big technology companies between them generate a lot of legal business. if they agreed among themselves never to do business with any firm employing anyone who had worked for a patent troll, either as an employee or as outside counsel, they could probably starve the trolls of the lawyers they need. thanks to dan bloomberg, paul buchheit, sarah harlin, jessica livingston, and peter norvig for reading drafts of this, to joel lehrer and peter eng for answering my questions about patents, and to ankur pansari for inviting me to speak. this essay was originally published at paulgraham.com a couple days ago i found to my surprise that id been granted a patent . it issued in 2003, but no one told me. i wouldnt know about it now except that a few months ago, while visiting yahoo, i happened to run into a big cheese i knew from working there in the late nineties. he brought up something called revenue loop, which viaweb had been working on when they bought us. the idea is basically that you sort search results not in order of textual "relevance" (as search engines did then) nor in order of how much advertisers bid (as overture did) but in order of the bid times the number of transactions. ordinarily youd do this for shopping searches, though in fact one of the features of our scheme is that it automatically detects which searches are shopping searches. if you just order the results in order of bids, you can make the search results useless, because the first results could be dominated by lame sites that had bid the most. but if you order results by bid multiplied by transactions, far from selling out, youre getting a better measure of relevance. what could be a better sign that someone was satisfied with a search result than going to the site and buying something? and, of course, this algorithm automatically maximizes the revenue of the search engine. everyone is focused on this type of approach now, but few were in 1998. in 1998 it was all about selling banner ads. we didnt know that, so we were pretty excited when we figured out what seemed to us the optimal way of doing shopping searches. when yahoo was thinking of buying us, we had a meeting with jerry yang in new york. for him, i now realize, this was supposed to be one of those meetings when you check out a company youve pretty much decided to buy, just to make sure theyre ok guys. we werent expected to do more than chat and seem smart and reasonable. he must have been dismayed when i jumped up to the whiteboard and launched into a presentation of our exciting new technology. i was just as dismayed when he didnt seem to care at all about it. at the time i thought, "boy, is this guy poker-faced. we present to him what has to be the optimal way of sorting product search results, and hes not even curious." i didnt realize till much later why he didnt care. in 1998, advertisers were overpaying enormously for ads on web sites. in 1998, if advertisers paid the maximum that traffic was worth to them, yahoos revenues would have decreased. things are different now, of course. now this sort of thing is all the rage. so when i ran into the yahoo exec i knew from the old days in the yahoo cafeteria a few months ago, the first thing he remembered was not (fortunately) all the fights i had with him, but revenue loop. "well," i said, "i think we actually applied for a patent on it. im not sure what happened to the application after i left." "really? that would be an important patent." so someone investigated, and sure enough, that patent application had continued in the pipeline for several years after, and finally issued in 2003. the main thing that struck me on reading it, actually, is that lawyers at some point messed up my nice clear writing. some clever person with a spell checker reduced one section to zen-like incomprehensibility: also, common spelling errors will tend to get fixed. for example, if users searching for "compact disc player" end up spending considerable money at sites offering compact disc players, then those pages will have a higher relevance for that search phrase, even though the phrase "compact disc player" is not present on those pages. (that "compat disc player" wasnt a typo, guys.) for the fine prose of the original, see the provisional application of february 1998, back when we were still viaweb and couldnt afford to pay lawyers to turn every "a lot of" into "considerable." this essay was originally published at paulgraham.com yesterday one of the founders we funded asked me why we started y combinator . or more precisely, he asked if wed started yc mainly for fun. kind of, but not quite. it is enormously fun to be able to work with rtm and trevor again. i missed that after we sold viaweb, and for all the years after i always had a background process running, looking for something we could do together. there is definitely an aspect of a band reunion to y combinator. every couple days i slip and call it "viaweb." viaweb we started very explicitly to make money. i was sick of living from one freelance project to the next, and decided to just work as hard as i could till id made enough to solve the problem once and for all. viaweb was sometimes fun, but it wasnt designed for fun, and mostly it wasnt. id be surprised if any startup is. all startups are mostly schleps. the real reason we started y combinator is neither selfish nor virtuous. we didnt start it mainly to make money; we have no idea what our average returns might be, and wont know for years. nor did we start yc mainly to help out young would-be founders, though we do like the idea, and comfort ourselves occasionally with the thought that if all our investments tank, we will thus have been doing something unselfish. (its oddly nondeterministic.) the real reason we started y combinator is one probably only a hacker would understand. we did it because it seems such a great hack. there are thousands of smart people who could start companies and dont, and with a relatively small amount of force applied at just the right place, we can spring on the world a stream of new startups that might otherwise not have existed. in a way this is virtuous, because i think startups are a good thing. but really what motivates us is the completely amoral desire that would motivate any hacker who looked at some complex device and realized that with a tiny tweak he could make it run more efficiently. in this case, the device is the worlds economy, which fortunately happens to be open source. this essay was originally published at paulgraham.com to do something well you have to like it. that idea is not exactly novel. weve got it down to four words: "do what you love." but its not enough just to tell people that. doing what you love is complicated. the very idea is foreign to what most of us learn as kids. when i was a kid, it seemed as if work and fun were opposites by definition. life had two states: some of the time adults were making you do things, and that was called work; the rest of the time you could do what you wanted, and that was called playing. occasionally the things adults made you do were fun, just as, occasionally, playing wasntfor example, if you fell and hurt yourself. but except for these few anomalous cases, work was pretty much defined as not-fun. and it did not seem to be an accident. school, it was implied, was tedious because it was preparation for grownup work. the world then was divided into two groups, grownups and kids. grownups, like some kind of cursed race, had to work. kids didnt, but they did have to go to school, which was a dilute version of work meant to prepare us for the real thing. much as we disliked school, the grownups all agreed that grownup work was worse, and that we had it easy. teachers in particular all seemed to believe implicitly that work was not fun. which is not surprising: work wasnt fun for most of them. why did we have to memorize state capitals instead of playing dodgeball? for the same reason they had to watch over a bunch of kids instead of lying on a beach. you couldnt just do what you wanted. im not saying we should let little kids do whatever they want. they may have to be made to work on certain things. but if we make kids work on dull stuff, it might be wise to tell them that tediousness is not the defining quality of work, and indeed that the reason they have to work on dull stuff now is so they can work on more interesting stuff later.  once, when i was about 9 or 10, my father told me i could be whatever i wanted when i grew up, so long as i enjoyed it. i remember that precisely because it seemed so anomalous. it was like being told to use dry water. whatever i thought he meant, i didnt think he meant work could literally be funfun like playing. it took me years to grasp that. by high school, the prospect of an actual job was on the horizon. adults would sometimes come to speak to us about their work, or we would go to see them at work. it was always understood that they enjoyed what they did. in retrospect i think one may have: the private jet pilot. but i dont think the bank manager really did. the main reason they all acted as if they enjoyed their work was presumably the upper-middle class convention that youre supposed to. it would not merely be bad for your career to say that you despised your job, but a social faux-pas. why is it conventional to pretend to like what you do? the first sentence of this essay explains that. if you have to like something to do it well, then the most successful people will all like what they do. thats where the upper-middle class tradition comes from. just as houses all over america are full of chairs that are, without the owners even knowing it, nth-degree imitations of chairs designed 250 years ago for french kings, conventional attitudes about work are, without the owners even knowing it, nth-degree imitations of the attitudes of people whove done great things. what a recipe for alienation. by the time they reach an age to think about what theyd like to do, most kids have been thoroughly misled about the idea of loving ones work. school has trained them to regard work as an unpleasant duty. having a job is said to be even more onerous than schoolwork. and yet all the adults claim to like what they do. you cant blame kids for thinking "i am not like these people; i am not suited to this world." actually theyve been told three lies: the stuff theyve been taught to regard as work in school is not real work; grownup work is not (necessarily) worse than schoolwork; and many of the adults around them are lying when they say they like what they do. the most dangerous liars can be the kids own parents. if you take a boring job to give your family a high standard of living, as so many people do, you risk infecting your kids with the idea that work is boring.  maybe it would be better for kids in this one case if parents were not so unselfish. a parent who set an example of loving their work might help their kids more than an expensive house.  it was not till i was in college that the idea of work finally broke free from the idea of making a living. then the important question became not how to make money, but what to work on. ideally these coincided, but some spectacular boundary cases (like einstein in the patent office) proved they werent identical. the definition of work was now to make some original contribution to the world, and in the process not to starve. but after the habit of so many years my idea of work still included a large component of pain. work still seemed to require discipline, because only hard problems yielded grand results, and hard problems couldnt literally be fun. surely one had to force oneself to work on them. if you think somethings supposed to hurt, youre less likely to notice if youre doing it wrong. that about sums up my experience of graduate school. how much are you supposed to like what you do? unless you know that, you dont know when to stop searching. and if, like most people, you underestimate it, youll tend to stop searching too early. youll end up doing something chosen for you by your parents, or the desire to make money, or prestigeor sheer inertia. heres an upper bound: do what you love doesnt mean, do what you would like to do most this second . even einstein probably had moments when he wanted to have a cup of coffee, but told himself he ought to finish what he was working on first. it used to perplex me when i read about people who liked what they did so much that there was nothing theyd rather do. there didnt seem to be any sort of work i liked that much. if i had a choice of (a) spending the next hour working on something or (b) be teleported to rome and spend the next hour wandering about, was there any sort of work id prefer? honestly, no. but the fact is, almost anyone would rather, at any given moment, float about in the carribbean, or have sex, or eat some delicious food, than work on hard problems. the rule about doing what you love assumes a certain length of time. it doesnt mean, do what will make you happiest this second, but what will make you happiest over some longer period, like a week or a month. unproductive pleasures pall eventually. after a while you get tired of lying on the beach. if you want to stay happy, you have to do something. as a lower bound, you have to like your work more than any unproductive pleasure. you have to like what you do enough that the concept of "spare time" seems mistaken. which is not to say you have to spend all your time working. you can only work so much before you get tired and start to screw up. then you want to do something elseeven something mindless. but you dont regard this time as the prize and the time you spend working as the pain you endure to earn it. i put the lower bound there for practical reasons. if your work is not your favorite thing to do, youll have terrible problems with procrastination. youll have to force yourself to work, and when you resort to that the results are distinctly inferior. to be happy i think you have to be doing something you not only enjoy, but admire. you have to be able to say, at the end, wow, thats pretty cool. this doesnt mean you have to make something. if you learn how to hang glide, or to speak a foreign language fluently, that will be enough to make you say, for a while at least, wow, thats pretty cool. what there has to be is a test. so one thing that falls just short of the standard, i think, is reading books. except for some books in math and the hard sciences, theres no test of how well youve read a book, and thats why merely reading books doesnt quite feel like work. you have to do something with what youve read to feel productive. i think the best test is one gino lee taught me: to try to do things that would make your friends say wow. but it probably wouldnt start to work properly till about age 22, because most people havent had a big enough sample to pick friends from before then. what you should not do, i think, is worry about the opinion of anyone beyond your friends. you shouldnt worry about prestige. prestige is the opinion of the rest of the world. when you can ask the opinions of people whose judgement you respect, what does it add to consider the opinions of people you dont even know?  this is easy advice to give. its hard to follow, especially when youre young.  prestige is like a powerful magnet that warps even your beliefs about what you enjoy. it causes you to work not on what you like, but what youd like to like. thats what leads people to try to write novels, for example. they like reading novels. they notice that people who write them win nobel prizes. what could be more wonderful, they think, than to be a novelist? but liking the idea of being a novelist is not enough; you have to like the actual work of novel-writing if youre going to be good at it; you have to like making up elaborate lies. prestige is just fossilized inspiration. if you do anything well enough, youll make it prestigious. plenty of things we now consider prestigious were anything but at first. jazz comes to mindthough almost any established art form would do. so just do what you like, and let prestige take care of itself. prestige is especially dangerous to the ambitious. if you want to make ambitious people waste their time on errands, the way to do it is to bait the hook with prestige. thats the recipe for getting people to give talks, write forewords, serve on committees, be department heads, and so on. it might be a good rule simply to avoid any prestigious task. if it didnt suck, they wouldnt have had to make it prestigious. similarly, if you admire two kinds of work equally, but one is more prestigious, you should probably choose the other. your opinions about whats admirable are always going to be slightly influenced by prestige, so if the two seem equal to you, you probably have more genuine admiration for the less prestigious one. the other big force leading people astray is money. money by itself is not that dangerous. when something pays well but is regarded with contempt, like telemarketing, or prostitution, or personal injury litigation, ambitious people arent tempted by it. that kind of work ends up being done by people who are "just trying to make a living." (tip: avoid any field whose practitioners say this.) the danger is when money is combined with prestige, as in, say, corporate law, or medicine. a comparatively safe and prosperous career with some automatic baseline prestige is dangerously tempting to someone young, who hasnt thought much about what they really like. the test of whether people love what they do is whether theyd do it even if they werent paid for iteven if they had to work at another job to make a living. how many corporate lawyers would do their current work if they had to do it for free, in their spare time, and take day jobs as waiters to support themselves? this test is especially helpful in deciding between different kinds of academic work, because fields vary greatly in this respect. most good mathematicians would work on math even if there were no jobs as math professors, whereas in the departments at the other end of the spectrum, the availability of teaching jobs is the driver: people would rather be english professors than work in ad agencies, and publishing papers is the way you compete for such jobs. math would happen without math departments, but it is the existence of english majors, and therefore jobs teaching them, that calls into being all those thousands of dreary papers about gender and identity in the novels of conrad. no one does that kind of thing for fun. the advice of parents will tend to err on the side of money. it seems safe to say there are more undergrads who want to be novelists and whose parents want them to be doctors than who want to be doctors and whose parents want them to be novelists. the kids think their parents are "materialistic." not necessarily. all parents tend to be more conservative for their kids than they would for themselves, simply because, as parents, they share risks more than rewards. if your eight year old son decides to climb a tall tree, or your teenage daughter decides to date the local bad boy, you wont get a share in the excitement, but if your son falls, or your daughter gets pregnant, youll have to deal with the consequences. with such powerful forces leading us astray, its not surprising we find it so hard to discover what we like to work on. most people are doomed in childhood by accepting the axiom that work  pain. those who escape this are nearly all lured onto the rocks by prestige or money. how many even discover something they love to work on? a few hundred thousand, perhaps, out of billions. its hard to find work you love; it must be, if so few do. so dont underestimate this task. and dont feel bad if you havent succeeded yet. in fact, if you admit to yourself that youre discontented, youre a step ahead of most people, who are still in denial. if youre surrounded by colleagues who claim to enjoy work that you find contemptible, odds are theyre lying to themselves. not necessarily, but probably. although doing great work takes less discipline than people thinkbecause the way to do great work is to find something you like so much that you dont have to force yourself to do it finding work you love does usually require discipline. some people are lucky enough to know what they want to do when theyre 12, and just glide along as if they were on railroad tracks. but this seems the exception. more often people who do great things have careers with the trajectory of a ping-pong ball. they go to school to study a, drop out and get a job doing b, and then become famous for c after taking it up on the side. sometimes jumping from one sort of work to another is a sign of energy, and sometimes its a sign of laziness. are you dropping out, or boldly carving a new path? you often cant tell yourself. plenty of people who will later do great things seem to be disappointments early on, when theyre trying to find their niche. is there some test you can use to keep yourself honest? one is to try to do a good job at whatever youre doing, even if you dont like it. then at least youll know youre not using dissatisfaction as an excuse for being lazy. perhaps more importantly, youll get into the habit of doing things well. another test you can use is: always produce. for example, if you have a day job you dont take seriously because you plan to be a novelist, are you producing? are you writing pages of fiction, however bad? as long as youre producing, youll know youre not merely using the hazy vision of the grand novel you plan to write one day as an opiate. the view of it will be obstructed by the all too palpably flawed one youre actually writing. "always produce" is also a heuristic for finding the work you love. if you subject yourself to that constraint, it will automatically push you away from things you think youre supposed to work on, toward things you actually like. "always produce" will discover your lifes work the way water, with the aid of gravity, finds the hole in your roof. of course, figuring out what you like to work on doesnt mean you get to work on it. thats a separate question. and if youre ambitious you have to keep them separate: you have to make a conscious effort to keep your ideas about what you want from being contaminated by what seems possible.  its painful to keep them apart, because its painful to observe the gap between them. so most people pre-emptively lower their expectations. for example, if you asked random people on the street if theyd like to be able to draw like leonardo, youd find most would say something like "oh, i cant draw." this is more a statement of intention than fact; it means, im not going to try. because the fact is, if you took a random person off the street and somehow got them to work as hard as they possibly could at drawing for the next twenty years, theyd get surprisingly far. but it would require a great moral effort; it would mean staring failure in the eye every day for years. and so to protect themselves people say "i cant." another related line you often hear is that not everyone can do work they lovethat someone has to do the unpleasant jobs. really? how do you make them? in the us the only mechanism for forcing people to do unpleasant jobs is the draft, and that hasnt been invoked for over 30 years. all we can do is encourage people to do unpleasant work, with money and prestige. if theres something people still wont do, it seems as if society just has to make do without. thats what happened with domestic servants. for millennia that was the canonical example of a job "someone had to do." and yet in the mid twentieth century servants practically disappeared in rich countries, and the rich have just had to do without. so while there may be some things someone has to do, theres a good chance anyone saying that about any particular job is mistaken. most unpleasant jobs would either get automated or go undone if no one were willing to do them. theres another sense of "not everyone can do work they love" thats all too true, however. one has to make a living, and its hard to get paid for doing work you love. there are two routes to that destination: the organic route: as you become more eminent, gradually to increase the parts of your job that you like at the expense of those you dont. the two-job route: to work at things you dont like to get money to work on things you do. the organic route is more common. it happens naturally to anyone who does good work. a young architect has to take whatever work he can get, but if he does well hell gradually be in a position to pick and choose among projects. the disadvantage of this route is that its slow and uncertain. even tenure is not real freedom. the two-job route has several variants depending on how long you work for money at a time. at one extreme is the "day job," where you work regular hours at one job to make money, and work on what you love in your spare time. at the other extreme you work at something till you make enough not to have to work for money again. the two-job route is less common than the organic route, because it requires a deliberate choice. its also more dangerous. life tends to get more expensive as you get older, so its easy to get sucked into working longer than you expected at the money job. worse still, anything you work on changes you. if you work too long on tedious stuff, it will rot your brain. and the best paying jobs are most dangerous, because they require your full attention. the advantage of the two-job route is that it lets you jump over obstacles. the landscape of possible jobs isnt flat; there are walls of varying heights between different kinds of work.  the trick of maximizing the parts of your job that you like can get you from architecture to product design, but not, probably, to music. if you make money doing one thing and then work on another, you have more freedom of choice. which route should you take? that depends on how sure you are of what you want to do, how good you are at taking orders, how much risk you can stand, and the odds that anyone will pay (in your lifetime) for what you want to do. if youre sure of the general area you want to work in and its something people are likely to pay you for, then you should probably take the organic route. but if you dont know what you want to work on, or dont like to take orders, you may want to take the two-job route, if you can stand the risk. dont decide too soon. kids who know early what they want to do seem impressive, as if they got the answer to some math question before the other kids. they have an answer, certainly, but odds are its wrong. a friend of mine who is a quite successful doctor complains constantly about her job. when people applying to medical school ask her for advice, she wants to shake them and yell "dont do it!" (but she never does.) how did she get into this fix? in high school she already wanted to be a doctor. and she is so ambitious and determined that she overcame every obstacle along the wayincluding, unfortunately, not liking it. now she has a life chosen for her by a high-school kid. when youre young, youre given the impression that youll get enough information to make each choice before you need to make it. but this is certainly not so with work. when youre deciding what to do, you have to operate on ridiculously incomplete information. even in college you get little idea what various types of work are like. at best you may have a couple internships, but not all jobs offer internships, and those that do dont teach you much more about the work than being a batboy teaches you about playing baseball. in the design of lives, as in the design of most other things, you get better results if you use flexible media. so unless youre fairly sure what you want to do, your best bet may be to choose a type of work that could turn into either an organic or two-job career. that was probably part of the reason i chose computers. you can be a professor, or make a lot of money, or morph it into any number of other kinds of work. its also wise, early on, to seek jobs that let you do many different things, so you can learn faster what various kinds of work are like. conversely, the extreme version of the two-job route is dangerous because it teaches you so little about what you like. if you work hard at being a bond trader for ten years, thinking that youll quit and write novels when you have enough money, what happens when you quit and then discover that you dont actually like writing novels? most people would say, id take that problem. give me a million dollars and ill figure out what to do. but its harder than it looks. constraints give your life shape. remove them and most people have no idea what to do: look at what happens to those who win lotteries or inherit money. much as everyone thinks they want financial security, the happiest people are not those who have it, but those who like what they do. so a plan that promises freedom at the expense of knowing what to do with it may not be as good as it seems. whichever route you take, expect a struggle. finding work you love is very difficult. most people fail. even if you succeed, its rare to be free to work on what you want till your thirties or forties. but if you have the destination in sight youll be more likely to arrive at it. if you know you can love work, youre in the home stretch, and if you know what work you love, youre practically there.  currently we do the opposite: when we make kids do boring work, like arithmetic drills, instead of admitting frankly that its boring, we try to disguise it with superficial decorations.  one father told me about a related phenomenon: he found himself concealing from his family how much he liked his work. when he wanted to go to work on a saturday, he found it easier to say that it was because he "had to" for some reason, rather than admitting he preferred to work than stay home with them.  something similar happens with suburbs. parents move to suburbs to raise their kids in a safe environment, but suburbs are so dull and artificial that by the time theyre fifteen the kids are convinced the whole world is boring.  im not saying friends should be the only audience for your work. the more people you can help, the better. but friends should be your compass.  donald hall said young would-be poets were mistaken to be so obsessed with being published. but you can imagine what it would do for a 24 year old to get a poem published in the new yorker . now to people he meets at parties hes a real poet. actually hes no better or worse than he was before, but to a clueless audience like that, the approval of an official authority makes all the difference. so its a harder problem than hall realizes. the reason the young care so much about prestige is that the people they want to impress are not very discerning.  this is isomorphic to the principle that you should prevent your beliefs about how things are from being contaminated by how you wish they were. most people let them mix pretty promiscuously. the continuing popularity of religion is the most visible index of that.  a more accurate metaphor would be to say that the graph of jobs is not very well connected. thanks to trevor blackwell, dan friedman, sarah harlin, jessica livingston, jackie mcdonough, robert morris, peter norvig, david sloo, and aaron swartz for reading drafts of this. this essay was originally published at paulgraham.com the most impressive people i know are all terrible procrastinators. so could it be that procrastination isnt always bad? most people who write about procrastination write about how to cure it. but this is, strictly speaking, impossible. there are an infinite number of things you could be doing. no matter what you work on, youre not working on everything else. so the question is not how to avoid procrastination, but how to procrastinate well. there are three variants of procrastination, depending on what you do instead of working on something: you could work on (a) nothing, (b) something less important, or (c) something more important. that last type, id argue, is good procrastination. thats the "absent-minded professor," who forgets to shave, or eat, or even perhaps look where hes going while hes thinking about some interesting question. his mind is absent from the everyday world because its hard at work in another. thats the sense in which the most impressive people i know are all procrastinators. theyre type-c procrastinators: they put off working on small stuff to work on big stuff. whats "small stuff?" roughly, work that has zero chance of being mentioned in your obituary. its hard to say at the time what will turn out to be your best work (will it be your magnum opus on sumerian temple architecture, or the detective thriller you wrote under a pseudonym?), but theres a whole class of tasks you can safely rule out: shaving, doing your laundry, cleaning the house, writing thank-you notesanything that might be called an errand. good procrastination is avoiding errands to do real work. good in a sense, at least. the people who want you to do the errands wont think its good. but you probably have to annoy them if you want to get anything done. the mildest seeming people, if they want to do real work, all have a certain degree of ruthlessness when it comes to avoiding errands. some errands, like replying to letters, go away if you ignore them (perhaps taking friends with them). others, like mowing the lawn, or filing tax returns, only get worse if you put them off. in principle it shouldnt work to put off the second kind of errand. youre going to have to do whatever it is eventually. why not (as past-due notices are always saying) do it now? the reason it pays to put off even those errands is that real work needs two things errands dont: big chunks of time, and the right mood. if you get inspired by some project, it can be a net win to blow off everything you were supposed to do for the next few days to work on it. yes, those errands may cost you more time when you finally get around to them. but if you get a lot done during those few days, you will be net more productive. in fact, it may not be a difference in degree, but a difference in kind. there may be types of work that can only be done in long, uninterrupted stretches, when inspiration hits, rather than dutifully in scheduled little slices. empirically it seems to be so. when i think of the people i know whove done great things, i dont imagine them dutifully crossing items off to-do lists. i imagine them sneaking off to work on some new idea. conversely, forcing someone to perform errands synchronously is bound to limit their productivity. the cost of an interruption is not just the time it takes, but that it breaks the time on either side in half. you probably only have to interrupt someone a couple times a day before theyre unable to work on hard problems at all. ive wondered a lot about why startups are most productive at the very beginning, when theyre just a couple guys in an apartment. the main reason may be that theres no one to interrupt them yet. in theory its good when the founders finally get enough money to hire people to do some of the work for them. but it may be better to be overworked than interrupted. once you dilute a startup with ordinary office workerswith type-b procrastinatorsthe whole company starts to resonate at their frequency. theyre interrupt-driven, and soon you are too. errands are so effective at killing great projects that a lot of people use them for that purpose. someone who has decided to write a novel, for example, will suddenly find that the house needs cleaning. people who fail to write novels dont do it by sitting in front of a blank page for days without writing anything. they do it by feeding the cat, going out to buy something they need for their apartment, meeting a friend for coffee, checking email. "i dont have time to work," they say. and they dont; theyve made sure of that. (theres also a variant where one has no place to work. the cure is to visit the places where famous people worked, and see how unsuitable they were.) ive used both these excuses at one time or another. ive learned a lot of tricks for making myself work over the last 20 years, but even now i dont win consistently. some days i get real work done. other days are eaten up by errands. and i know its usually my fault: i let errands eat up the day, to avoid facing some hard problem. the most dangerous form of procrastination is unacknowledged type-b procrastination, because it doesnt feel like procrastination. youre "getting things done." just the wrong things. any advice about procrastination that concentrates on crossing things off your to-do list is not only incomplete, but positively misleading, if it doesnt consider the possibility that the to-do list is itself a form of type-b procrastination. in fact, possibility is too weak a word. nearly everyones is. unless youre working on the biggest things you could be working on, youre type-b procrastinating, no matter how much youre getting done. in his famous essay you and your research (which i recommend to anyone ambitious, no matter what theyre working on), richard hamming suggests that you ask yourself three questions: what are the most important problems in your field? are you working on one of them? why not? hamming was at bell labs when he started asking such questions. in principle anyone there ought to have been able to work on the most important problems in their field. perhaps not everyone can make an equally dramatic mark on the world; i dont know; but whatever your capacities, there are projects that stretch them. so hammings exercise can be generalized to: whats the best thing you could be working on, and why arent you? most people will shy away from this question. i shy away from it myself; i see it there on the page and quickly move on to the next sentence. hamming used to go around actually asking people this, and it didnt make him popular. but its a question anyone ambitious should face. the trouble is, you may end up hooking a very big fish with this bait. to do good work, you need to do more than find good projects. once youve found them, you have to get yourself to work on them, and that can be hard. the bigger the problem, the harder it is to get yourself to work on it. of course, the main reason people find it difficult to work on a particular problem is that they dont enjoy it. when youre young, especially, you often find yourself working on stuff you dont really like-- because it seems impressive, for example, or because youve been assigned to work on it. most grad students are stuck working on big problems they dont really like, and grad school is thus synonymous with procrastination. but even when you like what youre working on, its easier to get yourself to work on small problems than big ones. why? why is it so hard to work on big problems? one reason is that you may not get any reward in the forseeable future. if you work on something you can finish in a day or two, you can expect to have a nice feeling of accomplishment fairly soon. if the reward is indefinitely far in the future, it seems less real. another reason people dont work on big projects is, ironically, fear of wasting time. what if they fail? then all the time they spent on it will be wasted. (in fact it probably wont be, because work on hard projects almost always leads somewhere.) but the trouble with big problems cant be just that they promise no immediate reward and might cause you to waste a lot of time. if that were all, theyd be no worse than going to visit your in-laws. theres more to it than that. big problems are terrifying . theres an almost physical pain in facing them. its like having a vacuum cleaner hooked up to your imagination. all your initial ideas get sucked out immediately, and you dont have any more, and yet the vacuum cleaner is still sucking. you cant look a big problem too directly in the eye. you have to approach it somewhat obliquely. but you have to adjust the angle just right: you have to be facing the big problem directly enough that you catch some of the excitement radiating from it, but not so much that it paralyzes you. you can tighten the angle once you get going, just as a sailboat can sail closer to the wind once it gets underway. if you want to work on big things, you seem to have to trick yourself into doing it. you have to work on small things that could grow into big things, or work on successively larger things, or split the moral load with collaborators. its not a sign of weakness to depend on such tricks. the very best work has been done this way. when i talk to people whove managed to make themselves work on big things, i find that all blow off errands, and all feel guilty about it. i dont think they should feel guilty. theres more to do than anyone could. so someone doing the best work they can is inevitably going to leave a lot of errands undone. it seems a mistake to feel bad about that. i think the way to "solve" the problem of procrastination is to let delight pull you instead of making a to-do list push you. work on an ambitious project you really enjoy, and sail as close to the wind as you can, and youll leave the right things undone. thanks to trevor blackwell, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com does "web 2.0" mean anything? till recently i thought it didnt, but the truth turns out to be more complicated. originally, yes, it was meaningless. now it seems to have acquired a meaning. and yet those who dislike the term are probably right, because if it means what i think it does, we dont need it. i first heard the phrase "web 2.0" in the name of the web 2.0 conference in 2004. at the time it was supposed to mean using "the web as a platform," which i took to refer to web-based applications.  so i was surprised at a conference this summer when tim oreilly led a session intended to figure out a definition of "web 2.0." didnt it already mean using the web as a platform? and if it didnt already mean something, why did we need the phrase at all? tim says the phrase "web 2.0" first arose in "a brainstorming session between oreilly and medialive international." what is medialive international? "producers of technology tradeshows and conferences," according to their site. so presumably thats what this brainstorming session was about. oreilly wanted to organize a conference about the web, and they were wondering what to call it. i dont think there was any deliberate plan to suggest there was a new version of the web. they just wanted to make the point that the web mattered again. it was a kind of semantic deficit spending: they knew new things were coming, and the "2.0" referred to whatever those might turn out to be. and they were right. new things were coming. but the new version number led to some awkwardness in the short term. in the process of developing the pitch for the first conference, someone must have decided theyd better take a stab at explaining what that "2.0" referred to. whatever it meant, "the web as a platform" was at least not too constricting. the story about "web 2.0" meaning the web as a platform didnt live much past the first conference. by the second conference, what "web 2.0" seemed to mean was something about democracy. at least, it did when people wrote about it online. the conference itself didnt seem very grassroots. it cost $2800, so the only people who could afford to go were vcs and people from big companies. and yet, oddly enough, ryan singels article about the conference in wired news spoke of "throngs of geeks." when a friend of mine asked ryan about this, it was news to him. he said hed originally written something like "throngs of vcs and biz dev guys" but had later shortened it just to "throngs," and that this must have in turn been expanded by the editors into "throngs of geeks." after all, a web 2.0 conference would presumably be full of geeks, right? well, no. there were about 7. even tim oreilly was wearing a suit, a sight so alien i couldnt parse it at first. i saw him walk by and said to one of the oreilly people "that guy looks just like tim." "oh, thats tim. he bought a suit." i ran after him, and sure enough, it was. he explained that hed just bought it in thailand. the 2005 web 2.0 conference reminded me of internet trade shows during the bubble, full of prowling vcs looking for the next hot startup. there was that same odd atmosphere created by a large number of people determined not to miss out. miss out on what? they didnt know. whatever was going to happenwhatever web 2.0 turned out to be. i wouldnt quite call it "bubble 2.0" just because vcs are eager to invest again. the internet is a genuinely big deal. the bust was as much an overreaction as the boom. its to be expected that once we started to pull out of the bust, there would be a lot of growth in this area, just as there was in the industries that spiked the sharpest before the depression. the reason this wont turn into a second bubble is that the ipo market is gone. venture investors are driven by exit strategies. the reason they were funding all those laughable startups during the late 90s was that they hoped to sell them to gullible retail investors; they hoped to be laughing all the way to the bank. now that route is closed. now the default exit strategy is to get bought, and acquirers are less prone to irrational exuberance than ipo investors. the closest youll get to bubble valuations is rupert murdoch paying $580 million for myspace. thats only off by a factor of 10 or so. does "web 2.0" mean anything more than the name of a conference yet? i dont like to admit it, but its starting to. when people say "web 2.0" now, i have some idea what they mean. and the fact that i both despise the phrase and understand it is the surest proof that it has started to mean something. one ingredient of its meaning is certainly ajax, which i can still only just bear to use without scare quotes. basically, what "ajax" means is "javascript now works." and that in turn means that web-based applications can now be made to work much more like desktop ones. as you read this, a whole new generation of software is being written to take advantage of ajax. there hasnt been such a wave of new applications since microcomputers first appeared. even microsoft sees it, but its too late for them to do anything more than leak "internal" documents designed to give the impression theyre on top of this new trend. in fact the new generation of software is being written way too fast for microsoft even to channel it, let alone write their own in house. their only hope now is to buy all the best ajax startups before google does. and even thats going to be hard, because google has as big a head start in buying microstartups as it did in search a few years ago. after all, google maps, the canonical ajax application, was the result of a startup they bought . so ironically the original description of the web 2.0 conference turned out to be partially right: web-based applications are a big component of web 2.0. but im convinced they got this right by accident. the ajax boom didnt start till early 2005, when google maps appeared and the term "ajax" was coined . the second big element of web 2.0 is democracy. we now have several examples to prove that amateurs can surpass professionals, when they have the right kind of system to channel their efforts. wikipedia may be the most famous. experts have given wikipedia middling reviews, but they miss the critical point: its good enough. and its free, which means people actually read it. on the web, articles you have to pay for might as well not exist. even if you were willing to pay to read them yourself, you cant link to them. theyre not part of the conversation. another place democracy seems to win is in deciding what counts as news. i never look at any news site now except reddit .  i know if something major happens, or someone writes a particularly interesting article, it will show up there. why bother checking the front page of any specific paper or magazine? reddits like an rss feed for the whole web, with a filter for quality. similar sites include digg , a technology news site thats rapidly approaching slashdot in popularity, and del.icio.us , the collaborative bookmarking network that set off the "tagging" movement. and whereas wikipedias main appeal is that its good enough and free, these sites suggest that voters do a significantly better job than human editors. the most dramatic example of web 2.0 democracy is not in the selection of ideas, but their production. ive noticed for a while that the stuff i read on individual peoples sites is as good as or better than the stuff i read in newspapers and magazines. and now i have independent evidence: the top links on reddit are generally links to individual peoples sites rather than to magazine articles or news stories. my experience of writing for magazines suggests an explanation. editors. they control the topics you can write about, and they can generally rewrite whatever you produce. the result is to damp extremes. editing yields 95th percentile writing95% of articles are improved by it, but 5% are dragged down. 5% of the time you get "throngs of geeks." on the web, people can publish whatever they want. nearly all of it falls short of the editor-damped writing in print publications. but the pool of writers is very, very large. if its large enough, the lack of damping means the best writing online should surpass the best in print.  and now that the web has evolved mechanisms for selecting good stuff, the web wins net. selection beats damping, for the same reason market economies beat centrally planned ones. even the startups are different this time around. they are to the startups of the bubble what bloggers are to the print media. during the bubble, a startup meant a company headed by an mba that was blowing through several million dollars of vc money to "get big fast" in the most literal sense. now it means a smaller, younger , more technical group that just decided to make something great. theyll decide later if they want to raise vc-scale funding, and if they take it, theyll take it on their terms . i think everyone would agree that democracy and ajax are elements of "web 2.0." i also see a third: not to maltreat users. during the bubble a lot of popular sites were quite high-handed with users. and not just in obvious ways, like making them register, or subjecting them to annoying ads. the very design of the average site in the late 90s was an abuse. many of the most popular sites were loaded with obtrusive branding that made them slow to load and sent the user the message: this is our site, not yours. (theres a physical analog in the intel and microsoft stickers that come on some laptops.) i think the root of the problem was that sites felt they were giving something away for free, and till recently a company giving anything away for free could be pretty high-handed about it. sometimes it reached the point of economic sadism: site owners assumed that the more pain they caused the user, the more benefit it must be to them. the most dramatic remnant of this model may be at salon.com, where you can read the beginning of a story, but to get the rest you have sit through a movie . at y combinator we advise all the startups we fund never to lord it over users. never make users register, unless you need to in order to store something for them. if you do make users register, never make them wait for a confirmation link in an email; in fact, dont even ask for their email address unless you need it for some reason. dont ask them any unnecessary questions. never send them email unless they explicitly ask for it. never frame pages you link to, or open them in new windows. if you have a free version and a pay version, dont make the free version too restricted. and if you find yourself asking "should we allow users to do x?" just answer "yes" whenever youre unsure. err on the side of generosity. in how to start a startup i advised startups never to let anyone fly under them, meaning never to let any other company offer a cheaper, easier solution. another way to fly low is to give users more power. let users do what they want. if you dont and a competitor does, youre in trouble. itunes is web 2.0ish in this sense. finally you can buy individual songs instead of having to buy whole albums. the recording industry hated the idea and resisted it as long as possible. but it was obvious what users wanted, so apple flew under the labels.  though really it might be better to describe itunes as web 1.5. web 2.0 applied to music would probably mean individual bands giving away drmless songs for free. the ultimate way to be nice to users is to give them something for free that competitors charge for. during the 90s a lot of people probably thought wed have some working system for micropayments by now. in fact things have gone in the other direction. the most successful sites are the ones that figure out new ways to give stuff away for free. craigslist has largely destroyed the classified ad sites of the 90s, and okcupid looks likely to do the same to the previous generation of dating sites. serving web pages is very, very cheap. if you can make even a fraction of a cent per page view, you can make a profit. and technology for targeting ads continues to improve. i wouldnt be surprised if ten years from now ebay had been supplanted by an ad-supported freebay (or, more likely, gbay). odd as it might sound, we tell startups that they should try to make as little money as possible. if you can figure out a way to turn a billion dollar industry into a fifty million dollar industry, so much the better, if all fifty million go to you. though indeed, making things cheaper often turns out to generate more money in the end, just as automating things often turns out to generate more jobs. the ultimate target is microsoft. what a bang that balloon is going to make when someone pops it by offering a free web-based alternative to ms office.  who will? google? they seem to be taking their time. i suspect the pin will be wielded by a couple of 20 year old hackers who are too naive to be intimidated by the idea. (how hard can it be?) ajax, democracy, and not dissing users. what do they all have in common? i didnt realize they had anything in common till recently, which is one of the reasons i disliked the term "web 2.0" so much. it seemed that it was being used as a label for whatever happened to be newthat it didnt predict anything. but there is a common thread. web 2.0 means using the web the way its meant to be used. the "trends" were seeing now are simply the inherent nature of the web emerging from under the broken models that got imposed on it during the bubble. i realized this when i read an interview with joe kraus, the co-founder of excite.  excite really never got the business model right at all. we fell into the classic problem of how when a new medium comes out it adopts the practices, the content, the business models of the old mediumwhich fails, and then the more appropriate models get figured out. it may have seemed as if not much was happening during the years after the bubble burst. but in retrospect, something was happening: the web was finding its natural angle of repose. the democracy component, for examplethats not an innovation, in the sense of something someone made happen. thats what the web naturally tends to produce. ditto for the idea of delivering desktop-like applications over the web. that idea is almost as old as the web. but the first time around it was co-opted by sun, and we got java applets. java has since been remade into a generic replacement for c++, but in 1996 the story about java was that it represented a new model of software. instead of desktop applications, youd run java "applets" delivered from a server. this plan collapsed under its own weight. microsoft helped kill it, but it would have died anyway. there was no uptake among hackers. when you find pr firms promoting something as the next development platform, you can be sure its not. if it were, you wouldnt need pr firms to tell you, because hackers would already be writing stuff on top of it, the way sites like busmonster used google maps as a platform before google even meant it to be one. the proof that ajax is the next hot platform is that thousands of hackers have spontaneously started building things on top of it. mikey likes it. theres another thing all three components of web 2.0 have in common. heres a clue. suppose you approached investors with the following idea for a web 2.0 startup: sites like del.icio.us and flickr allow users to "tag" content with descriptive tokens. but there is also huge source of implicit tags that they ignore: the text within web links. moreover, these links represent a social network connecting the individuals and organizations who created the pages, and by using graph theory we can compute from this network an estimate of the reputation of each member. we plan to mine the web for these implicit tags, and use them together with the reputation hierarchy they embody to enhance web searches. how long do you think it would take them on average to realize that it was a description of google? google was a pioneer in all three components of web 2.0: their core business sounds crushingly hip when described in web 2.0 terms, "dont maltreat users" is a subset of "dont be evil," and of course google set off the whole ajax boom with google maps. web 2.0 means using the web as it was meant to be used, and google does. thats their secret. theyre sailing with the wind, instead of sitting becalmed praying for a business model, like the print media, or trying to tack upwind by suing their customers, like microsoft and the record labels.  google doesnt try to force things to happen their way. they try to figure out whats going to happen, and arrange to be standing there when it does. thats the way to approach technologyand as business includes an ever larger technological component, the right way to do business. the fact that google is a "web 2.0" company shows that, while meaningful, the term is also rather bogus. its like the word "allopathic." it just means doing things right, and its a bad sign when you have a special word for that.  from the conference site , june 2004: "while the first wave of the web was closely tied to the browser, the second wave extends applications across the web and enables a new generation of services and business opportunities." to the extent this means anything, it seems to be about web-based applications .  disclosure: reddit was funded by y combinator . but although i started using it out of loyalty to the home team, ive become a genuine addict. while were at it, im also an investor in !msft, having sold all my shares earlier this year.  im not against editing. i spend more time editing than writing, and i have a group of picky friends who proofread almost everything i write. what i dislike is editing done after the fact by someone else.  obvious is an understatement. users had been climbing in through the window for years before apple finally moved the door.  hint: the way to create a web-based alternative to office may not be to write every component yourself, but to establish a protocol for web-based apps to share a virtual home directory spread across multiple servers. or it may be to write it all yourself.  in jessica livingstons founders at work .  microsoft didnt sue their customers directly, but they seem to have done all they could to help sco sue them. thanks to trevor blackwell, sarah harlin, jessica livingston, peter norvig, aaron swartz, and jeff weiner for reading drafts of this, and to the guys at oreilly and adaptive path for answering my questions. this essay was originally published at paulgraham.com venture funding works like gears. a typical startup goes through several rounds of funding, and at each round you want to take just enough money to reach the speed where you can shift into the next gear. few startups get it quite right. many are underfunded. a few are overfunded, which is like trying to start driving in third gear. i think it would help founders to understand funding betternot just the mechanics of it, but what investors are thinking. i was surprised recently when i realized that all the worst problems we faced in our startup were due not to competitors, but investors. dealing with competitors was easy by comparison. i dont mean to suggest that our investors were nothing but a drag on us. they were helpful in negotiating deals, for example. i mean more that conflicts with investors are particularly nasty. competitors punch you in the jaw, but investors have you by the balls. apparently our situation was not unusual. and if trouble with investors is one of the biggest threats to a startup, managing them is one of the most important skills founders need to learn. lets start by talking about the five sources of startup funding. then well trace the life of a hypothetical (very fortunate) startup as it shifts gears through successive rounds. a lot of startups get their first funding from friends and family. excite did, for example: after the founders graduated from college, they borrowed $15,000 from their parents to start a company. with the help of some part-time jobs they made it last 18 months. if your friends or family happen to be rich, the line blurs between them and angel investors. at viaweb we got our first $10,000 of seed money from our friend julian, but he was sufficiently rich that its hard to say whether he should be classified as a friend or angel. he was also a lawyer, which was great, because it meant we didnt have to pay legal bills out of that initial small sum. the advantage of raising money from friends and family is that theyre easy to find. you already know them. there are three main disadvantages: you mix together your business and personal life; they will probably not be as well connected as angels or venture firms; and they may not be accredited investors, which could complicate your life later. the sec defines an "accredited investor" as someone with over a million dollars in liquid assets or an income of over $200,000 a year. the regulatory burden is much lower if a companys shareholders are all accredited investors. once you take money from the general public youre more restricted in what you can do.  a startups life will be more complicated, legally, if any of the investors arent accredited. in an ipo, it might not merely add expense, but change the outcome. a lawyer i asked about it said: when the company goes public, the sec will carefully study all prior issuances of stock by the company and demand that it take immediate action to cure any past violations of securities laws. those remedial actions can delay, stall or even kill the ipo. of course the odds of any given startup doing an ipo are small. but not as small as they might seem. a lot of startups that end up going public didnt seem likely to at first. (who could have guessed that the company wozniak and jobs started in their spare time selling plans for microcomputers would yield one of the biggest ipos of the decade?) much of the value of a startup consists of that tiny probability multiplied by the huge outcome. it wasnt because they werent accredited investors that i didnt ask my parents for seed money, though. when we were starting viaweb, i didnt know about the concept of an accredited investor, and didnt stop to think about the value of investors connections. the reason i didnt take money from my parents was that i didnt want them to lose it. another way to fund a startup is to get a job. the best sort of job is a consulting project in which you can build whatever software you wanted to sell as a startup. then you can gradually transform yourself from a consulting company into a product company, and have your clients pay your development expenses. this is a good plan for someone with kids, because it takes most of the risk out of starting a startup. there never has to be a time when you have no revenues. risk and reward are usually proportionate, however: you should expect a plan that cuts the risk of starting a startup also to cut the average return. in this case, you trade decreased financial risk for increased risk that your company wont succeed as a startup. but isnt the consulting company itself a startup? no, not generally. a company has to be more than small and newly founded to be a startup. there are millions of small businesses in america, but only a few thousand are startups. to be a startup, a company has to be a product business, not a service business. by which i mean not that it has to make something physical, but that it has to have one thing it sells to many people, rather than doing custom work for individual clients. custom work doesnt scale. to be a startup you need to be the band that sells a million copies of a song, not the band that makes money by playing at individual weddings and bar mitzvahs. the trouble with consulting is that clients have an awkward habit of calling you on the phone. most startups operate close to the margin of failure, and the distraction of having to deal with clients could be enough to put you over the edge. especially if you have competitors who get to work full time on just being a startup. so you have to be very disciplined if you take the consulting route. you have to work actively to prevent your company growing into a "weed tree," dependent on this source of easy but low-margin money.  indeed, the biggest danger of consulting may be that it gives you an excuse for failure. in a startup, as in grad school, a lot of what ends up driving you are the expectations of your family and friends. once you start a startup and tell everyone thats what youre doing, youre now on a path labelled "get rich or bust." you now have to get rich, or youve failed. fear of failure is an extraordinarily powerful force. usually it prevents people from starting things, but once you publish some definite ambition, it switches directions and starts working in your favor. i think its a pretty clever piece of jiujitsu to set this irresistible force against the slightly less immovable object of becoming rich. you wont have it driving you if your stated ambition is merely to start a consulting company that you will one day morph into a startup. an advantage of consulting, as a way to develop a product, is that you know youre making something at least one customer wants. but if you have what it takes to start a startup you should have sufficient vision not to need this crutch. angels are individual rich people. the word was first used for backers of broadway plays, but now applies to individual investors generally. angels whove made money in technology are preferable, for two reasons: they understand your situation, and theyre a source of contacts and advice. the contacts and advice can be more important than the money. when del.icio.us took money from investors, they took money from, among others, tim oreilly. the amount he put in was small compared to the vcs who led the round, but tim is a smart and influential guy and its good to have him on your side. you can do whatever you want with money from consulting or friends and family. with angels were now talking about venture funding proper, so its time to introduce the concept of exit strategy . younger would-be founders are often surprised that investors expect them either to sell the company or go public. the reason is that investors need to get their capital back. theyll only consider companies that have an exit strategymeaning companies that could get bought or go public. this is not as selfish as it sounds. there are few large, private technology companies. those that dont fail all seem to get bought or go public. the reason is that employees are investors tooof their timeand they want just as much to be able to cash out. if your competitors offer employees stock options that might make them rich, while you make it clear you plan to stay private, your competitors will get the best people. so the principle of an "exit" is not just something forced on startups by investors, but part of what it means to be a startup. another concept we need to introduce now is valuation. when someone buys shares in a company, that implicitly establishes a value for it. if someone pays $20,000 for 10% of a company, the company is in theory worth $200,000. i say "in theory" because in early stage investing, valuations are voodoo. as a company gets more established, its valuation gets closer to an actual market value. but in a newly founded startup, the valuation number is just an artifact of the respective contributions of everyone involved. startups often "pay" investors who will help the company in some way by letting them invest at low valuations. if i had a startup and steve jobs wanted to invest in it, id give him the stock for $10, just to be able to brag that he was an investor. unfortunately, its impractical (if not illegal) to adjust the valuation of the company up and down for each investor. startups valuations are supposed to rise over time. so if youre going to sell cheap stock to eminent angels, do it early, when its natural for the company to have a low valuation. some angel investors join together in syndicates. any city where people start startups will have one or more of them. in boston the biggest is the common angels . in the bay area its the band of angels . you can find groups near you through the angel capital association .  however, most angel investors dont belong to these groups. in fact, the more prominent the angel, the less likely they are to belong to a group. some angel groups charge you money to pitch your idea to them. needless to say, you should never do this. one of the dangers of taking investment from individual angels, rather than through an angel group or investment firm, is that they have less reputation to protect. a big-name vc firm will not screw you too outrageously, because other founders would avoid them if word got out. with individual angels you dont have this protection, as we found to our dismay in our own startup. in many startups lives there comes a point when youre at the investors mercywhen youre out of money and the only place to get more is your existing investors. when we got into such a scrape, our investors took advantage of it in a way that a name-brand vc probably wouldnt have. angels have a corresponding advantage, however: theyre also not bound by all the rules that vc firms are. and so they can, for example, allow founders to cash out partially in a funding round, by selling some of their stock directly to the investors. i think this will become more common; the average founder is eager to do it, and selling, say, half a million dollars worth of stock will not, as vcs fear, cause most founders to be any less committed to the business. the same angels who tried to screw us also let us do this, and so on balance im grateful rather than angry. (as in families, relations between founders and investors can be complicated.) the best way to find angel investors is through personal introductions. you could try to cold-call angel groups near you, but angels, like vcs, will pay more attention to deals recommended by someone they respect. deal terms with angels vary a lot. there are no generally accepted standards. sometimes angels deal terms are as fearsome as vcs. other angels, particularly in the earliest stages, will invest based on a two-page agreement. angels who only invest occasionally may not themselves know what terms they want. they just want to invest in this startup. what kind of anti-dilution protection do they want? hell if they know. in these situations, the deal terms tend to be random: the angel asks his lawyer to create a vanilla agreement, and the terms end up being whatever the lawyer considers vanilla. which in practice usually means, whatever existing agreement he finds lying around his firm. (few legal documents are created from scratch.) these heaps o boilerplate are a problem for small startups, because they tend to grow into the union of all preceding documents. i know of one startup that got from an angel investor what amounted to a five hundred pound handshake: after deciding to invest, the angel presented them with a 70-page agreement. the startup didnt have enough money to pay a lawyer even to read it, let alone negotiate the terms, so the deal fell through. one solution to this problem would be to have the startups lawyer produce the agreement, instead of the angels. some angels might balk at this, but others would probably welcome it. inexperienced angels often get cold feet when the time comes to write that big check. in our startup, one of the two angels in the initial round took months to pay us, and only did after repeated nagging from our lawyer, who was also, fortunately, his lawyer. its obvious why investors delay. investing in startups is risky! when a company is only two months old, every day you wait gives you 1.7% more data about their trajectory. but the investor is already being compensated for that risk in the low price of the stock, so it is unfair to delay. fair or not, investors do it if you let them. even vcs do it. and funding delays are a big distraction for founders, who ought to be working on their company, not worrying about investors. whats a startup to do? with both investors and acquirers, the only leverage you have is competition. if an investor knows you have other investors lined up, hell be a lot more eager to close-- and not just because hell worry about losing the deal, but because if other investors are interested, you must be worth investing in. its the same with acquisitions. no one wants to buy you till someone else wants to buy you, and then everyone wants to buy you. the key to closing deals is never to stop pursuing alternatives. when an investor says he wants to invest in you, or an acquirer says they want to buy you, dont believe it till you get the check. your natural tendency when an investor says yes will be to relax and go back to writing code. alas, you cant; you have to keep looking for more investors, if only to get this one to act.  seed firms are like angels in that they invest relatively small amounts at early stages, but like vcs in that theyre companies that do it as a business, rather than individuals making occasional investments on the side. till now, nearly all seed firms have been so-called "incubators," so y combinator gets called one too, though the only thing we have in common is that we invest in the earliest phase. according to the national association of business incubators, there are about 800 incubators in the us. this is an astounding number, because i know the founders of a lot of startups, and i cant think of one that began in an incubator. what is an incubator? im not sure myself. the defining quality seems to be that you work in their space. thats where the name "incubator" comes from. they seem to vary a great deal in other respects. at one extreme is the sort of pork-barrel project where a town gets money from the state government to renovate a vacant building as a "high-tech incubator," as if it were merely lack of the right sort of office space that had till now prevented the town from becoming a startup hub . at the other extreme are places like idealab, which generates ideas for new startups internally and hires people to work for them. the classic bubble incubators, most of which now seem to be dead, were like vc firms except that they took a much bigger role in the startups they funded. in addition to working in their space, you were supposed to use their office staff, lawyers, accountants, and so on. whereas incubators tend (or tended) to exert more control than vcs, y combinator exerts less. and we think its better if startups operate out of their own premises, however crappy, than the offices of their investors. so its annoying that we keep getting called an "incubator," but perhaps inevitable, because theres only one of us so far and no word yet for what we are. if we have to be called something, the obvious name would be "excubator." (the name is more excusable if one considers it as meaning that we enable people to escape cubicles.) because seed firms are companies rather than individual people, reaching them is easier than reaching angels. just go to their web site and send them an email. the importance of personal introductions varies, but is less than with angels or vcs. the fact that seed firms are companies also means the investment process is more standardized. (this is generally true with angel groups too.) seed firms will probably have set deal terms they use for every startup they fund. the fact that the deal terms are standard doesnt mean theyre favorable to you, but if other startups have signed the same agreements and things went well for them, its a sign the terms are reasonable. seed firms differ from angels and vcs in that they invest exclusively in the earliest phasesoften when the company is still just an idea. angels and even vc firms occasionally do this, but they also invest at later stages. the problems are different in the early stages. for example, in the first couple months a startup may completely redefine their idea . so seed investors usually care less about the idea than the people. this is true of all venture funding, but especially so in the seed stage. like vcs, one of the advantages of seed firms is the advice they offer. but because seed firms operate in an earlier phase, they need to offer different kinds of advice. for example, a seed firm should be able to give advice about how to approach vcs, which vcs obviously dont need to do; whereas vcs should be able to give advice about how to hire an "executive team," which is not an issue in the seed stage. in the earliest phases, a lot of the problems are technical, so seed firms should be able to help with technical as well as business problems. seed firms and angel investors generally want to invest in the initial phases of a startup, then hand them off to vc firms for the next round. occasionally startups go from seed funding direct to acquisition, however, and i expect this to become increasingly common. google has been aggressively pursuing this route, and now yahoo is too. both now compete directly with vcs. and this is a smart move. why wait for further funding rounds to jack up a startups price? when a startup reaches the point where vcs have enough information to invest in it, the acquirer should have enough information to buy it. more information, in fact; with their technical depth, the acquirers should be better at picking winners than vcs. vc firms are like seed firms in that theyre actual companies, but they invest other peoples money, and much larger amounts of it. vc investments average several million dollars. so they tend to come later in the life of a startup, are harder to get, and come with tougher terms. the word "venture capitalist" is sometimes used loosely for any venture investor, but there is a sharp difference between vcs and other investors: vc firms are organized as funds , much like hedge funds or mutual funds. the fund managers, who are called "general partners," get about 2% of the fund annually as a management fee, plus about 20% of the funds gains. there is a very sharp dropoff in performance among vc firms, because in the vc business both success and failure are self-perpetuating. when an investment scores spectacularly, as google did for kleiner and sequoia, it generates a lot of good publicity for the vcs. and many founders prefer to take money from successful vc firms, because of the legitimacy it confers. hence a vicious (for the losers) cycle: vc firms that have been doing badly will only get the deals the bigger fish have rejected, causing them to continue to do badly. as a result, of the thousand or so vc funds in the us now, only about 50 are likely to make money, and it is very hard for a new fund to break into this group. in a sense, the lower-tier vc firms are a bargain for founders. they may not be quite as smart or as well connected as the big-name firms, but they are much hungrier for deals. this means you should be able to get better terms from them. better how? the most obvious is valuation: theyll take less of your company. but as well as money, theres power. i think founders will increasingly be able to stay on as ceo, and on terms that will make it fairly hard to fire them later. the most dramatic change, i predict, is that vcs will allow founders to cash out partially by selling some of their stock direct to the vc firm. vcs have traditionally resisted letting founders get anything before the ultimate "liquidity event." but theyre also desperate for deals. and since i know from my own experience that the rule against buying stock from founders is a stupid one, this is a natural place for things to give as venture funding becomes more and more a sellers market. the disadvantage of taking money from less known firms is that people will assume, correctly or not, that you were turned down by the more exalted ones. but, like where you went to college, the name of your vc stops mattering once you have some performance to measure. so the more confident you are, the less you need a brand-name vc. we funded viaweb entirely with angel money; it never occurred to us that the backing of a well known vc firm would make us seem more impressive.  another danger of less known firms is that, like angels, they have less reputation to protect. i suspect its the lower-tier firms that are responsible for most of the tricks that have given vcs such a bad reputation among hackers. they are doubly hosed: the general partners themselves are less able, and yet they have harder problems to solve, because the top vcs skim off all the best deals, leaving the lower-tier firms exactly the startups that are likely to blow up. for example, lower-tier firms are much more likely to pretend to want to do a deal with you just to lock you up while they decide if they really want to. one experienced cfo said: the better ones usually will not give a term sheet unless they really want to do a deal. the second or third tier firms have a much higher break rateit could be as high as 50%. its obvious why: the lower-tier firms biggest fear, when chance throws them a bone, is that one of the big dogs will notice and take it away. the big dogs dont have worry about that. falling victim to this trick could really hurt you. as one vc told me: if you were talking to four vcs, told three of them that you accepted a term sheet, and then have to call them back to tell them you were just kidding, you are absolutely damaged goods. heres a partial solution: when a vc offers you a term sheet, ask how many of their last 10 term sheets turned into deals. this will at least force them to lie outright if they want to mislead you. not all the people who work at vc firms are partners. most firms also have a handful of junior employees called something like associates or analysts. if you get a call from a vc firm, go to their web site and check whether the person you talked to is a partner. odds are it will be a junior person; they scour the web looking for startups their bosses could invest in. the junior people will tend to seem very positive about your company. theyre not pretending; they want to believe youre a hot prospect, because it would be a huge coup for them if their firm invested in a company they discovered. dont be misled by this optimism. its the partners who decide, and they view things with a colder eye. because vcs invest large amounts, the money comes with more restrictions. most only come into effect if the company gets into trouble. for example, vcs generally write it into the deal that in any sale, they get their investment back first. so if the company gets sold at a low price, the founders could get nothing. some vcs now require that in any sale they get 4x their investment back before the common stock holders (that is, you) get anything, but this is an abuse that should be resisted. another difference with large investments is that the founders are usually required to accept "vesting"to surrender their stock and earn it back over the next 4-5 years. vcs dont want to invest millions in a company the founders could just walk away from. financially, vesting has little effect, but in some situations it could mean founders will have less power. if vcs got de facto control of the company and fired one of the founders, hed lose any unvested stock unless there was specific protection against this. so vesting would in that situation force founders to toe the line. the most noticeable change when a startup takes serious funding is that the founders will no longer have complete control. ten years ago vcs used to insist that founders step down as ceo and hand the job over to a business guy they supplied. this is less the rule now, partly because the disasters of the bubble showed that generic business guys dont make such great ceos. but while founders will increasingly be able to stay on as ceo, theyll have to cede some power, because the board of directors will become more powerful. in the seed stage, the board is generally a formality; if you want to talk to the other board members, you just yell into the next room. this stops with vc-scale money. in a typical vc funding deal, the board of directors might be composed of two vcs, two founders, and one outside person acceptable to both. the board will have ultimate power, which means the founders now have to convince instead of commanding. this is not as bad as it sounds, however. bill gates is in the same position; he doesnt have majority control of microsoft; in principle he also has to convince instead of commanding. and yet he seems pretty commanding, doesnt he? as long as things are going smoothly, boards dont interfere much. the danger comes when theres a bump in the road, as happened to steve jobs at apple. like angels, vcs prefer to invest in deals that come to them through people they know. so while nearly all vc funds have some address you can send your business plan to, vcs privately admit the chance of getting funding by this route is near zero. one recently told me that he did not know a single startup that got funded this way. i suspect vcs accept business plans "over the transom" more as a way to keep tabs on industry trends than as a source of deals. in fact, i would strongly advise against mailing your business plan randomly to vcs, because they treat this as evidence of laziness. do the extra work of getting personal introductions. as one vc put it: im not hard to find. i know a lot of people. if you cant find some way to reach me, how are you going to create a successful company? one of the most difficult problems for startup founders is deciding when to approach vcs. you really only get one chance, because they rely heavily on first impressions. and you cant approach some and save others for later, because (a) they ask who else youve talked to and when and (b) they talk among themselves. if youre talking to one vc and he finds out that you were rejected by another several months ago, youll definitely seem shopworn. so when do you approach vcs? when you can convince them. if the founders have impressive resumes and the idea isnt hard to understand, you could approach vcs quite early. whereas if the founders are unknown and the idea is very novel, you might have to launch the thing and show that users loved it before vcs would be convinced. if several vcs are interested in you, they will sometimes be willing to split the deal between them. theyre more likely to do this if theyre close in the vc pecking order. such deals may be a net win for founders, because you get multiple vcs interested in your success, and you can ask each for advice about the other. one founder i know wrote: two-firm deals are great. it costs you a little more equity, but being able to play the two firms off each other (as well as ask one if the other is being out of line) is invaluable. when you do negotiate with vcs, remember that theyve done this a lot more than you have. theyve invested in dozens of startups, whereas this is probably the first youve founded. but dont let them or the situation intimidate you. the average founder is smarter than the average vc. so just do what youd do in any complex, unfamiliar situation: proceed deliberately, and question anything that seems odd. it is, unfortunately, common for vcs to put terms in an agreement whose consequences surprise founders later, and also common for vcs to defend things they do by saying that theyre standard in the industry. standard, schmandard; the whole industry is only a few decades old, and rapidly evolving. the concept of "standard" is a useful one when youre operating on a small scale (y combinator uses identical terms for every deal because for tiny seed-stage investments its not worth the overhead of negotiating individual deals), but it doesnt apply at the vc level. on that scale, every negotiation is unique. most successful startups get money from more than one of the preceding five sources.  and, confusingly, the names of funding sources also tend to be used as the names of different rounds. the best way to explain how it all works is to follow the case of a hypothetical startup. our startup begins when a group of three friends have an idea-- either an idea for something they might build, or simply the idea "lets start a company." presumably they already have some source of food and shelter. but if you have food and shelter, you probably also have something youre supposed to be working on: either classwork, or a job. so if you want to work full-time on a startup, your money situation will probably change too. a lot of startup founders say they started the company without any idea of what they planned to do. this is actually less common than it seems: many have to claim they thought of the idea after quitting because otherwise their former employer would own it. the three friends decide to take the leap. since most startups are in competitive businesses, you not only want to work full-time on them, but more than full-time. so some or all of the friends quit their jobs or leave school. (some of the founders in a startup can stay in grad school, but at least one has to make the company his full-time job.) theyre going to run the company out of one of their apartments at first, and since they dont have any users they dont have to pay much for infrastructure. their main expenses are setting up the company, which costs a couple thousand dollars in legal work and registration fees, and the living expenses of the founders. the phrase "seed investment" covers a broad range. to some vc firms it means $500,000, but to most startups it means several months living expenses. well suppose our group of friends start with $15,000 from their friends rich uncle, who they give 5% of the company in return. theres only common stock at this stage. they leave 20% as an options pool for later employees (but they set things up so that they can issue this stock to themselves if they get bought early and most is still unissued), and the three founders each get 25%. by living really cheaply they think they can make the remaining money last five months. when you have five months runway left, how soon do you need to start looking for your next round? answer: immediately. it takes time to find investors, and time (always more than you expect) for the deal to close even after they say yes. so if our group of founders know what theyre doing theyll start sniffing around for angel investors right away. but of course their main job is to build version 1 of their software. the friends might have liked to have more money in this first phase, but being slightly underfunded teaches them an important lesson. for a startup, cheapness is power. the lower your costs, the more options you havenot just at this stage, but at every point till youre profitable. when you have a high "burn rate," youre always under time pressure, which means (a) you dont have time for your ideas to evolve, and (b) youre often forced to take deals you dont like. every startups rule should be: spend little, and work fast. after ten weeks work the three friends have built a prototype that gives one a taste of what their product will do. its not what they originally set out to doin the process of writing it, they had some new ideas. and it only does a fraction of what the finished product will do, but that fraction includes stuff that no one else has done before. theyve also written at least a skeleton business plan, addressing the five fundamental questions: what theyre going to do, why users need it, how large the market is, how theyll make money, and who the competitors are and why this company is going to beat them. (that last has to be more specific than "they suck" or "well work really hard.") if you have to choose between spending time on the demo or the business plan, spend most on the demo. software is not only more convincing, but a better way to explore ideas. while writing the prototype, the group has been traversing their network of friends in search of angel investors. they find some just as the prototype is demoable. when they demo it, one of the angels is willing to invest. now the group is looking for more money: they want enough to last for a year, and maybe to hire a couple friends. so theyre going to raise $200,000. the angel agrees to invest at a pre-money valuation of $1 million. the company issues $200,000 worth of new shares to the angel; if there were 1000 shares before the deal, this means 200 additional shares. the angel now owns 200/1200 shares, or a sixth of the company, and all the previous shareholders percentage ownership is diluted by a sixth. after the deal, the capitalization table looks like this: shareholder shares percent ------------------------------- angel 200 16.7 uncle 50 4.2 each founder 250 20.8 option pool 200 16.7 ---- ----- total 1200 100 to keep things simple, i had the angel do a straight cash for stock deal. in reality the angel might be more likely to make the investment in the form of a convertible loan. a convertible loan is a loan that can be converted into stock later; it works out the same as a stock purchase in the end, but gives the angel more protection against being squashed by vcs in future rounds. who pays the legal bills for this deal? the startup, remember, only has a couple thousand left. in practice this turns out to be a sticky problem that usually gets solved in some improvised way. maybe the startup can find lawyers who will do it cheaply in the hope of future work if the startup succeeds. maybe someone has a lawyer friend. maybe the angel pays for his lawyer to represent both sides. (make sure if you take the latter route that the lawyer is representing you rather than merely advising you, or his only duty is to the investor.) an angel investing $200k would probably expect a seat on the board of directors. he might also want preferred stock, meaning a special class of stock that has some additional rights over the common stock everyone else has. typically these rights include vetoes over major strategic decisions, protection against being diluted in future rounds, and the right to get ones investment back first if the company is sold. some investors might expect the founders to accept vesting for a sum this size, and others wouldnt. vcs are more likely to require vesting than angels. at viaweb we managed to raise $2.5 million from angels without ever accepting vesting, largely because we were so inexperienced that we were appalled at the idea. in practice this turned out to be good, because it made us harder to push around. our experience was unusual; vesting is the norm for amounts that size. y combinator doesnt require vesting, because (a) we invest such small amounts, and (b) we think its unnecessary, and that the hope of getting rich is enough motivation to keep founders at work. but maybe if we were investing millions we would think differently. i should add that vesting is also a way for founders to protect themselves against one another. it solves the problem of what to do if one of the founders quits. so some founders impose it on themselves when they start the company. the angel deal takes two weeks to close, so we are now three months into the life of the company. the point after you get the first big chunk of angel money will usually be the happiest phase in a startups life. its a lot like being a postdoc: you have no immediate financial worries, and few responsibilities. you get to work on juicy kinds of work, like designing software. you dont have to spend time on bureaucratic stuff, because you havent hired any bureaucrats yet. enjoy it while it lasts, and get as much done as you can, because you will never again be so productive. with an apparently inexhaustible sum of money sitting safely in the bank, the founders happily set to work turning their prototype into something they can release. they hire one of their friendsat first just as a consultant, so they can try him outand then a month later as employee #1. they pay him the smallest salary he can live on, plus 3% of the company in restricted stock, vesting over four years. (so after this the option pool is down to 13.7%).  they also spend a little money on a freelance graphic designer. how much stock do you give early employees? that varies so much that theres no conventional number. if you get someone really good, really early, it might be wise to give him as much stock as the founders. the one universal rule is that the amount of stock an employee gets decreases polynomially with the age of the company. in other words, you get rich as a power of how early you were. so if some friends want you to come work for their startup, dont wait several months before deciding. a month later, at the end of month four, our group of founders have something they can launch. gradually through word of mouth they start to get users. seeing the system in use by real userspeople they dont knowgives them lots of new ideas. also they find they now worry obsessively about the status of their server. (how relaxing founders lives must have been when startups wrote visicalc.) by the end of month six, the system is starting to have a solid core of features, and a small but devoted following. people start to write about it, and the founders are starting to feel like experts in their field. well assume that their startup is one that could put millions more to use. perhaps they need to spend a lot on marketing, or build some kind of expensive infrastructure, or hire highly paid salesmen. so they decide to start talking to vcs. they get introductions to vcs from various sources: their angel investor connects them with a couple; they meet a few at conferences; a couple vcs call them after reading about them. armed with their now somewhat fleshed-out business plan and able to demo a real, working system, the founders visit the vcs they have introductions to. they find the vcs intimidating and inscrutable. they all ask the same question: who else have you pitched to? (vcs are like high school girls: theyre acutely aware of their position in the vc pecking order, and their interest in a company is a function of the interest other vcs show in it.) one of the vc firms says they want to invest and offers the founders a term sheet. a term sheet is a summary of what the deal terms will be when and if they do a deal; lawyers will fill in the details later. by accepting the term sheet, the startup agrees to turn away other vcs for some set amount of time while this firm does the "due diligence" required for the deal. due diligence is the corporate equivalent of a background check: the purpose is to uncover any hidden bombs that might sink the company later, like serious design flaws in the product, pending lawsuits against the company, intellectual property issues, and so on. vcs legal and financial due diligence is pretty thorough, but the technical due diligence is generally a joke.  the due diligence discloses no ticking bombs, and six weeks later they go ahead with the deal. here are the terms: a $2 million investment at a pre-money valuation of $4 million, meaning that after the deal closes the vcs will own a third of the company (2 / (4 + 2)). the vcs also insist that prior to the deal the option pool be enlarged by an additional hundred shares. so the total number of new shares issued is 750, and the cap table becomes: shareholder shares percent ------------------------------- vcs 650 33.3 angel 200 10.3 uncle 50 2.6 each founder 250 12.8 employee 36 1.8 unvested option pool 264 13.5 ---- ----- total 1950 100 this picture is unrealistic in several respects. for example, while the percentages might end up looking like this, its unlikely that the vcs would keep the existing numbers of shares. in fact, every bit of the startups paperwork would probably be replaced, as if the company were being founded anew. also, the money might come in several tranches, the later ones subject to various conditionsthough this is apparently more common in deals with lower-tier vcs (whose lot in life is to fund more dubious startups) than with the top firms. and of course any vcs reading this are probably rolling on the floor laughing at how my hypothetical vcs let the angel keep his 10.3 of the company. i admit, this is the bambi version; in simplifying the picture, ive also made everyone nicer. in the real world, vcs regard angels the way a jealous husband feels about his wifes previous boyfriends. to them the company didnt exist before they invested in it.  i dont want to give the impression you have to do an angel round before going to vcs. in this example i stretched things out to show multiple sources of funding in action. some startups could go directly from seed funding to a vc round; several of the companies weve funded have. the founders are required to vest their shares over four years, and the board is now reconstituted to consist of two vcs, two founders, and a fifth person acceptable to both. the angel investor cheerfully surrenders his board seat. at this point there is nothing new our startup can teach us about fundingor at least, nothing good.  the startup will almost certainly hire more people at this point; those millions must be put to work, after all. the company may do additional funding rounds, presumably at higher valuations. they may if they are extraordinarily fortunate do an ipo, which we should remember is also in principle a round of funding, regardless of its de facto purpose. but that, if not beyond the bounds of possibility, is beyond the scope of this article. anyone whos been through a startup will find the preceding portrait to be missing something: disasters. if theres one thing all startups have in common, its that something is always going wrong. and nowhere more than in matters of funding. for example, our hypothetical startup never spent more than half of one round before securing the next. thats more ideal than typical. many startupseven successful onescome close to running out of money at some point. terrible things happen to startups when they run out of money, because theyre designed for growth, not adversity. but the most unrealistic thing about the series of deals ive described is that they all closed. in the startup world, closing is not what deals do. what deals do is fall through. if youre starting a startup you would do well to remember that. birds fly; fish swim; deals fall through. why? partly the reason deals seem to fall through so often is that you lie to yourself. you want the deal to close, so you start to believe it will. but even correcting for this, startup deals fall through alarmingly oftenfar more often than, say, deals to buy real estate. the reason is that its such a risky environment. people about to fund or acquire a startup are prone to wicked cases of buyers remorse. they dont really grasp the risk theyre taking till the deals about to close. and then they panic. and not just inexperienced angel investors, but big companies too. so if youre a startup founder wondering why some angel investor isnt returning your phone calls, you can at least take comfort in the thought that the same thing is happening to other deals a hundred times the size. the example of a startups history that ive presented is like a skeletonaccurate so far as it goes, but needing to be fleshed out to be a complete picture. to get a complete picture, just add in every possible disaster. a frightening prospect? in a way. and yet also in a way encouraging. the very uncertainty of startups frightens away almost everyone. people overvalue stabilityespecially young people, who ironically need it least. and so in starting a startup, as in any really bold undertaking, merely deciding to do it gets you halfway there. on the day of the race, most of the other runners wont show up.  the aim of such regulations is to protect widows and orphans from crooked investment schemes; people with a million dollars in liquid assets are assumed to be able to protect themselves. the unintended consequence is that the investments that generate the highest returns, like hedge funds, are available only to the rich.  consulting is where product companies go to die. ibm is the most famous example. so starting as a consulting company is like starting out in the grave and trying to work your way up into the world of the living.  if "near you" doesnt mean the bay area, boston, or seattle, consider moving. its not a coincidence you havent heard of many startups from philadelphia.  investors are often compared to sheep. and they are like sheep, but thats a rational response to their situation. sheep act the way they do for a reason. if all the other sheep head for a certain field, its probably good grazing. and when a wolf appears, is he going to eat a sheep in the middle of the flock, or one near the edge?  this was partly confidence, and partly simple ignorance. we didnt know ourselves which vc firms were the impressive ones. we thought software was all that mattered. but that turned out to be the right direction to be naive in: its much better to overestimate than underestimate the importance of making a good product.  ive omitted one source: government grants. i dont think these are even worth thinking about for the average startup. governments may mean well when they set up grant programs to encourage startups, but what they give with one hand they take away with the other: the process of applying is inevitably so arduous, and the restrictions on what you can do with the money so burdensome, that it would be easier to take a job to get the money. you should be especially suspicious of grants whose purpose is some kind of social engineering-- e.g. to encourage more startups to be started in mississippi. free money to start a startup in a place where few succeed is hardly free. some government agencies run venture funding groups, which make investments rather than giving grants. for example, the cia runs a venture fund called in-q-tel that is modelled on private sector funds and apparently generates good returns. they would probably be worth approachingif you dont mind taking money from the cia.  options have largely been replaced with restricted stock, which amounts to the same thing. instead of earning the right to buy stock, the employee gets the stock up front, and earns the right not to have to give it back. the shares set aside for this purpose are still called the "option pool."  first-rate technical people do not generally hire themselves out to do due diligence for vcs. so the most difficult part for startup founders is often responding politely to the inane questions of the "expert" they send to look you over.  vcs regularly wipe out angels by issuing arbitrary amounts of new stock. they seem to have a standard piece of casuistry for this situation: that the angels are no longer working to help the company, and so dont deserve to keep their stock. this of course reflects a willful misunderstanding of what investment means; like any investor, the angel is being compensated for risks he took earlier. by a similar logic, one could argue that the vcs should be deprived of their shares when the company goes public.  one new thing the company might encounter is a down round , or a funding round at valuation lower than the previous round. down rounds are bad news; it is generally the common stock holders who take the hit. some of the most fearsome provisions in vc deal terms have to do with down roundslike "full ratchet anti-dilution," which is as frightening as it sounds. founders are tempted to ignore these clauses, because they think the company will either be a big success or a complete bust. vcs know otherwise: its not uncommon for startups to have moments of adversity before they ultimately succeed. so its worth negotiating anti-dilution provisions, even though you dont think you need to, and vcs will try to make you feel that youre being gratuitously troublesome. thanks to sam altman, hutch fishman, steve huffman, jessica livingston, sesha pratap, stan reiss, andy singleton, zak stone, and aaron swartz for reading drafts of this. this essay was originally published at paulgraham.com in the next few years, venture capital funds will find themselves squeezed from four directions. theyre already stuck with a sellers market, because of the huge amounts they raised at the end of the bubble and still havent invested. this by itself is not the end of the world. in fact, its just a more extreme version of the norm in the vc business: too much money chasing too few deals. unfortunately, those few deals now want less and less money, because its getting so cheap to start a startup. the four causes: open source, which makes software free; moores law, which makes hardware geometrically closer to free; the web, which makes promotion free if youre good; and better languages, which make development a lot cheaper. when we started our startup in 1995, the first three were our biggest expenses. we had to pay $5000 for the netscape commerce server, the only software that then supported secure http connections. we paid $3000 for a server with a 90 mhz processor and 32 meg of memory. and we paid a pr firm about $30,000 to promote our launch. now you could get all three for nothing. you can get the software for free; people throw away computers more powerful than our first server; and if you make something good you can generate ten times as much traffic by word of mouth online than our first pr firm got through the print media. and of course another big change for the average startup is that programming languages have improved-- or rather, the median language has. at most startups ten years ago, software development meant ten programmers writing code in c++. now the same work might be done by one or two using python or ruby. during the bubble, a lot of people predicted that startups would outsource their development to india. i think a better model for the future is david heinemeier hansson, who outsourced his development to a more powerful language instead. a lot of well-known applications are now, like basecamp, written by just one programmer. and one guy is more than 10x cheaper than ten, because (a) he wont waste any time in meetings, and (b) since hes probably a founder, he can pay himself nothing. because starting a startup is so cheap, venture capitalists now often want to give startups more money than the startups want to take. vcs like to invest several million at a time. but as one vc told me after a startup he funded would only take about half a million, "i dont know what were going to do. maybe well just have to give some of it back." meaning give some of the fund back to the institutional investors who supplied it, because it wasnt going to be possible to invest it all. into this already bad situation comes the third problem: sarbanes-oxley. sarbanes-oxley is a law, passed after the bubble, that drastically increases the regulatory burden on public companies. and in addition to the cost of compliance, which is at least two million dollars a year, the law introduces frightening legal exposure for corporate officers. an experienced cfo i know said flatly: "i would not want to be cfo of a public company now." you might think that responsible corporate governance is an area where you cant go too far. but you can go too far in any law, and this remark convinced me that sarbanes-oxley must have. this cfo is both the smartest and the most upstanding money guy i know. if sarbanes-oxley deters people like him from being cfos of public companies, thats proof enough that its broken. largely because of sarbanes-oxley, few startups go public now. for all practical purposes, succeeding now equals getting bought. which means vcs are now in the business of finding promising little 2-3 man startups and pumping them up into companies that cost $100 million to acquire. they didnt mean to be in this business; its just what their business has evolved into. hence the fourth problem: the acquirers have begun to realize they can buy wholesale. why should they wait for vcs to make the startups they want more expensive? most of what the vcs add, acquirers dont want anyway. the acquirers already have brand recognition and hr departments. what they really want is the software and the developers, and thats what the startup is in the early phase: concentrated software and developers. google, typically, seems to have been the first to figure this out. "bring us your startups early," said googles speaker at the startup school . theyre quite explicit about it: they like to acquire startups at just the point where they would do a series a round. (the series a round is the first round of real vc funding; it usually happens in the first year.) it is a brilliant strategy, and one that other big technology companies will no doubt try to duplicate. unless they want to have still more of their lunch eaten by google. of course, google has an advantage in buying startups: a lot of the people there are rich, or expect to be when their options vest. ordinary employees find it very hard to recommend an acquisition; its just too annoying to see a bunch of twenty year olds get rich when youre still working for salary. even if its the right thing for your company to do. bad as things look now, there is a way for vcs to save themselves. they need to do two things, one of which wont surprise them, and another that will seem an anathema. lets start with the obvious one: lobby to get sarbanes-oxley loosened. this law was created to prevent future enrons, not to destroy the ipo market. since the ipo market was practically dead when it passed, few saw what bad effects it would have. but now that technology has recovered from the last bust, we can see clearly what a bottleneck sarbanes-oxley has become. startups are fragile plantsseedlings, in fact. these seedlings are worth protecting, because they grow into the trees of the economy. much of the economys growth is their growth. i think most politicians realize that. but they dont realize just how fragile startups are, and how easily they can become collateral damage of laws meant to fix some other problem. still more dangerously, when you destroy startups, they make very little noise. if you step on the toes of the coal industry, youll hear about it. but if you inadvertantly squash the startup industry, all that happens is that the founders of the next google stay in grad school instead of starting a company. my second suggestion will seem shocking to vcs: let founders cash out partially in the series a round. at the moment, when vcs invest in a startup, all the stock they get is newly issued and all the money goes to the company. they could buy some stock directly from the founders as well. most vcs have an almost religious rule against doing this. they dont want founders to get a penny till the company is sold or goes public. vcs are obsessed with control, and they worry that theyll have less leverage over the founders if the founders have any money. this is a dumb plan. in fact, letting the founders sell a little stock early would generally be better for the company, because it would cause the founders attitudes toward risk to be aligned with the vcs. as things currently work, their attitudes toward risk tend to be diametrically opposed: the founders, who have nothing, would prefer a 100% chance of $1 million to a 20% chance of $10 million, while the vcs can afford to be "rational" and prefer the latter. whatever they say, the reason founders are selling their companies early instead of doing series a rounds is that they get paid up front. that first million is just worth so much more than the subsequent ones. if founders could sell a little stock early, theyd be happy to take vc money and bet the rest on a bigger outcome. so why not let the founders have that first million, or at least half million? the vcs would get same number of shares for the money. so what if some of the money would go to the founders instead of the company? some vcs will say this is unthinkablethat they want all their money to be put to work growing the company. but the fact is, the huge size of current vc investments is dictated by the structure of vc funds, not the needs of startups. often as not these large investments go to work destroying the company rather than growing it. the angel investors who funded our startup let the founders sell some stock directly to them, and it was a good deal for everyone. the angels made a huge return on that investment, so theyre happy. and for us founders it blunted the terrifying all-or-nothingness of a startup, which in its raw form is more a distraction than a motivator. if vcs are frightened at the idea of letting founders partially cash out, let me tell them something still more frightening: you are now competing directly with google. thanks to trevor blackwell, sarah harlin, jessica livingston, and robert morris for reading drafts of this. this essay was originally published at paulgraham.com (this essay is derived from a talk at the 2005 startup school. ) how do you get good ideas for startups ? thats probably the number one question people ask me. id like to reply with another question: why do people think its hard to come up with ideas for startups? that might seem a stupid thing to ask. why do they think its hard? if people cant do it, then it is hard, at least for them. right? well, maybe not. what people usually say is not that they cant think of ideas, but that they dont have any. thats not quite the same thing. it could be the reason they dont have any is that they havent tried to generate them. i think this is often the case. i think people believe that coming up with ideas for startups is very hard-- that it must be very hard-- and so they dont try do to it. they assume ideas are like miracles: they either pop into your head or they dont. i also have a theory about why people think this. they overvalue ideas. they think creating a startup is just a matter of implementing some fabulous initial idea. and since a successful startup is worth millions of dollars, a good idea is therefore a million dollar idea. if coming up with an idea for a startup equals coming up with a million dollar idea, then of course its going to seem hard. too hard to bother trying. our instincts tell us something so valuable would not be just lying around for anyone to discover. actually, startup ideas are not million dollar ideas, and heres an experiment you can try to prove it: just try to sell one. nothing evolves faster than markets. the fact that theres no market for startup ideas suggests theres no demand. which means, in the narrow sense of the word, that startup ideas are worthless. the fact is, most startups end up nothing like the initial idea. it would be closer to the truth to say the main value of your initial idea is that, in the process of discovering its broken, youll come up with your real idea. the initial idea is just a starting point-- not a blueprint, but a question. it might help if they were expressed that way. instead of saying that your idea is to make a collaborative, web-based spreadsheet, say: could one make a collaborative, web-based spreadsheet? a few grammatical tweaks, and a woefully incomplete idea becomes a promising question to explore. theres a real difference, because an assertion provokes objections in a way a question doesnt. if you say: im going to build a web-based spreadsheet, then critics-- the most dangerous of which are in your own head-- will immediately reply that youd be competing with microsoft, that you couldnt give people the kind of ui they expect, that users wouldnt want to have their data on your servers, and so on. a question doesnt seem so challenging. it becomes: lets try making a web-based spreadsheet and see how far we get. and everyone knows that if you tried this youd be able to make something useful. maybe what youd end up with wouldnt even be a spreadsheet. maybe it would be some kind of new spreasheet-like collaboration tool that doesnt even have a name yet. you wouldnt have thought of something like that except by implementing your way toward it. treating a startup idea as a question changes what youre looking for. if an idea is a blueprint, it has to be right. but if its a question, it can be wrong, so long as its wrong in a way that leads to more ideas. one valuable way for an idea to be wrong is to be only a partial solution. when someones working on a problem that seems too big, i always ask: is there some way to bite off some subset of the problem, then gradually expand from there? that will generally work unless you get trapped on a local maximum, like 1980s-style ai, or c. so far, weve reduced the problem from thinking of a million dollar idea to thinking of a mistaken question. that doesnt seem so hard, does it? to generate such questions you need two things: to be familiar with promising new technologies, and to have the right kind of friends. new technologies are the ingredients startup ideas are made of, and conversations with friends are the kitchen theyre cooked in. universities have both, and thats why so many startups grow out of them. theyre filled with new technologies, because theyre trying to produce research, and only things that are new count as research. and theyre full of exactly the right kind of people to have ideas with: the other students, who will be not only smart but elastic-minded to a fault. the opposite extreme would be a well-paying but boring job at a big company. big companies are biased against new technologies, and the people youd meet there would be wrong too. in an essay i wrote for high school students, i said a good rule of thumb was to stay upwind-- to work on things that maximize your future options. the principle applies for adults too, though perhaps it has to be modified to: stay upwind for as long as you can, then cash in the potential energy youve accumulated when you need to pay for kids. i dont think people consciously realize this, but one reason downwind jobs like churning out java for a bank pay so well is precisely that they are downwind. the market price for that kind of work is higher because it gives you fewer options for the future. a job that lets you work on exciting new stuff will tend to pay less, because part of the compensation is in the form of the new skills youll learn. grad school is the other end of the spectrum from a coding job at a big company: the pays low but you spend most of your time working on new stuff. and of course, its called "school," which makes that clear to everyone, though in fact all jobs are some percentage school. the right environment for having startup ideas need not be a university per se. it just has to be a situation with a large percentage of school. its obvious why you want exposure to new technology, but why do you need other people? cant you just think of new ideas yourself? the empirical answer is: no. even einstein needed people to bounce ideas off. ideas get developed in the process of explaining them to the right kind of person. you need that resistance, just as a carver needs the resistance of the wood. this is one reason y combinator has a rule against investing in startups with only one founder. practically every successful company has at least two. and because startup founders work under great pressure, its critical they be friends. i didnt realize it till i was writing this, but that may help explain why there are so few female startup founders. i read on the internet (so it must be true) that only 1.7% of vc-backed startups are founded by women. the percentage of female hackers is small, but not that small. so why the discrepancy? when you realize that successful startups tend to have multiple founders who were already friends, a possible explanation emerges. peoples best friends are likely to be of the same sex, and if one group is a minority in some population, pairs of them will be a minority squared.  what these groups of co-founders do together is more complicated than just sitting down and trying to think of ideas. i suspect the most productive setup is a kind of together-alone-together sandwich. together you talk about some hard problem, probably getting nowhere. then, the next morning, one of you has an idea in the shower about how to solve it. he runs eagerly to to tell the others, and together they work out the kinks. what happens in that shower? it seems to me that ideas just pop into my head. but can we say more than that? taking a shower is like a form of meditation. youre alert, but theres nothing to distract you. its in a situation like this, where your mind is free to roam, that it bumps into new ideas. what happens when your mind wanders? it may be like doodling. most people have characteristic ways of doodling. this habit is unconscious, but not random: i found my doodles changed after i started studying painting. i started to make the kind of gestures id make if i were drawing from life. they were atoms of drawing, but arranged randomly.  perhaps letting your mind wander is like doodling with ideas. you have certain mental gestures youve learned in your work, and when youre not paying attention, you keep making these same gestures, but somewhat randomly. in effect, you call the same functions on random arguments. thats what a metaphor is: a function applied to an argument of the wrong type. conveniently, as i was writing this, my mind wandered: would it be useful to have metaphors in a programming language? i dont know; i dont have time to think about this. but its convenient because this is an example of what i mean by habits of mind. i spend a lot of time thinking about language design, and my habit of always asking "would x be useful in a programming language" just got invoked. if new ideas arise like doodles, this would explain why you have to work at something for a while before you have any. its not just that you cant judge ideas till youre an expert in a field. you wont even generate ideas, because you wont have any habits of mind to invoke. of course the habits of mind you invoke on some field dont have to be derived from working in that field. in fact, its often better if theyre not. youre not just looking for good ideas, but for good new ideas, and you have a better chance of generating those if you combine stuff from distant fields. as hackers, one of our habits of mind is to ask, could one open-source x? for example, what if you made an open-source operating system? a fine idea, but not very novel. whereas if you ask, could you make an open-source play? you might be onto something. are some kinds of work better sources of habits of mind than others? i suspect harder fields may be better sources, because to attack hard problems you need powerful solvents. i find math is a good source of metaphors-- good enough that its worth studying just for that. related fields are also good sources, especially when theyre related in unexpected ways. everyone knows computer science and electrical engineering are related, but precisely because everyone knows it, importing ideas from one to the other doesnt yield great profits. its like importing something from wisconsin to michigan. whereas (i claim) hacking and painting are also related, in the sense that hackers and painters are both makers , and this source of new ideas is practically virgin territory. in theory you could stick together ideas at random and see what you came up with. what if you built a peer-to-peer dating site? would it be useful to have an automatic book? could you turn theorems into a commodity? when you assemble ideas at random like this, they may not be just stupid, but semantically ill-formed. what would it even mean to make theorems a commodity? you got me. i didnt think of that idea, just its name. you might come up with something useful this way, but i never have. its like knowing a fabulous sculpture is hidden inside a block of marble, and all you have to do is remove the marble that isnt part of it. its an encouraging thought, because it reminds you there is an answer, but its not much use in practice because the search space is too big. i find that to have good ideas i need to be working on some problem. you cant start with randomness. you have to start with a problem, then let your mind wander just far enough for new ideas to form. in a way, its harder to see problems than their solutions. most people prefer to remain in denial about problems. its obvious why: problems are irritating. theyre problems! imagine if people in 1700 saw their lives the way wed see them. it would have been unbearable. this denial is such a powerful force that, even when presented with possible solutions, people often prefer to believe they wouldnt work. i saw this phenomenon when i worked on spam filters. in 2002, most people preferred to ignore spam, and most of those who didnt preferred to believe the heuristic filters then available were the best you could do. i found spam intolerable, and i felt it had to be possible to recognize it statistically. and it turns out that was all you needed to solve the problem. the algorithm i used was ridiculously simple. anyone whod really tried to solve the problem would have found it. it was just that no one had really tried to solve the problem.  let me repeat that recipe: finding the problem intolerable and feeling it must be possible to solve it. simple as it seems, thats the recipe for a lot of startup ideas. so far most of what ive said applies to ideas in general. whats special about startup ideas? startup ideas are ideas for companies, and companies have to make money. and the way to make money is to make something people want. wealth is what people want. i dont mean that as some kind of philosophical statement; i mean it as a tautology. so an idea for a startup is an idea for something people want. wouldnt any good idea be something people want? unfortunately not. i think new theorems are a fine thing to create, but there is no great demand for them. whereas there appears to be great demand for celebrity gossip magazines. wealth is defined democratically. good ideas and valuable ideas are not quite the same thing; the difference is individual tastes. but valuable ideas are very close to good ideas, especially in technology. i think theyre so close that you can get away with working as if the goal were to discover good ideas, so long as, in the final stage, you stop and ask: will people actually pay for this? only a few ideas are likely to make it that far and then get shot down; rpn calculators might be one example. one way to make something people want is to look at stuff people use now thats broken. dating sites are a prime example. they have millions of users, so they must be promising something people want. and yet they work horribly. just ask anyone who uses them. its as if they used the worse-is-better approach but stopped after the first stage and handed the thing over to marketers. of course, the most obvious breakage in the average computer users life is windows itself. but this is a special case: you cant defeat a monopoly by a frontal attack. windows can and will be overthrown, but not by giving people a better desktop os. the way to kill it is to redefine the problem as a superset of the current one. the problem is not, what operating system should people use on desktop computers? but how should people use applications? there are answers to that question that dont even involve desktop computers. everyone thinks google is going to solve this problem, but it is a very subtle one, so subtle that a company as big as google might well get it wrong. i think the odds are better than 50-50 that the windows killer-- or more accurately, windows transcender-- will come from some little startup. another classic way to make something people want is to take a luxury and make it into a commmodity. people must want something if they pay a lot for it. and it is a very rare product that cant be made dramatically cheaper if you try. this was henry fords plan. he made cars, which had been a luxury item, into a commodity. but the idea is much older than henry ford. water mills transformed mechanical power from a luxury into a commodity, and they were used in the roman empire. arguably pastoralism transformed a luxury into a commodity. when you make something cheaper you can sell more of them. but if you make something dramatically cheaper you often get qualitative changes, because people start to use it in different ways. for example, once computers get so cheap that most people can have one of their own, you can use them as communication devices. often to make something dramatically cheaper you have to redefine the problem. the model t didnt have all the features previous cars did. it only came in black, for example. but it solved the problem people cared most about, which was getting from place to place. one of the most useful mental habits i know i learned from michael rabin: that the best way to solve a problem is often to redefine it. a lot of people use this technique without being consciously aware of it, but rabin was spectacularly explicit. you need a big prime number? those are pretty expensive. how about if i give you a big number that only has a 10 to the minus 100 chance of not being prime? would that do? well, probably; i mean, thats probably smaller than the chance that im imagining all this anyway. redefining the problem is a particularly juicy heuristic when you have competitors, because its so hard for rigid-minded people to follow. you can work in plain sight and they dont realize the danger. dont worry about us. were just working on search. do one thing and do it well, thats our motto. making things cheaper is actually a subset of a more general technique: making things easier. for a long time it was most of making things easier, but now that the things we build are so complicated, theres another rapidly growing subset: making things easier to use . this is an area where theres great room for improvement. what you want to be able to say about technology is: it just works. how often do you say that now? simplicity takes effort-- genius, even. the average programmer seems to produce ui designs that are almost willfully bad. i was trying to use the stove at my mothers house a couple weeks ago. it was a new one, and instead of physical knobs it had buttons and an led display. i tried pressing some buttons i thought would cause it to get hot, and you know what it said? "err." not even "error." "err." you cant just say "err" to the user of a stove . you should design the ui so that errors are impossible. and the boneheads who designed this stove even had an example of such a ui to work from: the old one. you turn one knob to set the temperature and another to set the timer. what was wrong with that? it just worked. it seems that, for the average engineer, more options just means more rope to hang yourself. so if you want to start a startup, you can take almost any existing technology produced by a big company, and assume you could build something way easier to use. success for a startup approximately equals getting bought. you need some kind of exit strategy, because you cant get the smartest people to work for you without giving them options likely to be worth something. which means you either have to get bought or go public, and the number of startups that go public is very small. if success probably means getting bought, should you make that a conscious goal? the old answer was no: you were supposed to pretend that you wanted to create a giant, public company, and act surprised when someone made you an offer. really, you want to buy us? well, i suppose wed consider it, for the right price. i think things are changing. if 98% of the time success means getting bought, why not be open about it? if 98% of the time youre doing product development on spec for some big company, why not think of that as your task? one advantage of this approach is that it gives you another source of ideas: look at big companies, think what they should be doing, and do it yourself. even if they already know it, youll probably be done faster. just be sure to make something multiple acquirers will want. dont fix windows, because the only potential acquirer is microsoft, and when theres only one acquirer, they dont have to hurry. they can take their time and copy you instead of buying you. if you want to get market price, work on something where theres competition. if an increasing number of startups are created to do product development on spec, it will be a natural counterweight to monopolies. once some type of technology is captured by a monopoly, it will only evolve at big company rates instead of startup rates, whereas alternatives will evolve with especial speed. a free market interprets monopoly as damage and routes around it. the most productive way to generate startup ideas is also the most unlikely-sounding: by accident. if you look at how famous startups got started, a lot of them werent initially supposed to be startups. lotus began with a program mitch kapor wrote for a friend. apple got started because steve wozniak wanted to build microcomputers, and his employer, hewlett-packard, wouldnt let him do it at work. yahoo began as david filos personal collection of links. this is not the only way to start startups. you can sit down and consciously come up with an idea for a company; we did. but measured in total market cap, the build-stuff-for-yourself model might be more fruitful. it certainly has to be the most fun way to come up with startup ideas. and since a startup ought to have multiple founders who were already friends before they decided to start a company, the rather surprising conclusion is that the best way to generate startup ideas is to do what hackers do for fun: cook up amusing hacks with your friends. it seems like it violates some kind of conservation law, but there it is: the best way to get a "million dollar idea" is just to do what hackers enjoy doing anyway.  this phenomenon may account for a number of discrepancies currently blamed on various forbidden isms. never attribute to malice what can be explained by math.  a lot of classic abstract expressionism is doodling of this type: artists trained to paint from life using the same gestures but without using them to represent anything. this explains why such paintings are (slightly) more interesting than random marks would be.  bill yerazunis had solved the problem, but he got there by another path. he made a general-purpose file classifier so good that it also worked for spam. this essay was originally published at paulgraham.com the first summer founders program has just finished. we were surprised how well it went. overall only about 10% of startups succeed, but if i had to guess now, id predict three or four of the eight startups we funded will make it. of the startups that needed further funding, i believe all have either closed a round or are likely to soon. two have already turned down (lowball) acquisition offers. we would have been happy if just one of the eight seemed promising by the end of the summer. whats going on? did some kind of anomaly make this summers applicants especially good? we worry about that, but we cant think of one. well find out this winter . the whole summer was full of surprises. the best was that the hypothesis we were testing seems to be correct. young hackers can start viable companies. this is good news for two reasons: (a) its an encouraging thought, and (b) it means that y combinator, which is predicated on the idea, is not hosed. more precisely, the hypothesis was that success in a startup depends mainly on how smart and energetic you are, and much less on how old you are or how much business experience you have. the results so far bear this out. the 2005 summer founders ranged in age from 18 to 28 (average 23), and there is no correlation between their ages and how well theyre doing. this should not really be surprising. bill gates and michael dell were both 19 when they started the companies that made them famous. young founders are not a new phenomenon: the trend began as soon as computers got cheap enough for college kids to afford them. another of our hypotheses was that you can start a startup on less money than most people think. other investors were surprised to hear the most we gave any group was $20,000. but we knew it was possible to start on that little because we started viaweb on $10,000. and so it proved this summer. three months funding is enough to get into second gear. we had a demo day for potential investors ten weeks in, and seven of the eight groups had a prototype ready by that time. one, reddit , had already launched, and were able to give a demo of their live site. a researcher who studied the sfp startups said the one thing they had in common was that they all worked ridiculously hard. people this age are commonly seen as lazy. i think in some cases its not so much that they lack the appetite for work, but that the work theyre offered is unappetizing. the experience of the sfp suggests that if you let motivated people do real work, they work hard, whatever their age. as one of the founders said "id read that starting a startup consumed your life, but i had no idea what that meant until i did it." id feel guilty if i were a boss making people work this hard. but were not these peoples bosses. theyre working on their own projects. and what makes them work is not us but their competitors. like good athletes, they dont work hard because the coach yells at them, but because they want to win. we have less power than bosses, and yet the founders work harder than employees. it seems like a win for everyone. the only catch is that we get on average only about 5-7% of the upside, while an employer gets nearly all of it. (were counting on it being 5-7% of a much larger number.) as well as working hard, the groups all turned out to be extraordinarily responsible. i cant think of a time when one failed to do something theyd promised to, even by being late for an appointment. this is another lesson the world has yet to learn. one of the founders discovered that the hardest part of arranging a meeting with executives at a big cell phone carrier was getting a rental company to rent him a car, because he was too young. i think the problem here is much the same as with the apparent laziness of people this age. they seem lazy because the work theyre given is pointless, and they act irresponsible because theyre not given any power. some of them, anyway. we only have a sample size of about twenty, but it seems so far that if you let people in their early twenties be their own bosses, they rise to the occasion. the summer founders were as a rule very idealistic. they also wanted very much to get rich. these qualities might seem incompatible, but theyre not. these guys want to get rich, but they want to do it by changing the world. they wouldnt (well, seven of the eight groups wouldnt) be interested in making money by speculating in stocks. they want to make something people use. i think this makes them more effective as founders. as hard as people will work for money, theyll work harder for a cause. and since success in a startup depends so much on motivation, the paradoxical result is that the people likely to make the most money are those who arent in it just for the money. the founders of kiko , for example, are working on an ajax calendar. they want to get rich, but they pay more attention to design than they would if that were their only motivation. you can tell just by looking at it. i never considered it till this summer, but this might be another reason startups run by hackers tend to do better than those run by mbas. perhaps its not just that hackers understand technology better, but that theyre driven by more powerful motivations. microsoft, as ive said before, is a dangerously misleading example. their mean corporate culture only works for monopolies. google is a better model. considering that the summer founders are the sharks in this ocean, we were surprised how frightened most of them were of competitors. but now that i think of it, we were just as frightened when we started viaweb. for the first year, our initial reaction to news of a competitor was always: were doomed. just as a hypochondriac magnifies his symptoms till hes convinced he has some terrible disease, when youre not used to competitors you magnify them into monsters. heres a handy rule for startups: competitors are rarely as dangerous as they seem. most will self-destruct before you can destroy them. and it certainly doesnt matter how many of them there are, any more than it matters to the winner of a marathon how many runners are behind him. "its a crowded market," i remember one founder saying worriedly. "are you the current leader?" i asked. "yes." "is anyone able to develop software faster than you?" "probably not." "well, if youre ahead now, and youre the fastest, then youll stay ahead. what difference does it make how many others there are?" another group was worried when they realized they had to rewrite their software from scratch. i told them it would be a bad sign if they didnt. the main function of your initial version is to be rewritten. thats why we advise groups to ignore issues like scalability, internationalization, and heavy-duty security at first.  i can imagine an advocate of "best practices" saying these ought to be considered from the start. and hed be right, except that they interfere with the primary function of software in a startup: to be a vehicle for experimenting with its own design. having to retrofit internationalization or scalability is a pain, certainly. the only bigger pain is not needing to, because your initial version was too big and rigid to evolve into something users wanted. i suspect this is another reason startups beat big companies. startups can be irresponsible and release version 1s that are light enough to evolve. in big companies, all the pressure is in the direction of over-engineering. one thing we were curious about this summer was where these groups would need help. that turned out to vary a lot. some we helped with technical advice-- for example, about how to set up an application to run on multiple servers. most we helped with strategy questions, like what to patent, and what to charge for and what to give away. nearly all wanted advice about dealing with future investors: how much money should they take and what kind of terms should they expect? however, all the groups quickly learned how to deal with stuff like patents and investors. these problems arent intrinsically difficult, just unfamiliar. it was surprising-- slightly frightening even-- how fast they learned. the weekend before the demo day for investors, we had a practice session where all the groups gave their presentations. they were all terrible. we tried to explain how to make them better, but we didnt have much hope. so on demo day i told the assembled angels and vcs that these guys were hackers, not mbas, and so while their software was good, we should not expect slick presentations from them. the groups then proceeded to give fabulously slick presentations. gone were the mumbling recitations of lists of features. it was as if theyd spent the past week at acting school. i still dont know how they did it. perhaps watching each others presentations helped them see what theyd been doing wrong. just as happens in college, the summer founders learned a lot from one another-- maybe more than they learned from us. a lot of the problems they face are the same, from dealing with investors to hacking javascript. i dont want to give the impression there were no problems this summer. a lot went wrong, as usually happens with startups. one group got an " exploding term-sheet " from some vcs. pretty much all the groups who had dealings with big companies found that big companies do everything infinitely slowly. (this is to be expected. if big companies werent incapable, there would be no room for startups to exist.) and of course there were the usual nightmares associated with servers. in short, the disasters this summer were just the usual childhood diseases. some of this summers eight startups will probably die eventually; it would be extraordinary if all eight succeeded. but what kills them will not be dramatic, external threats, but a mundane, internal one: not getting enough done. so far, though, the news is all good. in fact, we were surprised how much fun the summer was for us. the main reason was how much we liked the founders. theyre so earnest and hard-working. they seem to like us too. and this illustrates another advantage of investing over hiring: our relationship with them is way better than it would be between a boss and an employee. y combinator ends up being more like an older brother than a parent. i was surprised how much time i spent making introductions. fortunately i discovered that when a startup needed to talk to someone, i could usually get to the right person by at most one hop. i remember wondering, how did my friends get to be so eminent? and a second later realizing: shit, im forty. another surprise was that the three-month batch format, which we were forced into by the constraints of the summer, turned out to be an advantage. when we started y combinator, we planned to invest the way other venture firms do: as proposals came in, wed evaluate them and decide yes or no. the sfp was just an experiment to get things started. but it worked so well that we plan to do all our investing this way, one cycle in the summer and one in winter. its more efficient for us, and better for the startups too. several groups said our weekly dinners saved them from a common problem afflicting startups: working so hard that one has no social life. (i remember that part all too well.) this way, they were guaranteed a social event at least once a week. ive heard y combinator described as an "incubator." actually were the opposite: incubators exert more control than ordinary vcs, and we make a point of exerting less. among other things, incubators usually make you work in their office-- thats where the word "incubator" comes from. that seems the wrong model. if investors get too involved, they smother one of the most powerful forces in a startup: the feeling that its your own company. incubators were conspicuous failures during the bubble. theres still debate about whether this was because of the bubble, or because theyre a bad idea. my vote is theyre a bad idea. i think they fail because they select for the wrong people. when we were starting a startup, we would never have taken funding from an "incubator." we can find office space, thanks; just give us the money. and people with that attitude are the ones likely to succeed in startups. indeed, one quality all the founders shared this summer was a spirit of independence. ive been wondering about that. are some people just a lot more independent than others, or would everyone be this way if they were allowed to? as with most nature/nurture questions, the answer is probably: some of each. but my main conclusion from the summer is that theres more environment in the mix than most people realize. i could see that from how the founders attitudes changed during the summer. most were emerging from twenty or so years of being told what to do. they seemed a little surprised at having total freedom. but they grew into it really quickly; some of these guys now seem about four inches taller (metaphorically) than they did at the beginning of the summer. when we asked the summer founders what surprised them most about starting a company, one said "the most shocking thing is that it worked." it will take more experience to know for sure, but my guess is that a lot of hackers could do this-- that if you put people in a position of independence, they develop the qualities they need. throw them off a cliff, and most will find on the way down that they have wings. the reason this is news to anyone is that the same forces work in the other direction too. most hackers are employees, and this molds you into someone to whom starting a startup seems impossible as surely as starting a startup molds you into someone who can handle it. if im right, "hacker" will mean something different in twenty years than it does now. increasingly it will mean the people who run the company. y combinator is just accelerating a process that would have happened anyway. power is shifting from the people who deal with money to the people who create technology, and if our experience this summer is any guide, this will be a good thing.  by heavy-duty security i mean efforts to protect against truly determined attackers. the image shows us, the 2005 summer founders, and smartleaf co-founders mark nitzberg and olin shivers at the 30-foot table kate courteau designed for us. photo by alex lewin. thanks to sarah harlin, steve huffman, jessica livingston, zak stone, and aaron swartz for reading drafts of this. this essay was originally published at paulgraham.com 